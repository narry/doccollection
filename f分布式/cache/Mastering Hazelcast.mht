From: =?gb2312?B?0tHTySBJbnRlcm5ldCBFeHBsb3JlciAxMSCxo7Tm?=
Subject: Mastering Hazelcast
Date: Tue, 24 Nov 2015 13:28:08 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="multipart/alternative";
	boundary="----=_NextPart_000_0000_01D126BB.F55CBB10"
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7601.17609

这是 MIME 格式的多方邮件。

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://hazelcast.org/book/images/HazelcastIcon_White_100px.png

iVBORw0KGgoAAAANSUhEUgAAAGQAAABpCAYAAADMfIaKAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
bWFnZVJlYWR5ccllPAAABQhJREFUeNrsnE9II1ccx98kMWqibTVocJu2Js2ymN2qxRgj5BZIlhyq
bVVosV0lRKWtl8oe0tJiuxdrVSjSQzBBK/aiFIpgqF0XBHNQe/FPkVgUrVJF0UYlJrGaTN+4u2W1
UnDpJjPx+4FnnH/Jb34fZn7vhcxjYrEYGRgYIDs7O+RJWJYlh4eHJBqNEo1GQ1QqldpoNL4kk8my
SfwQjY6OTi4sLGxc5iCdTvey1WrV039jJLEwtP21ubm5PTMzszI/P78TDAZJRkYGSUlJ+dfOFouF
nCa8oKDgwncrKipSd3d3f+r3+ycCgcA23feIiorFs9XW1r512SzQY+7EO87/aCdHR0fhra2tFa/X
O+hwOKpSU1MlF8Xt8XgeCiksLDyzQalUpg0ODn5Jr549NsHU1dVdWgg9po7lMcvLy7/Y7Xbz+bh7
e3uJ6PxKg8GgmpycvF9dXf0ZwzDPE/C/Q0uA3u12j7pcro/Pbzu9dGjiTxdKSkpy6WX1k0KhuIm0
PXPEDQ0NndxrY2Pj1/8UTe7P8fExkUqlov7+/u8gI75QKe319fXWxxfGqZBQKEScTmcd7Z3cRori
T2dn5zc5OTmySCRCRLQHQLRabXpzc/MnSE1iyMrKukF7X++Ew2Ei4sYatICb6a3qVaQmcVRWVr5P
HRAJ7RMTm81mQUoSCx0Lvk7ruEqSmZlJaLuFlCQWOnrPpAPx66JHPS0FUsILskXIAa9gIYRnQAiE
AAiBEAAhEAIgBEIAhEAIgBAAIRACIARCAIRACIAQCAEQAiAEQgCEQAiAEAgBEAIhAEIAhEAIgBDC
PXMvFWjoKZJkFLKwsDDd19d3jyR+NqDLwJhMprmkFOLz+Wa4JrS4XS4XagjPbrUQgqIOIARCAIRA
CIAQCAEQctWRXMWT1mg0L5SWlr6mVqtvUDLpKvZZft7i4uLBysqKf2Ji4teNjY0DCHlERUXFTYfD
8ZHZbH4jLS3tWrw/f29vb21sbOzHjo6Ob6empn67cCeWZUW0zfJ1Fuinmdn6PAqFQux2u7+gbxfi
wznFYrF9Gs9dbo7FJ7lwZutkg5603Ov1/mC32z+ni+l8iIlhmOdoPO00ru9pfKlXpqhnZWWJuZM2
GAwVfIyPxvXuyMhIj0wmuxpCurq6nHyV8ZiysrL3WltbP0h6IXq9Xkvrj1MIsba0tNzT6XR53BzK
SSvE6XR+SF9kghgMikTZTU1N9pOTk+QUolQq061W65tCitlisbytUqkkSTkOoXWjQC6XvyKkmPPz
8wukUqk6Ka+Q3Nzc60KLOZWiVqs1SSkkGo3KBBp6RrIWdVaocePbXr71uJACCAEQAiEAQiAEQAiE
AAiBEAAhAEIgBEAIhAAIgRAAIRACIARAiJCEMEgFf4Rwc0r9iVTwREgwGCRra2vzSAVPhITDYTI+
Pv4zUsETIdzjVENDQw92d3dXkQ4eCElPTydzc3Ohnp6er5AOnvSy5HI5aWtr61lfX3+AlPBACDfX
3/7+frSqquoOvXX5kZYEC2HZh7/en56e/sNms93e2tqaRmp4MlKnUn43Go1mWug76GIYKUqAkFAo
dGbl6upqsKam5m55ebne4/G0+/3+2YODg1AiAoxEIsxTHCPUr4QYJhaLkeHhYRIIBM5s4W5j3HPT
YrGY5OXlifMpxcXFL9JN3FQQ8XpCifH5fLNLS0vblzlIq9VeM5lMt4jAZrambfZvAQYADLWzKXz1
qkIAAAAASUVORK5CYII=

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://hazelcast.org/book/images/ch_1_1.png

iVBORw0KGgoAAAANSUhEUgAAB8wAAAP1CAYAAAAEhBWJAAAABGdBTUEAALGPC/xhBQAAACBjSFJN
AAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAABYlAAAWJQFJUiTw
AAABWWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpu
czptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9
Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRm
OkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8v
bnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3Rp
ZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+Cjwv
eDp4bXBtZXRhPgpMwidZAABAAElEQVR4AeydCVxUVfvHf8mwCQgqIiKgbIKi5Ip7ppaaaaWVtmm9
vtrrUpplaYtlZWmLWpZLxutb+r6a/ktb1cytzCUjdxBUXAARFWUUkJ3+59zh3rn3zp1hBmaQ5Tmf
zzDnnv187z33Dvd3znNu+5s5kCMCRIAIEAEiQASIABEgAkSACBABIkAEiAARIAJEgAgQASJABIgA
ESACRIAIEAEiUM8INKhn/aXuEgEiQASIABEgAkSACBABIkAEiAARIAJEgAgQASJABIgAESACRIAI
EAEiQASIABEQCJBgThcCESACRIAIEAEiQASIABEgAkSACBABIkAEiAARIAJEgAgQASJABIgAESAC
RIAI1EsCJJjXy9NOnSYCRIAIEAEiQASIABEgAkSACBABIkAEiAARIAJEgAgQASJABIgAESACRIAI
EAESzOkaIAJEgAgQASJABIgAESACRIAIEAEiQASIABEgAkSACBABIkAEiAARIAJEgAgQgXpJgATz
ennaqdNEgAgQASJABIgAESACRIAIEAEiQASIABEgAkSACBABIkAEiAARIAJEgAgQASJAgjldA0SA
CBABIkAEiAARIAJEgAgQASJABIgAESACRIAIEAEiQASIABEgAkSACBABIlAvCZBgXi9PO3WaCBAB
IkAEiAARIAJEgAgQASJABIgAESACRIAIEAEiQASIABEgAkSACBABIkAESDCna4AIEAEiQASIABEg
AkSACBABIkAEiAARIAJEgAgQASJABIgAESACRIAIEAEiQATqJQESzOvlaadOEwEiQASIABEgAkSA
CBABIkAEiAARIAJEgAgQASJABIgAESACRIAIEAEiQASIAAnmdA0QASJABIgAESACRIAIEAEiQASI
ABEgAkSACBABIkAEiAARIAJEgAgQASJABIhAvSRAgnm9PO3UaSJABIgAESACRIAIEAEiQASIABEg
AkSACBABIkAEiAARIAJEgAgQASJABIgAESDBnK4BIkAEiAARIAJEgAgQASJABIgAESACRIAIEAEi
QASIABEgAkSACBABIkAEiAARqJcESDCvl6edOk0EiAARIAJEgAgQASJABIgAESACRIAIEAEiQASI
ABEgAkSACBABIkAEiAARIAIkmNM1QASIABEgAkSACBABIkAEiAARIAJEgAgQASJABIgAESACRIAI
EAEiQASIABEgAvWSAAnm9fK0U6eJABEgAkSACBABIkAEiAARIAJEgAgQASJABIgAESACRIAIEAEi
QASIABEgAkSABHO6BogAESACRIAIEAEiQASIABEgAkSACBABIkAEiAARIAJEgAgQASJABIgAESAC
RKBeEiDBvF6eduo0ESACRIAIEAEiQASIABEgAkSACBABIkAEiAARIAJEgAgQASJABIgAESACRIAI
kGBO1wARIAJEgAgQASJABIgAESACRIAIEAEiQASIABEgAkSACBABIkAEiAARIAJEgAjUSwIkmNfL
006dJgJEgAgQASJABIgAESACRIAIEAEiQASIABEgAkSACBABIkAEiAARIAJEgAgQARLM6RogAkSA
CBABIkAEiAARIAJEgAgQASJABIgAESACRIAIEAEiQASIABEgAkSACBCBeklAV5lel5SU4PTp08jK
ykJBQUFliqi2PG5ubvD19UV4eDh0ukp1t9raShURASJABIgAESACRIAIEAEiQASIABEgAkSACBAB
IkAEiAARIAJEgAgQASJABIhA9RG47W/mbKmOi+UHDhzAzZs3bcl2y9M2bNgQsbGxJJrf8jNBDSAC
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
87FCYX4+pyoE4JQoggRIgARIgARIgARIgARIgARIgARI4KIhQIX5RXOpeaIkQAKdnICniVcnPx02
nwRIgAQ6A4FabFytK8tFewdORwaV5Z3hwrGNJEACJEACJEACJEACJEACJEACJEACJEACJEACJEAC
JEACFxgBbcXGC+yceDokQAIk0PEI1Jbgq321iE8Mx+F/v2osOSEbetv3x3m4Iu94zWeLSIAESIAE
SIAESIAESIAESIAESIAESIAESIAESIAESIAESOBCJECF+YV4VXlOJEACHY5AbdGneOWVDd7tSp6B
Sf3pYtobDGNIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIoP0JdFiF+RlH+588ayAB
EiCBc0cgxKKqePzwvyaB6nILNIwiAReB02eIggRIgARIgARIgARIgARIgARIgARIgAQuDALffffd
hXEiPAsSIAESOAcEunTpcg5qcVbRQRXmweg/YQIyKkQjxUB5ag+qk87ZHcGKSIAE2oVAcI8EDIyO
R40NcDgciB0yCXfecQOSwtulOgolgQuEQFcMvjwGU0+I02kAhkR20NeWC4Q2T4MESIAESIAESIAE
SIAESIAESIAESCDwBKSSXFeUn0vlT+DPhBJJgARI4NwS0PtOWWt7959dRGWc0nRury9rIwESIAES
IAESIAESIAESIAESIAESIAESIAESIAESIAESuMAJHD9+XDvDsLAwTWkuFT660qeprWfaBY6Jp0cC
JEACPgno/aGewfNYj2/rlgrzthJkeRIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARJQ
CEhbRelpUv4YSIAESIAE/CNQ8tJtCB88HpFpVyNy6HgEh0VoBVVFubrvn9Tmc1Fh3jwj5iABEiAB
EiABEiABEiABEiABEiABEiABEiABEiABEiABEiABvwjojn2lUqeuro5Kc7+oMRMJkAAJAEW/HmNg
CIqMRerPVyI05hKf3jmMzG3cocK8jQBZnARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARI
gAR0AqrCXI/jlgRIgARIoHkCO+8faMoUmpiOAT9/E12DQ9pVad7VVCsPSIAESIAESIAESIAESIAE
SIAESIAESIAESIAESIAESIAESIAE2kRAV5q3SQgLkwAJkMBFTuB0cR4qPn0Dsk/V+1XPbSAQUWEe
CIqUQQIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkcNET0BU5Fz0IAiABEiCBABE4mfOW
oTBvrz6WCvMAXSyKIQESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESCByB
+qMFXgrzQCvOqTAP3PWiJBIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIg
gQAR+K6x3nDHLkWqynJ1vy3VUWHeFnosSwIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIk
QAIkQAIkQAIk0K4EAqUct2okFeZWVBhHAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRA
AiRAAiRAAiRw3gnoynJ9G+gGUWEeaKKURwIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIk
QAIkQAIkQAIkEDACurJc3wZMsBBEhXkgaVIWCZAACZAACZAACZAACZAACZAACZAACZAACZAACZAA
CZAACZAACZAACZBApyFAhXmnuVRsKAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQ
AAmQAAmQQCAJUGEeSJqURQIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIk
0GkIUGHeaS4VG0oCJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJBBIAlSY
B5ImZZEACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACXQaAlSYd5pLxYaS
AAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAkEkgAV5oGkSVkkQAIkQAIk
QAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAKdhgAV5p3mUrGhJEACJEACJEACJEAC
JEACJEACJEACJEACJEACJEACJEACJEACJEACJEACgSRAhXkgaVIWCZAACZAACZAACZAACZAACZAA
CZAACZAACZAACZAACZAACZAACZAACZBApyFAhXmnuVRsKAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQ
AAmQAAmQAAmQAAmQAAmQAAmQQCAJUGEeSJqURQIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIk
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
2wbfivfeXozJikLc3Zg0PLb4D5gmFPJ2ux4bg+6K1js5cz42r/kLZo+2FKAVmnz/H/DJ2/ORatNl
cEsCJNDZCHT5ToSWNLqgoEDLnpqa2pJizEsCJEACJEACJEACJEACJEACJEACJEACJEACJEACJEAC
JEACbSbQkfUUuspFbrt2pc2icbEdFcj7Oh8HDpejW9wlCK8tR223OAxMT8PgBN/KaKO82GmoKcXu
XXkQInBJv+74Vuz0vGQQhl+WjuhmldUNKN2/G9+UnkR9SAh6xCZi4OBksdK5/6GmoggHDxTjZH09
6sUvpEcCBg8bgoQIRcPuvzjmJAESsCCw8/6BFrHAkJd2a14zZL8qPWLoW5lZ96ZhWdDPSCrM/QTF
bCRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAuefABXm5/8asAUkQAIk0B4EzpfCnNOb
2uNqUiYJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkECHJ0CFeYe/RGwg
CZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZBAexCgwrw9qFImCZAACZAA
CZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZBAhydAhXmHv0RsIAmQAAmQAAmQAAmQ
AAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQQHsQoMK8PahSJgmQAAmQAAmQAAmQAAmQAAmQ
AAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQQIcnQIV5h79EbCAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJ
kAAJkAAJkAAJkAAJkAAJkAAJkEB7EAhuD6GUSQIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkcP4I
fPfdd6isrMTx48dRV1enNSQsLAy9evVCTEwMunTpcv4ax5pJgARIgARIgARIgARIoAMRoMK8A10M
NoUESIAESIAESIAESIAESIAESIAESIAESIAE2kqgoaEBBw4cwKlTp0yiqqurIX8VFRUYNGgQgoM5
NGgCxAMSIAESIAESIAESIIGLkgDfii/wy15SUoK+ffuazlJ+LFVVVcHhcOD06dPaVs46DgkJQbdu
3RAREYHo6GjIWccMJEACJEACJNAWAmfOnEFxcTFqamo0MfIZk5iYqD1v2iKXZUmABEiABNpGoLS0
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
roOEcz2J6ZHSybjdLimGuRDQ4+JMsLU5JKFd7GdkjMCi734HT/5kqXLivMEEmAATYAJMgAkwASbA
BJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYALfbAKXVTCX0U6bMgHiD/ihnNXr6+zZH/Z6
nA8yASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE7hUAh7z7Ett
heszASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE7jGCLBgfo1d
MB4uE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJDA0BFsyHhiO3
wgSYABNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAtcYARbMr7ELxsNl
AkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAkyACTCBoSHAgvnQcORWmAAT
YAJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJM4BojwIL5NXbBeLhMgAkw
ASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASYwNARYMB8ajtwKE2ACTIAJ
MAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJXGMEtIMZb3JiAirqmwdTlesw
ASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMYNAEhEZhudAy6PpckQkwASbABJiA
msCABfORKUmIMsSo2+BtJsAEmAATYAJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAkyACVwRAiZT
LKI07ED3isDmTpgAE2AC3wACAxbMjXACna1ISEj4BuDhU2QCTIAJMAEmwASYABNgAkyACTABJsAE
mAATYAJMgAkwASbABK4mAi0tLdBFXE0j4rEwASbABJjAtUyAl2Bdy1ePx84EmAATYAJMgAkwASbA
BJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAKDJjBgC3O5J5PJBLfbLe/yKxNgAkyACTAB
JsAEmAATYAJMgAkwASbABJgAE2ACTIAJMAEmwAQuKwGNRgNhYc6JCTABJsAEmMBQERi0hTmL5UN1
CbgdJsAEmAATYAJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAkygPwRYm+gPJS7DBJgAE2ACAyEw
aMF8IJ1wWSbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACVxsB
FsyvtivC42ECTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJMIErQoAF
8yuCmTthAkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAkyACTCBq40AC+ZX
2xXh8TABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmMAVIcCC+RXB
zJ0wASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASbABJjA1UaABfOr7Yrw
eJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACTOCKEGDB/Ipg5k6Y
ABNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAkzgaiPAgvnVdkV4PEyA
CTABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJnBFCLBgfkUwcydMgAkw
ASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASZwtRFgwfxquyI8HibABJgA
E2ACTIAJMAEmwASYABNgAkyACTABJvD/s/cu4FVVd97/V04SkpPLIQm5QEJI4CBBIihyEUEsCEot
FqXa2lrH4hTo6Nupfd76H9+n//Z5/zPvvHUe+8x0plOnSl8s5WWkpaJUammjoEhKuYgGA0QJJBwS
SAgh5HrgJIf5//Y+Z1/OOfsk55Ib8F0PYa+z9rp+1tprrb1/67cWCZAACZAACZAACZAACZAACQwJ
AQrMhwQzEyEBEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEhhpBCgwH2k1
wvyQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAkMCQEKzIcEMxMhARIg
ARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIYaQQoMB9pNcL8kAAJkAAJkAAJ
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
IAESIAESIIERTCBmDXO73T6Ci8WskQAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJXI8E
Wltbr8disUwkQAIkQALDRIAa5sMEnsmSAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQ
AAmQAAmQAAkMLwEKzIeXP1MnARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIg
ARIYJgIUmA8TeCZLAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiQwvAQo
MB9e/kydBEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEhgmAhQYD5M4Jks
CZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZDA8BKgwHx4+TN1EiABEiAB
EiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiCBYSJAgfkwgWeyJEACJEACJEACJEAC
JEACJEACJEACJEACJEACJEACJEACJEACJEACJEACw0uAAvPh5c/USYAESIAESIAESIAESIAESIAE
SIAESIAESIAESIAESIAESIAESIAESIAEhokABebDBJ7JkgAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJ
kAAJkAAJkAAJkAAJkAAJkAAJDC8BCsyHlz9TJwESIAESIAESIAESIAESIAESIAESIAESIAESIAES
IAESIAESIAESIAESGCYCFJgPE3gmSwIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIk
QAIkQAIkMLwEKDAfXv5MnQRIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARI
YJgIUGA+TOCZLAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQwPASoMB8
ePkzdRIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIggWEiQIH5MIFnsiRA
AiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAsNLIGF4kzdSP9fajXePnEPD
xW7DsQ9bQZYd984Yh3GZ9j588RYJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJ
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
AAmQwNAh0BcleF/yDJ0esSUkQAIkMDIJUGE+Mq8re0UCJEACJEACJEACJEACJEACJEACJEACJEAC
JEACJEACJHADCZgpw83SbmATWTUJkAAJkIAQoMKctwEJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJ
kAAJkAAJkAAJXCMCVJJfI7AUSwIkQAKDRIAK80ECSTEkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIk
QAIkQAIkQAIkoBKgolwlwW8SIAESGNoEbhnazWPrSIAESIAESIAESIAESIAESIAESIAESIAESIAE
SIAESIAESIAESIAESIAESODaEKDC/NpwpVQSIAESIAESIAESIAESIAESIAESIAESIAESIAESIAES
IAESIAESIAESIIEhToAK8yF+gdg8EiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiAB
EiABEiCBa0OACvNrw5VSSYAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAE
hjgBKsyH+AVi80iABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABK4NASrM
rw1XSiUBEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEhjiBKgwH+IXiM0j
ARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARK4NgSoML82XCmVBEiABEiA
BEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEhgiBMIGWj7Ojo6BlqU5UiABEiABEiA
BEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEjghhOghfkNvwRsAAmQAAmQAAmQAAmQ
AAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQwI0gMGALc5vNdiPayzpJgARIgARIgARIgARI
gARIgARIgARIgARIgARIgARIgARuYgKNjY03ce/ZdRIgARIggcEmQAvzwSZKeSRAAiRAAiRAAiRA
AiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAsOCABXmw+IysZEkQAIkQAIkQAIkQAIkQAIk
QAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAKDTYAK88EmSnkkQAIkQAIkQAIkQAIkQAIkQAIkQAIk
QAIkQAIkQAIkQAIkQAIkQAIkQALDggAV5sPiMrGRJEACJEACJEACJEACJEACJEACJEACJEACJEAC
JEACJEACJEACJEACJEACg02ACvPBJkp5JEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEAC
JEACJEACJEACw4IAFebD4jKxkSRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRA
AiRAAoNNgArzwSZKeSRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAsOC
ABXmw+IysZEkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAKDTYAK88Em
SnkkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQALDggAV5sPiMrGRJEAC
JEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACg00gZLAFUh4JkAAJkAAJkAAJ
kAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkICBQFsNPvtwJ3Z88jnOXWzznIgch9vvuAfLHnoQszNG
GzL7RmtKP8PO7Tvw+fFz8JbEuIm3454HH8KD983AaD9NT1tNKYrLm71CYjDtzuyAPBBJpUeK0ez0
ZItJyUV2aqRvxVdx1N5Qg0ttDoTHJGDc6LCrkHSDijqbUHWhGS6EYmxKEiIswdrRhYtVdeh0AZFj
xyMuwurO2N5QJf0HLEHKuSR/eGQ0YuOi4SlhlO9EQ9UFtCl5YsdjXHRgDmNuxkmABK6ewHf+JKE/
Ys6ePevOnpyc3J9izEsCJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACV02gurraLSMj
I+OqZV0PAWf3vIRH/+bVHqtKXfLX+Pd/WIMko/K76yxe+oun8erRph7KpuJn//HvWDs7Scvz1Uur
8MNXK73HqfiPT7djtr8uvO0IVt3336HmGv3Ef2DPc7M1GVcX6cLBTa/jRDcQMmkR1t8/PK6Tsc9d
5z7D6x+dcidNWroW90+MMJ7W43KNXn99D7okJWTSUunrRIl14TPp/ynpf+8hBCm334+lsydC0637
yBye/HrvN3OQwNAicMvQag5bQwIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIjg0Bb
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
kMDkCFAknxwvpiYBEiCBO02AgvmdJs76SIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAE
SIAESIAESIAEpgUBCubTYhjYCBIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIg
ARIggTtNgIL5nSbO+kiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABKYF
AQrm02IY2AgSIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIIE7TSDmTlfI
+kiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABO4MAV9fPT458hVcsGDhuq0ozbDd
0ooH2upwqrIWrd3XpVwr4mdlYMmyFShyJN2Sem5L+309+OzjE2gbicGSDX+GolTrLWmrUcjtLt+o
6N496Kv/DEe+akNcxoP4s3WFcufce6GvTvpwthNxcbrcOooRZGDDk2uQarn3+jP1FvtQf+JjfNUp
vV+yAeuKUqde1F3KqY/gXaqe1ZIACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACdwu
Ai1Vp9HSO6gWX3HiLJY8tyKiODnccxlna86hDflRiJiKSPYBjl/oNTV9GMPtgyg/dBGXV+7A1tIM
07WpHU6m/cAwLp87i3MX2jBv3ThCuPc6rrR3Q6HSfd0D3GrB/HaXPzWU0ypX/9Ur6FXuS3cHPLg3
BfP+1q+lD6MhXEfQ75Vb6h4SzCf3uQ/prnLqasTJC+3y6QNmx9+LSx8ACuZhxpVRJEACJEACJEAC
JEACJEACJEACJEACJEACJEACJEACJEACJHA/ELCYhbuExIhiudLXjpoTqLwgspctYUIRs+XzgFju
WLoJ65blw3ZjAPV/PIqyC91oqTiIc/NeRdEscwMmT3Qy7cfwVZwor1SFu4TxhHBp0m0VyG53+ZPH
OO1yWCz6CFjE98G9GRyPbscTzuuwxMbCffkUjle3qx251/ozmc99uJFqqfxK/cwhJg8P598azxLh
6rmdcfrdeDvrYNkkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAJ3gYBjzdNYG1eJ
bl8iFj9cOG4LYuPi5boI5tY4xI6T0tdThUPVmmV5wdrnsbFwlpbakoTCddsx0r8HFe2jqK5qQdG6
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
w7dcLDcacJcOKJjfJfCslgRIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgAQmImBNmyPu
pivVfcUHKz/EvisO5MxNFwfgQ7h25TJaenU37A4sdkQpwE1U6TjXLRnLsNpxFuUto2ipkPZ0lGC5
MxWevh60tlxCU/sgCja9hI35WlumW/vH6RovkQAJRCRgw4odT2GJeFdIkO+k+y1QML/fRpT9IQES
IAESIAESIAESIAESIAESIAESIAESIAESIAESIAESuH8IWB3YvGkJPjhaq1qSD3a3oFZeQUH2cX7i
yY3IuMUukoPqME4sKNr65xj99BAqLvZisKkax5uMi3KQiLSZpp2Yp137zW3lMQmQQHQELEjKmHPb
vAZE14bbl4qC+e1jy5JJgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARI4KYJzMpfg13f
X46ezg5c67+OoZERde9ju30WZqdnImPWFHwv31SrElC68TksergNTa3XpC3ant4zk9MwJyNJdmUO
DtOv/cHt4xkJkMA3mwAF82/2+LP3JEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEAC9wIB
iw2pc+bJa/o01jZrDgrlFVWYhu2Pqt1MRAIkcN8TmDaCeVvvED6tbkPrtaGooGfPtmNjyRzMSbFH
lZ6JSIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESMBMYIb55G4eT0Ys
V9qpCOtKHgYSIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESmAqBaWNh
rluWf2flPCycmzRuX76+OoBfV1yO2hp93MJ4kQRIgARIgARIgARIgARIgARIgARIgARIgARIgARI
gARIgARIgARIgARI4BtJYNpYmOv0JxLLlXTmNHWt/XpWvpMACZAACZAACZAACZAACZAACZAACZAA
CZAACZAACZAACZAACZAACZAACZBA1ASmjYW53uL/59dn9cOo3g980YwDUaXUEk1l7/NRtxst10YB
ywykpSdgpmUSFd4LST0edFz3SUsfwKzZNsTdC22+BW283u9Cu/sGYixWONJtuBMfhlFh3ROO9ZTH
wIeO9iG4ZfjiZycgM/5ur4G5gf5rIxiW8YmJjUWq6cPS3+/GsLQzNP4WDCWLIIHpScDjQq/LM+m2
xSYkISF2/H807oFe9fOkFG6xJSEpfvz0k27EVDN4BnCp/gIuXurA9VH5vykhxjYTqRkOzHfmIysp
NmzJHtcAXB7l/5AEiw0pSfHacaS/Pjd6B5RvGiAaXggaCwuSUpIwPjEfXAMD0JsUqRlR1y8JB9ov
4ULDRXR0X4efDGYmp8JRMB/5uVkITwbwuQcwoHx5SrAlpWDCoTazkXsjYbwMkra1uRGXLl5Bd1+g
XbaZycjMyUFeXi7SE8K0zOfBwIAL/hFT2xb9HwsSkpIwwS0efXFMSQIkQAIkQAIkQAIkQAIkQAJR
EvC4utA16JP5oB3pWRPNC6MslMlIgARIgARIgATuCwJ3QiOcVqD0vc//Yl1B1O2q+8N5/G219nj7
mZ0P4bX8MA+Poy5t+iWs+30N/uY+7l944l4c2HsO+4aUqzH4hzeXYekE+kz4ciYXq7AO3EtL5V6y
qgVMeQzcffgv//MiOqWUmUuceG/r7Mk16Fan9vThr3c3qO2BNRXv/VUBZip1eK7hr98OE3+r62d5
9z8BdxfO1VzApcvtGPR6MSqibEx8CnLyC1FS7EQEPXYcLj60N9Shc0R02nFT2bGgaD4m8zXRXLYX
H9SoXzLjlDz2krVwO97cMn/sBT3GVYfduw/Dq58nL8cPX1sTUXDVk8kHEa0NNThf14i2XjcEnirc
2lJyULLiERRlj78dSqCccEceNHx2CAdPN4W7iIa6GlSUAXZHKbb82VrkJphpu1G+dzeqDFRWbHj1
L1GSYk4TXKy7uRx7DtSokfbi7Xhj0zi8JFXDsb04WGdUgOXP/RBrssf5X+5pxt7dBxDIEVx/6Fly
Xike37we2QmhV4R6bx0OfXgYTWEd4jSgpqpCMiWjdMPjWFuSHXIfulH2boBN4fbXsWV+mEpM1TaX
vYcPqrTKIt9Lynj9Dp+cbgjcR6YylMOGuiqUy7s9sxCbn9yM+UmB8XA3l2G3n39ItqhOi6Ufmybo
R1QFMREJkAAJkAAJkAAJkAAJkMA0I+DCmcPH0Tw8iuzSDVgxP/w80+dqRd3Fvgkm4j7Y5yzA/PTJ
zMTHx9F68tc4oM7T7dj2gzfgvHVFj18xr5IACZAACZAACUx7At84wVwZEX2/9GhHJyZGwaQJ5tHm
uafS3cP9ayirwVtfKJKGDf/4ZgmKJ/FDN1bTqiXvDBiHt3ngYmLMFuB/CtQ21TGwPIBUKUURzNPv
4Kc5IncxNzSkHOuMIOtDvZ2wmxkEEPCIBCYiMNBwHLsPVoVJ1oOOlgacLrOiePMz2FSUFSZNhChP
K3578AjCaplBWeyw509yMm1RvpCilVwDlVmDPjmBeP2ovbYyWOTsr0X9wBoUhX8OoWVzXcKv/u0A
WgyVXS8N6O/vx5GmGpTnrcZLO1YEPsOBJBMc+XDu4L/hSMPEfR1qqcIHb9dj8643gtprDfoS9uLY
hyexQBYBRPxKtwTE26Cs4Vrqa8Upk1iuJKmtbBTBvDBcaiNuMqPX31SF/dKvtS99D8vSA0K8r7ca
b+85FjxeRg3mg35UHduP+qtb8MaW4HaZ2UT3NR9IZQ8cmipz4eS+t1HRYYoa53Coow4Hdl/E6ud2
YUV2xBEZp4Sxl0anZpo+tiDGkAAJkAAJkAAJkAAJkAAJTCsCvq5alNU1qG3qtHVGFMxbv/gdjvgX
+o7XAWuhXRaUO8dLMqlrFmOebg1ZrDypYpiYBEiABEiABEjgPiQQ9lHqfdhPduk+JTA6esPfsxtR
CBJ3H0KMTZF2tMUXs+MCgs/db9nkWhCRuyUGWdLFLqW4VKssYwgTwgh2YVIxigSCCCjC47shYrk9
ORnWoX70G/eUFzVH3kNC6g+xKisgWgYVFHoirqXvRLBnOpEvWz9MFBSL+VSnsrwkUhhATWWo0jmE
6nOtKFqVHSFTLw6PEcutSE62ilgeELmHmsrxbx/G4S93lEzqwYFibWwWy5PzlmPj6hJkyTYRyii4
BtpRXf47VDToyxKGcOT948h5bT0iavz9p/FJdRF2lKRE6FP00a5LZzGGWEMlWn2FyI7yazhv+Wrk
2oMT++Tea71Uj6YeneEQyn5dhkVvbPIvOnDj5IdmsTwZyzdvREl+lrjQj4VP3MS3N1bjd4crjAUb
Q3WHcXzJPKzPvTXC9FhKPlR/uDdELLejcPVaPCz1JttkxOQz0d/eiIpPj8AYMvkPW77/Xdhf/T6K
xPI/NmMhVpZa4DOr+cpdM9yK0zUtRrWZxcuRJ7e9WR/3ei0omDPxZ8EohAckQAIkQAIkQAIkQAIk
QAL3CAE3zhz9wmirNSZ4DmVckAOfeZJgvsBjEriPCfzpTybjqfu4n+waCZAACdyrBCiY36sjx3aP
ITChleGYHIEIQ28LRN2WI+djRTj42G0p+q4VGsQ9Ngn/2189ctfaworvVwJiwfzpH0yLYjKx5aUd
KPS7ZRtorcbH+48ZomjF8So8/OKKKFyUA+6uK4ZY6Vi5DWvmx4eduPuktKyb0DAXrH5cRNAoRfxx
htHXfg6q9zjlg2f64uo4ex4DIpiHE6B7q0+gzkhrRemWZ7C2MEsTxT29OPW7D1HuV0a9TcdQ1VUk
VtKRH2wEN8+H+i9qjajU5Tvx8ppc41w5SEjJxqptr8F57jD2HqnTrvXXo9MlgrnhkiIoi3rSdOwg
LhW+jPk3hc2D2lP+OvUqVHYdOFs/gOzCcMT0hPp7KpatWoHcMEhWrFmPLnO/hmpQ2bparNflPuo9
j4DBRDK2vP4aCk39tcQmSP2r8NoCJw6/sxd1/vUE9dWX5V4p1Cu/pe8u8dJwrEkX+KXo1GK88Oeb
ELS+RCwu0nOLsO21QlxS3BVW6AK4LHQ4+AUWvLxK9o3Pxar1weOsNlSs+S/V7EePepKK1evXhOV2
SzvFwkiABEiABEiABEiABEiABO4aAfdAF6719ePqRdluqrbOtKB9vCa50XTFPwGy5mHbjkfFu1gY
BV1U9djUSXiQG69KXiOBu0jggQcegCKW37ihG35BPVfiGUiABEiABKYPAQrmkxyLWHV1pA9NzddQ
3zUC7+gMJCTEoSBvFhwzwzxN95c/ct2F+iuDaBsYVTUOqy0OOZmJcGbZZAftkCA/CHuuG+pGyMXg
07iZNoSrVqvvOno8yso1cdudNhMLZHPVuODsUZ+N9A/g87o+2edXWwmXkGDDwvmz4ZwdJJcGlTep
Ppty9l8TC8pLA+iWPYWtcTFItluRnZmEPHNdwui6R+Gku8q/gZ5+sYoTY1Fbcuwk+zkDYuwnypkb
lRf70eYahVVcpCen2LFoXhKSxwzrDVy/7sGI/JaPkYzJsWFcjEv7+mUMR8Xd+0xze9R2Kz+OJD5+
TMEmCqGHXjQ19qFVdA6rZLMnyX7KynhaZmA4NGm05x4vetzKhGSGWJrGjr0P5cqI9PO67wZixH99
stLeKLiPSLleKdYqeaI2oheLxobGXnwtnylInxISrEhS+5gY9v6OtotMd58Q8LTjnOFLPBXbXn8R
TpPwmJRdgudfGsXP9pZpGvLgdfU9Gp3VOyT3nBrsKC5xIstU7q2k5/Mp3+nRtGj8Wi99dVZLIMU5
li8Hqk5rbtZFqL3QvhYrgpRPJal8ts41aXnkb96G57G+MN04R2wKVmx7ASO/+DlO+59XVNU0Y9n6
8fcEDxTgQc+g/v/KjmUlYURUf+L0om+huLxOE/zFVX1TpwvOcfex7sGhQ+fw5o6iQHWTPXI1wjDI
t+dh5QI3Kqo0e/O6ygZsLlwWhTX9qGJ0jUj+4dOL1qH0izpDHB/2aBNgz+CQsaYhufjbQWJ5UDcs
6Vj37WLU+fcEH7rcAhcKp+AaP6jUMCdufPEHbd939aK9GLte3hR2kYWW2YL5q57FTt8+fHDab6Pf
UyELKh7BikgLKoI8NozPLUwDGUUCJEACJEACJEACJEACJHBPEXCj/N29qNGnhFG3fRgj/jz2eYVw
Zt96Udwjns4ar8hSXmU7r5g4pGZkIz0pNor5nwddra1o6+iV537ycEvyJyalYW62LFAPeY7ncbkw
rKSRUhNkNXj4p3w+8brmUpcDWKw2JKgPIP2gfC7xWtaEq10D0sYYxNllK7jEVGQLj5CqoibrcXWh
9UobegdHtDrjEpGWMRfZWUkR2qcXrfW7R/JJY2CfJe3ISlHz+NQ+Kigi9NDVjroLl9A7pLCQdHF2
ZOU4MV/qZNAIxMfHY2hoSH1Zgzy1kRAJkAAJkMB0IjBGq51OjZuObWlrasH/9esOnAzzY3BxyXz8
+PH0YOHRPYi9v7mIfVciuP2VH0uvP7UA2/MDpot1J87ib85ESB8CJUMEnt2Pzw7EiovX/Qfrsacx
XP4YPLU+Hz94eFYg/YRHXpw4dB4/qQ0jyx6/jIycTPz42XnINP9mmkKf1WZ4hNX+euxr00Xw4MbN
X+jAj5+ei5kSPZbRKH7yP79SMzyz8yG8lj8ZYcqDI5+cx9/UDgZXqJ7F4NXti/HcgsD4wNOH//Sz
BnXfcNjT8d4P56ttMmc2t8/cHnP8i88vxUu5kRcc6OVdb23Hf93XjPN6hPFuww+3pIV3e26kiXxQ
8/uz/z975wIfVXnm/59MJrfJPSQZcjMJE0hICAYhKRdpuZpqEIFasZZSsYgLrbJW/6ufru1qu3/1
r+uqra6urS11UbZWlIJKBUERpOFqQgKRhCTkRkjIPZPJbej/OfczV5IANoHn/TCZc977+z1nhnnP
732eF48WSayXU1/uce4LjfPhV0+hUqjCGInND45Hrcu96cQ9vgsPv1QulQmNweY117uwce5RVXEl
ntzRJPF0TiSB8cG7MrAw7uKcXIpyxNVDgEQ49RsoNBmJbkRtQ8RYUfiTLFuFZSCDC21nz8oZA+A3
0m8zh724Q3Fjzgx0ny9EbZX0H1JxcR0J5s5Cdz+6NHiYohfLVUQBmDglnvaAr5VipDmumnqxg8Fj
MyF9chIqSlth7PdBRIC7kjGYMy8Ke3dLwm5/1U7sq07B7GG6KG8oOqbuIh+YMhUzctpwlARzkdi5
QlTapsKi+3q/2Fjdp/siMpzGou0NIGbzDQ5BIB0J9tzdPTqrbjeVBJgnICm0Aq2U5j9u3LC/191U
rUYJFu8n5EURQmTubXO8iOVqMSTOXoCkw5tQJUcV04KK6YNeUKHVw0dMgAkwASbABJgAE2ACTIAJ
XH0E/IVJj26eMagR0vOms/IUyWgSKricwYaiHX/G7lLl6YBWd2jaLNzo5Ul4Q8ke/GVnoTqH1EpK
R5GWXOR/ewZolyoKHfj49TdQLmfKXLIGC9wsCO+jLcxe31Io5TJmYs16aQsv722FYs4dKzCVPJcN
OtgasOeDj1BY6+Fi0HO93FvyMSM53KXKPvJk9+67O3HO+Vm3MR7zbklHyVZKo1KuY+xD6Z6/YEeh
/CzBoea99CgxDYuX5bl9huOQ9Ro4GTt2LKqrq9HQ0IDg4GCMGeP41Iotza+Bm4CHyASYwKAI6Leu
0B8PqvBlyOTlZ8JlqP0qrOLTg8JPBPfhZFEl/is2CD/JVH7Q9OD3vz+Jd709J+/voR9Ox2H8/o24
xSypztr+0O7bcYgd0O190teBf3+pFAccMuhPBrBtzykUt4/Hr+d52yNXKdOHd/7wJTaeV85d3xtr
zuHezQa8e3e8bNU9vDHTxqf4/W+9s6o8VYsVmy5gM7XlLZDh+RCC8APlAv5KYrkgxHe5lBzAxq3H
0XLrZKxNV64rebGlfI1yXvfNOf7w0arV4vv0107L4HDURT+mVvypwSFOO+nBKzvc/SjVcng78qHV
q8p+6nDblwuaaBOo9dtTnQp3dWfa/gvuHGo5FG8+WYYf7xAkIk+hDy++TYLXXdlYwqK5J0hXf7xv
AHnkiIQP7e8dnpbs1k7b3nSOpqtycKfDKmkO7304r+w/HUnW5b52dDQ1oc0mLTjyDQhDVNTFVmE7
VOjxxECeEy41WMt0e3HHZCLR14CezIlAlSQutxcXomlBMnT24+QVohnafHkcIj2sJZIXjF9iF8ll
9+b3YbhtIdI8mOrHzbgd983w1swAxmbMxcKKr7BTXghweNsnyFifD9dpvbd6hLQOfHlc+z97cmYc
+YePxMTA3bKVezu+PNkEy1QHYher1E16DxobnZ8skG1/W7P6oKW/fCfeP+CHhTdaYHJ3DQIScfs9
97mp2zHKYLj4ze0pS11JiWrxDrIuz3LxRuDYlnYWhW/MikfVfun/m/ayKlhJMHezbkUrwkdMgAkw
ASbABJgAE2ACTIAJXAMEAjD7B+two/xAyEBz1LKP/oCd5d4ehNI0tb1VnSuljqf5mK0DDS1tEKsx
+CIsIsrFmntwMG048PZrKNCmgQ7F2kv3Y7dDjHbSUb4Lm3fqPHJpSepRc3kBNr7nh3XfmUrPJUKQ
kRmK8mJJoP6qsIoEc1fvaBUnytTykZMmiPOojtId1FapGu960I6977yG3jvWYsagRPMO7HpzszzP
da1NjOlvRsHWjfBZsc7BM521eh89lz7svlB/LXZv9fTc0UqsX/fIWqiwv7kUW16vxry770WWJy9l
7lu+6mIFwby5uRlW8kpw6tQphIeHiy/B8lwI/whR6KqDzANiAkzgqiEgfCcqr697UIJixmHIBHyx
5tYUfCuJHhd3teGP75/GX+UFfH890Ij7Mq8XxePe6rM6sdwHa5ZMxK2pJrJAJ/fhDa14a5tW7s9F
7SSYS5biqdNS8FiM4JrasWOBfsCHW884COI3UX1SuICd7+jFcqmP8ycEwb+vF3t2foUXT0kiUOXR
09hkCbmodXPVF6ccxPLFcy1YMTmMftwN4Pjh03j8C9ki+2w9djSMwxIS/Ic75i49q9BQPH17MjKj
SFUgN8alZM32bzubJTH7bCNOdMUjZ/Yk/O6GfhR9SuOqEKykfbDuuxNxI/3OMEW4UyMcWWpn5DrX
SEIWibtdgcF4bEkSppn90EWi2Qv/cwbH5IzbPqjAzRMykOR0TYRkN1Fa9ZdyZO/Ei3qx3BiIBxcn
Y8Y4I87XNuA/tjZIltyX0sZgy8paUNrFuDutHvDOph879mhi+c03WfCDaRGiC/wumii985dyvHte
cm289UgbCeaXKmoNdrCcb8QRMJix4K6VHrplR2t1CbZv2a+KgZFpEzx5z3aqw45uxZ04uZp+7eUC
h33BxczCKuybaRW2Zehyrb6x9nMNaA0Ikly66ROcjg2BoeQmTpowOSbRXtzHtAl1WvZE8bvHlJyO
GBTL+7dX0XYWNsylfdjVYEjEslV3o1v8mgz0YFHchMMHtUmwj/9QvkMDYMmMweH956Qmu6uwY/Pr
2GEMhWViGpKT4hA7LgrhJl2f1M65OyA33nYDMm6+BUdf2yrthd1fju37ql32RndXWh8nrJIvVZ7T
GNOQIS5KE6zciZj8BKW2sBi2qXMvcr/4gJ7ZeAh22uf7I92DCSOiw6RlQwGJE+jaFMrXhtY1FGzH
6wVAaIwFaROTERcbSwsywofkaq/q6H4cPR8k7I7hNgge8ioKXS0pxMw6TT8wJUl8UOO2EjeREbRg
BZDvEdLsL335h5tGOIoJMAEmwASYABNgAkyACTCB0UeAJkuy5if2PVic+ykTMffD6bO1q/P3w1to
ezA32SIts5C/aDrCPc7FXAs1HfrAQcCNyZyDBTnp5PmrHUV7P0JBufzw1qUoWaXrtq8KTMrF0ptz
EEV+0e0k5lcW78X2/eVSqdpCVMueyhKnZALF+8X4/qqTqLNnIM7hQVgDirVJKTJuiKO8NhzZq83t
LbOWYO5UWpBM5Wyt1di/fRuKm6XJ2/FjZ0gwT3PprXNEX/UR3Zw0ELn5S5FjiaJnBmQU0FCJvR9t
hzL0Y3rPdOTF7i96sTzUgoXzc5EU6YfmqiPY4cXavukQ8ZQfAwj9scxZhkVTE+FLHgJbG8rwyfs7
pe3jaGnE7vf2Yvx9c4c0B3Ue42g/FyzIU1JSUFpair6+Ppw7d058jfZxcf+ZABNgAlcbARbMh3xF
A/HcA5lIU36wBUTiJ98Hjr18WrI4bu/GWXqQLQirZ89a1dpvvnUSlqQqtrdjEGmmcnddwLFXK8Vy
iuwtFPCLCMMsnZd1pZKuikoHsTw7ZwLukevsbajHi2eVnP74+f1ZyBFMpoVAv1wX3nYDQj/8Ek+e
kETzbYdbSDCPkdLd/rXiz19oP3C/NTeDXLkrvfRF9sx0PNdTRK7jJV+/+051kmAeNuwx15bL4jv1
JSgjURLLhX6RqVzalPF4mlbg/fgLoa0BFJztQ06qL2JIGE8IE25hQQkag0SyaIxRrgvFDDqQWI6x
Mdj0w+sRKhfyM8fgl+uNeOTlctkVOvEotuLhKQqDQdc+7Iznimu1620Mxm9+nK4K9kGpifj1/SY8
8uppN67ah93kxQv6XoS7BxHHbcXkgv9L5RYLjMQ9uRGq+/Yg+gzc88MJOPFcqTi+xlNtNL2JUq+P
2/o48poiUHfgz3hHnJ3pVECBQEwuvjNDmIQOIvQ1oUY/X3aqSqxBWIW9fSPKM/OxcoFlEJW6z1K1
fytZ6LpPc4glF21ryUWbi7ys34ubZNjJqfJeYIY4ZCUZVWvsE4VlJJhnOVRpCo/yPDG1N2HPW5tQ
ro49ENOzB8lPbsU8/TZMK38dh3WTZfS300r7AnrJmWjBT0xcIiamTUZmWpxbLwFqp4XvkYBk5M9L
wsbdVWJ08+FtKMpYj6whrFuoUPZ7pxpipk5WFwvEZWTASPeOOOT2EyhrnUP1OjzVENvU/jRj/849
qA5ytO7u6TqPmtNVjp7Y42cgQ6mLrs1ty6a5rNZvP1dODxbkhy3USCBtX5GYNBGTb8hE3EWeBrVX
FWJvldazoRx1W21q9ohQ5QeCGuX1wECLPYTRi8zUe8VrEU5kAkyACTABJsAEmAATYAJMgAm4JdBS
3eA2Xh/ZXL4fG8tLkbf6e0gL8TZfU0q1okD2iiXEJM1ZgdunmuXEAMzIvwfmPW9iq7sFxvZ23bMB
Mha6fYY6fzQEhMAyPR/5zf+N7bL4rfTGEDURmYH7ZbG6FierbYjTLWDvqy5Xlh3TxG8SJgpzxb4G
1KrPwjIxf3qyOv8PCE/EgpW34+wL74iLx7vLybsX0jzP5+XRtdACfSVY8lbQgn9l73ADQswW5H83
D//9+g7Rql8/q20qPKQu8EZgGlbfk6eO20Se3+6LjcbvN+5043G/Cft1rC3zViFfmazTAorwuAx8
Z3Ug3lQWwXcX4ljdLMyOG85DW2Vko//dl56pZmZmoqOjQ3319gp7xnNgAkyACTCBkUKABfMhXokZ
5IZUFcuVsgHBuIm23JFcr/eilTTpJFI7xqWMw5peK/rI9fWMCYpYrhQCerv6VRdEWqz7o4Gmevxo
S5OaGJQQj1/M0fYirzxxXk371sJUTSxXY4GcW1KQfkISILsqzqPKHqMKsLps4mFXdSM+VSJJzFyj
iuVKJJB2QzSij1aLgr8yussx5q6SahSnWZAZofwEJZ7TJuCF6yWxPzjCw207FLFWG4Z4tCYv3lWM
DYjA2pxAbDgo/ZI9cU74EfN1Ceb92HtQW0Sw+JbxrtcqKBLrZ56lhQTKL22nQX1dp5fAXe1idzNe
LQjHT0g0J0cKcgjBo6vSxM+TYN75dZFXWuf3kU2gz9pCHXSj3HW2o4V0wUF5LSMzXWnJjzzWwHjM
mnUjEshveVv9KRzYW6hODJuLt2NH0mrkqRPPK8dH8qvgWL/DXtyWbIdV6ylTJ5H5cqFYoJ/eq/uy
yF27Y3l3Z03lB7B9e4E6RiFP/KxbkTbkD5sJs+/6CSylR7HvwEFyAe/muvR341xVqfjauyOS9mNb
RvuxeW8oPOtmTDtC1gbiooZ+7N6+D6krZ6sPE9yNSY2jlfLH1JX8gcjOilOTEJKKKaG71XoLS+qQ
NTtRS3dzdK5UsxR3kyxHxWPZrVMdvI6YEmfjJ2ssOPr5PhwsrXV3x6K7/RxKaV/10sK9iLTMwbL8
qVfk+87HFEz9lP6/iIxRlod5Ho0+xeAXrAnm+gQ+ZgJMgAkwZ9TsbQAAQABJREFUASbABJgAE2AC
TIAJDJFAH21PqQ/xmbS3eHoCWSe34dTRAyisUla2N5MHsz2IvW+BKuTqy+mP++pK1P3EhS2oFqpi
uZYrec48xBS+o4nESpIhAtPn5KKp1w6/qAw3bfWhg57huoYQZOo8mH1VUuHglr36xAm1SHx2uus8
r7sYfz00HreQaK5N4eOw5O470Ck8AjUEa1slqjW5HkQkTUdubxPsBj9MVBbX67L1dXa7mYvaUFxY
pebKvXWe67jDMzB/ylFscVpkYKsuhlqSWM9VxHK1NjqgRfDfnBKpli07WUeCebI+xzV5LOxdHhYW
Jr6uSQA8aCbABJjACCfgQXkc4b3+B3YvSXAT7hKug97wTFmt5xcViSX0EvbIPtfQgWOtNpxv7UFt
Ww/q6fgAWUoPKvS14YmNtdr+2iRgv3hnLDkhV4IdFbq6Dp9uwkFfP9j6dPub4zpy+9qDGqUI/VRS
hH01SnegjEGIiraEuYrJQkKEGW88rKzWFCLIOn6YY06eSA/vZWt1tLfj0TeOICg0EHPHhyA7KQwT
42lFZ5wiy0tteftbupes3w86/gCX8o/BGnE/bH1pE6Z42EsngdqHLJh7l3b09V2OYzta1N/ivsiJ
d3ffkbiVQosmnAVzul8eeemUe8vzcbG6/eYvRz8voQ7fYOTQZT8pz4M+/bwcn34+BtkJoZiWFoaM
WHLpTPtHC58gDkzAmUD0hG9gioFcT9OipFpata1sRY7uUrzzxgBWDWLPa1tTnSoWBybNwcrbp6pi
rNkcR94tbsCuP26EvCUZSncfwTct5L67rxpvvrJFchfu3LGYWVh313TdZFfKILiCy4738+hKW8pl
p/lwguskWtiL+6hmvh0RGwxrR6u0vxvJswbfSJ2Y2YyislYkZoQ790w972stJ/H5ryiV3bwpCWnz
ViAvS/tOr973JrYcdufe24jcO9aQazj995IB5rTp+A69+qwdaGqsR31VFcprq3FOvThKS820H9sm
+K2+FxleLQVoP7zb56Fw425pct98GJ+UZCDfy9iUFjr0+70jGsH2DrS2Sqt7hH31wqPofzlZ2G8u
LEIrCeaeiSm1eno3Ij7zJixakOX6gIGKGExmTM/7Dr3oIQtt91FP25hUVZxBdV0tutXveanu5vK9
2LQjEPflpbltLJ7c9c23kGt/epDjLhj8DCjfscnBNZ6Sb8CqLcJqqKMFJ4m6RQRKJg/vtraz2gI/
/Q8ED/k5mgkwASbABJgAE2ACTIAJMAEm4J6ADQ2aiTXmrFiJqWbFx5oZcYlpuKF0FzbukN2Vkah8
sHIGCdHen8r1dHapzYWmjHczr6ZkQxQs5GyTvGE7BV9Yps6AhWLttlbUVZajrZPmkM0taGtvQ2tj
rfbMwamkOSMLgQU7xflSf/lJNJBbdnE3MDTp3LEHInOSPNf2NSOZnoU1y8/CBG90r+w3IiaeDGUm
JCFxXALiouLczi2dmlZPfaMsmEEv6j25Q69DeVsbOlpb0UJ9b2ttQu05uTG1hHSgTe1CYXb7vBuI
Gh8POAnmmnkTbTnmiTU14a6sUxf4lAkwASbABJjAiCKgaa4jqlsjtzN9A3oR+uL9LC+sxP/d2SS5
a794djc5esj9zSl1L23y4YOn7xlPDnmdg7CjqGSX2FXRgCcrnNOHdl5Tq7mTN5HYPpQwnDH7xSXg
l1M78fhRzVq6i9zbb6PzbUcbxOaTEyKxel4isgWh42JhwJ2NplDoAlpEoUE3JhLmx+p/7enq9iPB
Nh0NovhcSRv+tC+iPbZ16Vfs0Nat7T9Ee6snKnMHpwZ9IoKofyQ6O8RfcLSa1ae194ppmhW3PvHr
PjZi6XfHo+j107r7m7YpqGkVX2JvjL5Y/o0E3JEbqbpr/7p7ye2NTAKmxCzM1RkFN5XvwZ+2F0rC
Ku15vb+k9aLCagBZ/27YMJvmlCQ+Cps/OwdDOBbcPgdfbdwr1dtdhQayXk822MWNIJyzi+dk4S5o
oHopWYg3T6CtPAZj9i1W4vhH3ItbJ6zW7n0Hr+91zKM/Kz9Ke2JlzHDpA8gF/YGPd9C+bU4ieGQa
lixZiGRn8bpf2O7CXeiHtc/dKKW8vqYQckMnvNIwXYiiPcya6spw5LNPdSJ9Nz7dW4aMfPfCsNpq
eBYWTytUhfvyndtRnbYS3qXePnyl2++dzO9pEcUbapUuB3S/lNT1eXEPF4iFq34oWt47ytR26dah
bU+cr7dLG2KEL0KEBx/0SssSydDigiaUFRXg04Jy6R6jfN2le1Eyk/ZcV7zo6SqLjDEjPNzDfwhy
vj76v7LgnNM1prRA3V6CPdZBLtiT67zQrXMTR5fe0/+wuq7yIRNgAkyACTABJsAEmAATYAJMwA0B
co++cj1mUIowv3IzE0d42gLMK/4Ku2uliXDN6UaaiHu3Tm6uPau2NS7Jk+kFbTNI8yVa1a3mVQ9s
ddjz/gcoPKc9l1TTvB2EpGAyVVkgVklu2etsMNNDvL66r2gmKofIyUhR9X4a//J81LyxXWfp3o9z
teSRjV4FQhFjKDJzbsKs6RZ1Ub9Slaf3uqI9+GB3obbQ2VNGJZ7c0J9XdfRwMrJSEhzffQNCdQv0
pbSmOuk5rXCWMD7asQCfMQEmwASYABMYxQQElZXDFSJQ/kUxNriI5WMQHepPLtqjsG7mxaTXC/hs
ywm8q/6AGYN1309Hpptn5cYA/aUcQxbv3l/068vjjyEBR0+XJpQ09ThKBN5wDX/MZFk8LxObV0/A
uqxgJJOLe+dQWdOMxzcew9Y66Qezc7r+3MdfWAviygBklx8T6OFXoL4C5bhPc9kcnRT09YjlStvq
+xidNwE1Uj5wJ1uQex9Kdb0HyFtAZMCg3Dk5t3Klzn1CI/HLh7PxXF4svjXOjeTU34d3Pz+NFZtq
oZNrrlR3uN6RSoAEV6vVKr5sHr6Oosjye75F++KoP9s2+NG4E8uV0uEWTNSqlWMN4ufIaDTC8UWi
ZESEOJlUiivvdvvFv7eUvM7v+r24ndPcnjcfR4W25knKYqvGn18hy2O9WG6Mwawlq7BhZZ6rWE6l
DP7+9Nd5jMKCpUCEBkgLl5pKD2DXrj302oUSYTWBu0BbKkQlZiCPHoosIZdsSuivr6X92C4eEmfn
w6KukyKXfDvL0ecr9M1DcNjv3UMep+gTxyqcYvSnRgT6+5Ilvy+EPce0VwACPIrlNpQeIC57dmHX
vhJ4IANfUxQyZuRj/Zp8nTeNbpxtdk/Gbnf3na/vKz108nCrGVSGZFxfcZr8Fgw29KHoUKmaOTBx
nHtrDTUHHzABJsAEmAATYAJMgAkwASbABC5OwNvTufE3jL94Bboc+mm9j1sZXs7sbr5EXuTefu0d
F7HcGBiIyJh4TMmdhTSPj3ADyDtdktqTsqIz4nH18RNqnGVqmsMia0OIBXdtWItlC2chyd12Wf3t
KN6/Ha+9fQiDWepcd+BtvOMiltM8lp65xVumYFauYH3uFOg5S6cSFToWoR4uRh8Z9Dgj67NqHj0N
Bv3zaKVC6d1DlY6Z+IwJMAEmwASYwAgiwBbmV+pikFvs13SusrOz4rF2ZhTi9b7b+1rw0RftqPTQ
h/IvTuLZCk24vjkvA7dIfn2cSlxAY4OWb833s7HEbT6nYl5OEwRXR0XSz7KoIA8/cejHVWlFpygE
BEeHwRLQecljDooIwy2LhJewx3sPKs+248jJJrx9Slvh+fq+Jtzq4JLedSCWmZnYPtM1XovRiQ7t
5NKZhuqyNz1l7mrsUK+PyccDB63Sy3fka4TgrEm8N7rbUUNqS6ibhRK9TZ1O1uVUyDeMROicy9eX
K16TEWmZ8eLrYbL0bW7ppPuqFTuONOGYctnP1mNvUywWRnn+IX7Fu8kN/MMIVO/dRPteSSuH0pas
QZ4HV2wJaYlAuSTs6bRBj/0WXIdbaVGMsKbdFB7iMIHVF9K+XaUV8PBNpMntBn2WK3fssBe3EZlz
5mN8iI+4El/fqMHQi8KdO1Elfma6cayoAWkzhG8RIXRg15tbUCudiH/T5izDvKmJHscsZIqbcRc2
CMv+vQR7Zx2Ki6WaKzAeGWbvq/6TZ81GaOFWyRW+0UDLmgYTwrHo9lyUvyOutScL7L/iM7/rXVa5
KzXp93s3Rmbi5tnj6cI5rbSgpym9DYXYWVAlFusuL0adPc1hb3ilvmG902r94oJCmXkFkm7MoP8j
vdRksmB2Zii2Kv7/vWQdbpJ5IlnzH94vFSe3hkeqZ5GXBm+dklvqKMVRnQFGysSE4XaByzEBJsAE
mAATYAJMgAkwASZwzROgraparZJ1ub8JIQFujCeIkV03EXcWbN0h9A0KpmjpuUFNFVmkW9zNTftQ
V6ub3MgV1R38TGftHUkLyxdiSqIZtJuXGiqtxSilLSTdhfDUKQjdXSW23k3PJFrtMSgtVR5oRSIr
NdxNsQDaSm26+BK8snW0NKCm6jSKjhVCNXI/tx/FTVMx1cM2kmKlJPbvLjin1i9sB7dgRjqiRA9j
cnRfJc1Py9Ut6cRY3yjNNXx7DZrouahbp3huVmRHJ9GcUJ67etvuy9qm8RrMNVQHwQdMgAkwASbA
BP5BBFgwv1Lgbb26/W1DsWFRrM56TGq0t8GzWN5eVokNX2gWZulTLfiJO9NysSojplh88bYscB8+
002CufBD0TlY8drrX0HcBSjSjOeWxcLPOYt8bjBot0ZlaSva57m6Im+nPVgf3toqlgiaNB6bZw0M
c8x27PxLCd4+NwBTyFg8dWei6H7bL8gfaanCKwbfqTuD5W/LPwCbbaJVosfFnR7G5Dm6G0ca+sld
sqvEVlaq/bjzD9KYqHWRJb9r6MGBUm21pWv6IGIM/kiiAR4Qm+/DIVL0M1NdJxGVp7X+DaJWj1l8
fa5zSWs/0+wqxrvkGn5Eb0M9Ht7SAGv/GCxZmoElAn8SsSKjwjBLeOUmYusfjuD181IbtZ00W/Kw
p9Lwe8ElRwMBvdZ5toomtx4E8+YazQWbWxfrDoO1Ye8f3kCxOGszIm/NetHltkMWOrE3lUOd59Iu
1+4WrjiXuZznDntxB07EDFqZrnpyc2ooYHIRquSJ8rnjxbCSYC7krdzzrrbFA23okb/qu7CE62b+
TvUM5TQ0RrAYlwTz7poqWkCV7NVlnL39vDZJ77cP2rW3b9wM5FmOY0c5PXQw9qO0sNxDNx33ex8/
g/ah83C/CE8Dikgwl/5nqcXxSiviLJ7oemjOU7QhFJH0HV4rfkV3o4qs7y3J3sRpO843XZ7vc49d
isrElND9kNeeoHDbZ7hhfR7d1d6CDQc+kPeQF7IZ05Djiae3ajiNCTABJsAEmAATYAJMgAkwASZA
BGyVe/HGVnl/ckseNrjdpsuO8uLTKq+ICG9zKSmbfm7aXlFFzw2TXefOfQ3QO11TGujs0nyCWfKW
YDptMeYYbKiq8DJfC0jElHgj9oou5OtQsLcAkp05TaGSpjgI0X0NR7HpL4fR32/E5MUrMENYxExe
2UKiEpEhvKbPwoE3X5FdvAMtZExE6rdjd/RnPZIhkxRlwa0Lprrsf97XIIn5+mLCRlv9qop9DnWk
mCfGOT93tKPsyAnHYnQ2Rvc44VxpJWwz4tw8B6BrWFKllo0mQysOTIAJMAEmwARGOgF3at9I7/Oo
6N8AWS0qawlBoqqr1GrFH7Y3aWPx0S7FAK0q/OetWlr0hEQ8S4K1tzAuVvvxeOzzapRLxuEORUr3
VmJb+wAqhRf9FtT9vnHIJ5wExYcjW4ntbsbmk84CcB+2f9qq5MDcVBOGP2Y7Gmt70Cj0q+Y8TnSp
1aoHfuTGXgtj3PT9AtrdjFkr4/3o7e3VOrFfyitch1+fUCr1wR1Z8g9mMlRUabR3oUHJIjdxrvAM
3lUvvvd2PacaMel67YfquzvP6Fa7yqW6mvDyQbUnnqvykDKg2+e9qlabHEjZrfjjh9r19VAFRQ+f
e3+3DZXdA2gkt+tbv3TnPtuAsdpt7bkLnHLVExBXL8ujbC/cD9I1XUNrCT5RlEBKTUiKkvPQ/tnV
lagUXw06d2YGhKpfq/04cMCdAGvFgR171baMSSlQi6ixgzsw6P1hD64I5epDic4Vdkx2puuEX1eX
OSNDcwdPFsQnmujLyt6AIyoXI+asuuuyieVC0wFh0eSgXQ7thfjzrlIX63clGWjFgV0H1VNj7NBc
e6d9+1aS+ymok3q1KvWgr64EpWp6PG7wJu4a4pCVpC2UKj30lZe+q00M8sAX0VEqGRRv/TNKO+h6
eAgd5Qdw8JySaMS4SC8PRJRsQ34PQM5NmVqp/lJsfHOXaEmgReqPbCjasZn2Q9fiLN+a6fLwRUvl
IybABJgAE2ACTIAJMAEmwASYgHcCwp7Yaig/hFI383tb5QFZfBZyGjHBYlaLeDoIiEzQtlHsLsTn
Ja7PtMr3fuLy7E+Yd3d3qZNIt9W3lnyGQvU5Hz3hdXmgasDEGybKZYUF3qXqtHXS1FSHOu22FrR3
d6Ob3K4fl923O2QgP3AhQ3gWZu/tVduC0Z0z+ibs3lGoNaH6rjchIUW7FgW797ts29VRukfdR16r
gJ4DmMdrRmHth7G/vEOfLB7baWHAfnUuGYkpbq3sXYpxBBNgAkyACTCBfygBVx33H9qdq6dxHxJ4
BblG1H77W/Grjxvw6E1RZDndj8rTjfjdJw04qfs9VlndilpbCOJ9bXjhjWqQ8yDhN6EkDPjYaC+a
09BtKy6kUrgAX9qP5s7cCERmXo/FnxRhm1inFRv+qwSPfWc8cs2+6LFZsXd3JV45pYmra74V40bE
l2oV/5Jb77tz/HFMFmS3fVAE374JWDaBhPGuTvz5gwoS35X8JsxP8YePfZhjJvdLU9L88fZRoX8D
ePLVYjzy3fGYRassfWiMzQ2teGtbjdIYktPCRQt0IUITfQeweX8tQjNDkGAOQaimNavlvB7QooBV
rw/gsZvjkUlWzK21Z/Hk1gbpOlDBoJRY5ATJNQQEIpOuTaXC+rcn8fMliYg29KOsqA4vFrn5te+1
cfeJ2TMTEF10WupDdyvufeUr/PKOZEyOMKC57hye+1Ot6i7efQ3eY8clkCAjeyU48EUpnqPVtyvI
or+rrRPv7qzFAd396VyTR+7OGb2cB40LpxabxTE0nqrEIx/b8fBN0YgJGIMBWw+OHzuDp9TL7o/p
8UO9qF4a56RRRcBEe24lkW+MKrHX57D19d8jN28RslLoW7aHtiwoOYJPCrQJKYwW3KhY89rq8N6W
rfICJiPy166XXWP7YmKWBftpP2whtBdvx+97cjE/NwNR9P3d31KBvR/tQLn6PWfETd/McJ0Xi6Uv
/qdwxybUBgzmv9wB+ETdiOV5WfC1luG46i0uENmTLvKQIGQ8JoXuVi2IiwurMX1GL1rU7vWj8JP3
UUHfsx4DLTEPy1qABRnC/2CDCCEZWJh5UHUl3ly8A6+eLUXOdLpmZH0eSB/bvs421NecwsH9xZp1
OVU9KSNpEA3ospDAfWteGt7YUaqLdDysOHZcjQi0ZOJiu5OkTJkEVMkPD84V0mKyqd5dp6u1X+zA
gIz583CwfLs8Ztp7/Y1XUTolB1MmJCEyjMR0crvX1liPU8UHUVyl3mi0/waxczZouFhzg0w3WeZi
nqUCuwVLfSE0F2MT/d8Sb5lED6GEftGTmT4bzlV/hUJ6yNOu+38g0LIQ3864Qh2TesN/mQATYAJM
gAkwASbABJgAE7jKCRjMFqQZ98sLnWmeRPP71oXzkUGL3v3H9KPiy73YQe7D1RB/EwY1DaFtrm5K
C8R22UVc6c6NGOjOx9wpyTDaO1D82Xbs1XmRVOsngXpsJM3PJPdgKN+xFUXB+Ugjq+6e9gaUHPkM
BaXqxJyKNaOqugmJliiH5wOm5EzE03OLWq1iOkpCptM2WILYHEr5hBlgd/kOvLmrD/mzMhAeYIDd
RttC0vjpkZwcIjE+zvtiakNouLiIXZxR0qLoLbtisWRWGvzJ1KehogSffVqAZt28rr32NJpscYii
9izkkS2Q5vDi7LC5EG/8dzsW5n2Dnm/aUH78bzRuVfFWOiS9ByQ7bClWvP0NDNC2b9+cEgdDXw9a
6k7go+371TKBadOhPKJRI/mACTABJsAEmMAIJDCYp/cjsNsjr0t6I2PxdwgJzisn+ODJU5IwcbKo
Gqvo5TGcb8L9L7fil/cmqW57lCWCjSeasNFTQbJezyfBPJR+Cv3we4ko2CiL7f1WPPV2kdtS6TkW
LIlzWQ7pkjdtzgTcVVGEt2WX2O/uPEVCqks2LF8yHhahOsMwx7x+KrJnJyL96CnZBXg3nv3TcTwr
7m6r22tcbDoQ62drbnyiYvwoVqJfeaIej9Jr8ZIbsNaN+3LnnuuvmZhGexE99SedaKEUMAbjV/l6
ocof38wOxLaDsuDQ3Ykn3y5Rcl++96BIPLnwPO7fKfeJ9jJ/fOOXl63+yKRI8iLQimNyjZ9+UYlP
v/Bcvd420iP363XW91SVWoYOhOUQShDjAyKwnhZlPCwvyhA+I/cKnxFloYiSmd7TcxKRyXq5jsi1
dhiFhUum4PWthfLA21Gw4x0UuMVAVtTLFzm4mRZuKSnQJFgXQjIWYc7JM+rK9fbyAmyhl7uQNOd2
ZF2KG3P6/DarK9LdtaCLszWKX/9Nx4o0TyWRk5HifZ5MFZiQnhmDQnkZd3txIc4kB2l1UI72Wneu
2HRt02FLDX3nDFYwp/zJC5Zjytk3UCg/Q+hvrsL+HfRyrNbhLCZ3GebqrL9183fte8OhhHQSkjYP
s46V6laq6zLR3m3HFCGYoidlp+gS3R8GJE4gq3XaI05MbseXJ5tgmUqLBehLSr+sQP0uc1+N+9gA
C5bnT8Eb25X7tp+0+f3iy30BITYey1bMdvAkoGfjuZw+Rd9zfbxwbEBW/g/hu+td7ChWHn70o7ac
9lunl6cQaJmHH+YPYsHI5eDmqRMczwSYABNgAkyACTABJsAEmMAoIOBtPiJ0Pxzzls/C6c375cee
NL/fucX9/N6YhDtuy3IQpr0BsCxcCkv1JijTwvL921HuZWKqzPMSb8xBYOFOee7cjN3vbMRuLw0V
bt+EsswluG9BspbLYEYmCfa12p5utBZ6imhMpWWiIxKb50+LxJbD0gS6uXg3NtLL3bOwyGnfRPLF
noX5JmKGJVDavoyqF+p7Q6jPUyBhfNNrZWRMcB8spjQsXViFTTvlRendVdi5pcpTSYf45Lm0qKBi
k7qFXeneLSjd65BFOgkU2khzk8BRTIAJMAEmwARGHoExI69LI69HPqq79DGI8HMvNAepiowPaJEe
hTHIuS0TD05w/8smemw4nls/DS/MdBRwYBgDTQ4eBItQo/rD0S/KjDfun4DFYz1dVh8spx8pz85x
dCrs46/lD3LYy9ofd/8wG49kOfVR6VagCQ9+Nwv3kFWyFIY5ZqEwLTB4avV4fEvzBkSRjmJ5EDF7
es0kpOmQxqTHY/lYqXXlr6/7S6Qky+9jEB4ojTtoXAx+PjfcKV06DRoXhVd/nA7aIt4hpM1Jx889
cEmeEI/f3BWPaLmEnql2L5HVut91ap2erkH8lIn43ZIYtS61gHgQiEeWJeNb8r3nr7uOjvk8nJFg
/YvV1yNbvXf1+fzp2qbjwRR5TQ2x0mP1zF13/wYatDIGH+2+1sWnzcnEL2cG6xt2crc8BjffZMFT
c4b0qXCsj8+uCgKm5LlYe8c8xLi9X6UhBsZkYtma+zGVPGuogdyNKd9QIJ8V+vuYvngw9TtrxNXX
Hqs1RmLOstW4fWqcWuVgDwz+w1yTFmCi/0H6UF2jCJogETeDenvxYJ6YpblIRx3O9QiLioYWAoIG
05K+zhDMXfkTLJuXqWtbn64dB8akIW/FGtw1I1GLpKvir14k52ukyyYe+mL6bfma+zeK8/GXrmpf
E41XyU57bWe47L+mJOreyWo9mx5qKOFc9Vnp0OG+8cfg/l9RatHeQ8ii+yerlyEzXmtDS9UfBSIt
Nw9rfvIdOBogGBDkr92dBvqNcLHgG6R9pypsHMv4Im3BXVi9bB4u3q0Y8uZwN+7LJ48HjpW4P7tM
3NxXzrFMgAkwASbABJgAE2ACTIAJjHQCBn9tPuJvcj+L8DVPx5pVJLhGanMd53FFps3B6vW3YzDT
OrWsIQr5967CNA8TncjMecjLjZez6+Z55Dnt7mWzNJfuaoXCAc3V5tyBn6xbJm0RJqf1u1kXkHJD
tq6kEVNu0M97taTE2d8j46ckLUI4clgpbYRl1hJ8j4yLLh4MSMu/G3MsDg9U1WKBkWlYtvYnuCNX
3OBMjVcOojLysO5uuhYxrnPWSMssLMmbomR1fCfWefetxixLpGO87izSMgdr7stDlOODGF0OPmQC
TIAJMAEmMLIIXPd3CkPpUkVFhZg9Lm7o4sFQ2rma8na1dOBEvU387WP0MyI2OhTxodqvhfamTrTS
skYfXz+YI3y9u0ofJJj2pjYU1/cgMNiI7u4LCA0PRJLZhCCt2UHWJGUb6LKh9Gy3/PvtOoRHBiGJ
+uopXMqYmxtaUHymC1YfP4z16cf5ASNSEsPJHZLn9tpbbGTBfB0xpH2JafXCsGQqchtUWmtFB+2r
3U9yVWRMqNc2xbH39aGqqRtdvRfoAvogKsKEmOFC9gRTiCfXvaUVrWge8CFXUgMwhgdhErllGroU
5r6R9pZOnG3rFy0q/QMDyK19wKDqvizchS4R++LTbTjdNICx44xob+pHaFQQMq8PG7p7ffdD5Nir
hoBd3JO85lwr7CTOGYTvzsAQRCfEwTyUjb6cedhtaKqjbRg6BTNwO2gbMITEJCA5LtxJZHcuyOeO
BIQ946tRc64JvfIDBB/6Lg8eG4NYs5n2Yhvmf0KOjYzKsz5rE6qratDUQTeXGHzgFxKMmOhYmKNC
/mH3WUdTNapq6uj/PjsM9Jnyof/LAoPHIjrWjKhL+UyNyqvEnWYCTIAJMAEmwASYABNgAkzg6yRg
62hCQ30jaDoCYT9uBIZjXEIiokyXNne0CvOcs53wI6ON3gE/8ZlBlAcBXxuvDXWVZ9AmdIZmaIFh
kTDHRSFAydBnRQM9wxVWVAeHRsDktLLa3noUr27cKz07DZ2GtffM1soqdejf+8gFe0UVGs73IsQc
iG56vhgYFYOkxESqW59xcMe21jqcqW8TvbYZ/AIRGU2u10O0iqxNDeikoRn8ghERbnKZg9ppe66e
fnq+ScHobxIXjltLt+P1HeViXOaSNVig8xQnRtKfvo4GVFTVgx6nwm6nBqj+hKQUekajta3kvdzv
dXV1YpUpKSmXu2qujwkwASbABK5BAiyYX4MXnYfMBJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAE
mAATYAKXh0Dp9v9WXaOn5a1GXlrI5an4CtXSVLQdf/q8nqzb+zGRtu5aYHHeB86OQ2//Wt4Sjba/
u5s8+o0wc3EWzK/QzcHVMgEmwASuUQIX9+15jYLhYTMBJsAEmAATYAJMgAkwASbABJgAE2ACTIAJ
MAEmwASYABNwR8Bus8LaZ4e1+hA+UTZPhwW5I1wsF8biQ0b8/f2CN9F+FO/eg2qrYFmvBDuqD22T
xXKKM16P5BEmlis95XcmwASYABNgApeLwLA8V1+uxrkeJsAEmAATYAJMgAkwASbABJgAE2ACTIAJ
MAEmwASYABNgAqOLgA1733wdhcLObrqQNG8WwnXnI/UwPCULkShHs9DB7nJsef3XiIxPQjBsaKw9
B/2w0m6eMyrGNFJZc7+YABNgAkxgdBBgC/PRcZ24l0yACTABJsAEmAATYAJMgAkwASbABJgAE2AC
TIAJMAEmMEII2PudOhI5DQuzRoNcTv0OSMR37piDUN0QmmurUOUkllvm3IE8y8h2L68bAh8yASbA
BJgAExg2AbYwHzY6LsgEmAATYAJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAtceAV9kzp8D//Pk
1pz2AQ8dNwFT0uJAns5HTQiIm4p7NqSjrvQkTpZXo61nQOy7j38QYmKTYJmYiijTaBrRqEHPHWUC
TIAJMIERSOC6v1MYSr8qKirE7HFxcUMpxnmZABNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE2AC
TIAJMAEmcMkE6urqxDpSUlIuuS6ugAkwASbABJgAu2Tne4AJMAEmwASYABNgAkyACTABJsAEmAAT
YAJMgAkwASbABJgAE2ACTIAJMAEmwASuSQIsmF+Tl50HzQSYABNgAkyACTABJsAEmAATYAJMgAkw
ASbABJgAE2ACTIAJMAEmwASYABNgAiyY8z3ABJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAAT
YAJMgAkwASbABJgAE2AC1yQBFsyvycvOg2YCTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkw
ASbABJgAE2ACTIAJMAEfRsAEmAATYAJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJnB5
CXTUV6KufUCsNDIlFdF+Xuq3NuJkdTNE0SY0DqmxIV4yc9KgCNg7UHmqDj0+QUhMTYBpUIWunkwd
NWWo6xpAUEwKEiK83XxAY1kRqloHEJ40EanRl0LqAmqq2tBqv4DgyHAkhxk8Au1p68Cp5j7A4IcJ
ScHw77PhZI2Vzgdr63uB8gYgyqcX9d2A0XNTDn3otwPRsREwBwDnz7Z4KXsB/fSJjI0JwdgAT32i
8Z4+i79+2YzTHdJn3c/oi5TEcNyUZfY6fodODepk+G0N2Dqx91AdDp7uRrvQlnEMokMCMWWiGTMn
hsDfqf2Brk6cONdLfH3p2rima9ntqKxqRScxDY8JR0LQIC+CVsGIObru7xSG0puKigoxe1xc3FCK
cV4mwASYABNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJXDKBuro6sY6UlJRLrutKVlC0
+V/w8p42qYnsVXjt/pkemrPjs5fW4a0SKTls0QY8szzdQ16OHiwB68nNeOiFPZTdH+uffxFZl6ID
D7bREZPPis0PPoQ9PTT62evx4sosqWe9Haipbwb8QhFLorEkb3rIO5yx2M5j5fMn0UBlgydPxJbb
oj3WUvThAfz0mCAy++Dph2ZgYn0plm5u8pjfbYJvJJagGVtJdx9KWPqdHKybOAa/ffZv+N9BlJ02
fTx+tigWQfpGulrwn38swYet+kjH48y06/Gz5YkY6xg99LNLaOvkF8V4YI+XTiIAD9ydgcVJtIJA
Dtq1GUPXZhZu1JKULNK7rZGu91fy9U6n633JI3Ws/2s887Qk4mvsAjfFBJgAE2ACTIAJMAEmwASY
ABNgAkyACTABJsAEmAATYAJMgAkwgauLQNaKB5GtDOnYRmyrJOtZN8Fa9r4qlsM/Fw+yWO6G0jCi
fIxyoTAoR8Oo5aoqYq34EL96+mn86olnUKK7HU1h0jDDjJdIihR4RTKN9vEuQRrV62OQrs+gLct1
l4Qspf2GsRDCV/a/HTzIsocPncYP3q3XNWzDK/+lF8t9MMsSjjuzIzErWht3cekZ3PU/dZBsz3XF
h3Q4/LbOl5xwEMvN0cG4ZXIUlqYFw6z2wYaXNh3F7may2JeDdm2M3j87dM20662UHp3v7JJ9dF43
7jUTYAJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJjCiCcRi5cOLcOy5j8Vebn9hC2a9
uBIRDn1uxP/+RkoXovN/fCdiHdL5hAkMh4AJizZswIRWG4Ljx2sVqCK1v3chVCvxtR0FJVmw7RFd
X3EdfLobcc/LZaIFs3lyKl4XLNb7dI6zDZQHqVhJLsGV4OMLHP7LETx+nFyKU+rP78/BjGA4iNY+
voJtfb9SBCBL9TcfmkTiryYaD9j7UVNWiyffrxfb7yytxF+bzbg5cgzOF53Ge7Jl+vi0FDy3PM7B
+vx81Rn866ZqnBZaOFONA21xuElelKA1Orij4bdlxZ8+JG8CYvDDw6uzcfM4bUHEOrsN294/jpdK
BU4X8JtdZzHnzjgidm2Ga3Xc1+bV5lEzASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAAT
YAJfGwFT6u1Ylb0XG4+Rb+yeffifXd/CAwsS1PZrdmxEASUJwT/3XixO1Uxe7R31OFXeAJuYGgBz
Ugpi3exF3dsrCYN+foII6BjslCZYt/r5ed/D2rFULwmFX6GpU7KLDY6KR0pCtOy+2zEn0IuW+no0
t/eI7fgHRdL+0NEwOXfF3oteqs6H+iEk9XY0ov5cO5XxgSkymsaljdu5BU/nvS01+KqqSRJCfYIR
Pz4F0S4NeyoNDI9vLxpr6tHeQz33MSE6MdZ1rLomrS31qG+WTLn9TZE6N+i6TG4P7egVgFFwvnbS
9aYEHz84X3IlTSgTkZxOL7EK6Q+Jyr02RSTuQaeV7ht/ui/018ooyYYdjTWoa+4SGkFQZCwSLmlf
c10fvB6OgT+J3Y7BR7RgFly8m3x8yLk+WW+75KFe6sdAeUP9FStvA0IDDRBEdK+CqInGSXX4CPXL
wYf2Vk/NGI//pE/gXe8LLs1pD/E24hfph/pa2jRdDAH4FyexXIgem3Q9nr7dijveFwTrARyn/cBv
ChvKZ1CsXPwz7LZsNpTJov78hekOYrlYMe3/vnj5ZNQ8e1gU/zvPdkK44sPU9bUOj9Ijr/fHKB0T
d5sJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACI4CAATPv+TH2HHsO1dSbknd+
i6IZT0j7aXccxW/fK5f7aMGP786Rj604uPkV/G6PkqYNw5y9FOvX5CFaFgitZe/iIdGC3YwNzz+B
dL3u3FuGpx+Q2p274XmscEjU6tQfWSs/wwtPvyX2VR8PfwtWPbwOMxO0BuoPvosXf/cx5F3addn9
kZ1/L9YszlL3yN725EPYTqqnefZSTLMewPZjggSqBf/ERfjZo8vVcWkp7o468Nmbv8Zb+wSijsEy
dxXWrZgJrZeO6dLZcPgmYun30nDgrY9Fa2OtVn/MXfszrJjqtFd3bz3efe1FfFziRMef6rl3DfKy
nPJrFYpH9Z+9jCfETe39seqXz2OmesGL8POHXpaYmxfh+SeWq2PV7oUw2rP956h/4SG8R4jMix7G
E/nAv8v3gtRUG373+AP4XRjV8Uye2npPUxE2v/Rb7HHqt78lH794ZLGTdwS12Og/kIVldwMJChE2
8HbcA9youpvXBHbnsmEpZswytZOVuQEJIcOXY4fdlq8vYmihQDGNTV6T49xFOg/A3NxgHDhqg2lc
IC1IcA3KEgvXFIrRWfa7TR9FkZ6v5CgaBHeVCTABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJMAEm
wASYABNgAiOSgF8q1tybK3etAb9786B4/MUfNqria+699yJVNEC1YtezD+nEcn8kJiaqQlbDsffw
+ENvoN6NUOUqbA1A0wHdFHCCZS3bhod0Yrm/2axZm/aUY+OvXkCZYMxOoePku3hCJ5YLec1hitzW
g2PbX8bLn9VImemv0o+Gfe9pYrmSndJ7qj/Gf7x1VM3v+cCKHf/+iE4s94fZrNnElu/ZiBe2lXku
juHyrcZ7LmK50EwP9rz27/iiUcfXWoaXHnhCJ5b7w18Zaw/V8/LjePNoo5c+AjGpk+T0HhRVKW61
AWv1CW2BQkMpquXrIWSuLiqSyvhPhJlWDFgV6P2SpbpcoeOb0i85tu3Yx5pYrnaaRlm+Hc+8cXBo
+qgqKjs2qZwNX0JWariM726s1pXa25p0m72rKBXX7Vb89PUT+FuN1VWUDojAv22YgTc35GDxOCcT
eKXyQb0Ps62+PlTJ98D+nUV45YsGNHTp7lO57fQ5N1AfZ+DVO7XvGX23jN667nv1yMwj6n7UXwA+
ZgJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmMDVQCA6504s3VkgWvz2HNuENzYf
RWGJbPeZuBR350g7m3cUbcE7imE5WV3/UrG6tpNV9cb/wFsFDaReFuD3H96Eny1OdUCj7U6sRXvR
AbVM4lELtvxmuxo3995fYEVOLJ334uSO1/DCeyV0XI33P6/BI+RSvq5QFmdhxvce/Sm+mRwilrXW
H8ULT7wmWqjXVTdRXIIY79CPsFxs+OmdSCc339aaL/D/fiUtHGgrriQ5e6pqMS0WdPrTcnSLyFCM
Ns/FL36+ArEk6PW2FOG1J16GgLR6+0eouSXVrTX0pfAV2sy+YwNWzk0nN+xWfPHm/8PGfXQ9SCqt
bu4hK3DJrv3gm7+BQEsIGfnrcS9Z2gspLWW78Mxz74iC977XNuNbrzyABA9ipCF2ErKpzDF6nTxa
BeRIFunVhScpRgnVOFFtRbroxr8DJw4KfSGX2tOmQcjtwJwWbfzstdfQUrQZj728R8iFe3/5JFUr
rNLQCcJ0Rm4A8PCDy5BKbvJ76Xq+9MxrKCeubV/V0EhzvF4fobgSTh86ifvPUP39iuCrpNA73ayN
jTq1X5f0Dzm0DkDQkv31e5j39eLU8TP4t53tcpf8kBknuVVPvTEOwYcq0EkpnY3NePyPwqKGMci8
PhjZKZG4ISEEKTHBCHK4CMMb2bDbIsH+bssYPFku8L+A9/aUia9gUwByUkKQMz4CqXGhSAhz982h
9LUX//bKQVxP45C2hlDihXdBLO+V9mnXR4/S46tH+h+lF4C7zQSYABNgAkyACTABJsAEmAATYAJM
gAkwASbABJgAE2ACTIAJXO0ETMj7p3tli+0eFOw5JlukhmHtP+VBkuF6cXDbPhlEBh5VxHIhxhCC
b67+KRYlSsnV+46gQ855Od56aw5in6LfL9ogi+VCzX5Iz/shZsuWyLXVgmtqO1rbpMzmuStUsVzI
bYqdiu/ONQuHEARw1z4m4uEnV4tiuZDHlDAT318k5Uebo8W0kO4YiM9HCp9EbPg/klgu5PGLyMK9
986Ws59GkzwWl/KXwDcx/2Hcv0AQy4VaTZj53RW0XEAKNWdki/GWg3hX2K+egnn2ejwgi+XCeUTq
Avxs/VzhkEIJvqxwEqqlBPlvLHJyJcv5npPFkGonUfykJIorWYuK6qVDaxWKZO/v2dOSlGSXd78A
RRz1R7BJuuscM1nw8M9XimK5EO9H1/P2Ocr1qcDQNO4LON1ow+lWElWdX1SRIDaPmNDXjJVPf45v
P71ffS1+/jB+urNJ7ef46Sn4RpDUY5/IOPz3iniMdxjABRSfacebeyrw0z9+iaXPfo5/fvc0yoSN
wS8hDL+tMbjpzqn4J4vgUl4LnVYbPjl+Dk+9fxKrX/4bFtIe5v9b5PpJVUoIe90XO18/8Vy4tm4W
QygFR9k7W5iPsgvG3WUCTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASbABEYhgYgc3L/0
Mzyt7lsOWJbej6kR8ljs9ThWLR2Hzf0Wkl2sj0OQlWbGx9UkmradRB3prbJ+fskwGkuOy3WYsTgv
3am+ECz7l0cxrb0H/pFCi7Qv+/3PYKaQy96LjpZGtLe3o6mpCY01RfhojyzqksjuPISw2Ytl1/Na
E7GTsoCPhTJ9EL2Hu9NxxbbqcVzmY567zHG/dko3ZSzBoxum0UIEcmNPbbuES+Jrxre/mepYpV8c
skhLbqCud8kLCKznKlSX6dePD0ZLY6O4MEIQ4wbgA5/gsWodVpure2w1kQ4s08jGvICswXu+QlUL
EG2qQ5GAiZZdZGT4o6SEXGwXlcK6PBX20ydk9/6JuJGsh12sxoVigwhhs+cj1emixaTS/SBeny50
Ci7JPV0f5/pNJtw5iRTmAVdR1ZeAVJxown5vawac6/sHns+fMREPz9OundCVseOT8erPrkdNVSMO
nWrBIRLLDzeqPtvF3haX1mNdaSuefnAabpTF9uEMY/htBWDZndNwW1cnDp84j6OVrThAXgkaFHf9
Qmf6bPjttkLsaUjHq4scxygkT5schXT6PPU5Do1SyCZ7oBv/e3xELX0QujyswIL5sLBxISbABJgA
E2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkMjUBy3irkfvQ4CgQjZP/ZuDcvWaugpweK
MWr2lCQtXncUmWyhM1E11cVe+uGAbgN0xQZZX6spNhnpgod2NbTgs83/g7f2lKgxLgeSobVDtL/R
Te06pcpNqlZex0eL1B2RFX5yuiAWS8FFi9WVHw7fACchWVgO4OJx20cbQcHGp1GgdMbN+7HCKqzI
ynKTIkWFjJ9CFux76Gq3objWihuDZVE8LAdLF5tIMH+PboUi1GMxBhRX7ZZcJA5W0HbTsn+gozWy
kMWgWqWLntTdlHIfNX5SEn60SFkN4pqnzKcL+w+4Ovp2zfl1xJjwyx9YEKlzyS64MR+wj0FUTBjG
umKROzUGCUlm8bVMiLHbcb6xHQeO1+L3h9pl63Qb/v2vDdiyXLbUH/Zwht+WT1AwvpEjvJKxjtrv
6bKhkrwibP2sFp/IVuKnD5Xh85yxuElybCD3MgA/uDUN6S73vpxsb0HJ8RIUD3tMI6eg7mto5HSK
e8IEmAATYAJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAkyACTCBq4+ACVGCICVo3mGBjsa6pNgo
AqzRx71C1V4nm1hTcZ3GfcmY/CIjqY5yeo1DKFmTeg8d2PaLx7Bdp9v7h5kRPTYS4ydPQv+Rd7BP
66b3qoaSqlO0xo0LHUpJKe/XzdffDLOD+KjrMon36RkXEVBNiZhBBv3vEcszJ77CqbAKsYKwialI
SA6HBe/RFavG6TLa+71cuhgZOZMc7yldk4M6vJw3lRvLcn0fBlwslvWpX/NxeKi47/hFb32hW3Yr
tnxQiVOk9c+i/exvitZ9Vg0GjB0XgcXCa2Yj/vnFr0QxubOmjZY9mOUtGYYwtktoq7PoNDaVWeFH
Xg3+aVEs+V3Qgn9QAN1/14uvWz4m1/OHhIULA/jqXC8J5voVFxfQL1ije1owYHf1HqC1MrqOdF8v
o6vj3FsmwASYABNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJjFoCbiywlbFUnKZdq1N1
1udyQqdV8aUciXC9AqYU1L/32tzsIa7PoB23V5+RT87iPPUr1qSlCUdln72Lz0+3IyozD4vCD6hi
eVj2HfjpyrnkLlwTDQ9WbSPB3MvgHKse0pmyoKDy7Hkq52DyDnSUYfOfP0e3MQoLv7sYnm2byR34
5eDrrueqCOyPe3/xBHLcdKLX2oFesk4PIZfl3oMJGbkZJJiXoOHYJ9jpXytmn3hDPL2bMJnE9HIS
0w98tE12OuCPaY5uALxXz6kagT47ycWDDH1WvHe8VVzz0p5gJcFc82rgUEPQWMyLJcFc3GZ+DDnk
H0a4hLZaa5vxSWkvNTqA/PmxLq72ld5MmkyLZQ5J99bwOqnUNLrfh3V9hCF3d3eP7pFz75kAE2AC
TIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASYwUgj4JSKNLJKr20gI/WgfWshdu6PeWo/D
ByRLYlgmQTBs1ax0e9ApaGM6DbZs50fqftoXG2LiFHINLu493oAvChuRNTNaV6QS77/1sWh/Hmac
hltuTSBbWUmjXXibo1gOchB+9OSVEctBfLJIJK4mkbjtwGE0rsiCvpc1X7yPPQXl1LMwTFvmRjAf
Dl8dhcEc+ocqlu89+GBPGXJof3F96K3chgee3i5GzX34eaxI1V0wfUb5OHbSFDoit/dt5cJfCmHI
TJLuioxcsjGvLkdDiewW338a0vRAxPz857ITMPhA2Olb+CQe3l+FstwsD2K0DeXCug4hKCs9pLPB
/72EtgKCBAlY+FKw4t0jHXg0x72wf75J27zA1zBm8H27ynJeuyO/yi4kD4cJMAEmwASYABNgAkyA
CTABJsAEmAATYAJMgAkwASbABJgAExjNBEyYOtciDaBnH555dZfOQrwFO559Rtr7nHLMnj9VdL3t
H6QItG343X9tQ6Ogj9l7UXlwM577mJTlQQbThBxkyHmPbfwP7KrskM56G7HjpVdFsVyIyJ6WhJ5z
FaJYKJwfO3IKduGAgrWxDG+SVfWxK6SXC6sBbpwt97KnAP/x6mcqn8aTO/Cb9wSxnALt8T3erQ49
dL5ShYP/a4jNwSLZDXvDx89h81HRvFisoKPmCzwni+Ugh+q5KW476dCYITYduXpPAv6ZsMirKGIn
ZjvkNc+Y5rTAwiHZ6aQHre2aUOqUyKfeCPhG4PvZstvyvnase/oodtfo9mIX9jE/24D/fOUoPpQd
Qoy3jEWQWKeVPscPYu2Da/HgsztIyr5IuIS2UqfGY7xc/Sc7C/HYh3U4rziooPgemw1/21uMldta
5VwBmB5rvEiHBpfcW7kDD65di7VrH8SOyouOcnCVXuFcw7YwDwwMvMJd4+qZABNgAkyACTABJsAE
mAATYAJMgAkwASbABJgAE2ACTIAJMAEm4EigtVUReBzjR8uZTrNSxWal78l5dyP3oydEYbzt2Dt4
ZO1OWEhsO19erlmLJy7FsqmSamqInSgK3SVCBdXb8fgDkvWyUt+g3w0J+P7auXjstT1UpA3vPP0I
tvmHoaeHzN2VQO0uTg+ByT6L2twjWjyXb38B63aFwezfg4Y2J6W87WM89C9NePTJldCPWanO3fvF
ttCO/eYKzP7wceyjbrUde4v4bEEYta1vOv9HeaKhvV6mU+odKl99H5U69HGu4wpB/o/vwMe/ekfM
tue1J7DH35/2j+4hllrJ2WtXIVnzYq8luBxF44ZpYSgQBkwhbFqGKoo7XHtKy7qRzO91wbVvukS6
xhufeAgbzfl4/ol5l+36CDe0TjrWN+j12B1bscAw69M35rFuyiSsL1HCoF2yU4Ebb07D/JJCfCJC
tuKpPx7GU74+MBsvoMHqtK+3bzh+Nl9e5UBlrV10Iwj/zltdPv9KX/Tvw24rKBo/W9iA1TvbxeoO
H6vAXfQym3xg7R9Ap9MNcsu3JyJdtYTXxuCNn1Cxu+s9MGAVhkhB+GwqS2rEiBH7hy3MR+yl4Y4x
ASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJXGwGTIkqFmGgna+cQi9XP/wL5GbKZ
Mgmb5TqxPHH2Kjz/M0kQFkuS0L3+F/fCUSoVUvwxd9Va5Fsk82Sjj2tLzi1HTF2BpzYsFd2tC2l6
sTwx9w489ajcLrW59l9XaW2SqK6I5Za5q/CLf/0eOQ6XQ1slOkmJVMbsS2Kda1CABCHAXbJDgWis
fOYpLM02y7E6sdw/EXdseAqLZTfnPj6KBbcvNLvZofH18fHeN185WT8uv4QFeImuiYxeAKkTy8Ow
aO0vsHLq4H2nT5yWoxLIniJ7IBBiDLGYlq2QzsBUJ4t1lblRg2pKuQmL9DdLj6Saqnkv9fqQC/Fw
ubcBPheRINVu+SDQ0+1JLsLV+vwvUp9KCfBR83qpm/IHKTeGyUifmCEEQwgefWgaHssO1gr1DTiJ
5T6YP2M83n4oEwm68Sn3jNCgLlqrx/noEtpKyMnC23dfj2nKR4HqbrA6iuXm6HA89oNp+Oep2lh8
/JWLM0b32XHumHA+BgFydLjoAl7Jo3xulPOR/37d3ykMpZsVFRVi9ri4uKEU47xMgAkwASbABJgA
E2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATuGQCdXV1Yh0pKSmXXNdIrqCjsRJVta0QLF8H4INx
SRORECG7gnbpuB0t9fXo8aH03gEExcYiZFBqnEtFFGFFfWU9SFcTlEdERsciwuSuMitqyqrRauuH
MSAcMYmUz0/KZ7e2oF0030talnAAAEAASURBVPVDRIROrXPX3DDjrC31qG+W7Mj9TZGIjY0YnAAp
tzc0vsPppB2NlRWobe2Ej08AgsOpjwnRoiv94dR2Oct0tLRgwMcHfn4mmORrdjnrv6bq6rOhrKYd
Ne0XMDZ0DNqtYzA2yoTkcSYPInwH3nzwEewLW0TW/ctFbwiD5jXktrSazzfS4psGK/r9/BDY24d+
kz+SYkJhDnL32dbKDfeoo+hNPPLyPiza8DyWp1+Z74Dh9s1dORbM3VHhOCbABJgAE2ACTIAJMAEm
wASYABNgAkyACTABJsAEmAATYAJMYEQSuFYE8xEJnzvFBJjAJRGo/OwNPP1WAcLmbsAzK9Ivqa4R
W9haiTeefBoFbWFY//wzyBr5ejnZynNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJMAEm
wASYABNgAkyACTCBK0igA/tILId/Nn60+CoVy4metXofieVA9vfuHxViuXDB2cL8Ct72XDUTYAJM
gAkwASbABJgAE2ACTIAJMAEmwASYABNgAkyACTABJnB5CbCF+eXlybUxASbw9RGwdrTAJyRiRLjm
v2KjtlvR0o4rth3Dlei3smv7laib62QCTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASbA
BJgAE2ACTIAJMAEiYCKx/KoPBhOJ5aNrlOySfXRdL+4tE2ACTIAJMAEmwASYABNgAkyACTABJsAE
mAATYAJMgAkwASbABJgAE2ACTIAJXCYCLJhfJpBcDRNgAkyACTABJsAEmAATYAJMgAkwASbABJgA
E2ACTIAJMAEmwASYABNgAkyACYwuAiyYj67rxb1lAkyACTABJsAEmAATYAJMgAkwASbABJgAE2AC
TIAJMAEmwASYABNgAkyACTCBy0SABfPLBJKrYQJMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAkyA
CTABJsAEmAATYAJMgAkwgdFFgAXz0XW9uLdMgAkwASbABJgAE2ACTIAJMAEmwASYABNgAkyACTAB
JsAEmAATYAJMgAkwASZwmQj4XKZ6uBomwASYABNgAkyACTABJsAEmAATYAJMgAkwASbABJgAE2AC
TIAJMAEmwAS+RgJ2ux0nTpzAkSNH1JfQ/I033qi+Jk2aBIPB8DX2iptiAqOLAAvmo+t6cW+ZABNg
AkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJMAEmwASYAAoKCvDDH/4QZWVlLjQOHjyoxqWm
puIPf/gDcnNz1Tg+YAJMQCPALtk1FnzEBJgAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJM
gAkwASbABEY0gd7eXjz22GOYPXu2i1ju6+sL4aUPgqAu5BXKCGU5MAEm4Ejgur9TcIzyflZRUSFm
iIuL856RU5kAE2ACTIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAkwASZwmQnU1dWJNaakpFzm
mkd/dQO2Tuw9VIeDp7vRLgzHOAbRIYGYMtGMmRND4H+JQxzo6sDhii4YQ4IxJSkYV4sb47azLaju
voDgyHAkh41s1+Xd3d2YNWsWjh8/rl7NefPm4a677sK0adMguF8XguCm/fDhw3j77bexe/duNe/k
yZOxf/9+BAYGqnF8wASudQIjRjA/29qNT4rOoq6le1DXJC4iEPOzxmFcOH+gBwWMMzEBJsAEmAAT
YAJMgAkwASbABJgAE2ACTIAJMAEmwASYABO4CgiwYO7+Ip78ohgP7Gl1nyjGBuCBuzOwOCnASx7v
SV2nS7F0cxPgG4V3HklDmPfsoyS1H7999m/43z4gePJEbLktekT3+4EHHsArr7wi9lEQvZ9//nn8
6Ec/8trn3/72t3jooYcgiO1CWLduHV566SWvZTiRCVxLBEaMS/ahiOXCBRKEdaEMBybABJgAE2AC
TIAJMAEmwASYABNgAkyACTABJsAEmAATYAJMgAlcywTOl5xwEMvN0cG4ZXIUlqYFw6yCseGlTUex
u/mCGjPkA4MsK5nGXDXW5UNm8A8s8Omnn6pieWhoKAoLCx3EckEQF6zJP/jgA9TX16s9FQT1L7/8
EkIZIQiCu1AXBybABCQCI8ZbhmJZvjT3ekyIDfF6fU7Vd+C9gjODtkb3WhknMgEmwASYABNgAkyA
CTABJsAEmAATYAJMgAkwASbABJgAE2ACTGDUErDiTx82y733w8Ors3HzOKM6mnV2G7a9fxwvlQp7
V1/Ab3adxZw74y5N8CZr7AG1hdF+YMTtK9KR2TGAUHP4iB2MIIavXr1a7d+vf/1rJCcnq+dbtmzB
mjVr0N4uOuPHddddJ+YX8gl7mgtbGAjHP/jBD8QyQl3FxcXsml0lyAfXMoERI5grF+FiYrmQT5+n
tK4daXHSihilDn5nAkyACTABJsAEmAATYAJMgAkwASbABJgAE2ACTIAJMAEmwASYwMgh0Iv6ygo0
tNrELgWEm5GSHAs/5w7ae9FLSrSPnx+EnbRb6ivR3E5CbmIKok0e9ta22VBGArYQ5i9MdxDLxUhD
ABYvn4yaZw/jPcrXebYTXZQgulO329Fjp/Z8DW4E9Avo6fs7YDDA37lpyi/sh97T1onKZhu6qc+B
ISb8f/beBD7L6s77/smdfSWEkEAWEhIgSAyKLGVVEChjsSjuWkdxRKyOU9vHzjhPx8772meedl77
zNjO29alo1JL0aIoJVUqCooiRRAMBokQSMgCCSGEhOwLPv9z3fe13Fty31c2lt/5EO5rOcv/fM96
nf9Zxo+Otvjjci/2IsS+L9PV0a0p3r3C7+5ExXGRU2SDIwRJI2MwMtLHpske8p86eQa1Z88hYcxw
pLjsKxkP1bSiU7zqxDCkpo5Aeoy7XyPTR2KkLwG1Z92oqKhHlSjUlVHxnJAe6/M8+DaJD3CZxFf5
341qYV3ffg4hjlCMHhOLGN8YlLe9mo8//hjl5eWaveXLl+Ouu+4y3KhV5bfddptxry6+/vpr/Pd/
/7f27LnnntN+lZs33ngDGzdu1PxSfi5ZskR7x/9I4FImcN4pzP/9zS+CSo+Nn5ZjYxAu7Jx93iWN
TeVpqQhlq5GRSdF9qtCCEHXwrHZ0oEZrdS7D8BER3g304Ely/ofkh1WXPK8jw/M//SjhBU2gu7UR
jar3LiYiLgGRfehcXtAgLjjhO1BffRrtknThI5KQMOQJZ1+ejuZa+eDqlo/VKCSlxMHR3YHGxmb5
9LFjHIiOi4Ofb0U7Hvp1093aLGVHfTWHIS4hWvvY9mv5An7hlT4XSFwulfS5QJLDj5jdUo/Vol1K
uyNqBJLi7J/15yeAQXvc3VqP2tOyokQGu+KTktiWDhp5BkQCJEACJEACJHDhErD/DXnhxpmSDwSB
5opP8Oufr0FJm6fvKVj2yCO4IV8/M7sZm576AQqqgYwld2Fmw1as3yU3YuY+8jTuyfezO6+sHk4O
A4rk898rCCPISCyYGYude1sRPTrKpeztxGvP/RW/lWPPs6dPwrNL3FXGB7fuxT/sFAV/dDLefGwC
Ygy/5KK5Ab//01689kWz9anYjcXP7snH1YnDcFjcP6zci3ngb2fj9nT3Ab22E6W44cVK7f31N0zD
9/Od31sVBw7hf75VA2fMtdfaf3m5afinG7OQYnhjyp83fSwWnq12raIHbrplBh7O6cKG1w/gNyVq
Zb27mTN9PJ5YkmJw2PDCX/Gbk4rDZOEwwrDcdKIK//b7o9ijhlbcTDgeuGUybp8YbTxtKjuEm9bW
yH0kvrs4Du9uqcER4626GIbbb7wSD0w23bi97uXms88+M2w8+OCDxrW6+P73v2/c33vvvdr1mjVr
tN/f//732spytcpcGeVWKcyVUX5SYa6h4H+XOIHzTmE+0Omhn33+nWuyAw6q+KODeGK/c+bQzSuu
xMpxzkolYA/Oc4vFHxTh8Ys4fv2J3x8r9dzMI1dJHjG3u+nP8OkXCVzKBMp3vIqNRS0agtzlq7A0
y17H8lJmOCRxby3H+lcLoFIuNHc5HllqbhN1oclTtfNNVx6MwrLVDyK1ejte3FhkOxp5ko8XDUI+
Lt+x1k3unAtX19cja8/0uVDieamkT4+Jd76/1OqxjVo9htA8rH5kkQx9XJimfMd6oy0drDrowiRF
qUmABEiABEiABEjAReB8+6ZlwlyQBJpLN+MHP3vTkD0iJQOjcBLl1Uq1XY2CXz2Jqnv/FQ/NHqPZ
0fWy5e/+Ac61xC6nPQ05y4KuMpfDHVv249dd2ViRn4QUj+XMk+ZfiVfmG6K4XzhVIL6f+VKJdDSL
stxlXVZTx3acw1l123wWTzy7Bz/53gxMy0sCdjpjUbCvThTm+sQAp7sD+2pdHoRj1jjnl9bB7Z/j
Hz7SfNLexUaLGqu5S/O7qLgS9/xXO155LNc4l11XhRftPga3UZqQbmz63V785rgrCFn3np0AHKl3
RnTH7sNYJUnwyrdTNAtNavm5Ml3m+e5NFaW46XdOhb56FZsQibEynbqoXtlpx29f34vSv7kST0yN
Va8tphW/2eKcKGB5KJfn8Npbn2NcyiwslAkFwRqrwvzqq682nLe1tSExMRFz585Fbm4unn32We1d
cXExdu3ahXDZrUCtNteN1a3VT/09f0ngUiRwySnMVSLr56UHmuAhIQqTr9YiUB/Oc3sXcPxKthfh
sU+VGiYCP3skH3kDPXrph1VIiLVxMxueoUj5QWcyFJFkmJckAYdsHQWnusKyrVPfUFR9vA7r99SI
J4lYvvoeZA10HdI3cfvkesjiKqsY9ZSLOh96HX2Qx8yDof2ySrvL3tL0oPNBf8sdtACD5OBCjeeF
KvcgJeugBuO3npSVC3o9hihjGcOAy+ZXnt5C7ijHul9vgNa6TVmBexZkGC7M/GY84gUJkAAJkAAJ
kAAJkEBPBPrwDdmTt3x3KRE4jQ3PmMryJat/gpunOpXGjaUf4v/87A/aKup9a9bi8NU/xHjZn91d
Nz0cC+66G3PGp2BEsp/V5Qpn5AjcnTMMT5UoRe45vLntsPYXGx2JGePiMCN7BMbL0bbpw3vSuveQ
LroW38tKCL57Sx5WTFQK43b85Y1C/Fw7J70dv9parSmjb48ux2uyCL36i2pUfHsU0g0/zmLLPpe6
e0wKpqnl63VV+JGuLA+LxU/unYxvjBKZ5Qz2Des+x2+OiZ5GdgD8xSdj8NPZTh7uW9qH4PbF2bgu
MxpJUU143KUsnzZrEn6ycKRzTLHjLH63Zj9eOXlOZDqFalGYK5W5uz9KyFb87lVTWX7PjVPxt66V
4WcqyvHE745pq8fff+cwludNxST3hFMe4LoFk/D3M0fKrsWd2PqnffjpFyq+53D0TLcthfmePXs0
f9PS0jBypLkbQEREBNSW7FZTWFionU+unt1+++2a0lx/r9wqPyorK6H7qb/jLwlcqgTOh6HrS5U9
490PBLqM2V7ntPNH+sFLW16ERKiOhnNSxYjwwRtI9SXs+cLEl2x8RgLnG4HuTn0yVJfNbbXPtxj5
l+dSiqt/Cv37JmzUBMyc4kB3qPVjU9qAtirsKTI/qJLzpiFTDvWy6sc7Ox3IHi0PaUiABM4bAgHV
k/qKg0GQOiB5fMoh5w+6nnfJWX40JEACJEACJEACJEACJEACQ0egveJTfOzqoOfc9C+GslxJFJd1
Df7xsVP4wTPvyl0JPvuqEePzrWPLEbjpiadkl0VvVa53jIZh3u1T8d3X1Pbj5srms82teP8L9aem
1IoJi8QD35yA2/1t7e60FfD/t98xDSuy9XGRcHzz5imoeOZTQ0Fe+q0UXDcjFq9tUyvGG7C7ohvp
rm3Z28pO4n1XSLfPTtaU2X/9oNy5Sl3U1z/57pX4hr4HvCykWfGdqTj9a/Fbto/fc6AOTaIw1187
vRmG7/7tDKzQt33vaDV2B4uPCTcX4Igi/q5l6dj3ZrWoxM9BHSmfomZJe5i2E9Xaee/q8bR5Uwxl
ubofnp6Bn9/RhpteVVybsaO0HZMmuqdT3qzJeGK2vrV7KBYuHYc/fnFQU7IfqZIZBNnaCfLKu4BN
U1OTZjcmxj3mVg+65Tvwscce01aZq1Xll19+udt27bpd3Q/dT/05f0ngUiVAhfmlmvIXYbz1Znko
opYzezIKZg9FyD2HOZRMepaMb0ng/CNg/Rw5/6TrX4kupbj2Lzl33xzRGZhlWblpvO2uQmnRetRp
DxIxZ8FcZBC6gYcXJHAhEOipyKr1GoNtepLHlyzGR16wDn15xmckQAIkQAIkQAIkQAIkQAK2CZw8
8IXLbQq+Oc9cW617GD3uclnd/K62yvzgl1VAvrlDFFIWYV5AynLdN1Eq3z4N3246iz1fnsLe0nrZ
Db0Z1dbV4aJE/u2mQmyr9j6vXPcl4N/oJNxiKMt1V+FYNj8er73TIA86cFrCvjpfVnCLwlydR/7u
F/Wi0HaujP58vxwYrplYXJejlM3tOFThWtwSFoPErlZUyypw5zZ/5xASPgzaIntRmKO53XtP4IQU
LNGV5U6PRSHuNO9v+RwHDiTgtikjkTdWVtqPzsB/Pmxh7bJn/TlxWAWkTDhume69uj8mfQSyZW+v
I2Jjz5GzeMBNYR6O22foynLNE5msEIvZ2pbwQH2TvojH9S7AH7WV+vvvv4+vvvoKLS0tiIqK8nKp
Vo2r7dl/9KMfISMjA+o8c4fslmE1yq3yQxnr9uxWO7wmgUuNgDGWcqlF3G58w0JUxdKNsvLTOFzb
js6uYYiODkd25nCkeZwHYg2jvakZhyvO4kRjl7YSOjQiHOnJschJiTBnNukOZAZQnXFghv7Q9294
TIRs5+H9zhleE+o61PbglyFxZIxsuRLtY1sRb7e+nrQ3NOKvxWdwst253Xh0dAQmZI1Azgj/Ktmg
4mwJtOF0I4pKG3FKdicJDQ9BfFQoUqUlzLSGJYyaOhQnvWE5h7qGDsg/RMSHBR1PO/GziCxZQsmj
hk+HISbSR4JolrtRWdWAY6c6tMY8JCwMY8fEIy3et/2mpja0y6Kg8EhJY9nOpau1DSWVDahpcaZp
XEIMLs+wpGk/MQk6XDcQ+k2Ace3ulDSUSIpRPOIjrVvbSxdJGLheI0byuufifeO9IxSJvgqCLg5/
L24CsiVTY7Ms+ZN8ECfbTKk6urG6ChUnz2greh1hURg1JgNJcZZ9kbo70NrRCTXL1mnkuqEZypvQ
uGiPra+key9bPVVVnMRZqXdULz02cRRSU5O87Lk8M366xV35iTq0S1UVEhKFxNGpSIh2tiNSZDW/
rP3V1uZGdMpzR0Q0osMc6GiswuGyGvlciELO5FzEWaoLp0wnUH+23RnP8FiMHDUGqSlx7tuFBxlX
9TFTW1WFk3VnXfxihV+qOz8jhtYL+YgpPYY6OSVDxSk8NtHJSG70mtpqO9DrgOPp5aF9eToaq3G0
QtTdKiIh4Ugc5Yy/Bb9XaG4PhLlpZPcCdetjprLTjpP3iZp6qfNV4kv+ihuJMampiPPbnojL7mZU
lZbheG2jylwIlw+kKI15CnpyZsplXnW3qryvZUgpRhGIjrSUFdOaz6tg00fP46ERcVDBdLc2oqqq
AmdaVPgORA0fJR9zPZetPqePioleb6hQQ6W8eUDrkLLY5kSCiOg4SHF0M8Z7R4TUO568bKapWwjm
Te/pE0yZ7UZrc7NbPWOG5LqSDNvc3Cbl34EIa32o1SUqj4ZJ2gkQyYPlkgdP1bdodqMSkjEuJ9V/
VvcKyP1Bc30VykqPo1H6fyFytpr66E9MTkWKnA/n33SjtrQYJVX1Wn2l5SEZIMkZnwVrle/fveuN
FrcA2wTZUUL1frV8WHYcZ6Wz5nCEI27k6N7zrtaWDES9bcawo7UVnQ1njUGhTjk7sFnKuLRuXmXb
Ie2mqvOry4/i+Cmp87sdUpfEYXSmtJle+doMQ10F1S7q5U3Ci5Z2Wlo3VJUcRo0kdlRyDnJT3Qee
gvLbXawe7oIsl0MlsyXcgPs0XrHup3Lh8levt/u1b+Ils8oTxXKGZ6OzLEuZSkga02udYiuv9GP7
6RUNPiABEiABEhg0AsF+hwQmWB++IYPo5zn72r6/Q3Q5u+Vc6Gbtg0T65NEyRuHxPaLb8/4Nss9j
8SDY8QvTaf/2PUx/L54rY0xkeD5kl3BvE56IHFloXH3G+1XKpBz4cuJt0/1JSEwsviGrur8xIwsP
y6u2plaUHjuJjR9W4n3t7G05x1vO7/5oxkjMC36RsxmYnFvuS8E0fITaUU8pzNWXiJiYJNw25jB+
eVzCPVCN6utHIqW7EZu/cNJJuWoMsrR8LmPrKsLqE6ajDg//yrkUQXnhZZrrcUSG9a62fDJmZ8a7
rzgPG4nvzYs1zkOvPl4vMuhK8BDMkXDvXTDW7xGNRtpFD0e2JRxDFlmtny/yHlHy+jDeJ3oNC1pv
4emtrjBXK8c///xzzJ4929OKpiy/7777tOdq63VPZbl6odzqZ5pTYa6h4n8k4LM+I5YeCJwoq8S/
vVmDnT62Y5yUn4WfLklyh9p6Fmv/dATrKqyD55YAZGB61Q3jsXycWeMWf/gFHt/rx77FqboclZ+D
F5dYZipJh2p9wWGsOerLfQhuWDAOq68OphXsxIdvH8TTX+obO1oE2HYMo9KT8dNbxiLZ2nGzEWfN
Vzk7ZO36w1h3wmiKLIEBWRPS8NNvj9EaPW9GXXj6959r9m9ecSVWjvMcvHbzynJjI34W1/qlVZ47
b7sKd2e4TySoPHgM//7nGpTqDiy/o0Yn4h+XZyPXuotKx2n887Mlmv2sqVm4P/oUntTPbrG4VWe3
/1DOcbkmyQGrDE4rNpjYCNdNHLkJJq6Vnx/CQ9tcPYpxY1GwItniXSuef/YL/MX1ZNLsSXh6tjoL
RzfW91F45vt5yLHmQ90afy96AuXbX8WGQtUJT8TiFdNxePNmlInS1tPE5y7G3Usna0ru8u1rXW50
Wy3Y+uoL2Cq3ectXYVGW63OkoxYfv12APWXOTr5u2/kbhdz5S7F0qq/ZqK048N5b2FJU4+5E7pKn
LEY+9mNLobyLmoLVDy5wKpg6SvHqCxu1z4n4KcuwJLEY67eWuNxHIW68KMxVU9FajW1/fgeFMoHG
pwlNxMzrl2FWVoL2OuC4iu3a4o9RsHmP65PG3feo5Dws/fYiyDwdL9NatR+vr9/qWlFtfS2rqxdP
dm8Xra97ug4ynlav7MvTiv2bX8fWYu8PsvjcObja11egNeAgr6sPbMOfthTCR3bVfErMmYllfzML
CR51W8/u4jH/1jswNdXsV/QkVmvVbry4fod5rEnaQjx6S777pAtfHthJH7c8vhTzYopRsKPMh++J
WHj37chP8mzL+y99agv/jLXbK51hZy7GYzdOtshRj3dfWCOb4TlN4sw7cM+sFD/vk3Hro3ci1ZVG
PaeN1FJ+0tTiudtlb+kTdJmVs61fkXpGy3PW+scSqrXOMOvDVnz8u+ewR6t2pI6Zn4Xi7b7qCsl/
K27DVF8VhSUMt8sOqdPe+BMKa3yXhPic+bhj2VQvRXxH7QH86Y9bUOmjT759S6jUzzf4qZ/dQtdu
rHF2vvVoE1Ktbs7g0/fWybEL3vW7aoeW3nsXcj0LbZDlpVd59DbKKpa6lvRd+9wGtzq8pWQrXpA/
hOZh9SOL3Fw0lH+K1zft8ckwMW8p7lqU610X2GgXre30sruvQfGbG1DiSu7Q3DhTYW7Db7cI+bmx
Uy6HSmZruIH2aazR7s9yofnrVm/3X9/EKnNrtfQhXvXVh1C2ojBt2a2Ym+Ps0xjubOaVnvNCcO2n
IQsvSIAESIAEBpdAkP2qQIWz/Q0ZpDyNh9/Fi5tdXxpReVj14CIfytBW7Fz7gqvvDeQuW4WlOT4+
xD0i13M719O3iI3xC1fY/d738IjTxXIbHukazxQdssfnvTOK7Q0o96EsDzb+FfuPYO3hZlnAMBLf
XTJGRo1NExETiUmTx2p/17+7B/9jt1pA0oWvatpFYe6+gMl01Zcrz5g6MG9GIn75loy3dNRjtyws
/5uWauxwBXHbNP0sbpHFMvaSPUpWnfv45lPOmkOHI5Chj0nzr8Sbk0/j3R2VePdog0W53YUd+8rl
rw6//IGcP+5jGCUiwiWMDE9YxDLBdLRDkA+qsSq3N27c6FNh/vrrr+OBBx7Q5Prtb38LXXluFVS5
1Y3VT/0Zf0ngUiQwELXhRc3xg099K8tVpA/uL8VvivTViupJG1566aB/Zbmy0tmGFzZ8gberXcuY
5JF5BrWy0Ivpcq741mx1NOLffnnAj7Jc2ejCpm2H8OhWb0WA71A6sP7lfb6V5S4HJytq8HevVsrq
R93Yi7PG6rfCyo+yXPleeqgSd6ythPOUDj08719tAaj3Yx9P7MTPhzfaI7ModVjTRN6V7DqAh/wo
y5XTk7L69PFn92OfR8T0Tk3p3lI/ynLlug1PrymRjV96NoEzUSp4p7ETbrBxTRGFnjFPoKLRXdkm
uxronSYl0cHSBks+kwcNDeb70cOR6dkPc0aD/18SBPQuax22bPCtLFcYGoq34O39+ixS/2C69Oq4
owqv/3qtH2W5ct8iCqMNeGmbrlbT/WzGznXP+VSWKxs1hVucynJ14z63xuh8NxQWWJTlyqJuGvHe
K6/6V5Yra5112LVxDXa77belu3f/NeIqj6t2v461fpTlylVLTRE2vPAKSjw+BFrLd+I5n8py5aoO
O7Zsdy/b6nGvxn487csjgxKSbr6U5UrchuId2FoUaPvZawTRWPIeXu1BWa58qCvZhTVv7pW1mKZp
LN7ci7sGbF//HHZWWfsjpnvrlWJlVZaHps3B6kCU5bCfPnppbSjc7EdZriSsw9a178K9tPZv+ozI
GmcWP1nhLuv0TdN4HMfMO9SVVbilARorzPeyOjbF1f7YTVNLUG6XvaWP3TJrHQNQe+N4Gz2V3N84
xyhUpSV1jE9lubIv+W/DC9hW6lFRuHtluZO89LLUaX6U5ZqPJdvx3Lrdxopp9Uyx+fVa38pyp+ed
Wv38q9fdy4/zXXD/W+tJLdM0lPhRlit/67D5D1s88q798uJLUjd5vCx0+xtL0mx6pnfZHt/KcmW5
rmgz3jngXgphu13U81QdCtaaynI38W377eaL1439cjlUMpvhBtunGahyoUs0EH2T5tKP8ZxfZblK
zhbsKViDndY+jc280p/tp1dG4wMSIAESIIFBItC//SpdaNWG2vumDV6euLG5iNcDbvkKR9w+RFwv
mo/hS22iqrpPxETZMbQ3Y7/PY3/8YqD6Hr3F9UJ833DihFPs6qM4qY85WSMi247r3/1ql1i7pr6y
Du8XN+Dt3dWQY8L9msuvSDTf6Z09/YnnvTxvaPOjsVZumjt8jtWfOK7OK3c3w3PHYJrr0dbiU7Jl
vGuWQHQy5o3Sx9bPQRbDayY2JxvPrpqBZx/2+Ft9NX72t1Pwm/snyFb2vRjZye/UmVZ0RQ3Him/n
49nH5mHT96bilzeOxfWj9Mg2Y1u5qd2w+lh/yrWIsL4JJ3wx7e4yvlVThntO+rf61H/Xc+fORUSE
cwT/P//zP/HZZ58F7blyo9wqo/xSftKQAAn4mRhDML0RCMOqb43DtWoPlaYz+N1bR/AXV0fmLztP
4sG8sdrWGu3lJ/CGsVgmBKuWT8S3xkeLQkS2D6+uxx82me5e39+A61OcK8XHTxuHf06WStpDARgl
E6re3ngMOy3izRP/nOYctqwvtrxzynjdhBhEyEynbVu+wi8OOZve0r0y2ywnzmsVtMVb7bLsk0NY
c8p8esOCHNxxxXCZ+diFL/YcwZOfuBq+E8exuXo0lsuIsd04N1lZxcfjZzdmIU+tLJMtu4uLyvH/
bKlzNr4nTuLLpjTMmHs5/vvKTuz/QOJ1tEuEDMHDt03UtmCJHhFY42QnfiaNwK66aivx2EfmoHHW
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
F+r4Bc8wH/y8whBJgARI4GImQIX5xZy6jBsJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJ
XGQEqDC/yBKU0SEBEiCBISbALdmHOAEYPAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQ
AAmQAAmQAAmQwNAQoMJ8aLgzVBIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIg
ARIggSEmQIX5ECcAgycBEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEhga
AlSYDw13hkoCJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJDDEBKgwH+IE
YPAkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAJDQ4AK86HhzlBJgARI
gARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgASGmAAV5kOcAAyeBEiABEiABEiA
BEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEhgaAhQYT403BkqCZAACZAACZAACZAACZAA
CZAACZAACZAACZAACZAACZAACZAACZAACZDAEBOgwnyIE4DBkwAJkAAJkAAJkAAJkAAJkAAJkAAJ
kAAJkAAJkAAJkAAJkAAJkAAJkAAJDA0BKsyHhjtDJQESIAESIAESIAESIAESIAESIAESIAESIAES
IAESIAESIAESIAESIAESGGICVJgPcQIweBIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIg
ARIgARIgARIggaEhQIX50HBnqCRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRA
AiRAAkNMgArzIU4ABk8CJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJDA0
BKgwHxruDJUESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESGCICVBhPsQJ
wOBJgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgASGhgAV5kPDnaGSAAmQ
AAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAkMMQEqzIc4ARg8CZAACZAACZAA
CZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZDA0BAIsRtsS0uLXad0RwIkQAIkQAIkQAIk
QAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAJDToArzIc8CSgACZAACZAACZAACZAACZAA
CZAACZAACZAACZAACZAACZAACZAACZAACZDAUBCwvcI8KipqKORlmCRAAiRAAiRAAiRAAiRAAiRA
AiRAAiRAAiRAAiRAAiRAApcwgfr6+ks49ow6CZAACZBAfxPgCvP+Jkr/SIAESIAESIAESIAESIAE
SIAESIAESIAESIAESIAESIAESIAESIAESIAELggCVJhfEMlEIUmABEiABEiABEiABEiABEiABEiA
BEiABEiABEiABEiABEiABEiABEiABPqbABXm/U2U/pEACZAACZAACZAACZAACZAACZAACZAACZAA
CZAACZAACZAACZAACZAACVwQBGyfYX5BxI5CkgAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJ
kAAJkMAQEjh37hyam5vR1NSk/XZ0dAyhNAyaBEiABM5fAmFhYYiOjkZMTIz2O2zY4Kz9psL8/M0T
lIwESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESOACJtDZ2YnS0lJ0dXVdwLGg6CRAAiQw
OATUhCL1V19fj5CQEGRlZSE0NHTAA6fCfMARMwASIAESIAESIAESIAESIAESIAESIAESIAESIAES
IAESIIFLjcDXX3+NyspKTVmuFD5xcXHan1pBSUMCJEACJOBNQCnLGxsbtT814UjVoZmZmbjsssu8
Lffjk8FZx96PAtMrEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEjjfCagVkq2trVAK
cqXwGTlypHZ9vstN+UiABEhgqAio+lLVlarOVNeqDlV16UAbKswHmjD9JwESIAESIAESIAESIAES
IAESIAESIAESIAESIAESIAESuOQInDlzRouzUv4M1jm8lxxkRpgESOCiJKDqTFV3KqPXpQMZUW7J
PpB06TcJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkMAlSaC9vV2Ld1RUFNT27DQkQAIk
QAKBE1B1pzJ6XRq4y+BtcoV58MzoggRIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgAR6
JKArybm6vEdMfEkCJEACPgnodadel/q01E8PqTDvJ5D0hgRIgARIgARIgARIgARIgARIgARIgARI
gARIgARIgARIgARIgARIgARI4MIiQIX5hZVelJYESIAESIAESIAESIAESIAESIAESIAESIAESIAE
SIAESIAESIAESIAESKCfCPAM834CSW9IgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARI
wJPAYGwn7Bkm70mABEiABAInwBXmgbOiTRIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIg
ARIgARIgARIggYuIABXmF1FiMiokQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIk
QAIkQAKBEzhvtmQ/Ud+C9/efQNXploCkTx0RhevyR2N0QlRA9mmJBEiABEiABEiABEiABEiABEiA
BEiABEiABEiABEiABEiABAabwIWyJfvBgwfxzDPP4IsvvhhURFdccQUee+wxTJo0aVDDZWAkQAIk
oBM4b1aYB6MsV8IrxbpyQ0MCJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJNA3AkOh
LFcSKwW9CpuGBEiABIaKwHmzwlxfWX7TzLGYMCauRx6HjjfizV3HAl6N3qNnfEkCJEACJEACJEAC
JEACJEACJEACJEACJEACJEACJEACJEAClzgBfWX5J598MqgkZs+ebXtVe1P1YXz66R58WV7nkjkM
MaNTMHH8FZh0eRaG+9GCdTWdQsWJs4DrfWTCaKQMjxjUeA9uYG04vL8IDR3OUDsRhSumXY6YwRCi
qwkVFbXo6iWskMhYJAwfjpgIP4nWi/uBed2FM9Wn0KZ7HhKDlJGDQk0Pkb+DROB8ynValHtTlitL
VjvFVQ3ITY0fJFwMhgRIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIYEgJNB3Gy//+
L3j+/YoexZhz14/xT3+/FCM9bB36wyN44GXT7fC7fom3/36ah62L6LapCP/y0D/AjHE6fvnua5g2
CLrfpi//gNsfejlgmOlTl2H1ww9i4eWeqRawF/1nse1LrF7xkBu3Z4VbfoDc2prOoE2fKRASgeEx
F/OkjP7DPhQ+nXcK839/M7izMTZ+Wo6NQZCzc/Z5V2srKk9LjnYMw8ikaMQ4ggjwQrDa0YGapm6R
9DIMHxGB8AtB5qGS0Q+rLnleR4ZDlSoM9xIh0N3aiMY2VVcBEXEJiLzY6uKLNh07UF99Gu2SdOEj
kpAw5AlnX56O5lrUnu2GQ2bgJqXEwdHdgcbGZjhzZbAJ6EB0XBzCBiEfd7c2S9lR04fDEJcQLfJf
nMYrfS6QaF4q6XOBJIcfMbulHqtFu5R2R9QIJMVF+rF3/j/ubq1H7el2+a5xID4piW3p+Z9klJAE
SIAESIAESGDICdj/hhxy0SnAeUXgQjnDXIfWV3lPnDiBffv2Ye/evdpvdXW17rXb744dO9zuAw33
zJebsHrVz1Dp5tr3zY4/PIVvv30Av9/4A2RZNGJfhyWJgwrD0eiwUAQavuHoQrpwhMI9xjEI/fpr
ifPAR+JrR1hQgVTsLcC/PFCAbz3xMv7nDeODctvvlgWQJzeVTwLi1rYfjyz5Lg4aQk3Cb/7y24CV
7YYzXgwKAUv1MCjhDXkg+tnn37kmO2BZij86iCf2O6eA3LziSqwcF1zhDjigIbJY/EERHr+I49ef
WP2xUs/NPHKV5JHQ/gyWfpEACQiB8h2vYmNRi8Yid/kqLM2KJpcLgUBrOda/WgCVcqG5y/HI0qyh
lboP8lTtfNOVB6Pwf9l7E/iqqnP9/5HMAxkIIcGEkMABAkQQZCgyKAiUaiyCWrFqrVak1Xqr99pb
/fW22tY61H689rbaKv6xaCm0KIiioigqEhFFbGiAKJGEkEBCCCEhExnw/+59zp7OkJyzcxISeLaG
s/baa3jXdw177fWuIXfZ7Uir2IoVGwpspydHyvHcHijHpXmrLHI7+q6ur0PW7vnTV9J5ruRPh5nX
2x+q7cYGtR1DWA6W3TkXfbUaleat1d+lPdUG9fbspXwkQAIkQAIkQAIk0CGBLnxDdhguH5LAWUig
qqoKmzZtwltvvYXi4uJuS2FbxRbcIMryE4HEcOJl3PjD8/HWc0t6ZgvyQGTrKbdtrThqieskWi33
ve/m9Ue/j7iEl/Hjmam9Tzg/Jeqr4wd+Ju+scnbOKcyV3NPOS/c3J0NDFUzangn++upD7vpw+oq2
FuDuTxQ1TCQevXMccrq79fHBKjS0nynDe2BKlik2d2OPM3EXgPck0E0EQkKUCu5UmAfr5VW+bTXW
7qyUcJOwcNlNyOruNqSb2PgT7BlLq6xi1HIuOlgZ50+CfbnpgjxGGQwLyirtNntL032lzKd9sOX2
GdEZftBX09lX5T7D2d0t0ftsJ2VbBq0dQ3TP7dHgU57OUt9SitVPr4P6dhu/GDfNztB9GOVNt6KB
BEiABEiABEiABEigIwJd+IbsKFg+I4GzicC//vUvPP/88+pq8tOnT3dz0urx0m9/4UVZnoDr7/sF
rpicidCmo/hk/XI88fIuqyz7/ohnP5yL/5zZC7b5tkrWM3exo/DzR3+DYy4teQviMfQM7g5+2e33
4eIBcCntW3D84Bd4Y/XrHrsGrL7vCXzzg99hRG8YVww4p9yFltEFd6uAw6SH7iLArOkusgy3Rwi0
tWkv4NNndDZUaKSyotw5qWJARM8NpHqD3FuYeJONdiTQ2wi0t2qTodpsbqvd21LkW55zKa2+KQT3
SfigkZg6PgTtYeZdReQd0FyOnQVlemQpOZOQKR8gZv14a2sIhg8+g18lunQ0kAAJaAT8aid7cPq9
X/Jowlt+29Hsum9rN7c8Fke8IQESIAESIAESIAESIAES6EECfW2rb3/k3b9/P5555hl8/PHHtkm6
x+N+7x5w8/638Ec3PTgwEY+89ARmpmrqrhSk3/N/mDVrJa76yXJLEC//dTOWznCuMnffUluJ21v8
J4o/w4b1/8SHnxxEvbo+vV7CjMX4yy7HNYsux4iBnuM7zceKsefgcYTJf63y36BRF2FI5DF8+Obr
2LbzgOubLR6jp12CuXMvwkBNdIu0yk0z9n+8GW+/V4DSE7KmvkmWDiamYPSkyZg+cxqGJPj06BGS
nM2F2AFJ+FobDpWp4REhxtbiwZPZM2pPrhNx3XdzMcZN/O/duRTrfvZ9PJFn3j8gD69+VOUx0aH5
2H5sfv1tFBwoxQn1IzgSKRmjMXnmdEwbN8S3Xrq5Ah9ufgvvbPsMNcJTuaKiBsMxIQdTp8/EuCEJ
TkvtX/eCAmc50a3bTmDv3lJRhGuJEcBhSRgQeRpNNftwQAtH/T2A/V8cQEL/UCQOGYJYzYvLTeBl
rR57Py5Anct/WJwDF8m57xV7P8Rb723DgaMKmEikj5+BBfNnYoif5667gjvnftyy45xLPxN8FhEw
qyt6OlmOi8di48U9HWvn8Z1JJp1LRxck0LsInNmpLj3L4lxKa3eSDYnJwDTTyk09rvZyFBesRbVq
kYTps2cgg9B1PDSQQF8g0FGV1aZr9mQ6OpLHmxz6R16gHr0FRjsSIAESIAESIAESIAESIAESMBFQ
lJ+rVq3Cs88+i+5fUW6KWBasffS3FWYL1Xzz0782KcuNxwMvugH/M305Hsoz7FD4Cg7UL/HzDOl6
bHnq/+GXqz009GqAZSsL8frKJ3DFfz6N+xePM0UCfLn+fvxkZZlhlz4dE+vzsMusB5an7767Dn96
KB0/e/Y5XDnGqs1sq/gMv7ntJ3jXzY8SqOrvMeAyiftXbnEbkbqZ6vfg/tt/YlrBnY4/bFqDi1zR
BkNmtxg7uG1Em6LLtSZZLAZi8a8exhtz70Chyfe6d3biP2YucCnB2/DZmt/gJ3961+TCZcx7F+tW
/wlIuAxP/+1XGOem+z708Ur86N7lXnYoAPLyXsfKPz2GhOk/xnOPLUGqZ+hebOqx7ue5ouB3e3Tp
rUh7fwXK3awhMT9xx02q7fVPb8SduoA2y1r9F/j1vfcaeZowHddPr8bq1830JLp3JW1PJODm3/8Z
S78xxEMqWjgJ6GMpBOIfgfBQZdSpHSWlx7G/6hRa2/ohJiYCwzMTkB7re0TqVH0D9h86iSN1bepK
6LDICAxJ6Q9HaqTnTBdZCVJd79/ylYjYSHiL1hlfPapblO3Bz0PSwFiMSItBhH/J9HB1qrYOHxee
wNFTzu3GY2IiMTJrABwDfKtkA0qzKcba43UoKK7DsVMyESciFPHRYUhLiUOmOS5hVN+icNKmQ51G
dW0L5H9ExocHnE476TOJLEVCkUcZPu2H2Chf5aAdZeW1OHisRV2LHhoejqHnxyM93rv7+vpmnJJF
QRFRksfhsn69qRlFZbWobHTmaVxiLMZkmPI0yEws6eMNCfRmAu1NqGuQNjMkDHExyqa57airKMeh
oyfUFb0h4dEYdH4GkuOkImlXewuaWlpxssE1jVBa5pO1DVCCCYuLgcml6qOloQrlh47ipLQ7ymzM
/kmDkJaW7OFOC177bRd/pUeqcUqaqtDQaCQNTkNijPM9IlVWDUt2d9OvpoY6tIp9SGQMYsJD0FJX
jv0llTiFaDjGZiPO5NYp0xHUnDzlTGdEfwwcdD7SUuOs24UHmFagBVXl5ThafdLFr7/wS7Py0yU2
G5pQUXwQ1bJrvpKmiP5JTkZyo7XUZtf+mv1Op0eA9uVpqavAgUOi7lYSEhqBpEHO9Jvwe8RmsRDm
xiW7Fyi3StH0ejl5H6mskTZfyXwpX3EDcX5aGuJ8vk8koPYGlBeX4HCVzCGVGawR0dGIVpmnoiNv
3kRob1LKvlogpRpFIibKvQZ48+W0CzR/tDIeFhkHJZr2pjqUlx/CiUYl/hBEJwxCRkbHdavL+aOI
rrUbSqxhUt/coLVIXWx2IkFkTBykOlou/XlIpLQ77rxs5qklBuOm8/wJpM62o6mhwdLOGDG5TFJg
Gxqapf6HINLcHqptiVJGwyXvBIiUwVIpg8dqGlW30TLDfZgjzXdR94jIatFQU46S4sOok/5faEQE
oqVMJ6WkITXRZ+WRANpRVVyIovIatb1Sy1BiKhwjsmBu8q0xeblT0+bnO0F2lFB6v2o5LDmMk9JZ
CwmJQNzAwZ2XXfVd0h3ttpGmlqYmtNaeVBYdqFdrw0k0SB2Xt5tH3Q6R96bS5leUHsDhY9Lmt4dI
WxKHwZnyzvQo187wtH8Dei9q9U3ii5H3tLzdUF60H5WS2dEpDmSnxWnBqr8BhW3x2dFNgPXyTMls
itfvPo1HsoNUL1zhau12UPsmHjIrZaIQpRV1zrosdSox+fxO2xRbZSWI70+PZNCCBEiABEigxwgE
+h3in2Bd+IYMoJ/n7Gt7/w7R5GxvkW809YNE+uQxMkbh9j2iufP8DbDPYwog0PELw2tw+x5GuDT1
VgIN8k35m9/8Btu2bTsDIjbjULmb9jhhMa7UlY7uIoXi0nueRuuMgwhTdweUtd7hQzHMQ0nr7k+5
F0XozxZ4KkK9OH39iTvwVfXv8dzSb+hPQ8MHidmpMFd0tifKRFmeoJp0N4ahDI/d/jiy3/kVRrgW
q7dVfIgbr7nfUIQaji2mdyXuZjyPxxaPsNh7vQkNgyGV4iJW/b7V3HZVZi2cLv9GjsE1lyXgIfNM
gS8OSY6IHlxGGT984kbcv840GcFbhCfexR25wPMmpvX71+F6UZZ3dp3I+xNue2QQXrl/jqfuzuVZ
0959/NTdnmVk4n9i430O3CsK844uYzSpC2XNnKdq8coTZbmvWE9g5b3X4+QjL8lq/VRfjs5peyrM
A8z+IyVl+O36SmzXaoTJ/+hxWXhkfrK1EjWdxKpXv8LqQ+bBc5MnGZheeuUILBxmDAYWfvBv3LvL
h3uTV8U4aJwDK+bLQQ/aJR2qtRv3Y+UBb/5DceXsYVh2kVJz/L1a8cEb+/D43mZPD+8dxKAhKXjk
mqFIMXfcbKRZDbxFWK3dj9VHvKtWskam45Fvn69OOvJk1IbH//YvNZirF1+IW4YZzY2n4GYbG+kz
e3eZzfJc/50JuCHDOpGgbN9BPPZ6JYq9+B00OAn/vXA4ss0v6pbjuP8vRar7rIlZuDXmGH7x4Ukv
viPx05vH4pLkEJhlcDq0y8RLNLQigV5MoHTrGqzLrxUJkzBv8WTs37QJJc6jzi1Sx2fPww0LxqpK
7tKtq1x+NCeN2LJmObbIbc7CpZibFeN80FKFbW9sxM4SJXz3KxrZsxZgwcQM9wdy34Q977yCzQWV
Hs9Sxs/DOOzG5nx5Fj0ey26f7VQwtRRjzfINUGKKH5+L+UmFWLulyOU/GnEjRGGuvCqaKvDe628i
XybQeL1ky5+pl+diWlai+tjvtIrrqsJt2LhppyqDe9jRKTlY8O25kHk6HldT+W68tHaLa0W1+bGs
rp431vpeND/uyBxgOs1B2ZenCbs3vYQthc614eYw47On46Ig95oq9ryHVzfnw0txVaNOckxF7rem
IdH8jpUnHfuLx6xrl2BimtGvMKfD3dxU/ilWrM1TJ/Opz9Ln4K5rxlknXbh7Uu7t5I+ljC/AzNhC
bMwr8RJ6EubccB3GJbu/y4OXP1X5r2PVVtfHVeY83H3VWJMcNXh7+UpotS9p6hLcNM38IWF+noJr
77oeaa486jhvpJXykaemyC3GzvIn4DorZ1u/KO2MWubM7Y8pVnObYbSHTdj2wjPYqTY70sbMykLh
Vm9thZS/xd/BRG8NhSkOi7FF2rSXX0V+pfeaEO+YhSW5Ez0U8S1Ve/DqPzejzEuffOvmMGmfr/TR
PltiV2/MaXY+dXsnpJn9nMAn76yWYxc823flPbTg5u8i273SBlhfOpVHe0eZxVLMkr+rnllnacMb
i7ZgufwhLAfL7pxr8VFb+gleem2nV4ZJOQvw3bnZnm2Bjfei+T2de8MlKFy/DkWu7A7LjjMU5jbC
tiTIx42denmmZDbH62+fxpzsYNYLNVxLux28volZ5qYK6UOs8daHUFxFY1LutZjhcPZpdH82y0rH
ZSGw96cuCw0kQAIkQAI9SyDAfpW/wtn+hgxQnrr9b2PFJteXRnQOlt4+F56f2E3Yvmq5q+8NZOcu
xQKHpyv3tHX8nuvoW8TG+IUr8qD3PdwTxfteR6C+vh733HMP9u3bd4Zkq0F1hTXq7IVzO1wJHJk6
DldeaV39bQ3B+13Fh896KkLFafb0y5BU/RnyZHGh+SpceS/WXfoOFmsab9ND3aWypXr6REwfdBR5
u1xjErq7d/H+l/dghKr8b8arD3tRlvvwm/fEPdhy8SuYo29Jrwdq2xC4zLaj8uIxFBnDhsmqaNPK
/rIdKK1fisgjL3lVlk+cPh1H8/LcJhi8i3v+9xJsFMW3srX9xseesMaVkI3rb7wcGeHV2PDESsuK
9hOv/x35d83RV99bPcq6GJnYUPzaA7h3daH1UfrNeOn/FiOhrRgTstNRX1+GMvesTs9Gumj/U/s7
Z0cErazpmWYVyf1u3f1/xqJtv0KW+wPey3JYXgEReP8T78pyJZB9u4vx5wJtPYdiI3N7nt/nW1mu
OGltxvJ1/8YbFa5lTGJlnEGtOOjkanOu+FZdtdTht/+3x4eyXHHRhtfe+xJ3bfFUBHiPpQVr//q5
d2W5y8PRQ5X4wZoyWf2oXfbSrLJ6Tlj5UJYroRd/WYYlq8rUmURabN5+1QWg3h542NlJn0cgLguj
KrWY80SeFu3Ygx/6UJYrno/K6tN7/7IbnytTpEyXazIZincV+1CWK46b8fjKIngbsjUFBf+ZmH3R
TAJ9hUCoS9BqbF7nXVmuOKgt3Iw3dtd0mqg2rTluKcdLT6/yoSxXgmkUhdE6PP+eplbTgm7A9tXP
eFWWKy4q8zc7leXKjXVuja5Yrs3faFKWKw61qw7vvLjGt7JccdZajR0bVuLTCm8Tp7RwnL96WuW2
/NOXsMqHslxx3VhZgHXLX0SRslDRdDWVbsczXpXliqNq5G3e6kWRbgrAq9F+Ou3LI4MSkm/elOWK
iLWFedhS4O/702uiLJZ1Re9gTQfKcsVxddEOrFy/S9ZiGldd4aZO/NVi69pnsL3c3B8x/JtNCiuz
sjxMtgdb5o+yXE5GslsOtdpam7/Jh7JckbAaW1a9DWttDW7+DMgaZlQ/WeGunfWk8qk7jIMmUNUl
hyx5gLpDxnNZHZvqUpbbzVNTVBZjZ/ljt86ap1KctsSo3Wi5pN07f516aaXRkjbGq7JccSflb91y
vFfs1lA4g/Dyr5Slv0qb5kNZroZYtBXPrP5UXzGt2Clsnl7lXVnujKRVbZ+feslaf5zPAvvX3E6q
haa2yIeyXAm3Gpv+vtmt7NqvL94ktcjj4aDdmPzi8Qxwz++Snd6V5YrX6oJNeHOPtRbC9ntRK1PV
2LjKUJZbRLQdtiUUjxv79fJMyWzEG2ifprvqhSZRd/RNGoq34RmfynIlOxuxc+NKbDf3aWyWlWC+
Pz0KGi1IgARIgAR6iEBw+1Wa0Mo71N43beDyxA3NRrwWceMX+MryIeJ60HAQe/X58UkYJTuGdnbZ
7/PYH7/orr5HZ2nty8+187F7+6/G2F1OZWX53XffHXRluRaPr3i15+rvyePY66YUrNfPk9bOlfb/
F+LXeml+q/DSo+usjzABv3rhTSx/9EE8uvw1rH18qdtz4IkX30erbFevyOoZtujKF/8Km1f/AY/+
YTVWP3yzh/+TJ5pUv61H3scTJl2x4vDiO5/Eey6/r634lUhjvk5gveh9LKxccnjYmb2J2fy8KzKb
w/FqdotXufXqziV3/5TBHj6+/roVeS++aLWPn4Mn17+HPzz6KFZ/+Bp+tcSNzOvrsbdJ8qT1MGSD
Ost1xYN/xB3XLULuotuw/M2nkG15WojtX9UYMlqeDUDRO8tx02PvWmwRfwVeePE2pChpCMnEHcsl
n1981i3cbDz1/HKsfm05cjMjJPyulzX3UizTOvDfT63Gex9+iM3rn8IV+otHE/ddrN96xEibr7LS
i+w1ybv7V/v+7e54zrLww7H0imG4NFM6LPUn8MIrX+EtV0fmre1HcXvOUHVL8FOlR/CyvlgmFEsX
jsIVI2JEISLbh1fU4O+vGf5e2l2Ly1OdK8VHTBqG+1NEBe22oixa9lN/Y8NBbDfRnCnhOa/T2LxW
KrH+zCnjZSNjEdlyCu9t/gJ/+NI55F686yuscsR5rILWvboMJR99iZXHDNsrZzuw5IIEmfnYhn/v
/Aq/+Mi14vnIYWyqGIyFMmJsN831Zlbx8Xj0qizkKCvL2mXAs6AUD26udirKjxzF3vp0TJkxBv/f
ha3Y/b6k60CbCBmKO74zChfJKHDMAPcVaUYazCY76TP798fcVlWGuz80Bo2zhqXiJ5cNRqZsw159
4DAeWicNtRpQM36x+iDWLB3qeWyHKyLF750zB8kW7v2w/+P9+MUnWri1eKe0FTcEgYk/aaIbEuj9
BOIxad5lGJeZjJDGcrz5z4366rmSz/agZZycJz39O7j5wkYUf7AeW0uUhjoa0xcvgkPakMgBSrva
jl0vrzXNSozH1AXzceGIVITL5KT8d1/B1iJnw68MIL83fBlmZzjVUBWfvoodlQalzEnzMH1cJiJO
VeOzDzaJslt/MYhy23Dn3RSPnEk5cjRFfwyW4FtKP0OB7j0aU3MXYYpD0iny1lUUY+ubG+ESC58X
lGNyapYfaZXUVn2KtXllugjxmVMxf86FSJU9jeuKd+GVDXmuFYui7PjnNiy7ZYZztWd7BV5ft0P3
h7AUzLp8LkanRqNWVp2/uXGHZaWj4bBjk510qiF2QZ6qT1+35FtKzizMnTJaSkYtdm99Ezs0sB2L
7udTWSn9YYHuNlp4L/rmFCTLtuDKFuXFBVtFmeyaiFGWj9KmiWrZVHYu+Gyr0bt3TF+I2bILibLL
f1NNKfI2voaCameh+vfnBzEtzdrVVyLU5oOog0KmvAvLnIVbr/JcxasLaTLYzh9TGJpRKWuXTR+L
ZHkvln/yJjbu1MphEf5V2qTXq2DnT0hiFoaGbUWRgqu1FIdkoGpsnFOqukPFzqqpbNfWKg4qD+J4
+2RdMV5TckCvupljM13dNbt5qpFw/vqbP7brrDW6gGbOKqpyS6OVlI3cBRcjY0AkGir244PXN+u7
e+Rv2Iycu69Cslt87rdN5jYt3oGFubORlSxtsGxLXbonD69tKXCyrvwcBxsmI1ttnt3anfhsLL56
DjKkvWppqsH+z97FZlc5ai3bKm31KMztZEVOp+8ELWNMbXa87BYwf/o4JMsMx/KC97BBq7OthdhT
Pgcz0pz9UTv1pVN53EFq9+FZuOHmm9F4sgjr1+WpOwlES91edMkQ+a6IVVcveU77cb7fxg2V3Kov
xXsbjfdI0Sfyzhw7w3X8iP33oiae+Tc+PQc5Q+PRf4gyCBLcsI14glMvtfB6RmYtNu238z6NWtLc
339BqBeaBJ6/Xe+bqGG2l+PVDTuN4KVNWbhgptqmNB8vloGdjXqbskMmmF1002Qpi3bLStffn4ag
NJEACZAACZwpAnb6VZ3K6v4ODeCb1pY8UVkYnx6Greo2Sa3Ys6cC4yy7WcnOb18UqP04Rfaw9PHI
cg41dJAU+30e2+MX7ty6te/RQdL5qMcItMsRcr/4xS9QWGiMSfRY5OaIIgdgTDpQqA0dyLMpwwaZ
XQTF3Fa2HWtc+h4twJuf/DXmZBlbxKZ+43t4dulO3L78c80JsOUl7P3pN72fjx6/GP97zxxoi+TS
Z96IO7NX4ikT0k++OAo5jB2HPpJdwsxX/BLcv+Qi0YA4r4QRsjvgna/g1qeMuD9/Nx/1S0b71C2Y
g/PbHIDMfofpp8NWy7R5lydZtf3WFmvGLP6fe3DRQJ0M5iz7EV5ZcztMZPBpcT1GZ53EYbe4X3/g
FjR9ayG+NWcqcrJG4jcrnsVJodzW1oTG1jAMH5Pg5kO5jZe/j/C7hz5STYY0F+OpNfchSxNF89nc
6rFjXquiznJdXS5r7vFJuEsef0SOKRioxhA6cBzu++vD2Lbo/1nGaLWypsnBXycBY1ksifhJIBq/
/48LsXB0HOJlYDs+OQl33ThcPftBDaC2EUdcg2pHjmgKqUZPEAAAQABJREFUTeCbV4zBQlVZrrjq
h6RU8Xd9lu5PU3srTyMGJGD6+BRMz7H+jQhpNCnEgQlTRuIW1xYfpyoO4w9HFN/KFYlf/tApY2xI
P4RGRWHety/EL8cYiuTXdh53OvX5bwNe+kjXyuDS2WNlK/cBiA+X8OTs7QkXj8bvJ2rNO7DtS6fy
3G6ay4qM7cZjx2Y4leWKbHLWYfb44Xj0Yi2uNuw4Iop/kSFFlFpDErQWoR8yUmOQIoOs3s5090ym
vfR5htORTTvefttohrPGDccfF2fAER8mzW4/pAxLxx+XZhlbX9RW4bPj7mt/nOGPdvnNllHZWIX/
rLG4f5iWdqDkSHMQmHSUFj4jgb5CQLbDvfUWzJB2RDn7MybZgWu+O8dYSVpbIYovSUt4DBITkzEw
XvvyDMPA1GQ5LzNZPf+5pWIXtlZqaZYwl96CadlyNq+cLx0SlYiJubdgQbbSQXJee3cdcJmq8HGe
7hHZC27FVTNEGSjnAMclZ2D2Nbdb/Gn+vf7G5+Dmu27B3BmTMXlitqroOF5ZoTt1LFiCaaqyXLEK
QVyqA7nfWSAKXuflVG6JuZO0KufX7nonz+VLun05ubjlqmlIk/3fJbVIzJqMW25dYMyCr83H/hrn
i65mz8fGpIKwTCz54fWYmCUMo2KQ6piGW5bmygbFgV+20inR2JenBjtMEwYyZy3B9XMnSr5JGYpL
xTTJ74Xj7aTER9rba3FI71HLZDThrSjLlSskKg6OybnIzdZyUsld1yVbV+vzLWT7vssmO5XlytOo
xAzMvekqnXdjUQmMXogWgPqqkNW5sqLPpCyPzpyDpX4qy5WQ7OaPIYXTlOQqaxnJynnmMXDMuAbz
Mo10V1dqkLojfxKRPVyrw404dNhY2nFIztFWL0VZrl5lKK7S1vm349CX5S77aIyQiTnqZTdPXSFp
P/KK9yN/7NdZLZ4u/4Y5cPNNC+CQvAuXM80T08biqu8v1suf9Eyww311spdIq74q023D5NgDVVmu
2IREIWPcXFw9Vat3jShy9aut9dyBG25ZoCrLFW/h0j6PlXJkrq8F//pCnyiiuPF6ddpOWn2lTF2M
W3KlnUyU8ySlvctyq7MVlUY/21Z9CVAes3QxiYlITk3RP8jD4gciWd53SnvmeaVg8R3O91tMVLj6
zsxdkqu/R1B7zPnOFI/234ueseYsuBm3XDMXkyfLJAjpvwczbEtsQaqXSpg9JrMlAX72acRPt9QL
iyyum2D1TSS4qvxPTbtkZeIGaVOUNiBE+lpK/+2q7y802pTqIiiLzG2XlSC8P73hoB0JkAAJkEDP
ErDVr+pEROs7NLBvWnvyhGDUhcN1qSoL97mphJrwxR6jjzzqIsOt7sndYLvPY3/8wsotSH1y93Tx
vlcReOqpp/DJJ5+ceZmaK7HXqCKqPHsPHA26XM3Ha9zCnINLxnsqT0dffi1Ef+/XlX7VLLet401a
U1cImjq+ud74plQf1a7BjUuX4vrrr3f+idmsLHd618Yt/BLHL0eByOxXgAE4aq50zwPxfKoJbmSw
7qc3YqnGRX6X3mRWlpsijByGSdmme8VYWyZHdD6Fn97+PXxr3jzc9rs/Y+P2A4gcPA4XjRsNXfVk
8aaNVSl77BlX9p23eZ8oEWq40Uz6mK1YBL+szcHlk5zKci0+DJyMZRdrY2BO29hwsxS6y3PeQIV5
gEVg2uwsZBt6Z6fvqP6YqY/vnkKNq20aPGwwlk5Jxc0Xp2PRSE3ha0R4qr5VnzFo2Ho3tVUdxm3r
qvSHsUPS8cAso5Eu3mssBb903ghM0VpX3YfMtrp8GEa77usPHEOJS7FvcqIb60uP4n3tLjoJSy8y
q/SdD7IvHKQr/LXUBSPN9XtKUaBqtDQBgMxJI/Hk9dnq33fSvbQyitMO0mOE5DTZTZ97OB3et9Ti
TW0SQ1h//Gy+Nuhr8hWfjJ9M0eidxqeHjM3tDVcxWHaZp9/xFybqTipqtUF93cppCICJm0/ekkCf
JJAydR7kOFTrlTgcY/Q+wUnU++o/mupLxT5j9W/mnFznqkZrqKIMn68P5LaW7INyskZTaYGoiVxX
ylTM8RBGNsWZc6nuT3Pq+RuNeVfP9Ti7ekDmZEydNBWTps7C1BHuCZWB5JON+spXzzBNNqa0Klvs
6kfxhmUid67D5NBljMvG/ElaO9SKA8pyXPms3/NZie42+5vz9BW4umWMA/Ompui3/hrspdO+PC3l
e/TzqiGK6HkTUz1EzZo1B4GnxCMYp0XIAEyeNRVTp07CrNzp8JKTqJM+QodXYwHe+rTYulU40rDw
hmtx7bXyt+RifdayEU4kju3ZhhXrdupW8Y45+P5V41wrSHXrDg328sc9yHTMme1Z1oaNH6E7PFnr
3Fa+u/InbVSmHldpyWGXuQaHDhoTBjUHJYe0T7LjOKAdmh09DJla5gUjTyXH/Mof23VWS03XfzMv
nQ6jF+IKLzwDuXMy9cAPH3HbJ09/4t3QKsceFGudaJeT1IsWOsuzlOnpaUp/qQn/Mrc7l82Ga8qC
JdCs6TOMdrbsC5T7avctvtxuzO2k5VEm5k7LsNgoN4Mdw3S7k8eNIxGCU18kaJ/y6NGaDCbHshLE
15U+a66c1eb2NGowhunfNTX6O9Pue9EtdEQ7FmButrX0BCts97gQlHope9D0pMymRPjfp+mpehHM
vkkTCvJL9NRm587zrMvSpkw0TaJSHAelrNh6f+qi0kACJEACJHAGCQStX6Wnwf43pBKEXXlisi4w
vi1r9+OAMXcXULZj17cESkdOhud4rC6+ZrDZ57E/ftFTfQ8tgWfPb0fbT/emZxpxTabPPvsML730
kmYd9F8tHi1g7d7rb8QgDNPH+Fw+urRttBarW1ihbptcZ4+WMS9tu3bTb2ycWz+2EJ9/ddK11bU1
7NivQz22wLa6kDs9LW4TniXNtbK6v0wOw1b/vK30L/wKh1tNsulhmew8tqB33xbdKlFgMpvi8Ra3
2LlfXvPY5bf2mKELU/2lz8CQ+K/1yeFGWLWy44CLi/yadx/Q3OwpOipoY/CtHyzRrLz+1hZ+LsdR
PoTvXTkTT7xm2uLeCzf3AAqfeg57m70w8OLXku6uljX38LOHYaBHWY3A8AnGmIUie+HOvTjpI58s
8vUSN+68u+veh+axu6Lr++FmKtuEe1znIdY0IUMzRsjq84Xyp5wYWFlRh89rmnCsphllJ5pxWMzb
lZXS/lwtJ/Crlaazu0WB/Yfrzte34FBG0A6Ywtr5VRU+CY9AU4u5ETpPVkY245AeX6uq2M90a3u1
x1oalPtBjgRjZaHmQPkdkIoV91qVCnbTnDVKWv1dskpauWprcd+KzxAbH43Zw+MwITMBo9JlxZ06
UOp00tm/hVt3495PXOFZHPeTGUcTsMBkF0j6TN46NZ46Xu/abl2ctjbgs4IqHJRBS/PcsdDwEBw7
ZpSDvZXKAKtbpsTHeiqhlNhZexUKvEjAQiA1zb3XrDzuZ6wwl7sQiw9vNy3SZhtzBMsPFKIwPA4t
LWalQ4isqqwxnXvsVMQPMAUXnyzbt5vudWN4qhytIOfDGlHoj3RD/AgM0xRxuqWsnpQVV9PkT2n3
ayrKUXTiBOpqanC89gRO1FShTF+Ra/LUibHleIUxI7JVwtxTiKPtLRbdTIgse607ZnzFHz2qKMKS
YOh046WN9v4hn5wl8pr3qO9EHuWxvXS22pan+WS9LlX8sOHqan7dQjOEJMMhGvPKSs2iK7/hcEyc
BjUnZQvp8uIinDhZh5rq4zgheVlztAzVnjpbAZOKLFPZKcnbgKfzwpCSPhyZIzORMXgI0pLTvCjg
NVkrsXWLNQHT5gemLFdCspc/mgyu3/hUDPBWGb3YdVf+RKUNl1KcL6dOyym5pWVSn7MRJ+eXyykn
6uWYPgttn2xFidxXFh1C+2Tp81Qd0ifFxI8wlxWbeerC4fzxL3/s11mrktISdUA3sh3zMO9hRSYY
bbC5L+kr+NSRWUC+a0RQzgbfsLIIYfEpGJ6ZiczMDAxJS0NamrUxNMKNx6ih3tsda11phqX59iWM
v/ZydJCXeanoJ306b1dQ6ou3gINglzTQa0oQaUB2vTPtvxfdu7Ujxg11kzx4YbsFLLfBqJdAz8ps
pCKQPo2RZd1YL4LcNzHL7BjsrS6HYOxVt2OsjqQFn9rsnyGqq+9PXQgaSIAESIAEziCB4Per7H9D
KhhsyxOShgmOaGwqUj76GrH7iwqMVb415Kr6olBfXBWdLcekee9iqm6Nf+z1ecxBBzp+YX6Pn5E+
uZF4mnqAwHPPPacqensgqs6jCE3A+cqpTqYxtcIN23DstnFwW1Orh1X21qP47m/fQLx8yykea/sv
wt9fuAe+1uTpHs2G+lOWMX3jkVEbnHbxsiuuu53h2rbJlF7fYXyJOkUd4u0zz7en3vmkbT/eXF9m
lS051v3z0vq8g7vSUmURRBYGTr0Dr64ch7888hjeKOwY6vrf/QBJGa/ie+OMRasdRCGPPsJvnt6B
v98ztWNnnT3tobKWfYHjrCgqneEM9HlooB7OdfctbWYldOc0ivKL8fDmKhzt3KkPF814fuWXpjMX
ovHoLcONmYi6L2WzAOd23vUHKvBrbXdg/XlghkNlxkauMTgvIM920hyRNgS/mXgSv9hlaAjqZXv7
1+T+tV0VavxZQ5Jw65wMTEj246XT5mThKfhpHD8l26lW2E+fZ5jebVoto7OnsXxTsXeHJltvQ0Vo
9ZUWk0caSYAEVALt7cGqL0o749SatZbswKYS/wDXHjM6W/0H+OqhhiMpUcL3tTOEElUHi4vLd7+H
17fk6x/R/knm21V7i3lyUSt2bN7k27HridoKN1XjiNZkRw/BILe5PlogIQNS1JWe+iR57UEnvwGn
swvyVJdp24HIKtFMbSW9u4ByFIi8h1AZaErcw3HdN5XjvVdeR36lBtGHO4t1FKZdnYtDKzaatrFt
RWVZofq3Q3EbJsrMKTMxfbLDrw+Jd9/YjRGywtw8WGKJ0sdNwPnjHo6+3bn7A8/7bssfmYCQLZMg
1FMUGg/gqMxfCzlc7KpbYcgaMxrtB7ejRFlRLueYV2EyIuT8cu0aMdI5qKXdw1ae6r69Grzlj+06
6zUGe5a+yktU8hCZZJmvjl3UHlCOBZBjAzqIIjxtGnLHH8LGfGMiR2ttJQrlvjBfLdFQzo2eecl0
2f5dGpmWKuM4g+hMn+2Oe5S+5HV359d9B+2zL/9dri++Au6ifWDvTHvvRXcRvccZnLDd41Lvg1Av
e1xmV0K8x+sllT1VLzoo+wGX8ZbjRl2WJMkpYn5edstK8N+ffgpMZyRAAiRAAkEmEPA7p6P4u/AN
qQVrV55hE8YARTvVYCoLitAkCvMo2U2paE+JFjQuuCBDN3dqsNHnsT1+0VN9j04TTQc9RaCgwNiF
safi9B1PJIYoS8zNyk7ZrvyfO76DO6Z6U5kfw6t/ekMNrlYW6alX/yTEdqYVc+/7lm3CFye+h6lu
utNTB3ab9DZK6IMxOCHCGU8X/m1tURbVGVf8osex/p6L0C56De0KiYhwW09nXqanuerdv+6YNWl3
//VxbNFuXL+XXzUFEa3H3Y6xSMfD617AjIR26GjkiKeIUGsGt5nQJGTNwH3PzsAPK4pRevBL2cVu
Ozat2WIcOWmKd9O2r0RhfpHJxmyMl/EPmYBhsipb/1NsvGoLcj0OMjc5cje6Q+hqWSs8LONX7vMm
TmHfR5+7x8x7LwSsJceLA1rZJ1D0UQHuNp0D7gypHwbFh2N4Sn9MGNiCpz8yVyn3uE7jg3V78bLu
pB/uuHE0cmS80P0KizIU5spqSvOKd3e3yn19a5h6Tq+3Z4pdc73RilQ1Gw2xL/eavf0098OEOTlY
c+EJbN15BG/KmebFbjqE4kPV+MXKanWF+MI0VV2jRevxGxqpFO02Dw71rXJ2eHSI7fR5RBSARWxY
JyNBohgfKueb8yIBEjjzBEKijAFZ0UAirJOq2draX1acy2bBjSd14b2v3FMet8iqcPfekO6tQ0P5
9tVY67FaOwzR8XEYkJyOoUkNyNtR1GEYnT0M6zyxSFTPfjd33pXTzn1d/r9DtBC6ns7A5JG+tH6F
dpCSjiYy6AH4Y2gpxepn1pmU3k5PYdHRiOs/AOmZQ3FKtqc2f/9pwYbEOXD93ctQuqcAu3bLEQDu
uwq01qIgbyMKiqbjjusne93lIDo6DI2NzjLYWrIF7xUPx9ysjtSaWuzO367njzW8zu66L3/CkTkq
XRTmZSKCnGMuuwGFlGlbs6fh/JgotA0Vjbps6SX/yO5ADQg9qCl20+FINXXIupCn7ukPNH/8r7Pu
Mdm9r8VJpfiYku8tpOiMIR0qy51+QuCYfT2WXSjH8Xy2CwWiZJf5kpartqwAG1cVYOq1yzBtQDv0
KT7SLnfSs7KEc6Zuerq+dFc67b4X/ZGn28IOYr10T0e3yewekT/3soPVmawXtsp4e5Mhs7xcT/k5
37Er3IPx/vQnO+iGBEiABEig+wjYeuf4LU5g35BKsF2RJzxtLBxhO1Gk9Ktr9+JAwwyM7XcQ/9bm
Z4c5kJ3mdc86zxTZ7PPYHr84w30PTwB9x0bZ5rgvXT0lr3s87vdWZiGYccPtwBuPW6zX/PQWpP5p
BRZdYFaan8K2p+/HGl234vQy4duTEK9sMy237jmi2smzmCEj1bPJldEA51WGv7+6G1NuukCzkN9T
eP2vT5nuFWMiIiOUbbl9h214cLoz7p1+lPQnDhsm1oX6o9r1b+DAj6dghGlns4qP12HdZ8chenMR
5RTCh8/DTd8cofvxanBPsEJAYeGyd3+s3Fvzw3Crhe/pRnti/dXiMGy/RphsR26xbzuBz15+Bv/5
gpF2p/tRmDspDV/HfA0rmTK8tv0QpudmquOyqtu2Mqx76lUcV8EoaMIx+7s3YVjVPzD/tqeN6Efd
hrefvQkXTJmPm370cxwr24e//ezHMC9sL/t8j2xbPhGx7mBEVf7gy69idvNGXHKDtSz+7uG/4xIJ
V19G5eFXLEzp7nJZ8xh2fQN/3XQDHvxmup7WU/tfx5Nu+vIomTVizVvd+TltULSKvLqDgGyj/oxJ
WT5hXDqWXZyMdLMmW2bWvykK82If8Rd9tA+PHzAU199cMBaXe92L5zSOVhjult44AQu9uvMRkRfr
IcrA+W7nVuHJsSZNgtmtbNlbeOCkOqun/6AEOKJOdjnNsQMScPl85U8as/pmFB+pxWf7qrD6S2P0
dPm2Klxh2ZLeLJTT7Lg4Bxsv9rTXbGpP2khfvA8OWqAd/cr2oiuXDkXX55d1FAmfkQAJBIdAO2qP
Gm3O1CVLMS3Vvw/VlgzpjOx0fuGWKdv9ZKR5FcmpqvT6yLelfARvMSnLU3JmyTm6o5EsSj39ailG
gSjM3b4F9MedGuInYektM7wqWT38tlegv1iqcTWW4Kjoz7NMomjuW6rK1S2vtftOf+2mMzzKtjzh
sXpKcKhE9oRxyDbRHlcLysuceevxKECL8k8+MCnLkzB94TyMz5At/E2vmeKGAlGY+8rJKGSMnaz+
Qd7FdbKt/qGSr7D783zoC9Yr81BQNRETk02BipzpUxfjGjl/ec/GZ7FZ3QIQKNjwJnLuusa/7f7s
5k+AjMzOuzN/krNGImxrmToXouzLPTh1yFn3wzKHqWd0t8sv8pyfyAf27EVopbP2hqWPhBlt1/PU
meKA8yeQOmuG2iVzEhKU48S9XE2yZb1WasNCrWXPi3PdKioxA5Pnyp/YtDTUoeLIIXxVuBv5RZW6
mx3b92HKNQ4MkfO1VaV6bQWOy4dhmtdo6nHCaMYtR0zoAfaE4QzUl+5Jlv33YufydF/YwaqXnmno
Ppk94/LDJirpzNULu2U8apAhs8y+ifAx+6WpqhTltcr2H7HIkDNJ7PbPDIr2359GGDSRAAmQAAmc
EQJ23zkdCduFb0h0WZ5EjBuThCL1eKJG7PuqBkNCjO3Yk8aPU79HOhJfe2a3z5Nqd/ziTPY9tETz
t0cJfPDBBz0aX2eRhabPw90THndTANbiyR9fjTcvvw3XXzoG0Y2lePO5J/GeofF2BTsBP7hidGdR
AAkX4vppwOPbDaefP/dj3NfyIO6+7mLENpfi9T89iKdNzxWXo267ASOCoHFLHT1FVLJv6N/XwHu4
7d5B+NO938Vombxf/PE/8V8/f870HIhfNK5zhbmRnF5g+gI/vvVu2U3YJUpjIw588YUlTZqQo267
CxepGuhUTLlcyLyhjTwA2x+/GU+H/QnfvXQ0ok4W45+//y88t914LmQw7js3YUhzvRac8/eL5/Dn
jRfiR7kXiM4mFAPTszBUkcVUZtIvHGMovi2+UzFQGRcZuAAPXv4sHjTJAwn3uW1SRmekWnwYNw04
XHoMIzP6y2QH0RZ1tax5KMyltDx8A6JO/BaLp2airSwPD/38aSN61RSPhZf5UQ/cfJ0Lt0GovucC
JhtpbDplUhDE4+7556tb0ppDOiVnsPlSltfuL5bV6Q2689ETHbjL29Jy1UUYxjvCsdql4N55sFEU
5srgv/vVgGeWfwF1E5WkVPx+8fk+FbghIUbRKC6sQe2cAdK0WK/aAwdx74Ya1TJ2zHCsmd5mM83t
2PzqHqyubENM3EA8cl2G2hBFxEYie4Tyl4Jryg/i6tWuQdPqJtniU2nq7F+20ne5r216vcsRmxwn
G5FWOfO4th6HpPFyeBnULcvfj1/mOfP6msUX+JgU4T0O2pIACXQHgShkyvZO+QXOzlXJoeOiMPfW
yanCpufX44giQuIk3HDVRLTLTGvtqi4uRcuMNA/lc3tVAfLN/TbNQ2e/zc4JSk5nDlwxd6LHWdUt
FbI6s7Nw3J6bt1CGKKCqfCigqnZvwvqP1dRiwrdvwOTUeCRJQ1ymRliLr8pl82WHTEZyuyqKfb3p
3Bxqt3bTGWJfnvgUpX139oh9biPdUoGi4OjLcbLeWJ3vWLAQk7OsZzTLXgUoOeCZky0Vu7Dq1Z1o
lV1iLrhyCaZlRIkSIRxxyRkYq/xNno7tLz6NHS45j8vEM5lRoZGV3yRMuci5rd/Y+Quwq2id671d
hlc3F+L2Bdkmtz6MdvPHR3D+WHdr/iRmYrisVC4UPXh1wQ69H5M2bIgqWohsMZ4pphL5K9uZJ/86
r6Gjh1j2IrCbp1p4zl//8sd+nXWb+ON1N4k6fLm/s4JejdKqFpkP5BaeJKLiyxI9SaGRXjo9+lPF
0IJdG/+BnVVNCOt/AZZcM01dtB4eE4cMx1j1b3r5Njy91rlVJY4flxWpYSbulfiyvAlpSj1wu9ql
LVRX6yj2YclQN8Vwc9Mjt2egvnikq7Ns8PDgzcL+e9GzlLiH331hB6deusur3HefzN5i69zuDNYL
22XcLHO1jz5EAz745zq1fVZ2+8lddqft/hm6/P7sPBfoggRIgARIoJsJ2H7ndCBXF74hEQR50nLG
AvlbVQEr9+yQ02/LXcLKOO9Y75PvvaXGbp/H/viF+T3eB/rk3qDRro8TiMCi//ktXrr652bdppqm
L954TpSXvpN3+YP34QJ96a9vdxCtyYIf/lQU5o9bHG1/4UFsf8FiZboZhbsWXWC6t28MTZ2N/170
v/j5etPY0Of/wI9v+IfPQG+/5hs+n/XaB2Wf43OTgtqrnOnfw8P6yv5QzP7Bf+N/3/i5ZfzzHw//
GP942KtvYNqd+IZsPBDa/2JMwAuWLfTXPy4ryh+PR3p6f9lc0FOQcaNl18EOL5Fn2c/x3Bv/bSmL
63/+JK5491Hn5AkZbzLN55fQyvDwbVdDEfe2v7yOm0bHdktZe+Ppn+MNdz25lpZpt2OmeTMGzZ6/
fWInwz6ZTW1yfrVeEWQrbkP9rCWnAX/dWKXdSI01ptW3yUqxezYYzwaNzMDjorDu6Bp8vjFY+PmH
pShyLg63eCncWozXattQrPzJWH1H42ex6YnSgLiuxmqs2SeD7parBRvfr9FtZo+Igf00t+NoWTOO
KnIdOoa9bpN9lEgi4s1Lmfp5kf00lMUH/l520udv2Lq7qGjkyCC882rAK/8ytmrWbNEkOxFsrsHR
xhb1z0vCdKeBGwJjEnj49EECZxOBVrh2qFYTlTRYmVLovCrztqHcS/tSuu0dWQHciFrlz9WmRg3K
NCbzVO9AXpEx8ckZWh3e22go3bQ4/Pltl+2VnGtbxXWYt43Dq7BlU74RlHkfa8NWTNa0QmaHD9bb
qjJ8ml9hca3eNJXinS0y272xVv1ztlVRGDJENOauq2DLhzDeCi7LhkK861pxr7nr7Nd+Ou3LE5Wk
nLvsuhrz8eEej5SgaOu7ujJVc2rvtwWN9XpOeg2iZs8HyNc7EdKDcL2w25uOy8raRimrtfj37oNe
/Iry3OgOeHneJpM6XNbhGcidk6m7aSzchG3eCrruwmmwnz9uAQVw2735EwfHKD33XVKFYdgQbRLD
AAzL1CuI63k0HJmJphTYz1NTIGL0M39s11mJQvJf35NIWaHt1rbV7N6KAr3sWaUz3+18O0+dvGi2
Q81ubHZNNFLss7K8TTQy+2hF7eFqNCptaNm/cdC9uRSn4QlmziHy4SKKyhHGBMb8dz9GnTlI1dyO
Xds+0W3jx4yF0aLr1p0Y3NrJTlz7ehy8+mJfHoVvMC6770V/4u6esINVL72noHtk9h5X57Y9VS88
JbFfxqMw8gJj8Klgy3aPutxU/IlLWS7xRo/CYHm/2eXe9fenZ9ppQwIkQAIk0LME7L9zOpLT/jdk
MOQJSR6FHNk9SZkY1lpZiELZzUr98ogfgxGJHY3amtNkv89jf/zizPU9zCmnufsIjB0rkznkuuSS
S3r0T4lTi1sxd3gNnIGV//gdZBG439fsu/+En812/071/b0UmpmLlQ8u8jN8WTD5l9/5qYw3gnT7
JDceiGnGj5/GdaMsVj5vFv2/lchN99RAeXjwUN4qU9kDuwJ1H1jobq5HXYeVK34Ai25X8v7p317n
5tDHbbr4/9U3nbq5iNG4z6u/Wq/KctkuAMtmy06irsu9pOgcEqbif26boDlz/W7H4ys/c5pjkzHG
7al22+I6XD1oZc19eEuLyPI7G3/5n1wv+kqLo3P2xtDSnrMIuifhoaLg1QfnWmvw0NsVqG5qx6mm
ZhQWlOKnf9iD10y1rLi0BmVNcnhbewOeXFGKo4pY2vhsaBPWbvkKz7/t/rcfq3YcVwc+k3KG4krN
vQxh3v3nPcgrb0Zb+2nU15/EG3LGxr2fGBEuvTSl40oRnoAbphhK6tde343n80+IUqgV1VXH8cxf
d2N1rcYuBpcNi4TtNMv6y/HZWlxt+PVfCvBBaZNrQPc0qiuq8cfVh7TIkJWdqG+F0damHXjXhjWy
ZWpBaZ1/inMb6dMF8NsQhWvmGwO977+3D7/YUqmWg7b2VpTsL8NPn/rSmNU0+HxcZt7f1e94rA5t
M7EGwzsSOCcItLdrqqNGfPLRpyguLUeD9Hjixs5Ctt6mlmHt8pewp7xOXUHe1FCBTze+iHU7K3VG
U2flOHWaMQ7MzFa/eNVn+RuX45Vte1BRVYHiPdux+tkVMOmTdP/+GELiE6GH3FqIde/sRl1TC1qa
6uQ86+148alVKDSaeVFAfYUqee9ol6+0KucrXXxZtuYMJVvXYPV7e9Sw2+WM0YqiT/Gi+bztlOkY
n+xcM+iYNtOQqbEQK5/diKKqBuHUgprSXXhx+SbLjE89kg4MXUmnbXnc8q1w80ps/LRIykK78K3B
rk0vYqPdjPNIazgGJuk5iaJNG7C7vAYtLbK1umw9u13iWimrvY2rGiWlVeqW0lGpw3XFfmPRJrwo
ZaDGlcftUg6Ktm/EZn1CbBKGp8UYwXgxJY77JiaZOtM7X3nbc9KDm7+u5I9bUP7fdnP+pI3MdMni
qvRhQzFEH6AKwZBhaVZZ40dgiAWt/Ty1Bmy9850/9uus+wSZtX99BYXlVaioKMWud17Cyi1FViG8
3gmn2nz8dfU7KKpQyq60E4Xb8OzKLcZk0aSpmOJlBbo1uBiT8rsRm5avxm7pDztbrXbUVRRh4z/f
173EjxiurkDP+sY0vR4ocqx4fhNKa5rkdIIWNNQp7fMLsou+NiklGtOmeDtiQQ/WYvDdTlqc+X3T
1fpiWx7TxIjWkl34tLAY5dI2d+Wy/V70I9LuCbt76qWWnO6RWQs98N/urBcdSdOVMp520XRjB7bG
Aqx48R2pyw1okvdZ8a5NWLEhX486ZUIOlGbXLvdgvz91wWggARIgARLoMQJdeed0JKTdb8jgyBOD
nAmKMkbruzpNmRflqP3ejuQ2nnWhz+P2nRXI+MWZ6nsY6e6bJuW84L7wd9ddd/mvuA5iVijKciVu
fxmFpEzBI/Id+8BNszuWYtS38JB8+z5wVY5H2KEx51v8RoWFWNwMvfQn2PjcA5hmGjuxeJCb+Auv
wx9fehlXZcdb/IbGaPoOp48oOfbWmrZQJAywBjwgMdJwE5KGHz3zFp649zrjG9g98rTZeOCvG/GT
+UMNfx2Vs9BIWJdlRiHM5L7LMpvCsqb1a4SGWgZS3FNi3Men4cLZ1+GBP/4N7zzzIwwN96w3adN/
hLf+8QSuu9DKzwgEshL9IWz8m9V/ivh76c8PYLbbMI/Zn7Kv8bfE7yvP3Og8615NU4gbt/MRp55D
7pQte8mdcC+FX7ywFnublecp+OHfHsNsL5MfTpl4daWsyanozkvR1134Azz2wE1ey0za7Dvwt7ce
QLacBe+eP739Xktid//6Me2ku0U4O8LXZ5RIctRujihkbxoZil9/6VTG7Ntdipvlz+d1rAo/fKoG
v/lBJvQ1Y67+0tG9VVjpy6OsXs+dqmyXHonvfzcDO1a6lO2tDXhk9W6vvkZPcWCh9wMfLe6zZ43E
9QdEMX7Maf3y5i/x8maLE/Xm6oXDnVuNh9hM850TMWFGBkbv+hL71BAb8fg//43H1Q0QNIW4Fm80
7pyRoN0gOSVCzE76xXsP4z75u3LhhVg2wqnM0R16MQScPi9hdGaVNHoYfro/H4+7ysHnuw7iZvnz
vKLx6OJ0yxb55jX9hsrL06e7TVeYuIfFexI4Wwi4mlM1Oeb6lDBImdSi9Cbk38I8bBA9ZXbuUixw
xGHOd+agdJVLAdRahs1rV8BLE4ikSQsxzaQYcsxbhJwjq3TFeMnOzShx7SisRuTrH5OCQ3Hi3vpB
VgRPc0Rjk+vc6eqCLVghfz6v6nysema/bGF6OxyyKst3WmMQlz0Hc4rkjHRX2JX5m7FC/jyvFCy8
arKxzbx8YC+a48AqTcnWKAquVf4o3DxD1m26ks4uyKPkm6N0FVwIUJQnyv88XSoPg7kceXvofPs7
n7i7zbhoCqKFr3N+QzW2rF2JDnIS+RtXYX/OQtw+NwuXTUqSyRrOLbOVMrBSKQOKntdcyOU2adIl
yPLyKrTKEoVpV81C/sqtTu+tRXjlvWLcMjvLI0m6RVfyRxZJmLl4lHE9Ek9DUPPHLXhFkZICOf/d
BTEsLUumkRhXYuYIQVyiI04Sxa37Z15X8tSISV0Abrr1nT+266wc5DBmfAoKtQk/jSXYtLbEFGdn
RqOwtVYWYOOaAi8eojEvd4rRTnhxoVllTb8ESfna0QCV2LJOqQtGHJo7SA5dNj3DeRvlwFXzso2J
JbUygWileZKJ4Stb6nW2e2YZjz1MPttJidpW2e1Kfemk3fYQ3mwRFauWYefbrRp5MjEHYTlYeudc
syufZnNzYrQZ9t+LPiPSH3RP2MGql7qYFkP3yGyJwseN1/zprnohBaDDst+lMp6BhbnjsWJjvjOl
1QVSl720KdE5uGJyqouGTe5RXX9/+sgOWpMACZAACfQUgS69czoQ0u43ZJDkSR2Tg2hZAGTMfU/C
+BH6EqwOBDcedaXPY3v8orv6HkayaDqDBLKzs/HUU091KEFzczPefvttbNiwAV999VWHbocPH46F
Cxdi/vz5iIy0KpE79OjPw9CBohgVBeiNd2LfnkJ8dbAK4cnnyxnmVWiU47mGjRkFR4qhS3AP0rHo
Abwvfx1dsY7ZeGTDTFQW7cPewoNolfDjG4+hqjUaw6UOj073Hr5j0SMSdkchRyD3kQ3I7ciJaAsm
5v4IGxbchLISmQgtR/y2Kv/JUX2pWdkYkTmw40WR7mFHOPDI+++72+r3wZFZD85iiHAswvsdA7G4
7+wmImUifvTkBtx0rAzFX5WjtlXhIjt1xKdixMgRSIn1rvocOFomGayajZ9UFuGL/YdkJ0f5XJZh
COU7a2BqFkaOyISHV1md3hE3hDrwgHD1VZIi0qfigWfex3+dOIZm9QMrVCYQhCIqNtaSTLtlzRJI
lejMZ/8AGy6+Wo57PITjsgBWGTgckJGFzIHW+Cz+eKMS4ApzPwpCqL5dej8MiPC+JU6sMranXlLQ
VSf9MOXbOfjJSC+j1eJu0MBE/P7OSXjyYmOVmeo9pB+8N7HO0D3+jTfOjYlITsWKH47ElQN9ZWso
rpYBxsdnWecRhUYa7mNDzzNFEYkbvj8BPx3nJqPmIjoGP/nOONwi54w7L5tpVjzLBINHbh2OSy2T
gqxD6bHC7NGlY5BtQpoyOh1XW/bkkKC8Z5FLRvNPoOmTnfN9sDLKCBAbYWYYgku+PRG/n2msijdL
oJhjByfhyTtzYD2i3lQOJI81wma/YVJWtCvSJFfXmGgh8pcEeiEBvZ2VHapN5T9Etid3XmGICTc5
MiUhUnMitcncRiRmfwM5xu6+qo9QVxsSnjwOty9djOwk72HK/qDImXMtbprhplwMScbcW5bJZKZs
Y/W1JktYEqbmLsSkFC9hylnUel2PivRyZkqIKPNvwCyHpaHUQkZ0UjYWL7sL1041tjjVH4qho7RK
y4lxubdj8fRsVVVl9qeZw1JycO2y65ElShzzlTwuFzfnTvJMq+ooBXMWLkCmK7mdn2mseOpaOm3L
I/mW+4ObMSnd+zsvKWcOFkxNdyXdWo5clsaPbIev56VbmVMdxY3FDYune53tqZSr7FnX4q47FouK
0LhaXRqLjBnflbKVaTxQTGbtieSgY/pCfFcmoumXXkc85Q5JnIjLxxuVoDb/Y5SaZwHqgWiGruSP
iUv/WK9lLSTEqBuW8hLM/NGSov2Gp2FUuhHv8Owh2hPnb9wQDNeLRRiyHZrixuSsC3mqHLHgvALJ
H/t1NmPG1ViQYy5dRjriHbOw5NpZen2ONLW1TldKYYtHziQfbUW8A7k3fx9j9RX6RtheTTLQ+N2b
c5FpadYsBRph0rYtvPU7yDD1/xLHLsBSqUNGyXUPPQmzFsvkp7GBDTb6biftlt2u1JfO2m33NJvv
k/GNOdlmC/k+Vra0lxZWL2+BvzPtvhdDjJcwPMuUU0y7YVsT6XbXhXp5pmTuSv50S73o5r5JnAw+
LlsyB966RUpupsi799bb58pUH+OyW1ZsvT+NaGkiARIgARI44wS61q/qSHx735BBkidmGCaYXoRh
6eOR4fbN3ZHs6rMu9Hlgd/xCIu6WvkeniaWDM03g9OnTWLt2La699lo88cQTnSrLFXkVhbriVvGj
+FXCCPoVMRCjJ85A7qJFmD9jKmbMz8X82VM7VJYHJkMoUhwXYHauhDt1IqbOno/c+TN8KssDC9sP
16GxSJf4p86YgRkzZmP2bIk7UGW5H9H0RSexA9NxwVTJc2Eze/ZszJg42qey3Jy+hBSH8JwtEzkU
nvIrfxNHe1GWmz110RybMBADByp/CUhIiEWENhxkCbfrZU0dVYlIQOboCzBx4kT5u4DKcgtj3zfn
yVJ7fcW+b2fGkwMHDqg3aWlphiVNHRKoP16HvYeb1PHssIgwnD8oHunxhla3tuokamT2fmh4BFIH
hAc2K8hHzLVVJ1BwuBnR/cPkvNnTiE+MRmZqDGTnD1tXW30TCo80usbkz0NiUiwyRVZfV1fSXF1x
HAUH69EQGoGBoa041iZniWYkItu1BbC3OGuPN6EZ5wnDEMTL7AWvbY03jy67QNPXQVC+H7XIdvwH
a1F5KhRxIW1oDA3D0EH9pSwYg/S+PQf+pKtMAo+RPkig7xJoqJFthUVRGyIK95iYKOf26qbkNMhW
2SVHTiCifzRONbYhOiEJqanJrglSJocexnY0NTQ7V4v3k7CjlHazDpueWuE8l1NWTS2VgeAAFkCq
MTTVlOPg4RPq1sUhEdFIGpSG5DijTW6QLeBPynslJKI/BiTGWNLTWVrRIlu8lx7CiVMRiA45hVOh
0Rg0KFXC7+SrXY4UKS0uwcm2CIS0n0JowiBkpCX7tcrUA5vLoivpVI44sSuPM79PIiI6BKckPYOG
CN8Yg68veQO3b0J58UGcaJTMklxSy5Uw00m3NMh2/ifVmWD94wfIhBDTS1zyqfhACSqOnUJcajQa
qxoRnZyCzIwMcRe4JHZ8dCl/7ETo8tNz+WNHyC7kqZ3oFD9266xavqrRJEcPSOOHhKRkJPosPE3Y
9vwz2KkuWY7H4rtuQUa70lYcxslTzvLbf9D5yEg2q7UCS1BdRTFKDlXgVEgc+oc2SlsSjZQhmRJm
Ry1kCyqKD+BwjbImp12OgwD6DxyCYXJ+eleqQaftZGBJU113pb7YlkfyuEbOGQmRSTxhkTGIMrch
NtJg9mL/vWgOxbs5+GF3f70Mvsze2fhn2z31orO4u1LGlfpbU16qHl2lxBMSHotBqamdvs9sce8F
78/OWPI5CZAACZBAxwS69s7pIGyb35Bdk6cdu1/5C7aUOCeNjl+8DLMD1phraepqn8fu+MWZ6Xso
qS4vL1cTP2zYMA1Cr/zdu3evKteQIUN6pXz+ClVdXY37778f+/fv99eLV3cjRozAI488gqQk31Og
vXqkJQmQgCeBU//GPQv+A//SnqTditf+dpN+pLFm3dd/Dx06pCZhzJgx3ZoUKsy7FS8DJwESIAES
OKcItFdg4wsv46DyrRs1Bt+Xc5TcVT3tFZ/ij2vyVCxh6bPww2smWhTa5xQvJpYESKCPELAqzBcu
u8Vjt4k+khCKSQIkQAIkQAIkQAIkQAK9h0DDHjy73HVcV1g2br1zgWVnlW4V9CwYv6DCvFtLiEfg
v/zlL/Hhhx962NuxmDlzJn7961/b8Uo/JEACZgLuCvNRojD/CxXmZkSBmI09nQPxRbckQAIkQAIk
QAKeBEIigEY5M0f5kzPEN39aanHTXleM1152KsuVB0NHZ1FZbiHEGxIgARIgARIgARIgARIgARIg
ARI4mwm0oKGuQXZHqsOnb76vn1+eOXNqzynLFbwcvzibC1m3pO348eNBCzeYYQVNKAZEAn2RgJzb
LseWG1dFC1ynOhp2NPlNINCdq/0OmA5JgARIgARI4NwjkIhxch500c5qNekleevw5OdJyJTjF5pq
jqKyVtk22HXJduyzxiZqd/wlARIgARIgARIgARIgARIgARIgARI4ywk0leZh+bp8t1RmYvq4nh4f
4PiFWybwthMCd911F/74xz9iz549nbjs+PHYsWOhhMWLBEggCARih+FnDz0kB4Aql2x5GiXnsAch
2HM1CCrMz9WcZ7pJgARIgAS6hUDGjGsw68QabC2qdYbfWI2SEqcCXY8w2oFrvz+3Z2eP65HTQAIk
QAKBE2jW5/u0ymnDvEiABEiABEiABEiABEiABGwRaPfsTY9fOA/JtgLrmieOX3SNX6C+v/7660C9
9Cr3I0eOVBXmwRKqr/MIFgeGQwJdIxCPnIsvtgYhbU3fbm2syenJOyrMe5I24yIBEiABEjgHCERh
Yu4tGF1Tjn179qG04oRrK5xQxCalIHO4AyMykrkV+zlQEphEEjh7CERhylW5SD8pG3uF9kda1NmT
MqaEBEiABEiABEiABEiABHqSQPig0Zg1NRKN7XKUG+Ixctx4pMWF9KQIprg4fmGCQSMJkAAJkMA5
ToAK83O8ADD5JEACJEAC3UMgKjENE2fIX/cEz1BJgARIoEcJxKU5uCtGjxJnZCRAAiRAAiRAAiRA
AmcjgZAYGSeYltarksbxi16VHRSGBEiABEjgDBGgwvwMgWe0JEACJEACJEACJEACJEACJEACJEAC
JEACJEACJEACJEACZz+Br78+ffYnkikkARIggT5MoF8flp2ikwAJkAAJkAAJkAAJkAAJkAAJkAAJ
kAAJkAAJkAAJkAAJkAAJkAAJkAAJkIBtAlSY20ZHjyRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRA
AiRAAiRAAiRAAiRAAiRAAn2ZABXmfTn3KDsJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJ
kECvJHDeeeepcn399de9Uj4KRQIkQAK9mYDWdmptaXfKyjPMu5MuwyYBEiABEiABEiABEiABEiAB
EiABEiABEiABEiABEiABEjgnCURERKC5uRlNTc2IjIw6Jxkw0SRAAiRgl4DSfiqX0pZ298UV5t1N
mOGTAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmccwQSEhLUNJ88eRLaSslzDgITTAIk
QAI2CChtptJ2KpfWltoIxm8vXGHuNyo6JAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAES
IAH/CCQmJqK2tlZWmDehquoooqKi5S8KoaFUzfhHkK5IgATONQJtbW1qm9nU1Ij29na1zVTa0u6+
2Cp3N2GGTwIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkcM4RUM7dTU9PR3FxMRQlUH39
SfXvnAPBBJMACZCADQLK5CKlDeUZ5jbg0QsJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJ
kAAJ9AYCYWFhcDgcaGhoEGV5vfrb0tLSG0SjDCRAAiTQ6wiEh4cjJiYGsbGx6m+/fj1zujhXmPe6
okCBSIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAEzhYCisKnf//+6t/ZkiamgwRIgATO
JgI9o5Y/m4gxLSRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAmcFASrM
z4psZCJIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgAQCJUCFeaDE6J4E
SIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESOCsIECF+VmRjUwECZAACZAA
CZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZBAoASoMA+UGN2TAAmQAAmQAAmQAAmQ
AAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmcFQSoMD8rspGJIAESIAESIAESIAESIAESIAES
IAESIAESIAESIAESIAESIAESIAESIAESCJQAFeaBEqN7EiABEiABEiABEiABEiABEiABEiABEiAB
EiABEiABEiABEiABEiABEiCBs4JAqN1UNDY22vVKfyRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRA
AiRAAiRAAiRAAiRAAiRAAiRwxglwhfkZzwIKQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIk
QAIkQAIkQAIkQAIkcCYI2F5hHh0dfSbkZZwkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIk
QALnMIGamppzOPVMOgmQAAmQQLAJcIV5sIkyPBIgARIgARIgARIgARIgARIgARIgARIgARIgARIg
ARIgARIgARIgARIggT5BgArzPpFNFJIESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAE
SIAESIAESCDYBKgwDzZRhkcCJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEAC
JNAnCFBh3ieyiUKSAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAkEmwAV
5sEmyvBIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgAT6BAEqzPtENlFI
EiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiCBYBOgwjzYRBkeCZAACZAA
CZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACZBAnyBAhXmfyCYKSQIkQAIkQAIkQAIk
QAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkEGwCVJgHmyjDIwESIAESIAESIAESIAESIAES
IAESIAESIAESIAESIAESIAESIAESIAES6BMEQvuElBSSBEiABEiABEiABEiABEiABEiABEiABEiA
BEiABEiABEiABPoggdOnT6OhoQH19fXqb0tLSx9MBUUmARIgge4nEB4ejpiYGMTGxqq//fr1zNpv
Ksy7P28ZAwmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQwDlIoLW1FcXFxWhrazsHU88k
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
CFoG3dXDvAAAAABJRU5ErkJggg==

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://hazelcast.org/book/images/ec2-0.png

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
1Rtraevj1sM2tDZHbBpsvtlq2+baPrcTsou267entHe1r7f/7qDrUOCw6CjpmOA45sTi5O/U4Yx1
tneudd500XMpcll2lXdNd316WPBw7OFRNxa3ILfuI5RHSEduuKPdHdwb3HdIFqRq0qaHkcd5jw1P
Hc+znu+8NL0Kvda81bwLvFd81HwKfFZ91XzP+K75afgV+7331/Ev9f8UYBhQEfA90CLwcuBekENQ
czAu2D34VghNSGDIYChHaGzoZJhoWHrYYrhKeFH4RoRJRG0kFHk4siOKDg5k7kcLRZ+MXopRjymL
2Tpqf/RGLHVsSOz9YyLHTh1bidOPuxSPiveM7z/OfTzl+FKCVkJVIpTokdifxJuUlrScbJBcl4JP
CUx5kCqVWpD69YTDic409rTktFcnDU42plOkR6RPZ6hmVPyD+sf/n4enZE+dO/Ur0yvz3mmp08Wn
d7I8s+5lS2eXZO/l+OQ8zFXIvZCHyQvJe5qvkV9XQF0QV/DqjNmZtkKuwszCr0VHikaL5YorzuLP
Rp9dLDEt6TjHdy7v3E6pX+mTMu2y5vNs50+d/17uVT51QfNCUwV7xemK7Ur/ypkqg6q2aoHq4hpM
TUzNm4v2F4cvKV2qr2WpPV27eznk8mKddd1gvWJ9fQNbQ24jojG6ce2K65WJq7pXO5rEm6qaGZpP
XwPXoq+9bXFveXrd5Hr/DaUbTTf5b55vpW3NbIPajrVttPu1L3Y4dUzeMr7V36na2Xpb4vblLu6u
sm767twefE9az96duDubvWG97/t8+171H+l/PuA48HjQavDhkMnQyF39uwPDWsN3RtRGukZVRm/d
U7rXPqYw1nZf/n7rA/kHrQ8VHraNK453TChPdE4emuyZ0pjqe6T76O5jo8djT8yfTD61ezoz7Tq9
OOM1s/os6Nmn2ZjZn8+T59BzmfNU88ULbAvVL4RfNC8qLHYv6S7df2nz8vkrz1fvXke+3llOe0N8
U7zCuVK/KrPataa/NvHW5e3yu7B3P9+nr1Ovn/8g9OHmR82P9zccN5Y/RXza+5z1hfnL5a9yX/s3
LTcXvgV/+/k9c4t5q+6H0o/hbYftlZ9Hd7A7JbvCu52/TH7N7QXv7YWRIki/YwEkfEb4+ADw+TIc
JzgBQAvHv3iKP/HvbwYcHkMwB8b2EC90DeGEpEe+RrWgszHBWCvcITJ+PBM5DQFHRFFgKamp6Kk5
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
ry0AAAAASUVORK5CYII=

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://hazelcast.org/book/images/ec2-1.png

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
1Rtraevj1sM2tDZHbBpsvtlq2+baPrcTsou267entHe1r7f/7qDrUOCw6CjpmOA45sTi5O/U4Yx1
tneudd500XMpcll2lXdNd316WPBw7OFRNxa3ILfuI5RHSEduuKPdHdwb3HdIFqRq0qaHkcd5jw1P
Hc+znu+8NL0Kvda81bwLvFd81HwKfFZ91XzP+K75afgV+7331/Ev9f8UYBhQEfA90CLwcuBekENQ
czAu2D34VghNSGDIYChHaGzoZJhoWHrYYrhKeFH4RoRJRG0kFHk4siOKDg5k7kcLRZ+MXopRjymL
2Tpqf/RGLHVsSOz9YyLHTh1bidOPuxSPiveM7z/OfTzl+FKCVkJVIpTokdifxJuUlrScbJBcl4JP
CUx5kCqVWpD69YTDic409rTktFcnDU42plOkR6RPZ6hmVPyD+sf/n4enZE+dO/Ur0yvz3mmp08Wn
d7I8s+5lS2eXZO/l+OQ8zFXIvZCHyQvJe5qvkV9XQF0QV/DqjNmZtkKuwszCr0VHikaL5YorzuLP
Rp9dLDEt6TjHdy7v3E6pX+mTMu2y5vNs50+d/17uVT51QfNCUwV7xemK7Ur/ypkqg6q2aoHq4hpM
TUzNm4v2F4cvKV2qr2WpPV27eznk8mKddd1gvWJ9fQNbQ24jojG6ce2K65WJq7pXO5rEm6qaGZpP
XwPXoq+9bXFveXrd5Hr/DaUbTTf5b55vpW3NbIPajrVttPu1L3Y4dUzeMr7V36na2Xpb4vblLu6u
sm767twefE9az96duDubvWG97/t8+171H+l/PuA48HjQavDhkMnQyF39uwPDWsN3RtRGukZVRm/d
U7rXPqYw1nZf/n7rA/kHrQ8VHraNK453TChPdE4emuyZ0pjqe6T76O5jo8djT8yfTD61ezoz7Tq9
OOM1s/os6Nmn2ZjZn8+T59BzmfNU88ULbAvVL4RfNC8qLHYv6S7df2nz8vkrz1fvXke+3llOe0N8
U7zCuVK/KrPataa/NvHW5e3yu7B3P9+nr1Ovn/8g9OHmR82P9zccN5Y/RXza+5z1hfnL5a9yX/s3
LTcXvgV/+/k9c4t5q+6H0o/hbYftlZ9Hd7A7JbvCu52/TH7N7QXv7YWRIki/YwEkfEb4+ADw+TIc
JzgBQAvHv3iKP/HvbwYcHkMwB8b2EC90DeGEpEe+RrWgszHBWCvcITJ+PBM5DQFHRFFgKamp6Kk5
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
Wtngxbe26enWr83wlyheg/sqDjiy+sdbrVp9ddmYsWPpDFGLb83cXXo4LaNn4MyZNPEUqo7uzgCd
p+5mVXwqAyoDKgMnmAE8xdPTvWhFnRR48icau79h6sRxi8vsfareH9c3cvkBsy3a1HJ01/rNWxpc
XovPGxNt2b+3YPPmbQcOlHvNpoYjJeW1LVbNe6h0n8PtjbCbag8UbthS4MAdWp8p0uzcvnX9loJi
t6fmRxMnXPvo20cbWq0oglFmRqa1rvvd2ZOvTBjYz+/1HDxwQHNVbyrY2eoRuzKiLC7dscjtqb1+
4virH3mzstldsWvjxg0bir8ti4qBf2vpwTKT4+imwt0ev9nn8yXFWooLNm7YvNXl8cXZLcVbvync
8a0lxmSNMrVW7d+0Ye2ukqP6fLX4WMvjF02adu+rSdGmK0fmTZ3xs+Qo7YHLhl39i1d+/Meln7zy
2OE9RRvXrynafbDsUInP3bx1w5qtmzaVH/NER5scNYcONfpb6w43t3rjo0y7d2ByJVqbq/0k6OW4
3uXEBgRRIoq6SPwLVNI6Dkq9XBJqGiEEHXkcTMfq3jpaZ9Fd2nU6XkTDP/EHGL1EFq6QxdnWJSjF
AHQKKs90A8xCJcmCAEykDdjUBClxgWyKbKkzSBdNoNWvGpEW/BOXXPBS1M3iwgsog3rghCjwp3iJ
4kxERlmfvOXJ/HGPj5/zqpZgwavy9Diz3+uLiDVBTokx4aV4IuQ4U5tbaNLjTPaoxifmr46w6+PT
h/KLX9yLb8xctGjR2rVrW5qbcX+AbGgxUlUlcza6UVBVcjcmU1GpDJx8BrDpYsmb4huUz9ijrU2/
M0prGLKgr0/4S/eU/ZoZi0Xe6MkTf3w9lBWtWunb9wyf9+LMnuXDsnofi7c+dK754tvejW9eN2XU
gGq79uwFuRMf+CgpsnbS2BFrjtnWPzL7nD9uGm9bOSh5gjm+6ay4hLWtQ2P2vPjB3ojMGFNybJQ5
WFuYI6MHDuqvaX0GDkqI8pROGj3kisc+2/fspf3OuS89rhqOXzuHxO57eckeW2aspjtqlsjY/iPy
F980cMhlLyRG7psyatANz2/Y9vupvS79fUa85dJ+5r+tOpZS8dk7+yx3jzItPjZ01z+/P+WKV+sK
FvYbMrHX6BkbXv5htabhfm+zpt1515iW975scK/61paXXfMBvtipcK8295bbV/zpugvn3hUbl5CY
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
zNIOaRXx0XSQ3FD8rH9/Nr6+ZuTtO1XJcc8vPb30EzmNuz+ufPHtueu2lkw/fdG0tH8TSBDrddrb
tn+zSWyd6Y3Ra9DEjpnOD6Kjf8sSQh8MYHqiDAMljMspAggggAACCBzOAo6y5GjzDqWW3vy1WV5a
Nmb0uNKy0+Zc1+atvGb5/HVjbr764olFchqpf3H+92oX/9tV48NKFasXXnlt2XvPLtzSqXLDTy6Z
fXHZJ5Vq3njXqjXFY0pra27U9cPWLfmnMbv+Mu+BujeVuvLUict++JUx0lflNW7ZVqXGlU/M2/iz
R+a2K/XU+jlbnqtrP2bFfVfo4L2PsydPmT7thF510do196+/5E8tUnnyhONXL5ldOtLTSFffVLP6
7nVzN0el/ZUl8hIfI/Uq2jbe/+sFG/a/KRNT6pozJy5e+JXuWUVr1z/87AXr9us4ZcfJHd8Zpb1S
9qq1v52/Yt+ie+bO8sR0/wxH9P0FkiJPmNj686+YrN3DP2XOVbWNuV7YFMvp7C1WMv+zjb0BZ8dt
Jcnu3o7y+pprN8vfMcKr7pg9Z5psk1JN21bf/awBuaZsmGoavvieryXKp31jtPWeg+za7B0PpxTT
E3hlYvmMcM3ydXvUhMlXhd/rPdsrxqs0W5luy/yeBwBM9+61bz/v7yHpBkqB7+h/cf4lUEYAAQQQ
QACBARBw9VxyjqRoFT/59eoNr1VV1zY2NeupFnv3iZuaV9dGG5u9m7hS2fDxysaGRp1qekftRzvG
Ttp0x7QHx0YvqXhsY4OurNvecu+66qoJU95YOu2Wov0XVKw95YF9i28+c9N1Y36zuXrRum1ez466
DfuXV8lAeeXnTv1OrlITjl8w77TF13zOy6G9Jr6XF16v3LjhxfXPPLf+mWfXb5IIHy6/8neXvF74
xn2XN/zq3AXqgylX/7ZOt09ff/XauZvVkz+YuXXpGRdPjKfIZogUq+hQ0bxFN5259b7ZW++YEnmp
esKPX/Tafrjsyt9dsK7tyTvO3bp02oymjxas84bV13T+VPnQ8ikP11288Lw+pcjyt4733l2p1CPX
zzQpsjeE9zJybEmxBEy5nASxf5hxfgKgtdWhzHZsHD3pjaVnPDghOvf2P1Tp7atdNucPczfnrNML
OWNGbsvK7XU92+pNwXtJ98ZImIPsWjoxPYGKlS9/4bF90089pnz0sH9I3O6Ua5TBP1yeYcviMzwA
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
NDmYdo1d3AAAAABJRU5ErkJggg==

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://hazelcast.org/book/images/ec2-2.png

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
1Rtraevj1sM2tDZHbBpsvtlq2+baPrcTsou267entHe1r7f/7qDrUOCw6CjpmOA45sTi5O/U4Yx1
tneudd500XMpcll2lXdNd316WPBw7OFRNxa3ILfuI5RHSEduuKPdHdwb3HdIFqRq0qaHkcd5jw1P
Hc+znu+8NL0Kvda81bwLvFd81HwKfFZ91XzP+K75afgV+7331/Ev9f8UYBhQEfA90CLwcuBekENQ
czAu2D34VghNSGDIYChHaGzoZJhoWHrYYrhKeFH4RoRJRG0kFHk4siOKDg5k7kcLRZ+MXopRjymL
2Tpqf/RGLHVsSOz9YyLHTh1bidOPuxSPiveM7z/OfTzl+FKCVkJVIpTokdifxJuUlrScbJBcl4JP
CUx5kCqVWpD69YTDic409rTktFcnDU42plOkR6RPZ6hmVPyD+sf/n4enZE+dO/Ur0yvz3mmp08Wn
d7I8s+5lS2eXZO/l+OQ8zFXIvZCHyQvJe5qvkV9XQF0QV/DqjNmZtkKuwszCr0VHikaL5YorzuLP
Rp9dLDEt6TjHdy7v3E6pX+mTMu2y5vNs50+d/17uVT51QfNCUwV7xemK7Ur/ypkqg6q2aoHq4hpM
TUzNm4v2F4cvKV2qr2WpPV27eznk8mKddd1gvWJ9fQNbQ24jojG6ce2K65WJq7pXO5rEm6qaGZpP
XwPXoq+9bXFveXrd5Hr/DaUbTTf5b55vpW3NbIPajrVttPu1L3Y4dUzeMr7V36na2Xpb4vblLu6u
sm767twefE9az96duDubvWG97/t8+171H+l/PuA48HjQavDhkMnQyF39uwPDWsN3RtRGukZVRm/d
U7rXPqYw1nZf/n7rA/kHrQ8VHraNK453TChPdE4emuyZ0pjqe6T76O5jo8djT8yfTD61ezoz7Tq9
OOM1s/os6Nmn2ZjZn8+T59BzmfNU88ULbAvVL4RfNC8qLHYv6S7df2nz8vkrz1fvXke+3llOe0N8
U7zCuVK/KrPataa/NvHW5e3yu7B3P9+nr1Ovn/8g9OHmR82P9zccN5Y/RXza+5z1hfnL5a9yX/s3
LTcXvgV/+/k9c4t5q+6H0o/hbYftlZ9Hd7A7JbvCu52/TH7N7QXv7YWRIki/YwEkfEb4+ADw+TIc
JzgBQAvHv3iKP/HvbwYcHkMwB8b2EC90DeGEpEe+RrWgszHBWCvcITJ+PBM5DQFHRFFgKamp6Kk5
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
mHIE0NacclWGCiMBJIAEkAASQAJIYMoQQFtzylQVKooEkAASQAJIAAkggSlHAG3NKVdlqDASQAJI
AAkgASSABKYMAbQ1p0xVoaJIAAkgASSABJAAEphyBNDWnHJVhgojASSABJAAEkACSGDKEEBbc8pU
FSqKBJAAEkACSAAJIIEpRwBtzSlXZagwEkACSAAJIAEkgASmDAG0NadMVaGiSAAJIAEkgASQABKY
cgTQ1pxyVYYKIwEkgASQABJAAkhgyhCQT6ymZ8+enViBKA0JIAEkgASQABJAAkhgUgnMmzdv8uRP
sK05qbpOHgWUjASQABJAAkgACSABJDAZBHANfTKookwkgASQABJAAkgACSABSgBtTWwHSAAJIAEk
gASQABJAApNFAG3NySKLcpEAEkACSAAJIAEkgATQ1sQ2gASQABJAAkgACSABJDBZBNDWnCyyKBcJ
IAEkgASQABJAAkgAbU1sA0gACSABJIAEkAASQAKTRQBtzckii3KRABJAAkgACSABJIAE0NbENoAE
kAASQAJIAAkgASQwWQTQ1pwssigXCSABJIAEkAASQAJIAG1NbANIAAkgASSABJAAEkACk0UAbc3J
IotykQASQAJIAAkgASSABNDWxDaABJAAEkACSAAJIAEkMFkE0NacLLIoFwkgASSABJAAEkACSABt
TWwDSAAJIAEkgASQABJAApNFwE8mkxH4Y46fiYx/gX4kgASQABJAAkgACSABJCBGwM1otFuV7M3P
T8ZsTc9kbok8I2AIEkACSAAJIAEkgASQABLgCEibjnQNnbs7MjICfrA+7dfIDgkgASSABJAAEkAC
SAAJ+EhAxsxIQjiTEsxLmNmEpH7cNWdw+vlxpied9PRRLEZDAkgACSABJIAEkAAS+IETYLYjsyyZ
MckZlmBkgnOdDaKzmrB1EyY2/SEQbc0feJvB4iMBJIAEkAASQAJIwHcC1NoEMxJMSGpS8pzd1oSd
m/4wqymDaU5mcNptUl5E9CIBJIAEkAASQAJIAAkgATECYEWCAzOSTVqC1zVrSc8G0QC6TZNz9llP
MTkYhgSQABJAAkgACSABJIAEPAnQ5XLu4UbMpKSmJ1iW4GcbNMEOJSMQBHOe/v4wv0n/e8rAECSA
BJAAEkACSAAJIAEk4EkATEd/uRzMSDAmmUnJjpxDPDrTCSbnyIi/n799WhNmOelEp2sfp6c4DEEC
SAAJIAEkgASQABJAAk4C1HakT9KkhiV19AQQd1TIMa/JhcN8JrtL7zsTowcJIAEkgASQABJAAkgA
CXghYDcgZfT8D/hhgpPOXnJr6JwFSq1R5vzlMAMqh2nOYavFMux2kMhLFngLCSABJIAEkAASQAJI
4AdHYNg2YrMNg3FJDUgwIR0ODE1qZMKSOt2fyVbM6TZNtlkTYkP0/p5rPabhHxwwLDASQAJIAAkg
ASSABJCAzwSuD9pM13u5zZpOYxJSg3kJdiWYm47j59RDDwaBTQq3wC5trf9b27VBnzPCiEgACSAB
JIAEkAASQAI/OAKt1wbbvv47mI7UgGTHg7jHZ3IL6ICDraWzZXWFQgG2JtxQBCjkCvmF2hN/b2js
6B36wTHDAiMBJIAEkAASQAJIAAn4QOCfPUMXuwebzvxfMB3BgAQzEoxJp0lJN2z6yeTwOE0wQq1W
K5wYgmnNgIAAWHWnnsDAC3//8rMR8ouUOXeoA9RBdB7Uh0wxChJAAkgACSABJIAEkMD3mYBthHzb
b2nvHqr9R0PL379gs5l0tyaYkWBD0odq0rVz+juU4IcJTz/Y0wlGKPzZqJVJnQIszpERw4Xz7d+c
vdKWfccc7W3ht8Oq+w2x4WGiGyLCCEgACSABJIAEkAASuGUJ+DKzCPOS1650tNXXXvj7KTAalcog
eOVsSOcrdyQIjE45ffyRDWxPdjBoeBhucIYmPHxzZMQGIBrPHP3HyT/DCSOLxQLTnyDdOjwMr/Q2
cyCFxaS6QcAtyw4VQwJIAAkgASSABJAAEvBOgDsyDnYgTE2CsQeX4LiJSnhWO5iMsB4Oq+RgOgYE
BoDRGBgYCJ4ACAoI4OxL9soe3M7SwRq6/aAQzGmOKBT0ae/soZt01pNOffpZrXIIGaan2WGp3QLW
pHwYrmD2FBQYsYHdSZOAuUnnNNHW9F5/eBcJIAEkgASQABJAArcyAbAsQT0wLmFaEWxBMBypoQnP
XqfTkvTpRWBqwj+4AjMT/NTQZH/wSg8HsfM/LCL345Qy+mtCIHHEDzZy0oLDXCW8yG3UBgVjkuVF
V9ytFqu/v1VuBTtzmJqY1METkWTMuKRGJ4tPX9AhASSABJAAEkACSAAJTGECbB2dWphgYlLTE2Y3
qZUJi+HU4ASDEv7A3PQHS5POaMILC4MHGXHWJp31hPhgZNL9mlQKzJHS30KngsAapWgCYLKT2qCQ
DSSzwoPd/S0KmMMcHoZldPhpS9jiCT64C7YmszRhlnMKI0XVkQASQAJIAAkgASSABFwEwEhkc5ns
nZqFdN1bRqhNSSctYcslGJvUTy1NOqNJ/4EZSWNyjq6Ts3PodLum3dgcgViuPMAOHbFBZLAvZUND
kBqsTJjLHLbSeU22eA4ekAFTodTMBOuTlxa9SAAJIAEkgASQABJAAlOVALUs2XwkZ+zRGUp6xEcG
tiJYk2Bxgh9sTGp3wh+zQNnqOTU56VwomwRl2zX96NkgP5sf4RuZbDpTRp+CRGz+dDIThMAryIEL
G0xvsrlMuEtNTjAxYZoTjwRN1baEeiMBJIAEkAASQAJIQIQA2IswkQl2IpiVMK1IDU1mRFLj0u64
OU4/sDLBSgQbFAxN6mBqE6JSExMSETBL/QgYmyPUeuUchNvA+mRCwbgEsbAkD4fQ4dwQzGvaF83Z
lk0wNuGarelTDSAJWJ92KfiGBJAAEkACSAAJIAEkMNUI8C06sOrAaKQr4dxRdOYBmxJsUDh3Dsvr
zLCk5iU7mQ7GJTMzmU0KcqiRCevkzEQEH10u52jYQACRwb5NiG/zH4ZFdLAgwc+ODdEpTJjjhO2Z
kAEzODnj0m5ioq051VoU6osEkAASQAJIAAkgARcBztZk13QakRmZcKyHGn7UsmTmIrUp2fl0FsIF
MwMTbvMMTTAyQdr/D58hIeCtwquAAAAAAElFTkSuQmCC

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://hazelcast.org/book/images/ec2-3.png

iVBORw0KGgoAAAANSUhEUgAAA3UAAAJaCAIAAAAH4fkgAAAWvWlDQ1BJQ0MgUHJvZmlsZQAAWAmt
WHVYFd+6XrObzd50d3d3SHd3I7LpbhBBUoSfSAuIIFKKhIKohAhICohKGCACgoqAimKgiCB30CPn
3Oe557+79jMz7/rm3d+sWd+s9QUATCWksLAgBBUAwSFREdYG2lyOTs5c2HkAwT8KIAz4SZ6RYVqW
lqbgv7ZvT2Eu3B6J7+v6r7T/+wa1l3ekJwCQJXzbwyvSMxjGN+HjvGdYRBQAyH0539GosH0MH4Au
Ah4gjP/Zx75/8Pl97PEHX/vNsbXWgTmDAOAIJFKELwDkE7CcK8bTF9ZBvgEAhibEyz8EABoUjNU9
/UheADDpwhyx4ODQfRwGYyGP/9Dj+x+YRPI40Eki+R7gP+8C/xN+sK5/ZFgQ6djvzv/nKTgoGp6v
340DPhMiA21M4CsfPGexniQ9m7/Yz9to32a/5WFR2tZ/sX+Uke1f7BdtaPcXRwfaaf3FgaEmB/wQ
D3OLv3LPSB147v/ojPOzdfiLvbx19f7iiFDrA35kjM2BPM5Px/wvJ4BkbPkXkyJg9C+d3kEGB88N
i7I8GGdIkPnBu/hE6B9wvCP//b5RfraGf/VERdgecHz89Y3+yv0iDA/kYUG/v+nf8xMRbX0wD94h
dgdz6EXSPZhbYAr0gC7gAjrAH4QAbxAMSHBPF+5FgjAQBPeORXnH7n+jQCc07FiEv69fFJcWvCK8
xbiMQjwlxLhkpKRlwf762ucA8MX697qBGMb/LYvsAkB1f0wv/i1zawCgfRr+xFv/LeMLBYCIBqDr
nGd0RMwffaj9CxrgASWgA8yAA/ACISAOZIACUAWa8OiNgQWwBU7ADXgCP3j8EeAoOA5SQDo4DfJA
ESgFFaAG1IGr4DpoB12gD9wFY2ACPAHPwSJYBu/ABvgGfkIQhIWIEC3EDHFC/JAoJAMpQeqQHmQK
WUNOkDvkC4VA0dBx6AR0GiqASqEqqB5qgW5BfdAoNAk9g5agNegztI1AIggIOgQ7QgAhiVBCaCFM
ELaIwwhfRDgiDpGGyEGUIKoRVxBtiD7EGOIJYhHxDrGJBEhyJAOSGymOVELqIC2QzkgfZAQyEZmJ
LEZWI5uQnchh5CPkIvI98gcKg6JFcaHEUaooQ5QdyhMVjkpEZaFKUXWoNtQg6hFqCbWB+oUmotnQ
omgVtBHaEe2LPopORxeja9Gt6CH0E/Qy+hsGg2HACGIUMYYYJ0wAJh6ThSnHNGN6MZOYV5hNLBbL
jBXFqmEtsCRsFDYdew57BXsHO4Vdxm7hyHGcOBmcPs4ZF4JLxRXjGnA9uCncCu4nGRUZP5kKmQWZ
F9kxslyyi2SdZONky2Q/8dR4Qbwa3hYfgE/Bl+Cb8EP4OfwXcnJyHnJlcityf/Jk8hLya+Qj5Evk
Pwg0BBGCDsGVEE3IIVwm9BKeEb4QiUQBoibRmRhFzCHWEweIC8QtCloKCQojCi+KJIoyijaKKYoP
lGSU/JRalG6UcZTFlDcoxynfU5FRCVDpUJGoEqnKqG5RTVNtUtNSS1NbUAdTZ1E3UI9Sr9JgaQRo
9Gi8aNJoamgGaF7RIml5aXVoPWlP0F6kHaJdpsPQCdIZ0QXQnaa7SveQboOehl6O3p4+lr6Mvpt+
kQHJIMBgxBDEkMtwneEpwzYjO6MWozfjKcYmxinG70ysTJpM3kyZTM1MT5i2mbmY9ZgDmfOZ25nn
WVAsIixWLEdZLrAMsbxnpWNVZfVkzWS9zjrLhmATYbNmi2erYbvPtsnOwW7AHsZ+jn2A/T0HA4cm
RwBHIUcPxxonLac6pz9nIecdzrdc9FxaXEFcJVyDXBvcbNyG3NHcVdwPuX/yCPLY8aTyNPPM8+J5
lXh9eAt5+3k3+Dj5zPiO8zXyzfKT8Svx+/Gf5R/m/y4gKOAgkCHQLrAqyCRoJBgn2Cg4J0QU0hAK
F6oWeiyMEVYSDhQuF54QQYjIi/iJlImMiyJEFUT9RctFJ8XQYspiIWLVYtPiBHEt8RjxRvElCQYJ
U4lUiXaJD5J8ks6S+ZLDkr+k5KWCpC5KPZemkTaWTpXulP4sIyLjKVMm81iWKKsvmyTbIftJTlTO
W+6C3Iw8rbyZfIZ8v/yugqJChEKTwpoin6K74nnFaSU6JUulLKURZbSytnKScpfyDxUFlSiV6yof
VcVVA1UbVFcPCR7yPnTx0Cs1HjWSWpXaojqXurt6pfqiBrcGSaNa46Umr6aXZq3mipawVoDWFa0P
2lLaEdqt2t91VHQSdHp1kboGupm6D/Vo9Oz0SvUW9Hn0ffUb9TcM5A3iDXoN0YYmhvmG00bsRp5G
9UYbxorGCcaDJgQTG5NSk5emIqYRpp1mCDNjszNmc+b85iHm7RbAwsjijMW8paBluOVtK4yVpVWZ
1Rtraevj1sM2tDZHbBpsvtlq2+baPrcTsou267entHe1r7f/7qDrUOCw6CjpmOA45sTi5O/U4Yx1
tneudd500XMpcll2lXdNd316WPBw7OFRNxa3ILfuI5RHSEduuKPdHdwb3HdIFqRq0qaHkcd5jw1P
Hc+znu+8NL0Kvda81bwLvFd81HwKfFZ91XzP+K75afgV+7331/Ev9f8UYBhQEfA90CLwcuBekENQ
czAu2D34VghNSGDIYChHaGzoZJhoWHrYYrhKeFH4RoRJRG0kFHk4siOKDg5k7kcLRZ+MXopRjymL
2Tpqf/RGLHVsSOz9YyLHTh1bidOPuxSPiveM7z/OfTzl+FKCVkJVIpTokdifxJuUlrScbJBcl4JP
CUx5kCqVWpD69YTDic409rTktFcnDU42plOkR6RPZ6hmVPyD+sf/n4enZE+dO/Ur0yvz3mmp08Wn
d7I8s+5lS2eXZO/l+OQ8zFXIvZCHyQvJe5qvkV9XQF0QV/DqjNmZtkKuwszCr0VHikaL5YorzuLP
Rp9dLDEt6TjHdy7v3E6pX+mTMu2y5vNs50+d/17uVT51QfNCUwV7xemK7Ur/ypkqg6q2aoHq4hpM
TUzNm4v2F4cvKV2qr2WpPV27eznk8mKddd1gvWJ9fQNbQ24jojG6ce2K65WJq7pXO5rEm6qaGZpP
XwPXoq+9bXFveXrd5Hr/DaUbTTf5b55vpW3NbIPajrVttPu1L3Y4dUzeMr7V36na2Xpb4vblLu6u
sm767twefE9az96duDubvWG97/t8+171H+l/PuA48HjQavDhkMnQyF39uwPDWsN3RtRGukZVRm/d
U7rXPqYw1nZf/n7rA/kHrQ8VHraNK453TChPdE4emuyZ0pjqe6T76O5jo8djT8yfTD61ezoz7Tq9
OOM1s/os6Nmn2ZjZn8+T59BzmfNU88ULbAvVL4RfNC8qLHYv6S7df2nz8vkrz1fvXke+3llOe0N8
U7zCuVK/KrPataa/NvHW5e3yu7B3P9+nr1Ovn/8g9OHmR82P9zccN5Y/RXza+5z1hfnL5a9yX/s3
LTcXvgV/+/k9c4t5q+6H0o/hbYftlZ9Hd7A7JbvCu52/TH7N7QXv7YWRIki/YwEkfEb4+ADw+TIc
JzgBQAvHv3iKP/HvbwYcHkMwB8b2EC90DeGEpEe+RrWgszHBWCvcITJ+PBM5DQFHRFFgKamp6Kk5
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

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://hazelcast.org/book/images/ec2-4.png

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
1Rtraevj1sM2tDZHbBpsvtlq2+baPrcTsou267entHe1r7f/7qDrUOCw6CjpmOA45sTi5O/U4Yx1
tneudd500XMpcll2lXdNd316WPBw7OFRNxa3ILfuI5RHSEduuKPdHdwb3HdIFqRq0qaHkcd5jw1P
Hc+znu+8NL0Kvda81bwLvFd81HwKfFZ91XzP+K75afgV+7331/Ev9f8UYBhQEfA90CLwcuBekENQ
czAu2D34VghNSGDIYChHaGzoZJhoWHrYYrhKeFH4RoRJRG0kFHk4siOKDg5k7kcLRZ+MXopRjymL
2Tpqf/RGLHVsSOz9YyLHTh1bidOPuxSPiveM7z/OfTzl+FKCVkJVIpTokdifxJuUlrScbJBcl4JP
CUx5kCqVWpD69YTDic409rTktFcnDU42plOkR6RPZ6hmVPyD+sf/n4enZE+dO/Ur0yvz3mmp08Wn
d7I8s+5lS2eXZO/l+OQ8zFXIvZCHyQvJe5qvkV9XQF0QV/DqjNmZtkKuwszCr0VHikaL5YorzuLP
Rp9dLDEt6TjHdy7v3E6pX+mTMu2y5vNs50+d/17uVT51QfNCUwV7xemK7Ur/ypkqg6q2aoHq4hpM
TUzNm4v2F4cvKV2qr2WpPV27eznk8mKddd1gvWJ9fQNbQ24jojG6ce2K65WJq7pXO5rEm6qaGZpP
XwPXoq+9bXFveXrd5Hr/DaUbTTf5b55vpW3NbIPajrVttPu1L3Y4dUzeMr7V36na2Xpb4vblLu6u
sm767twefE9az96duDubvWG97/t8+171H+l/PuA48HjQavDhkMnQyF39uwPDWsN3RtRGukZVRm/d
U7rXPqYw1nZf/n7rA/kHrQ8VHraNK453TChPdE4emuyZ0pjqe6T76O5jo8djT8yfTD61ezoz7Tq9
OOM1s/os6Nmn2ZjZn8+T59BzmfNU88ULbAvVL4RfNC8qLHYv6S7df2nz8vkrz1fvXke+3llOe0N8
U7zCuVK/KrPataa/NvHW5e3yu7B3P9+nr1Ovn/8g9OHmR82P9zccN5Y/RXza+5z1hfnL5a9yX/s3
LTcXvgV/+/k9c4t5q+6H0o/hbYftlZ9Hd7A7JbvCu52/TH7N7QXv7YWRIki/YwEkfEb4+ADw+TIc
JzgBQAvHv3iKP/HvbwYcHkMwB8b2EC90DeGEpEe+RrWgszHBWCvcITJ+PBM5DQFHRFFgKamp6Kk5
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
pEcAElN6fYKIQAAEQAAEQAAEQMDLCUBienkHInwQAAEQAAEQAAEQkB4BSEzp9QkiAgEQAAEQAAEQ
AAEvJwCJ6eUdiPBBAARAAARAAARAQHoEIDGl1yeICARAAARAAARAAAS8nAAkppd3IMIHARAAARAA
ARAAAekRgMSUXp8gIhAAARAAARAAARDwcgKQmF7egQgfBEAABEAABEAABKRHABJTen2CiEAABEAA
BEAABEDAywlAYnp5ByJ8EAABEAABEAABEJAeAUhM6fUJIgIBEAABEAABEAABLycAienlHYjwQQAE
QAAEQAAEQEB6BCAxpdcniAgEQAAEQAAEQAAEvJwAJKaXdyDCBwEQAAEQAAEQAAHpEYDElF6fICIQ
AAEQAAEQAAEQ8HICkJhe3oEIHwRAAARAAARAAASkRwASU3p9gohAAARAAARAAARAwMsJQGJ6eQci
fBAAARAAARAAARCQHgFITOn1CSICARAAARAAARAAAS8nAInp5R2I8EEABEAABEAABEBAegQgMaXX
J4gIBEAABEAABEAABLycACSml3cgwgcBEAABEAABEAAB6RGAxJRenyAiEAABEAABEAABEPByApCY
Xt6BCB8EQAAEQAAEQAAEpEcAElN6fYKIQAAEQAAEQAAEQMDLCUBienkHInwQAAEQAAEQAAEQkB4B
SEzp9QkiAgEQAAEQAAEQAAEvJwCJ6eUdiPBBAARAAARAAARAQHoEIDGl1yeICARAAARAAARAAAS8
nAAkppd3IMIHARAAARAAARAAAekRgMSUXp8gIhAAARAAARAAARDwcgKQmF7egQgfBEAABEAABEAA
BKRHABJTen2CiEAABEAABEAABEDAywlAYnp5ByJ8EAABEAABEAABEJAeAUhM6fUJIgIBEAABEAAB
EAABLycAienlHYjwQQAEQAAEQAAEQEB6BCAxpdcniAgEQAAEQAAEQAAEvJwAJKaXdyDCBwEQAAEQ
AAEQAAHpEYDElF6fICIQAAEQAAEQAAEQ8HICkJhe3oEIHwRAAARAAARAAASkRwASU3p9gohAAARA
AARAAARAwMsJQGJ6eQcifBAAARAAARAAARCQHgFITOn1CSICARAAARAAARAAAS8nAInp5R2I8EEA
BEAABEAABEBAegQgMaXXJ4gIBEAABEAABEAABLycACSml3cgwgcBEAABEAABEAAB6RGAxJRenyAi
EAABEAABEAABEPByApCYXt6BCB8EQAAEQAAEQAAEpEcAElN6fYKIQAAEQAAEQAAEQMDLCUBienkH
InwQAAEQAAEQAAEQkB4BSEzp9QkiAgEQAAEQAAEQAAEvJwCJ6eUdiPBBAARAAARAAARAQHoEIDGl
1yeICARAAARAAARAAAS8nAAkppd3IMIHARAAARAAARAAAekRgMSUXp8gIhAAARAAARAAARDwcgKQ
mF7egQgfBEAABEAABEAABKRHABJTen2CiEAABEAABEAABEDAywlAYnp5ByJ8EAABEAABEAABEJAe
AUhM6fUJIgIBEAABEAABEAABLycAienlHYjwQQAEQAAEQAAEQEB6BCAxpdcniAgEQAAEQAAEQAAE
vJwAJKaXdyDCBwEQAAEQAAEQAAHpEYDElF6fICIQAAEQAAEQAAEQ8HICkJhe3oEIHwRAAARAAARA
AASkRwASU3p9gohAAARAAARAAARAwMsJQGJ6eQcifBAAARAAARAAARCQHgFITOn1CSICARAAARAA
ARAAAS8nAInp5R2I8EEABEAABEAABEBAegQgMaXXJ4gIBEAABEAABEAABLycACSml3cgwgcBEAAB
EAABEAAB6RGAxJRenyAiEAABEAABEAABEPByApCYXt6BCB8EQAAEQAAEQAAEpEcAElN6fYKIQAAE
QAAEQAAEQMDLCUBienkHInwQAAEQAAEQAAEQkB4BSEzp9QkiAgEQAAEQAAEQAAEvJwCJ6eUdiPBB
AARAAARAAARAQHoEIDGl1yeICARAAARAAARAAAS8nAAkppd3IMIHARAAARAAARAAAekRgMSUXp8g
IhAAARAAARAAARDwcgKQmF7egQgfBEAABEAABEAABKRHABJTen2CiEAABEAABEAABEDAywlAYnp5
ByJ8EAABEAABEAABEJAeAUhM6fUJIgIBEAABEAABEAABLyfg14/xHzp0qB+9wRUIgAAIgAAIgAAI
gICnCdx7772eqKI/JaaHQvREs+ETBEAABEAABEAABEDAcwSwUO45tvAMAiAAAiAAAiAAAsOUACTm
MO14NBsEQAAEQAAEQAAEPEcAEtNzbOEZBEAABEAABEAABIYpAUjMYdrxaDYIgAAIgAAIgAAIeI4A
JKbn2MIzCIAACIAACIAACAxTApCYw7Tj0WwQAAEQAAEQAAEQ8BwBSEzPsYVnEAABEAABEAABEBim
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

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://hazelcast.org/book/images/ec2-5.png

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
1Rtraevj1sM2tDZHbBpsvtlq2+baPrcTsou267entHe1r7f/7qDrUOCw6CjpmOA45sTi5O/U4Yx1
tneudd500XMpcll2lXdNd316WPBw7OFRNxa3ILfuI5RHSEduuKPdHdwb3HdIFqRq0qaHkcd5jw1P
Hc+znu+8NL0Kvda81bwLvFd81HwKfFZ91XzP+K75afgV+7331/Ev9f8UYBhQEfA90CLwcuBekENQ
czAu2D34VghNSGDIYChHaGzoZJhoWHrYYrhKeFH4RoRJRG0kFHk4siOKDg5k7kcLRZ+MXopRjymL
2Tpqf/RGLHVsSOz9YyLHTh1bidOPuxSPiveM7z/OfTzl+FKCVkJVIpTokdifxJuUlrScbJBcl4JP
CUx5kCqVWpD69YTDic409rTktFcnDU42plOkR6RPZ6hmVPyD+sf/n4enZE+dO/Ur0yvz3mmp08Wn
d7I8s+5lS2eXZO/l+OQ8zFXIvZCHyQvJe5qvkV9XQF0QV/DqjNmZtkKuwszCr0VHikaL5YorzuLP
Rp9dLDEt6TjHdy7v3E6pX+mTMu2y5vNs50+d/17uVT51QfNCUwV7xemK7Ur/ypkqg6q2aoHq4hpM
TUzNm4v2F4cvKV2qr2WpPV27eznk8mKddd1gvWJ9fQNbQ24jojG6ce2K65WJq7pXO5rEm6qaGZpP
XwPXoq+9bXFveXrd5Hr/DaUbTTf5b55vpW3NbIPajrVttPu1L3Y4dUzeMr7V36na2Xpb4vblLu6u
sm767twefE9az96duDubvWG97/t8+171H+l/PuA48HjQavDhkMnQyF39uwPDWsN3RtRGukZVRm/d
U7rXPqYw1nZf/n7rA/kHrQ8VHraNK453TChPdE4emuyZ0pjqe6T76O5jo8djT8yfTD61ezoz7Tq9
OOM1s/os6Nmn2ZjZn8+T59BzmfNU88ULbAvVL4RfNC8qLHYv6S7df2nz8vkrz1fvXke+3llOe0N8
U7zCuVK/KrPataa/NvHW5e3yu7B3P9+nr1Ovn/8g9OHmR82P9zccN5Y/RXza+5z1hfnL5a9yX/s3
LTcXvgV/+/k9c4t5q+6H0o/hbYftlZ9Hd7A7JbvCu52/TH7N7QXv7YWRIki/YwEkfEb4+ADw+TIc
JzgBQAvHv3iKP/HvbwYcHkMwB8b2EC90DeGEpEe+RrWgszHBWCvcITJ+PBM5DQFHRFFgKamp6Kk5
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
2Pan1/H4dPkOu8pE7Lgl8sPTai+dnvuWE6WHyhXGecKFgyshzx3buLi1/KUB0uPwEcqcrrPJvvFy
2DzJKb1wgD+qj5pOFdifw+c+jFtbINWvb0SyTzsiQASIABEgArcvAafnvrtAU1oslro6S53FYq2r
i1+2ZvaYOxxXbfp0EKjO63LHVBws2XEqJTLAEUufjROwVmOe1+gv3RjaeG4Pctgfe7Lf9OCygIfZ
UN7znKIykd+p/qYacek3JRABIkAEiAAR6CAENn9/IeO1+UZvb28fH/zftvdTdhAmHrhpDNq/fz8W
3oNurYdjPPD8ZmdpTTkptcVJzLlqn4fZUNzznKIu3fy6ka58o3giQASIABEgArcfAdKUnvUpxKTJ
s5yUiwgQASJABIgAESACnY9Amz6j0/lwUouJABEgAkSACBABItApCZCm7JTdTo0mAkSACBABIkAE
iECrEiBN2ao4yRgRIAJEgAgQASJABDolAdKUnbLbqdFEgAgQASJABIgAEWhVAqQpWxUnGSMCRIAI
EAEiQASIQKckQJqyU3Y7NZoIEAEiQASIABEgAq1KgDRlq+IkY0SACBABIkAEiAAR6JQESFN2ym6n
RhMBIkAEiAARIAJEoFUJkKZsVZxkjAgQASJABIgAESACnZIAacpO2e3UaCJABIgAESACRIAItCoB
0pStipOMEQEiQASIABEgAkSgUxJonb/3/e2333ZKetRoIkAEiAARIAJEgAh0VAL3339/K7reOpqy
dX1qxeaRKSJABIgAESACRIAIEIF2IEBr3+0AmaogAkSACBABIkAEiMBtToA05W3ewdQ8IkAEiAAR
IAJEgAi0AwHSlO0AmaogAkSACBABIkAEiMBtToA05W3ewdQ8IkAEiAARIAJEgAi0AwHSlO0Amaog
AkSACBABIkAEiMBtToA05W3ewdQ8IkAEiAARIAJEgAi0AwHSlO0AmaogAkSACBABIkAEiMBtToA0
5W3ewdQ8IkAEiAARIAJEgAi0AwHSlO0A+faqwlZ7uc561Xb99moVtYYIEAEiQASIABFoEYHW+Ts6
jbhwsSI/738LTly2eXXrazT4+/ccO/qee4cGoNTlMz/WWG3My2fggP6NGLmZydYf/rn3wCXm46Bl
MPoMGX738KF3d2+hV7aypW8VHYeRXv0+fjGyZwutNRS/fuagOdd85kj1Vca69fXveW9I4P3j72mx
/R//+5N9G0/YRD1Rvx35w98PtYHzDc1wE3IeOW1F0o0LlEQEiAARIAJEgAg0EHCopIaYVg6dKchJ
yrmoNlrzRWHVK8mP3utduzl9T841xrzu/Pi16S1WPOpKWvPo6oHCM19Y1Ra/OcaY4bn508IDfdUJ
TTm6Zq0R2a2tOO13+r/Tdm6sUrhRZdlVesbviO3D34YoYpscPLylQVCisO36lTZw3kOvNCOnTUh6
6AxlIwJEgAgQASJABFgba8q60hWyoPQyjB1kOFNlOcXFWTeJfU8/I2OXGDN2M2j64qrNygyG7vac
muTWjbBZrzJDd4PwSse0PEOpTrP9ZU3ewDd/PUQdyxqz1pDdO/Tt5/rYoKqNvT2V1I0ZP7xlj1JQ
DujV9dSlG6jRp6FWHmo63utHKsQMZY83Xv31CEPtVdZz9sCBTXNe7UMLjjQjxzXJpre0BX5RUSJA
BIgAESACnZVA22rKyxU/nhJkjX4fL/2lkE3V5fdYtAQAAEAASURBVP/+Sxam0ayFf/+fjRCU2C6d
+9Mn/5ddM/x+/i+HGGqLtu75aO9FMQdm6OXzRPTEKSPEyviPWZ98ewTTg/4BsaZuuXk/njT2X/x7
05EteX87cvnspRtC8gwI8Iud+cCEQH/JdNXXG/79WekVJA0Y1HuI13XLtevM/+7Fv71fWra+frgg
76Ovz5+CqsNm7DEv+oGfj+KL8i42wyv/GX1v79qT33//3ucnpaZdWf33A3/+7Vgpv641n/y/7cqH
jL5meGL+Lwdy7Vz99d927+UTk74LnhpR8KX5IARfr4AFDpeO7dud9c2ZA9VcCBp69Yh6KCQ2PJgx
XeMaV23/u9FsX5seEDLkzTkPgPnVM6WfZXyfD9nMt0bwYvaVGX3D+17N2luDLjD4+70y/5cjelsL
/p77hegsZtuc8X+Zf8Di3wbkOzvvhnbF3z45cOwaG2gKfSL8Hqn3c3POXme90INhPVmTetaoN3JC
i5ydaV5LJUi0IwJEgAgQASJABJpIoG01pcHomPmz1ryeljNl+J3D+W2ID7y6FG5W/630isPbGwdP
WBC+fK1265ptnynWbW2XLB99tvOHmZMTJgawuouFJ65wJXfi2IFiqajxMtTJgeKLdlEoxZ2qqlm5
5p/PPTc7vN+5vy3flcOnRfl26sRFu8A9Ww3Z1Z1Z8z/54qMTUpqxq8F6w2a9sjZr16nf/OL3Y4Qe
lZKcdhyY78AxD/7Zf3f8mpOwc+rIGTjR07W1+422g0e4zsspPv3E+P7sTOnaI7yxbJBPv7qL+RUW
7pWx+gnh0tovPqrgiWKzXbryxdeVj4QP/tYzVy8fqYRC5ZvxTiEoEezeL+SJF0fEXIQPtVvTPMDL
zhyAcpc2W3XNG2t2r10ceqTUUiOUN7txAJ114pxtZk+186fd0a6zFkl9d/KEDS2F0D1yxHIQXWOU
uqdpPTvtiHbkXHIi2eyWPtjSe2QFONoTASJABIgAEehkBLq2aXu7Dw0SM3io5VTVxY3fHPuvjD3z
Xv/76q0HrjL/mKT7JmPtG5vR7+2kiNTnIoZUfWcXlP79Ul+d/fHvpHk9xnZ9+e1JZPNi8hK5wWgY
FWAY0BcRxrCoYW8kRHyc/PDHSRPnDbdnOXL24uXDP9gFpbH3Kwm/+DhhiJ9Um1h5v1r5byEoB08Y
s27poxlJIwZIqTk5ZmjExrfAgOEik/UipKUba0N+Hih8yt17FCUOf2OXzDE/H6toERffV8v32gWl
V++XEn6xNjnilajeBq9uNs9ddfxGGBASqF5M79azt/FquYd4DTEzx7wS3c+Oq/rcMZvUWcK41Fkf
/OeUng3dwZ13T1tuqbwEr7qdoMEU86Bnu2lHzvBe8tgQJJvdUtGptCcCRIAIEAEiQASaRsChQZpW
yvPcQUteZf/9mXmj/VY8e8G9ew8ZAgISxvcbKOr36t73jv7QQMcK94ocUVH39cPdjSPCnhi0WVJ+
tuo6Zs+MHMZ+HyxteEra32j9NGuXWCxWelZTYReHUTMn3TvAl9l8IZLsj5Uwdra4WmQ+Xvj93MLv
GwpicbxpW1fMbLmzdkdojP/Rz1BbVdXhutN7i/mcJeYRpww1Miko13b2iN3h6TPDxg3gc6X3hkdl
hLOTW/9b5GmCq9f40rnTdqq0VsQ0greXf9TEkO4sKOrrL6SbE27gpsnuvfsNxA8ALH87OsvJefe0
nTxxeehZz3Jn1COH2c4rbbakpbI4VRqkMBEgAkSACBABIuCeQBtryotVZ1jQr+cF/Zpdrz5TebLi
x9y8k3ul2/KOVJxn4wc6OXfVoYQMdr+69e2FmVSNPFJ4fflwXtLnZyQ7XceG9Blorc5x6Feb/DC1
yG9QTcpedtSF2ygnD+rOnzXB7YPI2ctfng11co8fOqq+/H2FY5XZF7OlJ91ZM075ud9nn0PN2j79
bK9Yph8bGaJdX798ya4xDcaWunqquOLkb0MUfE8frsQ9nXaSjeC9xuVidybuv9QwsK+AO8e7py3n
PlVRdZmF9IR53c2BF4luela3qDLS04HkvqVKixQmAkSACBABIkAE3BJQXMPd5mte4uUTB5KydoVN
GPLrsOAB/YLu7Xen5ciZvaVcORm8uHKT7ivE7Fctlo9HGK4PHN6bFfIJp/xvSmePeKD7xQN/K3WS
QZIjCllz0jHdOP03v3hijO/l/f+TU2GfixwQ4ssKudzMyd41HOYrjh6XSovdwOH+InXAoIDf/54/
y4Kt+vC/C872caF3kH4dsrif8fIR89G/FNpfkBQWOQJl3VvrPiZ47Of7DjB2/IS4hdTwiOluqULV
bmBIb2bmzc/N+y5qVGQ/6KrKf3/6tTU2zFNXe44YMZmd2cWtXnxxZe4rsaFDenU9e+RwevbJUyEj
PzB5hlfllKcH7mkzSb1xW5dqj52pHnKtgt9Mqd0861mUcxo5TpY8HUhOxeiQCBABIkAEiAARaC6B
ttWU4s7FvYXH8E/tYY8nou7B4zV+9vqvvPHW36EzX0meOJntgSSqqTg2b9kxCBGxDZ5w7whI0Dqn
5Vae2C/Ih5m5iMz9fNsPXzLpRUWiEOsOgeV1ZheMWC1/ySqyxzo+eo4KiTKewQ2Xp44ce/r1Y37G
rhY8pgMnQowzwh2ZHJ92BcNurP1sjyOOfw4YPeL5cK4OG7MWNNtkPuB4ItsQFHivt2RGVlrSUc9R
odONu3KtzFZ1Jun1v2M2UXpTz51PjAr12NW7f/+7frs+40qaVZ//r3RJXkrGse4PJ5uE19Fqqbws
4+xHmPVUdYd72sw7YJzxe6l3rvzXX/4p27AH1KZEpJuexSyq88hJCkHfyVsLWyrboQARIAJEgAgQ
ASLgIQHVGquHZTzP1nNQ4CNBPZyWkkcNv+udZLzgEGaMM343YpRK1t6dkHxfVIDklUNQTg4bs/yR
YF6pV1f7erF4skfyw3/82JhB9lacsnYdK8pCGvLUuxNei1gwuveAXoYB/j5Rox3Ph/gbpNSA3y+d
vMARWSMJSpSZEtRHMqzaqR4o4ZOsXQcP8nvud5P//FuTI18j1kZEBjqeEGIxPw+1l3JuUcAT/znp
d0F2YGI5fsCgngbWiHGHD/yz54jIjxNGTPZX9ayff+/fTxjMgTQFr0O32Vf87RDk/nJ23j1t/9m/
GSgT8AvwsYeFNWdTvCFue1YzcpwttKilvHraiAARIAJEgAgQgaYQ6LL4xaUWi6WuzlJnsVjr6uKX
rZk95o6mWPAk7/XLdRcZ/kY06+5zh792ZflyXTVjXQ3ePeU3nF+9eLoGb+r2Yj79ArCy3Oh2+eJp
2zUd4ycLcnOqe4cN79PPyIq++X6ttOw+wDTuz7MkkWq3a62+wB9eMXgZe/b2bbSuxjK0ijXr5Qu1
eriaYhx/mPsS/vBld0Mvf8hS5dZUvMqybsIe0K6tPmNhRh9/jzm76lnhhnbkOLnXRi11qoUOiQAR
IAJEgAh0QgKbv7+Q8dp8o7e3t48P/pcnndoURbee3v5MrPbq1cNT1Vv33v379VZHuT3q2bu/bnr1
ierc4vO5e5Ur74bfR2LZXbkZ/e9QzHwqU5oTbhVrxp76LjXFuMG35x36ErmpeD3E4AFtX/9++i65
qsJVz4r82pHjZKeNWupUCx0SASJABIgAESAC7aMpbxrnfsP7jDpRffkaq7l23cer25BBd/565oND
ene7aQ7d1hUT7du6e6lxRIAIEAEiQATcEbjdNeX4yFfHu2s/pbUigX5EuxVpkikiQASIABEgAh2K
gOpJjg7lOTlLBIgAESACRIAIEAEicKsQIE15q/QE+UEEiAARIAJEgAgQgY5LgDRlx+078pwIEAEi
QASIABEgArcKAdKUt0pPkB9EgAgQASJABIgAEei4BEhTdty+I8+JABEgAkSACBABInCrECBNeav0
BPlBBIgAESACRIAIEIGOS4A0ZcftO/KcCBABIkAEiAARIAK3CgHSlLdKT5AfRIAIEAEiQASIABHo
uARIU94KfWc5tG9fpQWeyAGlV7qRygy64eaV0jWlG9l8+5XF+4qreGtbvDXDh2YUaXCzsnhPbu7O
fcWVDVENIdmyHGhIo5Ag0Hpd37mItoAbjcZWGyq6vaAb2bwqbZaamhqLrXmFG0pRjzewoFD7E2hT
TVm5asGCBSm5cqtshzYiYt2hVtETEGD7nl2wYNW+Gtm+B4HKde++m3u0xaetBzU1nkX231Kyas2a
L0pqmBxQFtaNVGbQDTevlK4p3cjm27fkrF6zenOJrlX9SBkUU3efRz40o4i+F/s+efGt1ZmbNq1f
syZXZwTLzsgBfTNuYxta6jZb0xLVBJpWtnVzt6TrW9cTpTUnPurDNukRZe2WdS/jS1G5Je1zHl4O
bg3OqJ1U2mvOOaIq3zYHTg6rDxva1YqVq6toBcOOXlCZ0o900afqvk56ed0e+6/TmkO5y55d8Nzi
l156afFzCxY8++K7e6qae5FqyfePqmktOGhOh7Z6fzXV/5vuQFMdvkXzt+nfZgyMmz/hpTWbPjFP
eMrkx1hV2nvb2aCHHxvp0zowfIKfiovzDYZlz7eafWVloRY23fMSbZdT9t9gABGDgf9vDygrNfAU
H+8mQtM1pTTbwnDzvOKVGny8mRdvk8ebDIpVqrrPIx/UPe5REV3HLObC2qGPvZk8PUA3uaHvWkK+
oaX6lTQrVk2gWSZaqVBLur6VXNAx48RHfdgmPaJywmZhg6Y8PivUr84mZIRvqPO57uDmM9Txjac+
EVT21P43f8CrjLb4QO0VUx+2CWR1FS1ugIsvLkfXqO276lMePy3uMZNvXe25PVvW52e+G2pKNRmK
33pvU+2g8MT4qEHethMl+75Yv62w0jIpoEmXNocHLfn+cdho6WdzOrTV+6upjbjpDjTV4Vs0f5tq
SuY3Mf6xnMJNaWse+egPlo2rSpj3/IWzoSZslXtWvZtZVgco3uGPL4yPGMZsh959cc3QhW/PHsbV
xqGNKVvYzOSY0cx2dNXLa3xnzvQuyi04Wjsl8c3ZDZL03J4vc0cGmIb5VK16OY2FhlrMBeV1zHvQ
hMQ/PCVyFW/+cM22ItTj5d1n0mOJAflpCBemvVhmsPUJT0yOGZm76uVNJbW8c7x8w2cnxk+HJ6hR
3xqrKf5k1ZrCE7DhPXTCI/Ofmt73rPnD9z4pOncNBoKnzf9DzERuyrEd2vxuWtnQt5Nn4xqx58OX
c/0ef23uaGjrT1581yfuzbmjZf+Z/JtUDjhs8E8QKdn+ybK0ohPXUPGU5OS5XNe4rRrpDlM2vTa6
oe1Z2+P7wKuy/IyUNYVOzPUdq9r37rsZZbXXmJcXu8Z8ebMaNs9AhZanqbtvNiej74Pdti03xeMi
bnkeWvdWIcbIF+8mbbaFY5T6mJ0HcANwmbzOOPespe6GtK0K5846iaR3Hx9DQFTiQgxaxdbYmB+t
d/Y5nWWv+m17y/m8QAN1q3bLjful2/WaUuZ1y9ZVTXr7D9P5+c+YeV1KRtXEd/4w1H6O+/k09eyD
ETWKhXMnBWgGp0k9Qp6aWP6J+ivCp9EvGV0sOlVL7dLuoCQDJkSMHqlJ0eEmvjE0JwK+J+1bSwe8
jtuannLUZf/0oEj7Q9ZwiNEb9qqW6H1PIoNOL7iIVFhz1ac83jRppNTXoYaS59JK8C1tKSnEFejh
p+JN0s/VvhGBpojZjm9vu1EXZ8d0pr2Syl9E7i6p/Eu+Zl8BLii+oQ/Pf7jPlrT1+BrHQeKrC/n8
Dza9ftfpa7uDTh/ype0WvTTDXXVbtNpAb8Bo1UifMjcCwAlKJzls07VvMDRMXzjfm5W9m5Kyavu5
oY8tnIjxait+/a3MMmi6JUsenxJQsH7FJ+YaZqurrKutqrWv+tTVVpafwxhH5trK2nMF6zMLavyC
hwX6Kee3LLVl504crbVJeWpLCgp8pzz++GMTbCcK12wp5kUPrVu9rcj0eOKSF56fHszM5qrgcBPi
B5mmzJo1ewo/g23MK3Da44kvLHkBvx0LNq3IrRI16liDuWUvrS48N+zxxOfxS7Oy8Isyy6GUV9JK
fCe98OZ/vRA35ej2Ne/uRPmGLXCYb115fhn/ejj0ZdG5E/nbePJZfIXUBvT1YbL/DSX0Q7jK1paU
9Zn+WNxj4aw8f9mHe2DQfdUKQ7ptdEPbw7ZzPXeuyOzE3IVjR1NeX1Nm4+jmz54EQen0jekZKKbp
Plc+yK03eFykEZ4BocEwGhAaPmv2LFOfozoDWK5TDuiNc89a6nJIYxCmvJ5ZxkIfT0yMmz3RVlt7
9Kj0i8hRaeNjXs8rzVkG+aw9L3SrboQbY7pdr1NqaHCf2rJN+WdFSw5tyi/vYwo2yOdI088+DQqs
M2rrPaceIYPUhwENJyn/ItI/NbQ9ole1o4c0n/hKK/nyk3X2LSMjg38J6XOz09A5ERxWWzTg9dzW
ElN9xXlWpP0hazjoDnsHNelT73tSf/TqDmmVLRd9yhejynM37szN3bzxk5fTitjQ2RN9mE+wyZux
bbgpa4/5aOVZcQkUv6xko/pnh/tGubukYiTvC5gdF/dwaG3JtvfeW89Mj82Pm+ZbW/LJJrNUqU6/
6/W17KA60HDa6p81GlPtfWlu3AFdts5qpMLjq7Caz2191LbzlByd38SFD+eu2FbOfMMTpQkVy6GC
c8w7MTnehPNmWHKVecH2XPNTofzHkeJEMniJIykq9PE3F0Zo1hzl3FJgXOLKZ0yYEIxg+wo31fCJ
Q1sdTk8vb78+gSMDh418ezb3xtt3fWFA+COTRtsLT39mYdUh86HyEzU+cODE0cqa6Vx2Mq01S0n+
CcyzvrNwIi86etJ0ZinOyGRej82a4merY8PCJ/rm7yupZAo/fUIn+rJC81EWass/x62W7axkj1Ti
VsLQcZKg5XEebFBgExLffoq3jvlWmlfvK6kqNpS7rVph1cdVG2V+AK+k7Unbmc28hVN6x4m5pbhA
65itTwki57/9B3yBMjay7It8iGLl5iGowIhwVffZToCM1gelZQ+L6Lqt7Eo/0wRfVoCREzHaYCn+
xNUAVlatP84XejYkXAxpyyE+CBPffoafOyy0XEOy0TFvKd7iynnVWaY5L8LP6lTdKDdbcb6263VL
+T0zO3hN0RdfmqfHm87u3HaO+T4/JRA/WwTSZpx9WhQ4YbWDM/AZ9aAaqT60nbD3aVN6RFu1cmA4
hw2srrKs5Jw4HW0WW224bXqfQzrc5O9H51GtsOic5OIc0e0Cm5/zF6YuMeV5oW2pbpH2h+zEQX/Y
myIU5HS+J6ec1ekF3SGtsCMF9fo0AD1sYOdKCr4sZ5iw5L+ryzevM4+bazIlz5/27prtm/BrUdr6
hE5buDBGecHzm6hzdlgO5bg6l7kZaUCJUSVZVX3JT0h8R7qgTCzLf25fKL8a8xIlBWllJRZmYrpf
45rhIZnV28m1SgHtBUU7bNr50tyoA/oDRlIp8vckhvomT6/CepRu07i215TQjY/M9N22OnjuY1w2
4gd4YRnzwhSEnajJ5Ls9v+gsm4IInGnaDXHefk6Lpc65kMfgmPzq08dbBH2Cp4zzLdye9tZ2ZPfq
89jCJdOHca3JruGrU/KlxrzspTRcNHz7DA3wleZ7JK90rR01w+1Q2W2YOVqEr4Brm1elbLoGs17Y
Av3wg1OxGfgv0BKzec9PhX0efn7midWbcvcNsx1lwY/1VeRqNChRkXaYKgsexvaxHxutWjbqoo1u
aGtJatsO8/qU9ByrLJF6nAtKXk4qKMKOvYegbOruc+GDw6j06VmRxrvSdo13gDRyXA1gVb2uxrlh
vodDQhdvJRfnoUPt544OyUbHvCvnUV3DWaY3ZnSrbpSbbte7KBUwc0qf9/Jzq+JNO78sYaFx/Hcf
h8437Qh0YURk53stirv0BidzGiFOhw329Ae8LhZt1dNHii8/hTlHEPfY8V+Mjl+5Ivqo+1PGtZPO
zXFxjujS07qtT8zhOT49LeLksNOhwqDnw15btQqyugoXwz6i4XtYf8zrfHHpDmlFC3hQt08d8e84
+rpm47KXtmdsm5U6N2BizDsTY/Dcd1VleVl+zqbC7avWmd6eq7wfQufsKHZxJZWdcfMl7zi1+Alm
/zrBNQwhC3/wvFLvTGkEuFyrOqDboTqm2vfS3KgDLgbMFDRH/p7UPYnUre+MR+2hKXEp5iPXcX0I
DB3KCsqwECXOGKxes0GhfaXfbQZv+/DWuCUZ8KyDJN0hZfUZ+cw7H9ksZyuPlny5Zv2mVZvC35nI
hzg/dfhWmfvFCTb0hb8kj+QRR19csEKKVu1ka7Lb8sUhMHgQy/dN/iAZ0ykuNp8JE/vkb/9kPX7N
PD564okJmWkZGezauDi+kNq0zeHzubKjmKC6q/Gq7eb129gIbXtZN213cr4hp55jFvNQtr0ca2YS
Oqz/aDfPQAm3HSicrMg+qOI9K+JBVzZYlUeCagA3pNtDLrJ51lK1NblpgSNBsqzSxvwERO1p0diY
d+GVqM9uTnfM6FbdKLcA7rBz17sqNXLmTK/8zE3rPjlUyx6eNUnJQHa7CWefBsWb8XonrMWs/E7A
t5TqUOmEItxIj2iqDv/gKftPKoUROSj9YFGdFrrc5PzunHTrf4Pbeucp7Dt9YeoTa/ADotL5O1a/
SPtDVnOQx4+rc1Z3zOv2gm6kEokIa/tUE+8XGui9/YSFv0LIxw8D2+DjFzjShH+VJQv21ajuaUFZ
7dnRSKMEAZeXVK3LIoZ/P7s6Q52Gh/tRra1AHn7aYdPel2bNuHVywC1b+/ekK0rahneqmLa+n1IH
pt/QUC92LjNjZ43NVrlv3aYTLHhSKPPpA2Vm3pZTebZq3+ZVqwvrfFTfsTp2Go0qXrfs5Q9zq2w+
w0abBvXhp6zBZ1CwF9u3veDs2Sosc+MZB9xufeJQVc3Zo5tXpTmfxOoK/IJNXqw2c9XmqhrL2aP7
Vr2cUhaIKafyt17OKK46WyO5nZIhbkZpKDksfBwkNfM2TejLDKYpgximNL0nhjb8PG7I6joEElVF
5rMWS1Vx7pqCOm/TxEF8ArSRqoU9/TY2kba27ZrXndi9R06tYz4BeIjk3KaMnVVnK3euW5Vf1/DL
WG60R6DU3SeXdRfwrIiu267M6g9gTW5X2TxqqcaaiPAZGurNalenfIg7sla9/GLBNWeSjY55V14p
K9QdM7pVN8pNt+tdlvKbNHsoK8kvvOY7JUr9Qw1Fmnr2aVH00RuczGmEOB0queiFdbFoq8YpXJyB
lwa9bBa3yylM4Rp+rmRfcbHZsfF3relyayjkxkk3SQ3lmW4XaN3WJ6aw42kRJ6+cDhUGdYOeQ24o
rq6i0WGvP+b1vrga6RrJA90+RQria4+WHD16CN2du+7d1fgyn2AylGS+tCBpXe6+Sn4dqdyz8d2C
OjYyVH0CoLDm7GikUU38km9Ah6r0zhRtX2NUW8wZeA8WfyKiKZuOKXV/6XaHqxpa5cvBSRs0wlZy
RZeSKyc7T7xmQrBNmu6l+o3eN+K1+eXL1qx/qWA9ausz4fGF0vtZHp4WvHr7trde2ca8Bg31ZY5b
wfmslDyzqPZOTFghXZVHbpLfoICa/E1vFW2SSvV57IWZBuY3ZUpw0fZNr7zCvMYlfvDUzNAt721a
/TpyePnyZWupIn1rOKXfnF/+1pptr7+0jRv0HTcrYNKbL9St4AYKpCrYuMdmiYC8NwybiIka25Tp
0vzKyOmhXplHQx2vP1L5j8pFQ6SAbAABnu1EfuYr+Zn8YNCUN5/i9740VrXdeN9Jum0M9IS2TFKn
7T6uKWmZBJien2ZevX095+TtC7MGnwbboqmegXLqPhc+CIv2fV91j7sogs7Vuq2yoxjDugPYdhbd
pOpE3WzI4fGQkId9AyzJz1VpmzdtKhk6YeKgcwW1apKNj/ln9M4+yXm5Ov0xo1t1o9wCput0vetS
4TOnbFqdHzpzuuMbwz6MdUZgY2efDgo/P71eVo+QZ0zaASN3q4zIfY/oVK0aS6oD6IwT+etX58uR
3vNXpk7U5Sb5Ie3UJ8Iz0j3gdgPq5jzVhAHv56X5wtQnJrvKdFqqX0TtVXtAdqpRb9g3tIPpj3nd
XtCNVJhCUL9PfaRndLatWSFdQPBdHjwlLnHuRJ+zhnGDKvM3rZGHQOjDz+s8P8CY89mh+w3T8EXk
0Zc8XOW309s3A3cRm94ZqjM8MA20D9MoQ6fbnxV3mJGuWdJA1R9+OsOmfS/NjTvgwfekLiUZQacN
dFn84lKLxVJXZ6mzWKx1dfHL1swec0e74LDVnK1hPn3xkpCGzVJz1sb68nWAVtssFsyHGvyU1dhw
z4jBxzERWnP2rMGnr4/SDbeVAxc0kaM0z4q1Cx6jjHJroXmJWCKx2LBGIp3zDhMeVq3fxqbT1rbd
4Yjzp45jvDqDur+dS3l0rO6+1i2i47bLCvQGsE5mD7PplNSNwijwEYO5Zk/SS5mhiSvFw1vKzI2O
edyIonP2KU0wph0zbqpuhJuLrm+klNofcaQdge6N6KDQPWGdBpXToZ4ncpwrLLpVy6U8CrjgZi/r
xkk3SeqKtfR03dZmU5rxtIiTV06HSouacDMhO1fRyLDXjnnuiG4v6EZq3G5KhPQFz9SXKo/Ku20U
97P5l1Rtv6v7+uyHC14pn/L8O/wdeU3e1Kak4ur+0u8O1/W0wpeD2gFPvifhjpaSax9vw5TN31/I
eG2+0dvb28cH/8s/UNq/qQa/vpolYB8/TVRLHfPhD3SrN7Ui1HFDnd3pCOLROaZVRbCTcfkQd9to
WsL04uQSDQH9NjadtrbtDXWoQzqONb06tUnHkbr7HLFuPz0uouO2S8N6A1gns4fZdErqRdVkvPRS
ERJw4uLuJN8Jj0hvA3DK2eiYxxSC/pBQGNJkcFd1I9xcdH0jpRTOyEHtCHRvRAcFVpa1Z5LTCHE6
lKvXCbjEolu1jgE3US642Uu4cdJNkro6LQpdt7XZlGY8LeLkldOh0qJzuLmQnatoZNhrxrzkh24v
6EY6u92kY90veE8suG1Uy/zU9ruqr2tKiphX3MzmCEo0TGVKNFTdX/rd4RpJK3w5qB3w5HuSN0T7
feLayds+5SZqytueLTWQCLQ6Ab+5b74w8WhVbd01rz5DJ5mkvxDQ6pXoG7yJVes7dGvEEpZ26AeC
3A6Qm16F36Q//WkSCaqmg7udS5CmvJ17l9p2+xHwCxg5MUA8vdrejbuJVbd3U5tSH2FpCq1m5iXI
zQTXtsWwUt+2FZD1DkfgJjz37YKR5dC+fZWahyJdZO4w0ZXF+4qrmteq2xOIbs9VFu/Jzd25rxgv
mHK1dVAaHdRtV71A8USACBABIkAEXBK4ZTSlpWTVmjVflDTtlQQum3WrJFhyVq9ZvbmEWfY9u2DB
qv+/vbsBjKq8E/1/AgmZpDaEIm1YsQ3QxQTqElZcgr0loa0WV2gD2iZg72botSu4WxLbCwSLV/zD
Csi/BewLsbpNuF0gsAp0wUqxlYRuS6jYJKuSgAuJgiUWlBA1MyFA7u85Z2YyL2eGOTCTSSbfI86c
ec5znpfPeWbyy3POmbwivTu1Rf4G10nXF1z5NtN3U9RBfKvza1hPg33bGIVXrzyzeNWPNu/YsfXZ
Z3/rFX37Ni/qGoEd821A4PZwUmLQ7HCaRR4EEEAAAQQiL9Bnzn0nJcmdL8b3GES+lzErMSk1Rb5W
IUlLHf3t4uI09R1Cp145fnxCh/YlkyZd8NmUpDBSU/zvBzLZ7xqTfKvTfF+mjnM3+BpLD3u3jvoj
7aO/8XiZ/n1SXnv5tifqGl41u1Z9GxC4PZyU+BzV4fScPAgggAACA04gujFl/ZaVW1rveOJ7XzK+
/6Z+y5rK1tvXfe9L2qk/PPWDzccdwp0ydd4ie94YWXPN3XUd+8HiZ0cvemKOfvvBse1rdmkzywo/
p3WdfOqRTdqECRdeOXT6kpY24SsPfGX4rk1bm6WQtAkLly9yfUPWufqf/vCZhvfUN/aP++ID3yu8
XVZe3/nTZ3/dIBkTU4bf8Y1F99/h/ZdUZXvP0hXYMFXvs2kzZ6Y0/PbQyfZpCx+fc4tXnGdWndb6
yg9+UHm8/ZL8vUa5OVf/s5Lv/WHvb2/JmNC8aZM048imxceTuoZPXaj65Vq6frvGd9Mc9X2Vxw9W
rnn2iPQxZdTkhd/7tqtm00rdBcmzSX/9d8nxre7btzc/49uwVL3BOWNSWw32jvpDfs3oapWDuEXv
pnxDbVLGjIWLvjTGpGqvhgXyHtuy6ogclz0/KN3ZNXXRE4WuHkZOI+DwzUqtNxl7/sf9Zl8f7yOl
9ZFR7eXKKgIIIIAAArEXiO6579Hjhrcf33HwnNHPYzsONg+XP/Td9fpjqzYfl5Bq6dJ50zIObV3r
8y38XY5TjvbWdtdZUEf7qeb3JNqRkLP9VHv7G4deyZhTXPyVCe1v/PqHP9yq5XzjgeIvprW/8cwO
4w/YHFvz/U1vpN3x3cf/5bvF006+/OwPalq7jm350a8bcuYtXPrd73xpnFZfH/yiPdOGqXrfO7R1
86ELQ8eNuXmoz1SqSXXyNx7XPPbs8a4x8xZ+54E5d0hAqWLljvbj76k/Qjluqvp24lE502bPnjMt
xzu0TQrcJDHlew31adPmzfvG5K7TR57d9bpy0Ewr1bfoD2b9DdzlPd/qRvm+zHA3WP68l8F+yL8Z
XcfWPLb5uDZh3sKFxXNu72pvP3my3azqnoZpZrwZE9SfqcyYMHX2nNk5GZ5gPWIaevu9Dl/CmyZj
z6RhHf4gXv3oC6PaqzmsIoAAAggg0CcEojtPOfT2OeOebdizt/5L9pxzNb9+T0v7zrSbO47te09L
WVhmz5GgaUxZa/2DL/+2/tsT3PeP6VOa+oMBJN/x35M0eeE6/Ruebz9+8J9fmaDKkExJbxzadPyN
Di1He/1Qs/xl7dnThnY5tDFTb087+Mobp7qGSniamDJ0+M233DzmlifmBGfvOHYoWMMmzHs88A8b
dJhWN/wNacMDT3zvdhUg3XJ8z8E/qCa6ar05b2ra1iMZU2fd8Tl3krs9/pu6TkswOnHhuofUFxDm
aa8c2XFBTb6aVqrl9YSnXQ7//na8XhnIcvNDvi25xfdl12lXu/RmTly43r8Zxw6eloP4xEPqIGoT
mvVuBlbt7px6Nuf93uQ07ZCA5PmCRErDkPccvo7Xn9kRMPbuTzxucty/5wvi1ZO+MKq9j7hX01hF
AAEEEEAgZgLRjSllBmrmtOE/PPjbVntOzd43tAnFEjm8fuS4lijTla4+5+SkvXyw4Zw2zWMgW7rM
bmLR04wN6tFdgP53oOQv48i1ig3H5Zugdz61Zof8VW058ZyYePPQlNRx0yamHXl506qXZZ/E4d9Y
tPRLt7jjV0+V+srJIA2TklOG6mew/fKbVXfqDb13rhk31Q9PO9XeXSou1C5J2BfQhoBN+r7yoJbh
w1OMiwNOmlVq5DEeA/v7KdNd/Krze+lVomkzTqnIecJoV99c3Qys2pvanLdrmuphIEhAe0ybcVUN
KVt29Bw+0zbUDz9lMiC79AEZ2DAlE/tRrVrBggACCCCAQF8SiHZMqd0yc2biwc07tjxzrF37yuw7
pO83TxitHTouZ6CNL9lTp4RHTej58zlyulXisBRXtBJ2+9Q56ZvHjdIOppX9pOxmX+KH1j3d1XHu
1Mk39j67dcdTO6b+5Nuek6zeGUM2TEU+fotpdR318ve9m+WPlesxo8+ZcrW70Tvjjxj7FRdik/43
U4zsppX6lJR6i19/H7ebsXTUK2dPS0LW7ilfj4jVq5tvkW4eP9Wluf5UpMETULU3dUheTw3ulZDt
6WlGkCPuLsXz7Dp8pm2YMCHRZECGbEBfGNWevrGCAAIIIIBAXxCI7vWUqodD75gzWnvj4JFLadNm
6LHe0NHyM/y9zZU18ne4T72yZcdpbdwdE3osUodLrvpf7zt1rvWVnU/96Igj/D+jPXRcTorWvOqR
ytdbz13Qd19TWf/6lpWP/PS3rV2pYz6XM2q4hFGqvI76ygcffNDnOk5paeiG9TTRtWZaXWqG3G/0
3o7KmtZzp2q2PHXQ4TtPmTpqXKL2ysuHzp1rPXnK94uTQmzyqtq0Uq/tWmB/h5uxaH7V+b30LtFs
PXX0hBSt/Udrfvrb3+586pHFhy6pbgZW7frNQC/BGm947bmqhl/bTdtgmujv419QjEe1NOf1ykce
fPCReteFx37t4yUCCCCAAAK9LRD2POB1NGzqzGk7fnRwwswvuWYHb8x79IHmlc9uXXJoq5Q6fPK8
RfI9Ml3n9PhDHm7+yhfH/ejlX6/6/q+1xFGj0zSZ89MXNaXmmVdTE4BypaVrSXJ9C9HQOx7/rmPt
D3f86LFDxpaJ35g9NDHjwsEdqxp26CnDv/HdmbJr/StyT8/oL7nuFXcXE7xhnnrdWfVns+q0jJzv
fLH+Ry9vVU1ISZMmJul/VF0qlVUJXKdNG9fw8o7vf19LnLjwJw+p60Hdy40+m77t019PVyVGD+yj
uwT1PHRUQH+HDjXbxbe6h3ICa9cbHKoZT23auWPHG6Mn3z7qvUPtqYkmVXu3LAiv6Zyxpvk271o1
5HIHfaTo/NIY0zZoGSYDUtN8QHyOlOpVbEe1tyvrCCCAAAII9AWBhIcXL+vo6HA4OhwdHU6Hw77y
2Tm3DuuVlnVdOHdBS71xqGlM0XHhXJd247X+4aeOCxcklEv1muHs6JBZUflDUkZl53764Pebp31n
3f2er/Lx7nHIhnlndK8HVqep9icF6ZucAZfLP/3/WL2rsBCb3NUZzyaVemXw7a9rg8kuftX5vfQq
MHC140JHquF54Q+lSzZPWLhev31KM63aa3crvGG3x6RrXlUGrJq2wSwx7Aa4qzArxL1NHxWRHNWe
gllBAAEEEECg9wV2vna+8tEHbCkpKamp8n/P/FevNyVp6I09V1H61546NPg2/7yBr1MDgtHUVK97
Yi680aAlFs80DSilsJANC6xMvpk8oDpJCtX+IPGkKjvEJt+qTSr1yuDTX3e6yS5+1fm9dO9o9nyh
csmSBtkgI0gub0ybPEvdn64W06qNTfqjFd6w22PSNa8qA1ZN22CWGHYD3FWYFeLedpVR4ckWZMVi
H4OUQjICCCCAAALREYhhTBmdDoVT6tA7nnzyjsA4MJxdyeMWGHr/49+9/WRru+NS4vDRd+To31Dv
3sYzAggggAACCAw0gQEZU8pMpNes5UA75JHq79CMW27PMO7dj1SRlIMAAggggAAC/VUg+vd991cZ
2o0AAggggAACCCAQrgAxZbhS5EMAAQQQQAABBBAIJkBMGUyGdAQQQAABBBBAAIFwBYgpw5UiHwII
IIAAAggggEAwgcjcozN58uRgFZCOAAIIIIAAAggg0AcFjhw5EsFWRSamlAZFtlkR7CFFIYAAAggg
gAACCPgJRHxCkHPffsK8RAABBBBAAAEEELAsQExpmYwdEEAAAQQQQAABBPwEiCn9QHiJAAIIIIAA
AgggYFmAmNIyGTsggAACCCCAAAII+AkQU/qB8BIBBBBAAAEEEEDAsgAxpWUydkAAAQQQQAABBBDw
E4jYdwn5lcvLKAs4m+qbnJqWnpmVmW6Lcl1RKt7plA5oms3W++13tjQ1tTn7tV74ByXQOQ4Gj1/3
B9QB9eu7+UvXUb/G91fgmDGvpRdTOcSB2NF4I0ejzMCWkxK3AtGYp3RW2RMSEnKMxbOSI2n23XoU
EbeaQTpmgOgiOkd+kb28qrYtSO6wkp1NRZPUMrqyKaz8fSqTs2X3htKEhBRjUWMl315Vf10e1vrn
bLJnK72CKkt6zurKNWVryiqrWwKrczZVGYNeeqP/S6hSMX8UDn1g3cFSgjn30cHjrCoSQsFb4+Xb
skZ9cCQkFFWF+ui4xgMaDC7M9Fh+0AUZb6rlbU37SvPd766UlIQc++76VneXvAZkjpLNyS9aU1Xd
894LNmbc+1/fs1ftUnWOVB72J2G4hzjUm/T6Gh9671gMhgi8kQO4IlBmaCi2xrvAw4uXPfhPJf/w
rW9/vej+WV+b8/x/vd9tfbntttu8dnJsywuilrfN4ZVvwKw6thWagpQ0XjvHmV0VsmzaVXe+nzE6
mpd6MCZOzJs40XiVt6mu9zriaCzWay3c1milUtfAzqsw2cvRuM3TLWOlQh3daBz68JocyrmPDp7G
bcZh0XQ61U2PasmLzaG67TmgZocm1I7XtS2WH3QeGc+oM9CaD6z2pHivlOwyBm2QAVm8SwZrd6gx
c11S7p2D1K6F8UkY7iEO9SZ1NyMazzEZDNf/Rg7kuv4yo8FLmdES8A3erqUWCRoldJQAUsJICSaj
MU9pK9jnkKXbcb7CiKXyNp2RV7LsK6jdUGovLS3dUG3MOjhbqtVre+m+lmOVkl5auqZqd9Uauz7H
ad/d5Pn92Vm/e0OR/ou1/GYtM0WeDd6fm319Pa9CAkCH48yB9YbLxuwZntkX0w46qzfoKCZcTmer
LC1OzQVZv7vcXpSvfvXPLxJENUemFtNijU2xeXS21K7Vay6sqOuur6+ur5dxcmBTsX4Gv6VnDGwo
1cdAUVWtMcXirK0sKyrSe6j6aC/fXe+euPLaK2DkOFvrK8vsykXmRIrsZeX7vEdOU211VblfRdK4
tuqqNbKLmh7LyV9TVatX5KwuL1tTo5peU7mirKy0rNw1hvXeaLasop4IUv/dyZ7ldU4/1KE3Cojw
Y0hnzTN4jDdgmddSai+rlmGllt4ePFkz7MZvGBt21xsc9fvK9ZW8ovxMfcX00Bh53Y/OlvJSu119
pOi9aKst0z9h9E4FDJX8UkkXhDIZWQkJ+aWVrq6rwq7a/Vh+0JmPN2d92fRlOkThAfnMlRF5vs6I
0zfOXuBzZsQYkGfqlhrimzfIJ0boMeP2jcRzqLfDVdmNBphmC/YmNc0c2JFgo8tr2Ph/LnkKCTEY
ivQPgmBtcBVeKR+F1VWlRXaTH4XBR6nnjaxpIRoZ7MPTnMurTOnd9Zh4cFgZSAJRmKf0hLru30oL
e6Yn69xh5iF9fq1ukxFdFTeebzTWfO0n6tkc7vkLTea1XBlKXlQfmf1jCXRw7CoxOlJYp3/yB+tg
3SZjyjdPz9btflno4dLnzBy7XPM7PXib1A590c1rfiVv6aZtBw7VnZFfP4zFYT4GDqih4qhwH3lP
J12zjEH2UiPn/KGAnXRJ95yHpyh9ZaJe0fkKg9x7W7EM4MAGbHK32zMK3Qe6Zz7endLzFvA79J59
I7wSjrMMHkfjJu+OGuuxGzxuLq2kWXk0lxgNMmbRuoMdGhkd7olnmad0jwdj3s7RWGGUoV66NwV2
2ZMycfUh/UhYeu+4m91zlLt75YPOXa97vHkOesku3U/vyZkDS3sEPBPn7qbWrTeGu/og8uyuaQHv
Tb2o635wN9hduxy5MD8JfQ5x0E820zdpmIcy1Ogy/dmkf1wEkgT2UfIEb0PAmKyorzerzjNC1Ypr
lLr3VT8F3Os++TTjMy2QRdM/PAPTNznc5eg/WSJlEqhESl8R6BfzlL6jWl55LubRtJyCBfqP+Zoq
dVFa276F22V73vpSmdMxZnUmlmxrPn++bpdxBqehfF+Ts2n33M2qzG2NDpnXatyl/6DZ6D2joLb2
g6XHwZaVk643uKm1zRmigzkFK/RsNfrll8KlJsomrl7g4cqQ6ZSm3bN1n7yluyQ+c5xpVIGoTaX3
QTdbZk6x3iWZ71u7cO70qZNGpqTk2F1H0xgDWuH6A42NL7pmcxta9Lmj3PJDzefVZPf55gPGZ+72
ctdUZbCR01Jd1aDXVXGoWYXY5xsrVhtzBq4WBFYkaPOVsVZcoX7IumaUN8/d3aIVVTcbEX7e+gPn
1WJ3tdZdWKjnIIc+1C7Xty0cZxk8tsyCxrrGxubmA67fXmR4rZ+RZYvR4LHl25fq/d5Y3STvi+qN
+ovVC/KFOvih0ecjvbh8j4vPK9eLwvWHGusqil2/cZRUHGise9EYVA3ygaPXdS3vndaeRsTkg87Z
5pqFz82SY+ta0jNyjLV9tS3uNE3bXlvb1FRdVTbpYX24a+o8Qegx07Pv9a/1QIX7SehdZ/DBaQt8
k2rhfQyGHl2eYRP4ueTdMJ/1nj5e5aPYVbhMmBQWF+blyUtPdaFHqVRn5DQOtmevwEYG+fA04fLU
LmVG3sQHiBfxKRCNc98hpdJzy/QP741yUrOl1jhPU1qQ5dknKzcnMz09p6DA+Ih3OrWW+n3G1rnZ
KXI2Mnu28YNme0ur07NX/1uxGZ8D6q7nUB3MyDWmzdbKqd7WeoOrrCDXu7/u3fPWrCjIkOIyshZU
d0vU6U7X+pabLavyfN3qQtePc6MjDZvnj15R7elUYcGM/KysGUV2V4r6sLSl21o3LMiV23qGjZ6u
fhGRxUVovNACR05GpmtczZ86WoaOvXR3ZkGR9xnpwIpa6qv14gpLi3Lkh2z+gjJjGqelpc2WnpGu
15iRkZGuFtWsa1m8Dv217B7mPmE4q5JkuORkZaW3luu/rmhyZVttaaYtZm+6jPwiA7xyX21t9T69
r8UF+i9gIQ6NKUmIwyPHPTcrp6iszCh/gT0/K2dGmTFjl6H2i8B7JxYfdLYQfZZe+WzdOD07e/pc
4zoUbVNdWabKcPX3puSK8OL1dgiTPUS2wDdpiMzeHQlndAV+XHiXEGI9nDYUVlRVV1VWVVcX3ZJs
FHXVUWpao1kjg354BnJ5lxlVE++KWI8ngd7/LiHbjAWrte3LtO1zZxihQV7FDPkh5nSrGityuaA7
wfM8sbhkRrqRUUKn9Kt8gHp26zsrGZ6mtNXuNjqfpf8Ic6WbddA2o2ypzOhpG8tXuH4kqGmkHi5P
kVqGMfPZk+BeMyvWva33n51tzvScsqr6skpnS0tTfW3V7Pn6D7Za+RXBDWSMgfRMmdHUZ2DlN+bK
kZPmq8ZOLFy/IKdy4TI1Aek3RAJGji3HfmB99fSHDWpt++Zl8m9Xs6PAXY+L0asit4dncNkyZUJV
02Q+Wb64yb31as+e8j0Ze1LMD70nY8RWwnE2KnPW24dN1Y0KD53fIIPLe+ntwWPLKivRajZqNQ9P
n663Y+JSnwtTJfBxN9D70Hg32bWufuf064wnlzFUXC/1782RXyAyMtWh9h1U19H9Xvyg84wut83u
+pairCyjf61NtcbKjBzpYM8is2KyX4a6zrgoVz6BZQk1Znwj0p5irmnN02DN/O0QJnuY2YwmhpfZ
LSiTtj1vfHcfjWFj8nHhznC15/Da4C7FqM71KtQode+gPwc0MqwPT58i/F5E18SvMl72d4Hejym1
9NyCYm2ZxAoqLNC0pStm6J9nPpJtTU3yg1wWGc4ZmXLuRrJrpaUr7K5Txs7a3dWZ3uGYnrmvPzS1
tjqd6a1NuzfY5+s/w7USuwqnQ3ZQZm4KtbXbte1r16r+FW6TuNpncfts3129pmxGpn7KorIlx54b
slifInrxhbOlKiW7etehFTNysjKzcjIzbcXz16qjaxYme9rVUrtPX8+rq63KsTnTq5YZZ6g9GTwr
3iOnVfaaUe5YUClXndfuLrtbDy7laylDLBkZxk/izdVNG+T6BClBb5vm/fO4qaVV04xsfiW5fxOS
w+w3KxTk0PvtH8GX4To7m8pSJhl93FRXnptu/OiS+CpWbzpbrn29tvFhD0WpPddYD3loWjz5ZcU4
wlX7akvzZ8h9bN6bTNcDP38i0v3of9D5jzdbZq7xa9j2uUUFWfuKcjLke4XsrhM7hTkqcHSP/rxt
+6p8rwORbdf03jQlvUpikLeDM8SoczdcSg55dFz5PG/SkJl7mhn+6OrZJ+y1UG3w6lfo8gJHaej8
nq3hfHh6uDx7yUpUTbwrYj2uBHrjHh33JeSeq1IPrPac+iyWS+fV4r7KXmai8jw34mjGLSzuS/UF
Xn65LjZOjrluW/GU2YdX3Fdt+w+cpeoqP7VcpYMHSjx7GtdcKy7j2oBCdXW29+4uvE2K1Tu9r7h5
7pnwdMlYWX3gjE+nRMU9JOTuijPub0iZ6OmH7GaMK3e2wJHTaFw3kFe4dPX6pe6z7TJPGaIiT6VS
fGGhMdJkdWmzOkw9Xxei7hXruc9A32btu4Q8h17tG40lTOdG1z1zxkFwPep3t8Ru8PQcUI+8LuSV
7n9ovN8O3sPeq1ve9+iod40aX9v07YXGR1CjcaOc68PKUvfdb/Be/KBzN76nh/pR6/a8U3o26Gvu
u3aCNlUHqfDby3ip3puRWdy1+1fjeTsEZw92iP1/IgS+SYOX6d2pcEeXz+eSdwHudXcffQZD8Db4
9EsvwzfFfaDNRql3Tu91Kcbdnat8eAZ+pnmX4y5EDlfId5xPdW4HnvuHQP+8RyfD/yMkt6DUSJq4
Xt1u4rs01NQYM5jFLzZWykVtmpa5QX5CLtWDqJrtmzfXSFJesd1vus63kL78Sl2LvWmb3Je8xjjj
dNUO5trdn/XFZbnubhts6rSELXPD+cb1RqhdY+AV6qp90c2WkbupxIiH3ccor3hbXXNZvholPZ1y
bzQSM3KLNuk7NWzfXK+5d/cfV/4jJz2zSP3uUrN97bKH126XQVW47VBzgY4erCK5pKxcvmBFDya3
b1cjTStcXXd+TaZasxWU7zLCzAbXEFWpwRajCt+tgYfed3vkXoXrrAaQ/6InxW7w2LIWuG5G1vI2
FWV6Whfq0HiPnMyyQ5vcO+UVuweL64jrG3w77SvgGlTX1H3/Aan15ged0Y2M/LLzjS+67z7SeztR
3l9nNhRkuk30Z99XxqbQY8Zn98i8CHw7hGJ3HUH1FCJb4Js0RGavboQ7unp28R03PemuNZ/BEKoN
Xv1y7RqY4v5odNfiLtw7p/e6O596X4T88Azk8norRdzE0yxW4lcgQeYpOzo6HI4OR0eH0+Gwr3x2
zq3DrPZ38uTJR44cCX+vlt2lo/UzMuriNv1nvFwxZ0/JlnNw8h0HVUWZcu7Q5E/2OeV6H6dKN9kW
fuV9OOd1dlA/bynd8+e5zmKjAuZua2Brg1cn/dCzGx+e7nxXGzlSk6rM4hW4cgutU9VgC7wXR5Vm
pdnuhsbk2Wisqtp/VITZnL43eEIcmp4+uZp93VddX1/3Y/hBpzdcHfbAAdyjZL523WPGvFgrqWGy
B89m8iYNntm7ZWGNLu8dLK2H1wZLRYaZWWrWPwN8PzzdO5twuTfJc3RNvCpitfcFrAZvgS3c+dr5
ykcfsMn9s6mp8n8MrqeUuyo3GJf4TNTvznG3sUVfke/WCfrjz2JY4C64/zxfZweDRQ3XWWxU/IK1
NVRl0g/TzS16arCRIzVdQ2UhfhRfQ2mmze6VxOtubN8bPCEOTQ9ppJp9XeXE8oPuOhp+3WOm5zBc
61qYrQ+ezaQPwTN7tzKs0eW9g6X18NpgqcgwM0vNIXKacHnljq6JV0WsxoFALGJKpzO3oiJXbqPN
Kej5pcmWUbatwi63/uZmxgErXeg9AUZO71lTkxUBPuisaJEXAQTiQCAWMaX8WTF7VoBdes/3EQZs
IwGB4AKMnOA2bImhAB90McSnagQQiIVAr3/neSw6SZ0IIIAAAggggAACURWI2DylXOkZ1YZSOAII
IIAAAggggECfFYhYTLljx44+20kahgACCCCAAAIIxL1AcnJyWlraoEGD5G9ZDx48WB5lkZfScVmR
R/nmzCv64nA4vvzlL0cWhHPfkfWkNAQQQAABBBBAYCAKEFMOxKNOnxFAAAEEEEAAgcgKEFNG1pPS
EEAAAQQQQACBgShATDkQjzp9RgABBBBAAAEEIitATBlZT0pDAAEEEEAAAQQGogAx5UA86vQZAQQQ
QAABBBCIrAAxZWQ9KQ0BBBBAAAEEEBiIAsSUA/Go02cEEEAAAQQQQCCyAsSUkfUMXVrn0Zq9tSfa
/TO1H927tzZM640JAAA/t0lEQVQg1T9XyNdBSjbdx1J1naZFxEtiZ2f72dOnz7Zb6KVJVr2Q06et
lOINaBw7k3K9M13r+nW27Vqr7bP7WRr8pr24/hJMiyURAQQQ6P8CUYopO/cuGtuzzFu8t+70tVp1
1u2t2Hv07LXu3pf2a6+b9a2SxoDgofNsY0nJqtMB6RaaHqRk0xLCr67zxN6x4+cdvZ6GmbagTyR2
1lYsGjt+/KTcvLzcSePHLqo5cfV+BoJ0nq5dPFYvJC9PSinff1R1rvPovJ7R71pbtPdEsH43riu5
/3DQrcH2umq6eduuulufyxDJT4DwB38whusvIVjJAyA9kodyAHDRRQT6n0CUYkpNO6dpD27cs3/P
nue2LL+pseS+vK1Hr3Em7p3yVeWN17hvnzogJ156StOW3zs+za9V8peUNC1N/r/mJVjJpgWGU13n
6ZpFM8eOv6tE0268noaZNqCPJJ6rO7d445b9NTU1+59bPOWFb921PERYHwSkfWve/TvnPFlTd/To
0brnNtrXLZxVK7/+JI9a/tyW51zLnj1bVobucnKaNuW6jr9p8UHaZpq3bydG8BMgnMEfGuP6Swhd
fnxvjeChjG8oeodAPxWIWkypaVPGZo/XJ4Lmr9t4j6btrXdPVXae3vukaxpzcfn+s57pIZN0mUxa
XNKoNS4pWbR40bxFFSF+6vf5A3B665LDczbd6Yooezo7c9ESFbq52t95dn/FYmNqa+bircZ58hP7
y+et3NsTVrcfXTlv0f4eC5+Sz9btXTxvpiph5ryVFftde5lX11m7deVMPa/kXly+11Nk8ojxJRv3
7/n54miomrWws7Z88cqte59/0pjgW7TX9RtIsBaqgbGy4vmtK/X8MxftD/EbixmpxH0zn9q6YGbu
2FGjRo2dNG+R9PQdt9XZmq0rFeDYsYtWlhvXKpiDdJ6t07TsSdmj0iTSSJt050zhOqkGdJpMXU5y
LePT2mUOcsqCO8cqzE6TwuXgH97/UkU4fQn/eARtW/hFxCBnwNgI/AQIPiTMh5CYez5wvN9rocop
31tXt3/r4kWLFpfXqs8n8xJi4NOfqzQ7lOXyqeNNfXrrop5Pts6ztYvnlbs+lMzfxf3Zg7YjEI8C
UYwpNfcEV+eJEy9oWs6YETrg2fLxeSUHR6kJoj0/19YtzJ3/vB5VmqYnj582z56taXPmzZ8/f9H8
aSPcZfa7Y9Fe91KlNmV+3ii95e1b780reVrb9JzM5K68K0dCbmOR9NyFL43dU1NXV7t/vvboXZPK
Zdpr1NhRhytL9rpPQp94aVXl4RHj3RbeJXee3p97X8lY+0qZfNuzfF778y/pn8jBqpMfliMWLN8j
h2L/nkWd60ryNta6GpI8Qo+ppLUy4RzJJUgLtXNHd1Y+WlI7yi4z2yvnvFAya6XrXHSQFp6r21m5
asmJsfbnZBow+4WFs+YFuSLVnNSvS0cPrpPgUJ8rbK+4N/dbj57dtGf//j1bctvXrTqo/y5kCpI8
at7yexofnTVv5da6Eyf2PnmfNmXlneN9x2h7bd7CyjmbntSTgxQurXlh3emr98Wv1SFfhtO2kAX0
/kazsWH2CRBsSJgPIcuDX4biupL77qs8MUkuZxglRzN4Cb1v1I9rNDmU/tSdnXtfeOEDzyxD+zs7
Dx/Uf9ML613cj21oOgLxIpAYrY7I1Ev5xpV1I9rbz+7c+UL2gxsX5KqYsvOE+um9ZeuSXDVfN2rV
/o077yp56cTMOzXz9JljJ01K0xrzpsjFatFqam+U23lw3Spt8RYj3hCERxu1TTXr7lI/sbSxae+U
PL1VVoz0lc/NHJXc3q6NyLl3sbZz74n2Bblj73xyirak/KV7n5qZ3Hm6fMnhezau1HdVO3mXrHVe
lKQRaWkjRsgE3Nh1e9XMWbDqZK4ud/6C9tMnTqj7Sy6OmqJp9e/I53lPTOT5cJdSIrWYtVCVfU7L
fnL/unvVUR67YOOjO0tOnF01dlTwFur5H9XzT1q1v3bnXS/Vnc7N1fZufaldXUugdXamzZw3M+20
og4kHeF1AcLRvYvvf1pb/lyJRNBitapR2+g6NGPHrjsxTzXOvfiDJI+fkivx4I3te++761HJdM+T
OcZvTp4d9q+8Xy54ePQu9btEkMI7jb57+rLX6Ivr1w93SZafr9o2yyVGfQfTsRHwCRB00JoNoVGd
5u+1UINfyln+3N75k4z+ykW0pu/WqGvEXQVp/odSH/le1PIO8e20eiPL/8E+GL3fxb478goBBGIj
ELWYUrqTPWnKtJtOPr9QVhfNc5/zVT/v73FPscmFZ2MkklG/iQZLN1j8f5Ybqf3n8WxtyWFt05Ou
n1J6u+8Z61bo9PROfYRqjz66QAWYsqSlTZkyplNuJ05LvnPxcu2+krpVM8cf3bpTm7LHOJEqeXxL
Th47beODU0ruv2uJXoB95ZYl8yTokcWsus4TT95719ON2pQ59mmTxuqt0Fug7xClB9MWGrV6wjwZ
FTI3raYrQrbQk1+aKiUcPtmu5aa1nz592hVT6j0KTqp3UJ2Pu3/VC4u31MyX312MgrR7st2HRs8T
/KG9dtKsRx/cUrMkd9RT6zqP7t04q2TWiBtrHnWHg+1Hn1+4U3ty/zxXU1VjzAvv6Utyco6mHZS+
5AWvN5wtV2tbOGX0cp4QY0PzvEfCGxI9Q0j1wfLgT0vrOSA6glkJvawTN9V5DqXeowBqs35e5V1s
tgtpCCAQC4GoxZTntCnzpt2VN1bLq00+mbswb/6W2opc+VGtAqgX2jufcs2GnT15WNPulZ4HSzdQ
9M+UWPhEps6je9fJLFyee2pReivX3bmu3jPCaaMePbrcsnWvPonrU7VcrPegtuqprXvvPPi0tvg5
z/nVgJLTZi7ZOnOJfIPM2ROH995Xcv/4KUdnBqmu83T9043Zz9XtNaKp02m1leU+lUbnhUkL9dlG
79qSx+ivrtLCnlHR+Y6mTcseoSWPmPeomi/0LJ3BSeUiueeX5y3ZOeXn+4/mjXWXpY/Ds51PeRI8
RQWudJ6VarXxo4ypyeTxM+fdU/J0o/uyTE07vXHWo5r95zM9ZYUo3F2/1tleb/QlsD4rKVdrm5Wy
ei9v8LHh9rnKkOhpqmsIBXuvhV2OlBjk3dpTF2tWBNyH0nQfua689sTZe8eqeX39d0M9V4h3sWkp
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
E4hSTOnct2Dk3I01qtaJE9VjzcapI8taAuM4PaWhZ5Gs7lxemzRNctSsXXh3fnmtKs3ZUpYyevbD
G9X6xIl5ehUNNZvLa1tUimux5RQUq9WGZdV6lCqrzqbaZQ0qrcSeG3L60ZapcmlZ0Zpe1UvnAQEE
EEAAAQQQiBeB6MSUrbVlm5XQxNUHuuvrzxxYrXNtLK9tNXfLqzjf7Vmqc7zDvbwKh2w5c8DYsWG3
Cg+dLbVr9deFFXVSfnV9fbfj/IFNxX7nqbNm2PV4Vtuwu97YvX5fub6SV5Sfqa+0VVetyc/Rpy5z
8tdU1epxrJHX/ehsKS+12+2l+4xYt622zF5aai+tVi9bKkvVsqZqd9Uau5pszVfpzpbqsqJ8KTS/
tNIdIEtpzvrdG4rcdZVVVnvmVJ2t9ZVldmmG7F9UZFfTse7KeUYAAQQQQAABBPqFQFSup3S2teqz
gVpZQa4oZOTKhOEyCTJrWyRYyjBxqdm3e3d6unFtZHpOwYysnqiyrbWltdXZ1GTsVVKaL5skmjOW
7fNLM50LZuRkZeVk5S+ozHenu57Tc8sKtbnbZaayqqUsN1NrqXpYnzotLtXD1rbK/GHz9QSVv6Fm
2dypy/Ztc1QW9dSuNjirN27ermn5ZWvUi9amtZvV/GiOvHQ6923cKJu0jfqMqaxoDdNHe9YlfX5B
RlZ9mSDIqfyUuUIgcXbexIaamrXzp6+tf9GxYYatrTZ35FSDS+3fUKNtbymyz/AJrNV+LAgggAAC
CCCAQN8ViM48pbu/nuDPSMhwpwc8b58/e/bsufpSVuuztWFZ9siRk6YvNBLzc1QZtswc/ay2rMoJ
8bnTp04amZKSY/eeFDSy2/LtS/W1jXL629lUbYR7qxfogWnTbiOgLK6oc3Q7DqwvVDk3z93tNbXo
KsV4cj36BJyuF4XrDzXWVRQbs6JaScWBxroX9eK0hn36xGrTbiOg3NbokGnVxl0lqrCNqsEt1VVG
QFlxqFlmZB3nGytW+wW1PtXzAgEEEEAAAQQQ6IMC0Y0pw+7wxJLVxrJ0dWmm316FJSUlxXlG4uzR
ueqcsS2r8nzd6kJXDGdsatg8f/SKar99M/KLjD0r99XWVu/TtxYX5KTLSku9kbmwtEjmBG35C8qM
nC1qMtVk8YklfbcXFszIzcopKivTk4sX2POzcmaUrdfLy1D7tdQbVWtzs1PkFqHs2UZwu72l1ZmR
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

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://hazelcast.org/book/images/ec2-6.png

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
1Rtraevj1sM2tDZHbBpsvtlq2+baPrcTsou267entHe1r7f/7qDrUOCw6CjpmOA45sTi5O/U4Yx1
tneudd500XMpcll2lXdNd316WPBw7OFRNxa3ILfuI5RHSEduuKPdHdwb3HdIFqRq0qaHkcd5jw1P
Hc+znu+8NL0Kvda81bwLvFd81HwKfFZ91XzP+K75afgV+7331/Ev9f8UYBhQEfA90CLwcuBekENQ
czAu2D34VghNSGDIYChHaGzoZJhoWHrYYrhKeFH4RoRJRG0kFHk4siOKDg5k7kcLRZ+MXopRjymL
2Tpqf/RGLHVsSOz9YyLHTh1bidOPuxSPiveM7z/OfTzl+FKCVkJVIpTokdifxJuUlrScbJBcl4JP
CUx5kCqVWpD69YTDic409rTktFcnDU42plOkR6RPZ6hmVPyD+sf/n4enZE+dO/Ur0yvz3mmp08Wn
d7I8s+5lS2eXZO/l+OQ8zFXIvZCHyQvJe5qvkV9XQF0QV/DqjNmZtkKuwszCr0VHikaL5YorzuLP
Rp9dLDEt6TjHdy7v3E6pX+mTMu2y5vNs50+d/17uVT51QfNCUwV7xemK7Ur/ypkqg6q2aoHq4hpM
TUzNm4v2F4cvKV2qr2WpPV27eznk8mKddd1gvWJ9fQNbQ24jojG6ce2K65WJq7pXO5rEm6qaGZpP
XwPXoq+9bXFveXrd5Hr/DaUbTTf5b55vpW3NbIPajrVttPu1L3Y4dUzeMr7V36na2Xpb4vblLu6u
sm767twefE9az96duDubvWG97/t8+171H+l/PuA48HjQavDhkMnQyF39uwPDWsN3RtRGukZVRm/d
U7rXPqYw1nZf/n7rA/kHrQ8VHraNK453TChPdE4emuyZ0pjqe6T76O5jo8djT8yfTD61ezoz7Tq9
OOM1s/os6Nmn2ZjZn8+T59BzmfNU88ULbAvVL4RfNC8qLHYv6S7df2nz8vkrz1fvXke+3llOe0N8
U7zCuVK/KrPataa/NvHW5e3yu7B3P9+nr1Ovn/8g9OHmR82P9zccN5Y/RXza+5z1hfnL5a9yX/s3
LTcXvgV/+/k9c4t5q+6H0o/hbYftlZ9Hd7A7JbvCu52/TH7N7QXv7YWRIki/YwEkfEb4+ADw+TIc
JzgBQAvHv3iKP/HvbwYcHkMwB8b2EC90DeGEpEe+RrWgszHBWCvcITJ+PBM5DQFHRFFgKamp6Kk5
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
eMsrZ4Yu+OkTE5QK7QpSc/UW65xHzSNluvnb6jNqOz1JtOKnPbn4yct65u/jPzaIec/88p4kNXa/
Px+V/+AX6haNEr4tOrp+/ZvxMxc8++itMpl+af36jF8+PUlMeOLZBUu+v3HLx1996CbOYfoJMosA
AggggMAAC/T7+csT21/4TNw8JeuW7A0xYtnGvzg9G3Ci7OGX8z8U257Krl81K3eSN7kUoZYHbXe7
uBBbtOTO+ucerH9mivPtwyk/fstdwt7QsnbXYcvYG2tXzVqfciF/xZ9sSgZ7rCTvT/l7h1eterBh
1RfF2/Xj/mW7U8Sa7526VF48Tbm+sGDmygVfTHJH0WC3jL0hsPqJsvl/mPNBfO1zc5t+dW+hOD7l
4S12tT/ZXfHGPRlbm9Nv/rx5bKispT0oepnzhYj/WKmM88Ohu565V7JkxbRsbLA7lPh7NLn+uPEt
ceNDszqvjI+YmTbq/Re3yfzr4y2/ax4aJ5tTcjHXxz8rlKcylWnJD174SD0t+PHmny353guH1VTt
rPW3hUt+9J5c7jq6c8vOo3KhrPK9Hzz3gjxdKKfC8jf2bP7Z99zzm931XR+VFJZ8pFaXuaxnvtta
gdtn31O+RG30scKfvaecfJQnL9e3CvHHkiVLfrQ56CzqpJzFy5cvvlEW8jbi+vitBjF03kOzYkTM
rfPmDRXHqj9WK42c9dA08dZLf/SV9NbgEQEEEEAAAQQGUKCf80un7YNlQmx79HYhhud+/1px7HDN
SSXZkssXu8S25xbmZkxPnT4zr0De/ihPN4Zc3mWLh2ct++ecm4Y7jn3SeLItWZ7+PPx3T+Z6TqR9
7d7yJfeZp88sWDJJiBbbyTan7f1iIarKHs6aPjF5+t1l/3eScBzZbjufMP32dHlB/Jbp6bfMzMqY
qpxc1K6uRLt+ye3Jwy84RGL6g9cK8amtSc0aZfl7Zl36z4WLvj1PJqne05Nd4g1eoB2/c+/7kmvX
+oKcW6ZKloKCibJexG36+ji674y4e86tvucynbp13oLx7dW/fW/PtrfOPrB43ij3uphRd81b/MxP
1zy/5plZou4Xz70hF980/yFzS93qFZs/te/+wfq3Js179FYlT209fOZwq5KXtdqbzxxtv3H5T37y
yF2jqrdsPDAq599+8swDN7a++dJONW9rP9p6VC0pC/vmu60lC3sn+xsrNlbfuuDfnn/+p/9849GX
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
/wOxUpAstDGR8QAAAABJRU5ErkJggg==

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://hazelcast.org/book/images/ec2-7.png

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
1Rtraevj1sM2tDZHbBpsvtlq2+baPrcTsou267entHe1r7f/7qDrUOCw6CjpmOA45sTi5O/U4Yx1
tneudd500XMpcll2lXdNd316WPBw7OFRNxa3ILfuI5RHSEduuKPdHdwb3HdIFqRq0qaHkcd5jw1P
Hc+znu+8NL0Kvda81bwLvFd81HwKfFZ91XzP+K75afgV+7331/Ev9f8UYBhQEfA90CLwcuBekENQ
czAu2D34VghNSGDIYChHaGzoZJhoWHrYYrhKeFH4RoRJRG0kFHk4siOKDg5k7kcLRZ+MXopRjymL
2Tpqf/RGLHVsSOz9YyLHTh1bidOPuxSPiveM7z/OfTzl+FKCVkJVIpTokdifxJuUlrScbJBcl4JP
CUx5kCqVWpD69YTDic409rTktFcnDU42plOkR6RPZ6hmVPyD+sf/n4enZE+dO/Ur0yvz3mmp08Wn
d7I8s+5lS2eXZO/l+OQ8zFXIvZCHyQvJe5qvkV9XQF0QV/DqjNmZtkKuwszCr0VHikaL5YorzuLP
Rp9dLDEt6TjHdy7v3E6pX+mTMu2y5vNs50+d/17uVT51QfNCUwV7xemK7Ur/ypkqg6q2aoHq4hpM
TUzNm4v2F4cvKV2qr2WpPV27eznk8mKddd1gvWJ9fQNbQ24jojG6ce2K65WJq7pXO5rEm6qaGZpP
XwPXoq+9bXFveXrd5Hr/DaUbTTf5b55vpW3NbIPajrVttPu1L3Y4dUzeMr7V36na2Xpb4vblLu6u
sm767twefE9az96duDubvWG97/t8+171H+l/PuA48HjQavDhkMnQyF39uwPDWsN3RtRGukZVRm/d
U7rXPqYw1nZf/n7rA/kHrQ8VHraNK453TChPdE4emuyZ0pjqe6T76O5jo8djT8yfTD61ezoz7Tq9
OOM1s/os6Nmn2ZjZn8+T59BzmfNU88ULbAvVL4RfNC8qLHYv6S7df2nz8vkrz1fvXke+3llOe0N8
U7zCuVK/KrPataa/NvHW5e3yu7B3P9+nr1Ovn/8g9OHmR82P9zccN5Y/RXza+5z1hfnL5a9yX/s3
LTcXvgV/+/k9c4t5q+6H0o/hbYftlZ9Hd7A7JbvCu52/TH7N7QXv7YWRIki/YwEkfEb4+ADw+TIc
JzgBQAvHv3iKP/HvbwYcHkMwB8b2EC90DeGEpEe+RrWgszHBWCvcITJ+PBM5DQFHRFFgKamp6Kk5
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
QL40aDDpCgIIIIAAAgggoIEA+VKDQaAJCCCAAAIIIICAQQLkS4MGk64ggAACCCCAAAIaCJAvNRgE
moAAAggggAACCBgkQL40aDDpCgIIIIAAAgggoIEA+VKDQaAJCCCAAAIIIICAQQLkS4MGk64ggAAC
CCCAAAIaCJAvNRgEmoAAAggggAACCBgkQL40aDDpCgIIIIAAAgggoIEA+VKDQaAJCCCAAAIIIICA
QQLkS4MGk64ggAACCCCAAAIaCJAvNRgEmoAAAggggAACCBgkQL40aDDpCgIIIIAAAgggoIEA+VKD
QaAJCCCAAAIIIICAQQLkS4MGk64ggAACCCCAAAIaCJAvNRgEmoAAAggggAACCBgkQL40aDDpCgII
IIAAAgggoIEA+VKDQaAJCCCAAAIIIICAQQLkS4MGk64ggAACCCCAAAIaCJAvNRgEmoAAAggggAAC
CBgkQL40aDDpCgIIIIAAAgggoIEA+VKDQaAJCCCAAAIIIICAQQLkS4MGk64ggAACCCCAAAIaCJAv
NRgEmoAAAggggAACCBgkQL40aDDpCgIIIIAAAgggoIEA+VKDQaAJCCCAAAIIIICAQQLkS4MGk64g
gAACCCCAAAIaCJAvNRgEmoAAAggggAACCBgkQL40aDDpCgIIIIAAAgggoIEA+VKDQaAJCCCAAAII
IICAQQLkS4MGk64ggAACCCCAAAIaCJAvNRgEmoAAAggggAACCBgkQL40aDDpCgIIIIAAAgggoIEA
+VKDQaAJCCCAAAIIIICAQQLkS4MGk64ggAACCCCAAAIaCJAvNRgEmoAAAggggAACCBgkQL40aDDp
CgIIIIAAAgggoIEA+VKDQaAJCCCAAAIIIICAQQLkS4MGk64ggAACCCCAAAIaCJAvNRgEmoAAAggg
gAACCBgkQL40aDDpCgIIIIAAAgggoIEA+VKDQaAJCCCAAAIIIICAQQLkS4MGk64ggAACCCCAAAIa
CJAvNRgEmoAAAggggAACCBgkQL40aDDpCgIIIIAAAgggoIEA+VKDQaAJCCCAAAIIIICAQQLkS4MG
k64ggAACCCCAAAIaCJAvNRgEmoAAAggggAACCBgkQL40aDDpCgIIIIAAAgggoIEA+VKDQaAJCCCA
AAIIIICAQQLkS4MGk64ggAACCCCAAAIaCJAvNRgEmoAAAggggAACCBgkQL40aDDpCgIIIIAAAggg
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
sqgTLZ0c+v/EqNDanH8YbgAAAABJRU5ErkJggg==

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://hazelcast.org/book/images/ec2-8.png

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
1Rtraevj1sM2tDZHbBpsvtlq2+baPrcTsou267entHe1r7f/7qDrUOCw6CjpmOA45sTi5O/U4Yx1
tneudd500XMpcll2lXdNd316WPBw7OFRNxa3ILfuI5RHSEduuKPdHdwb3HdIFqRq0qaHkcd5jw1P
Hc+znu+8NL0Kvda81bwLvFd81HwKfFZ91XzP+K75afgV+7331/Ev9f8UYBhQEfA90CLwcuBekENQ
czAu2D34VghNSGDIYChHaGzoZJhoWHrYYrhKeFH4RoRJRG0kFHk4siOKDg5k7kcLRZ+MXopRjymL
2Tpqf/RGLHVsSOz9YyLHTh1bidOPuxSPiveM7z/OfTzl+FKCVkJVIpTokdifxJuUlrScbJBcl4JP
CUx5kCqVWpD69YTDic409rTktFcnDU42plOkR6RPZ6hmVPyD+sf/n4enZE+dO/Ur0yvz3mmp08Wn
d7I8s+5lS2eXZO/l+OQ8zFXIvZCHyQvJe5qvkV9XQF0QV/DqjNmZtkKuwszCr0VHikaL5YorzuLP
Rp9dLDEt6TjHdy7v3E6pX+mTMu2y5vNs50+d/17uVT51QfNCUwV7xemK7Ur/ypkqg6q2aoHq4hpM
TUzNm4v2F4cvKV2qr2WpPV27eznk8mKddd1gvWJ9fQNbQ24jojG6ce2K65WJq7pXO5rEm6qaGZpP
XwPXoq+9bXFveXrd5Hr/DaUbTTf5b55vpW3NbIPajrVttPu1L3Y4dUzeMr7V36na2Xpb4vblLu6u
sm767twefE9az96duDubvWG97/t8+171H+l/PuA48HjQavDhkMnQyF39uwPDWsN3RtRGukZVRm/d
U7rXPqYw1nZf/n7rA/kHrQ8VHraNK453TChPdE4emuyZ0pjqe6T76O5jo8djT8yfTD61ezoz7Tq9
OOM1s/os6Nmn2ZjZn8+T59BzmfNU88ULbAvVL4RfNC8qLHYv6S7df2nz8vkrz1fvXke+3llOe0N8
U7zCuVK/KrPataa/NvHW5e3yu7B3P9+nr1Ovn/8g9OHmR82P9zccN5Y/RXza+5z1hfnL5a9yX/s3
LTcXvgV/+/k9c4t5q+6H0o/hbYftlZ9Hd7A7JbvCu52/TH7N7QXv7YWRIki/YwEkfEb4+ADw+TIc
JzgBQAvHv3iKP/HvbwYcHkMwB8b2EC90DeGEpEe+RrWgszHBWCvcITJ+PBM5DQFHRFFgKamp6Kk5
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

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://hazelcast.org/book/images/ec2-9.png

iVBORw0KGgoAAAANSUhEUgAAA3oAAAJeCAIAAABte+C7AAAWvWlDQ1BJQ0MgUHJvZmlsZQAAWAmt
WHVYFd+6XrObzd50d3d3SHd3I7LpbhBBUoSfSAuIIFKKhIKohAhICohKGCACgoqAimKgiCB30CPn
3Oe557+79jMz7/rm3d+sWd+s9QUATCWksLAgBBUAwSFREdYG2lyOTs5c2HkAwT8KIAz4SZ6RYVqW
lqbgv7ZvT2Eu3B6J7+v6r7T/+wa1l3ekJwCQJXzbwyvSMxjGN+HjvGdYRBQAyH0539GosH0MH4Au
Ah4gjP/Zx75/8Pl97PEHX/vNsbXWgTmDAOAIJFKELwDkE7CcK8bTF9ZBvgEAhibEyz8EABoUjNU9
/UheADDpwhyx4ODQfRwGYyGP/9Dj+x+YRPI40Eki+R7gP+8C/xN+sK5/ZFgQ6djvzv/nKTgoGp6v
340DPhMiA21M4CsfPGexniQ9m7/Yz9to32a/5WFR2tZ/sX+Uke1f7BdtaPcXRwfaaf3FgaEmB/wQ
D3OLv3LPSB147v/ojPOzdfiLvbx19f7iiFDrA35kjM2BPM5Px/wvJ4BkbPkXkyJg9C+d3kEGB88N
i7I8GGdIkPnBu/hE6B9wvCP//b5RfraGf/VERdgecHz89Y3+yv0iDA/kYUG/v+nf8xMRbX0wD94h
dgdz6EXSPZhbYAr0gC7gAjrAH4QAbxAMSHBPF+5FgjAQBPeORXnH7n+jQCc07FiEv69fFJcWvCK8
xbiMQjwlxLhkpKRlwf762ucA8MX697qBGMb/LYvsAkB1f0wv/i1zawCgfRr+xFv/LeMLBYCIBqDr
nGd0RMwffaj9CxrgASWgA8yAA/ACISAOZIACUAWa8OiNgQWwBU7ADXgCP3j8EeAoOA5SQDo4DfJA
ESgFFaAG1IGr4DpoB12gD9wFY2ACPAHPwSJYBu/ABvgGfkIQhIWIEC3EDHFC/JAoJAMpQeqQHmQK
WUNOkDvkC4VA0dBx6AR0GiqASqEqqB5qgW5BfdAoNAk9g5agNegztI1AIggIOgQ7QgAhiVBCaCFM
ELaIwwhfRDgiDpGGyEGUIKoRVxBtiD7EGOIJYhHxDrGJBEhyJAOSGymOVELqIC2QzkgfZAQyEZmJ
LEZWI5uQnchh5CPkIvI98gcKg6JFcaHEUaooQ5QdyhMVjkpEZaFKUXWoNtQg6hFqCbWB+oUmotnQ
omgVtBHaEe2LPopORxeja9Gt6CH0E/Qy+hsGg2HACGIUMYYYJ0wAJh6ThSnHNGN6MZOYV5hNLBbL
jBXFqmEtsCRsFDYdew57BXsHO4Vdxm7hyHGcOBmcPs4ZF4JLxRXjGnA9uCncCu4nGRUZP5kKmQWZ
F9kxslyyi2SdZONky2Q/8dR4Qbwa3hYfgE/Bl+Cb8EP4OfwXcnJyHnJlcityf/Jk8hLya+Qj5Evk
Pwg0BBGCDsGVEE3IIVwm9BKeEb4QiUQBoibRmRhFzCHWEweIC8QtCloKCQojCi+KJIoyijaKKYoP
lGSU/JRalG6UcZTFlDcoxynfU5FRCVDpUJGoEqnKqG5RTVNtUtNSS1NbUAdTZ1E3UI9Sr9JgaQRo
9Gi8aNJoamgGaF7RIml5aXVoPWlP0F6kHaJdpsPQCdIZ0QXQnaa7SveQboOehl6O3p4+lr6Mvpt+
kQHJIMBgxBDEkMtwneEpwzYjO6MWozfjKcYmxinG70ysTJpM3kyZTM1MT5i2mbmY9ZgDmfOZ25nn
WVAsIixWLEdZLrAMsbxnpWNVZfVkzWS9zjrLhmATYbNmi2erYbvPtsnOwW7AHsZ+jn2A/T0HA4cm
RwBHIUcPxxonLac6pz9nIecdzrdc9FxaXEFcJVyDXBvcbNyG3NHcVdwPuX/yCPLY8aTyNPPM8+J5
lXh9eAt5+3k3+Dj5zPiO8zXyzfKT8Svx+/Gf5R/m/y4gKOAgkCHQLrAqyCRoJBgn2Cg4J0QU0hAK
F6oWeiyMEVYSDhQuF54QQYjIi/iJlImMiyJEFUT9RctFJ8XQYspiIWLVYtPiBHEt8RjxRvElCQYJ
U4lUiXaJD5J8ks6S+ZLDkr+k5KWCpC5KPZemkTaWTpXulP4sIyLjKVMm81iWKKsvmyTbIftJTlTO
W+6C3Iw8rbyZfIZ8v/yugqJChEKTwpoin6K74nnFaSU6JUulLKURZbSytnKScpfyDxUFlSiV6yof
VcVVA1UbVFcPCR7yPnTx0Cs1HjWSWpXaojqXurt6pfqiBrcGSaNa46Umr6aXZq3mipawVoDWFa0P
2lLaEdqt2t91VHQSdHp1kboGupm6D/Vo9Oz0SvUW9Hn0ffUb9TcM5A3iDXoN0YYmhvmG00bsRp5G
9UYbxorGCcaDJgQTG5NSk5emIqYRpp1mCDNjszNmc+b85iHm7RbAwsjijMW8paBluOVtK4yVpVWZ
1Rtraevj1sM2tDZHbBpsvtlq2+baPrcTsou267entHe1r7f/7qDrUOCw6CjpmOA45sTi5O/U4Yx1
tneudd500XMpcll2lXdNd316WPBw7OFRNxa3ILfuI5RHSEduuKPdHdwb3HdIFqRq0qaHkcd5jw1P
Hc+znu+8NL0Kvda81bwLvFd81HwKfFZ91XzP+K75afgV+7331/Ev9f8UYBhQEfA90CLwcuBekENQ
czAu2D34VghNSGDIYChHaGzoZJhoWHrYYrhKeFH4RoRJRG0kFHk4siOKDg5k7kcLRZ+MXopRjymL
2Tpqf/RGLHVsSOz9YyLHTh1bidOPuxSPiveM7z/OfTzl+FKCVkJVIpTokdifxJuUlrScbJBcl4JP
CUx5kCqVWpD69YTDic409rTktFcnDU42plOkR6RPZ6hmVPyD+sf/n4enZE+dO/Ur0yvz3mmp08Wn
d7I8s+5lS2eXZO/l+OQ8zFXIvZCHyQvJe5qvkV9XQF0QV/DqjNmZtkKuwszCr0VHikaL5YorzuLP
Rp9dLDEt6TjHdy7v3E6pX+mTMu2y5vNs50+d/17uVT51QfNCUwV7xemK7Ur/ypkqg6q2aoHq4hpM
TUzNm4v2F4cvKV2qr2WpPV27eznk8mKddd1gvWJ9fQNbQ24jojG6ce2K65WJq7pXO5rEm6qaGZpP
XwPXoq+9bXFveXrd5Hr/DaUbTTf5b55vpW3NbIPajrVttPu1L3Y4dUzeMr7V36na2Xpb4vblLu6u
sm767twefE9az96duDubvWG97/t8+171H+l/PuA48HjQavDhkMnQyF39uwPDWsN3RtRGukZVRm/d
U7rXPqYw1nZf/n7rA/kHrQ8VHraNK453TChPdE4emuyZ0pjqe6T76O5jo8djT8yfTD61ezoz7Tq9
OOM1s/os6Nmn2ZjZn8+T59BzmfNU88ULbAvVL4RfNC8qLHYv6S7df2nz8vkrz1fvXke+3llOe0N8
U7zCuVK/KrPataa/NvHW5e3yu7B3P9+nr1Ovn/8g9OHmR82P9zccN5Y/RXza+5z1hfnL5a9yX/s3
LTcXvgV/+/k9c4t5q+6H0o/hbYftlZ9Hd7A7JbvCu52/TH7N7QXv7YWRIki/YwEkfEb4+ADw+TIc
JzgBQAvHv3iKP/HvbwYcHkMwB8b2EC90DeGEpEe+RrWgszHBWCvcITJ+PBM5DQFHRFFgKamp6Kk5
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
NAuFwKtlKzMalyOhSFdRumIwA7obQ6+wI9E7+aPMia4muXVHcM2EVryR1Wg0Gj6hJWaOqSXA11zf
19KSyHs9Xj4kpe7sb5LMIltIalZSNHScS7AgMSyYHY3aMjWwCcKb3QUxEAhJ8dRx53A72Lg1mzCs
UrNVSndDv6LMlqvS/K7yrGJFoJWyDh1KW6FmKdGLUtNgLQ0ls8CpnFLtUOV42yD8nLDCrRCxhj85
hr+OLaNwiwSQABK4cASCH/YFnpsLzH+M/ftF8dmfp11441X1d7NWhFL63VfA3WT9utJ++Ue1144I
uVfZ3o39lDS+W5Z+IxuKf8u4P9jvy9f5mx8QCBGe/RD/3uuEvFnZ+qby9e/lfvfrTGdWffGOVaF1
8D35V1l4dfHryvaft10036t8fVdc7IZg5a3v2W2N1Unuv1b++m7X+OSfdOes779W2v6mlSn+xv+l
H42NWQbf/yHx5s3A/Cel5z93/O3PbHvIrd/8lmGZ66JkFMU4g3v0BllBdGUYwrDAxT1Hd/PksfN6
waXwBMLU32zUWrAVQjJbHtlYuTU/O3vjxqyvxmbZB5y9tpaYmZmd9cF9OosreasZp8CoWrNNlZNo
PGA5czDHL4nHJsskxQXf7OzsfFeRpc7e8kKAHRpt085y3Y8xybU7rpnwl2pISauwuiDMu7bgzDQN
DWLDCdmyrVviDUTAKc/VDDhvafnMSqzCK/X6wc5SMTan6JPtt3RwfDxbICRTo9LtbODGYkmoHx4d
3WkqZMU3k7J4Wcp1MVGv7697Mrd8s3O3tI39+sHednErlihTA2gyvYl0vXl42KxvmMnY7EaF5Y6z
DZqbjW2RvYN6s56NBKy/L6wauEUCSAAJXGQCz5Bq7S/VP/1e91+uVKbz43eyn/tO7CWy9zsLzc1P
RJ69bPfwrdb3f5LV3yTkivipj6y+h5DZ9ynyxzaW/om3J2KLkvvUn2uxLT04vJu5/UrlvR+qb35i
Z/Z+7Pf+TL9PzP/65zf+4BXhVz5x+NVw/fkPtH/wqvHGqOa3yP0ried/qfnVzzS/6DP/4pXZ3/+B
1YirTjA+Hf32rdv39r74qebmc6E3/l65Db8Pd7LRby++eK3+1V85+sNPKeR13+e+Zf1q9Ox1HDg8
0csfiP/rZwn5SY322lXJ9Ab36Dmagp8jFwgDAhf6BN3Nk4fPcoGcjpDJCeU7h/WD/cLudpQ5nstK
GQScMnopRUOV/k0a6+x0A5/OxkbVgjNHBYq1XoxN141uJlmqw6JMljp3mtkITyXtxHl4dlidV9Su
x2m2VEUauht9nEmu3Wm799HUymoul4O1qnbj4/f07qSgMDTlzfFhRoxWaxH/bjMXj4hiQE6AB5nX
e2tjx2uFEo7zWOWmXl5pkJ2UxHPtNvEG5E1CVGuJrKU8LYdFMbSR3gFL6p1cJCQGIvFCkGhdTOA9
g+fMtQ3DaJl8kJAeezfbrOb2DnORAA22SvEI7QMmJIAEkMCTQeDHR+UftLr/ai3ttXum/uLKT8ne
V5cj8zeFmx+T5PcTYk21E/I0sb6IPTc/HoDp4OduBp77WGj+I+xnbCKON4j/f/pU7vlfFm9+TH4e
HLi7+o/vkTfvQR3vzHXvLzwrfurTub3Pi8+QEc1Ph9b+l/CHn26/9qrx43s8NP/K/9f92XXTCcav
/ZQUwPjnPiLc/MX4135TW7tp9Wjn+Y/zT99vk5nAZ36OkL+fEOB09oR7+pp1Ok7JKQy26Tn1u0IY
ELjIJ7h2k46eaZTCkY12gx4Xl30tba88cXGhoYZ9K57N3XiA50WBFKEiXPicN+Cnx8vxRCvA/Xfv
gz/3IBxaLpf4UinFbuShGROSEI77Caz7zPgCrW05oOXW8o2dzpGVmZ8LkW0lxLW0lWRmp94RRIcm
Pry/6V9INkg+NpOP0XWfVbqQdEfOOYTsZ3GOmOTanVfVsDjaR1hOkIotV0lwpxkRvU7lLsd07UBV
N0xRcHz/mEaZcbbkrW8rOIbngoIXekJ01m7DNNvdQ6Z4JR7JdtV5gkFY4mla34I95YS5pw4jut+S
8JSoRMC31SCwwjYcENjXVl+qV33QtqhgLySg/cOEBJAAEngyCLxBgp/55Zz8IWdvTL0J6zSF91+x
Ms2hifKuKAsB2sFLZ/Vxx/1v1/e/z09eabfvcTefK3z01diXy8uszuotMUUXeg5qfuOvEp/7/tZP
SXD2H4WF6+wLuO/DjOoEhxiMF23ju8aw4OvKl/+s+6vx9LuCnsvm0T0y01c1zmzzzbsnKWHlPRQT
DR5thRNcIYwKXsick/leyG6d1mjTrDb6TlB1MMbWd0BALU9Vc4JMyFoS3C6Wgqu7uVQYxCLpnbWF
FVLNJKtkV9PW/X+81aiuxarRJZiIB/0DmgZOeKbIE6g19xPxhUy1uLZGHdTopgDT+LXDg41EfKuY
X1vOM7modT8QO+5uQolanU/LMXA5ieVrRld3Qw4/D5rjI4l1f37UJNfukJru1keTEqgSb++T7TRi
8JjjRQgXpko1KRHqlbRqJejYrsj3cuwDTrCPTtq3cnFYNLkagN7R+XSyX9FCw/awL6KTFJlGbavh
PzjSAqy64alkUq51eraB2m7wFOS4gSF0rYiZSAAJIIGLQ2DUm/wpOHz325DPvDRudKK817nLE9wJ
WuR1Fbh8xf7mvyH9b89L5M32j/9e/8H/O5/XxE+K8k22TtSuaB7+NfiaB3/0m4EZ2qrxC9nMn/Sa
dxz0dL5JjW8dEeG9jlKaSfb/z98MMSWOAtdDZ6dey/0+LF39RwHhafLyOCUwzw6surWmNbjfsisE
WPD6JCQnyiehPw/WB/YgJGm4Lifkjo9zdq4g5Y6l7hkfUo6PFXh/DySY2O25HXwofnwss6AXu2tZ
O96gJ/QYZqB7msapBQFOCKUrx6lu3IwpgVw+kFK1jRzTZamzdTn2nCglNCkBJtFMuyosNHU0J6Rc
TXLtjmsm4RwYHI27HnJitrDkiy2E2oWsAlPWMBGfm48lyVJBEsFTo3a2HRVbjuOhw6qu6TqBoGZL
11KxlSqBO9NTPAjxgVVCFmaU/boi8p52S8tulKRcmqofVE7P3VND03RB9Bi1khwrkmCkJzVqG3Og
G/PxXDMVJkYtRb3eKMPdq4QHSAAJIIGLSqD62l9rL9+zllpCH7hf+KAw+8Eg+Zv5ZKn5rz9GXmmm
vgz+1uXel57zS7Jae1m/dY3723vemx9kX8A9CPdaP3xNh7NXXm298QHvMzTfWdH65jdf/l74T97K
/vrH+Zmf876fzll7PBBSpV5dT7OHViXai38l3LxuvPiXcv6+PVFF80d1crMfWSJ/s/B736r/zi/x
l+9r3/mPOfLxnPyRVcj83O7+5ifF919rv/ZK9ut/Lf3vyzB3P5oAiK6/BUHN1iuvpvKvQ4Tp9lf/
Zx7kPjxJyQMYbBk/BsKoXRcyB93NBx828Oj6Tl1fzUDewElf5oQj11qQOfgZdldyotQ4Aap/pAXX
TPeG3XLBR296A9JCzLfVLV7a2U/HQ72OCL0jdo+348yhjidky9bgD67v7OVk+zFQnJA+avJx38Jc
xqrgX9pVbC1O5QO3kHu7yjkhUlhNxxZ8K5DhX1qN0hB0LzmrQw2qlRNL9cLMXMxHo8z+9XWoMIKs
Vx8PkAASQAIXiABE+156Ze4lcCi7yX/r3drzN0tffHXm917x/drfQO76Ry+Tl95tf8USoRvGezqy
/qw/CTLfhvvW6+rzTtfN1P/8RpLpfKl5I36v88cLoMeuSBui367wGKCZGe/LL/pWaCuQ1v/5J8L/
PbibVwY1f7Zw829i6e/Tb+z3XFt9/+A3th1ThMKuzmc+lP3Df/DE/9Pcyp9SpTCx9jvX4RFO6T96
i09+fyH5Z1amf/YfK26+JmFAfBaQ97xr/ZYvt7TAP8O8pssfGqNkCMW0BneB/IIrBMvMC7+99JWv
feP+/Xv3aJyuA9u7d+92Onc7d++anY78pW9+9ibwxoQEzkoAApODgeCzKhyqPxLTHSqfdEptg9Wd
0/uNVmc8nt537iTtWIYEkAASuOgE7v9D+8173MzPT/zSu2fCU9CfeXqizAkgzDf+gUo8c31QyYBm
842/M8k1zzOTHn451AxTe4V7prsC1Splme86D4NHlZzJ4DEQhvo07enrr79+/fr1p556Ch7398IL
L1iP/YMt1Le2cAdyIBB4++23O52Ox2NFkKdVPiT37ZePcl/4PAev0b52jf6/du0KDVldhe3ly1cw
ujmEC08fCgHnkoOH0cBoXHb6Vqht00uD5MPuzKmMQWEkgASQwMMmcPm6Z8KqzW7rw/7cAxjFPeO6
TnFAM/fMZK/XpVlXta6ZLpUnZo1RciaDx+icaMdFKMQHIV2EUUIbkQASQAJIAAkgASRwYQmgu3lh
hw4NRwJIAAkgASSABJDARSCA7uZFGCW0EQkgASSABJAAEkACF5YAupsXdujQcCSABJAAEkACSAAJ
XAQC6G5ehFFCG5EAEkACSAAJIAEkcGEJoLt5YYcODUcCSAAJIAEkgASQwEUggA9COvMone6Rj1Qa
/rHHp5+2aRPerQNVeUGY+sk9D1DFxaqWrrdM08ML/NQNu2jBLCSABJAAEkACSOAdSQCjm2zYTV3p
PfzUPpBVeG3iUL4YkhJl+6XZZktLy6FL8ERTmqCaqORq5vjLSC+nRSY9M0PllWzF+dItt3otNZVI
KKmKwbSaujQHyZcDn3PK9ABVXDSbZckHDUcACCYkgASQABJAAkgACZySALqbXWCtEXCWjzeY36gW
t2754tTfa2vhG3NreXiHKglGo0E/7BuZ9FiHTMuGfLfWrHckUllCMisLMyF1oufYLiW3tjJJyxII
a6b39gqF2/D2caZgis0DVHHT6hForjD9e3fclGAeEkACSAAJIAEk8M4kgO5md9wtD2633oEXOlmp
IlMny8ovNGl+fXeJSbfARzRbOvU0CdmpdyqqWtGOO4f7m9KYF0C1K/IKE18tHB0fg2y9wFRVY+lK
i5hGWoakpHM5JSRCmFRKldrErKTiRdZEeiMOpeUf/tio1TRNg9dB9qpkVTUh0SoyxErbOpzQKGso
oVEbwcp2r0qrkgMljiRDeJUKmYaakqEWTSG5pHVDrt3YLeRJ8qJlB9NYySqyLKXL/z97bxfbOJfm
+dGF5H3pGkyNPJgBZCAX9FVTAzRMYy5WdbEr+k4F5EPVwEBUEoypTSeRkQ/T2A0sX3TgoBFYXqRh
ahqB1UEHlhYBRAVJWxgEeYXcmNq9sFDAQtQ2EGkvArOBLVibLGLNZMbi+16U85xDSpZsyR9ll8tV
/h9UUeT5eM45P4rU3885PHTZ0Q3Bs1hzZtSCM8joWeqMWuwMDvEJAiAAAiAAAiDw9RPA3M2xc1w0
s11Z7JHW84REdksdqMeGXQt3vVqNyabFjS2ZiVCu5wRhdSnaWNPiajSqRrNZX52O2WRZXZf7NRcP
t3xBKipabjtV2hSEmtvLRoVGqUSKrlQKClY233ZDjYzjC1qhVSlR8fh6urazQ9lk3YiGvEGRvF+m
tLpcWg2Kt+o7S7n4ualSzcMioW6NVxLkYR+xeE53jdkFMpHc2I2HXXM9/3apdHDcT4TdzPyS35xe
Z0wddq08uXRddcsYsTR1l/Oor+q1hBMPT82FBBAAARAAARAAga+YALybYye3Xspv0vg1jWDndzrd
i6T86tvl5dROhYnGlkvPzQiinNhP+hlaVCj1dnlhblYrNEiEulU2EVThgXasjud2bJ5VCV/I0ZDE
i/sxfvRek1yf54e7Mcpct44TxbZfwz73rWo/+vai9MDtunt4Qm7VXT48v7hx2D/vH/HiQuDeDLyz
ZFDWLOa1HWQWhJVmVevWTC5Xkxk9oSY0hbfStF3XLnCtGTs86TtOoxz0lCWHE2vJZDI+0hNeaMrG
FZK75Y3F1hvDCuT5aEZyrHJ3LFHSc1XfITuajn0QAAEQAAEQAIGvgADk5thJ3D087p8GQVcu1N32
Yfv05KTdPGC6q7LKniISQrp1ftw+Ku9tryT92ZiUkmXTOr0e5Wrx4FsPy1G+E0zC5Ps0Gs8+RzUW
Pa5OMYoSZwn1GuW+aAGLmhDC4ZAghsMyS5KZmhVDYWlCviCqZ2UW+ATS5NFpUQmRE7fLUyrLkYWF
hdcD7yr1gMcnM9HLslJUDdOiEfz4NbWM1d8NR7esPaGSKg6G6QfJ3dzsQqomHbaPj5vfCZtv5+NF
gocAAiAAAiAAAiDwlRGA3Bw7oaFwWAwFYVTqSWGJkmRZ8f1/VMatZuk5dNKRWiZbtJyTw21uKExb
SSsyP+IgaDJJQK4Hhbph2r6icms5/7mhqBQatsCv0e3UWEyMPRF0o/wayzB2MLQ63OlZ+lyKKcrk
4akVDar161xpngaTVvsn7UJCCspU3K6/F3zQgefUrGKxWHUuooLM0z48T5R18o+uLhWYDB8Er1Oj
uQSHdk6VJUmJF9ploZ6uMrWOAAIgAAIgAAIg8FURgNwMTqcvc9IRtqCRHzS+7o8fn9KiqkKrGC2Q
QqKQkMJer5FPv6bc9CSNoWvzyzxlUSWNOCGEVX+Mu765PEuLKanKwpsdli22n1XDw/yF3FbWUJf4
Q0UrGUUUw1HuNk1nsrQgUvV33w9zfsROxzK41qSilUJGU1VFNapSPMNrKC2pGXpQqZAzZucjtitI
UY1XsblA3dOiqfpFhZ1cKp1Om41R6XiROmVP1MzvBGEzV+0I0iALc+Umh85TWk2U5hDcyejAED5B
AARAAARAAASeNAHIzeD0XIi+wfnydWMQ32rVW2zi5mJspXx0bKghGiLeWOGTLCulPHvOR1jZPThp
ZAKn4cDI8DNq1NoHfI4lLaZUZ6ZWdr87tfXR/PUSTRplym5l97CgyTRenzD3mIV6niaU9jy2S2FU
0Ab7/MNfp0gUuMnx/owWIQuVSqVeb9VpID8UbRwfbdBkgFZpPZ1e3aSZnEmZxuelRLu8xiqrV0pd
2Z8r4Nv39SKN4d8thOPN3djO2yWSvIHEpKexhMqwUwJ/0v9SO+9WBXKDAAiAAAiAAAg8SQIzv/jl
r3744fvv6WU3Xp+2Z2dn/f5Z/+zM6/f1n//6Jz+ee5LNfjqNCt4pxF4TdKtGeR5bx4iyhy4KeB19
NlISBFpuiUQmDT5fJDGbfhWXIm9V2e0zsfPPhexoNX7kSENvb8/PScsezRb0tr+kFK2Z73czud+2
aJEp/3Bl/9jUwl6noC2t17dPzrPjOvmuNSI/CIAACIAACIBAQOD9+/evXr168eIFDdu+e/duMHw7
Q8m0T1ua9xeNRj98+NDv92kq4X3A/ea3p8Wf/VSk99i8fMn+v3z5LUkKcZa233zzLRZCug9bKjsq
z25jakxnDgp4Lt/jrr6rBq/GDMo93CfVcVUuT4y8c51Du6KcO9wu0awDP0aUC8eHwsLyQinNbC5u
NE+hNe9MFwVAAARAAARA4OkTgNx8AueIhFezSc5FSR5KsyfQqgdogqjZ59qInbCaPT/PDiNESaWH
qgo9ktn0gNZX1vdhL7EDAiAAAiAAAs+dAOTmU/gGiCOPvD+F9jxqG6A0HxU3KgMBEAABEACBRyeA
R4UeHTkqBAEQAAEQAAEQAIHnRABy8zmdbfQVBEAABEAABEAABB6dAOTmoyNHhSAAAiAAAiAAAiDw
nAhAbj6ns42+ggAIgAAIgAAIgMCjE4DcfHTkqBAEQAAEQAAEQAAEnhMByM3ndLbRVxAAARAAARAA
ARB4dAKQm4+OHBWCAAiAAAiAAAiAwHMiALn5nM42+goCIAACIAACIAACj04AcvPRkaNCEAABEAAB
EAABEHhOBCA3n9PZRl9BAARAAARAAARA4NEJfKqXWP6zf/bPHr0vqBAEQAAEQAAEQAAEQED40z/9
0ydF4VPJzafWzycFHY0BARAAARAAARAAgedDAIPpz+dco6cgAAIgAAIgAAIg8BkIQG5+BuioEgRA
AARAAARAAASeDwHIzedzrtFTEAABEAABEAABEPgMBCA3PwN0VAkCIAACIAACIAACz4cA5ObzOdfo
KQiAAAiAAAiAAAh8BgKQm58BOqoEARAAARAAARAAgedDAHLz+Zxr9BQEQAAEQAAEQAAEPgMByM3P
AB1VggAIgAAIgAAIgMDzIQC5+XzONXoKAiAAAiAAAiAAAp+BwKd6q9Bn6MrXX6XXcTqeIEqyHBI/
urcPYuSja0dBEACBT0fgYa/uh7X26XoNyyAAAl8AAXg3P81J8jrGjB8MUoh+cEzVj7KGUXeq3Oto
SxQiRVa8a+WyWSNnuwPrtzQ1ZuSWZZANBEDgowl4lh7cC8Y/9I+7DVzXjvte3eN3lftau66lSAMB
EHhuBODd/FRnvBsYzhdsw4xLgufk1ut+3B0V4qCFomQeHHQ9UZHIt9mrbu5UBEHOGIPk232OGbld
EeQCARC4DwF3YmHvI+8DE435kfe9usfvKve1dk1DkQQCIPDsCMC7+alO+XC4O//G6gmCWzVJHY6F
XqeY1XyHh6Jlax3KJQiea+oUjIJlZTWFUlXD6vq/S17PbTQcx+l5PTuX8a2ZWxnKXCMf57XWLLtR
LWT1XM27MOJdVxdriJ3VyB2rqLrBgq4XbJei7QLtamaN9hFAAARuJCBqtX6/f94/bSZ53r3m6fk5
xRQVukd4rpUbOD9VveqM3QRGLtvLtwW6Gnu9Dt0j6BahqFnHv0fc9up2i4auquz2QqU1PWezm493
+a7yL/7V4IbDb0DX3mEm3K9uBIMMIAACz4nAzC9++asffvj+e49Cn7ZnZ2f9/ln/7Mzr9/Wf//on
P557TjQerq9eR5+NlAb29g4Pe8byZis43m/3dckdZIglY/UK93uW231NcrXZyCVhmiy3LU0WaGyL
J+23T8WtudRIprLj1BSFV3ettcX9fiNK9VJRvw3T63LU2SXfGbsYW2zVWdNjNZdipgAAQABJREFU
+21blyx1NlX39+VB//AJAiBwE4HBPYFdejL/a9RzjdmFvCAkN3bjYddcz9NldnDcT4THbwIjl+3U
OtYOz0115BbB7jDXXN3K7FIrtrIWDXUbdoVd3SvtfsHRZy/dVaqKMrxX3Pl+NbWtSAABEHg8Au/f
v3/16tWLFy/oj8t3797xPzLZhlrgb8/Pz6PR6IcPH+iP4FAodJ+W/ea3p8Wf/VScnZ19+ZL9f/ny
W5HCLG2/+eZbeDfvw/bGsovbe9uLgrC6zLTmyvbuCh3w4NZyXB2uNPu2ZffLKyw2Rd5HQfDdoruH
x+fnp358J/BdBEmURSu2fU8J/XSx78rx7vXWVnbLR0dHh4Uo1eLb562YWlenanKtmTw6PXfsRplX
FuZlwom1ZDIZD4+a8Y1hCwIgcAcCbs0krUlqM6Mn1ISm8KImG0MILsyrl+3u4cl5/3iX30YWNw7J
Z3q0G2PlLt8iWNzUO4moNE5Pj4tZXdO1oFoa2b98V9F+9O3wIv+4+xVrBAIIgAAIcAKQm5/0i9CS
VC3rC0MhaWhqiPwIPJAzmX0m49zNIUbjXG+6fCiNZwiHSd2F/PhWo8vjxjbDXwKKvdFaPJ6gP1/U
qO9UGbNDB1PrSiaUy3/qiKphWjTQH5cuW8ExCIDAXQh4nn9dV5YjCwsLr/lfjGPlr1624XBIEMNh
mWWTFfqbTwyFpbEyVw4mXN09Jzs3t7AQoQcP364G1fr3k9G7yqilG+8wE2oZLY99EACBZ08AcvMT
fwXEcCK7S3XEtg16xOdCTvrVVlz/B8d1HBYx4jLkalTwt37eS9sJSTdZu2RheDi1rkqNJooKXrfb
ucjr1KxisVh1/IYP47EDAiBwVwK+ultpnrIxCgr9k3YhIQ2tXL3Gx2LGDoaFLu/4uUbzdqo55lVd
3GZDI/1gnMQvNprtsiE6vukOc0PxCRYRBQIg8FwIQG5+qjMd3OVpjEox6IfEzkZJPA5vx3I8wwfE
NhN6rpDTl3eY23M7E5/mXbjcSjEc5eXTmSwtiNT5k79/L2uXrQtyXOdxpddzszOzC+sDpyxFdnKp
dDptNi4r5ys2bhER+ExukXMsi0eS1+4MWQ7T/Pi7NKznWJZ9lwLDurADAvclMLgJlJbUjFksFnLG
7HyEj6Xf1/L15WkuFcvQqtWq9JySdjEJfPyuUv3d90M7g6Z+7P1qaOj2O7g53J4VcoLAl0AAcvNT
naUwN3xJPvqHbBtS7eYBDbO3Spurm2w8a/ugmVVDw9aMFZSG0WyHJ4US5h47qOc3d3Z63/y9O1hj
xYJ5XXx3bF+QeFxI7R8f7a6tJJMr23v+7DAh7C8uzzPQmN4tgmcFT97z2cmKliuyZ+iD4HUUmlBc
cAbHd/h0sqllu3O1AI93r8ZPi/G6TiplXDRpWj7Eg8DDEbi4tEPRxvHRRnKR7gLr6fTqJvkck/LI
lXWRc1B7EMM/fNEoCryAf7u5lI0fjhmRWJSUyG6wP0/r66mUIyosKrgHjN9VBpcqs3CP+xW3f3WD
m8NVJogBga+ZAJ5M/7xnlxYmYrM4RTHk/3jcsTW+ByDwVrA5nPeyNlo5LXhU6EqKLIV7TnU5tUlp
7MF5eezHa7TApH2PPcYeLTd12ev1XKeWWt2hMbzvjhtxiex49BCSIEX5MqKTSk+NY2YLmbZNT+uP
BR6v0+Pzl+LHMo0duNbMQqHdt+/WrTETOACB+xKgy5jdBNh9gDaPFPw6J1V46a4y2p6HvMPg5jBK
Fvsg8IkI4Mn0TwT2izNLOpOFSTf92/SFfp5Gf6HuaW2sRrewnnqzvBSJ+FpzceMg8VGiLCYriqzQ
c0paJsceqo213ixkXV5Vr1NtBJNXhW7D0v2FABV6GKnaYxnYGp+KvzjgjKLnrAs3ZFioV6umQcuC
snUDg9UKuc2LjdetmsGKhope8Fc15VZdf7VCvuJgiibMXhTBHgh8DgJ0DdMtYPRKfoRWTK+Qp0zW
vQ95h6E+4ubwCCcaVYDAEyGAwfQnciKeWjNEzT5uN5tHh4eHR8328amTS0z+AbpTw0UpUygLQr7B
Z152C/kCl5CeW51/nZKNwjHVaWZ6xWqgLL1w1qTaKXbL20wtbNkXtVU2Xdk4ah7uKZW3S+qVCZi9
QnT+bVVuHp+enrQNYTUyl+uywhS/kNoRDqhTzUIiGqwacGEWeyAAAp+FAG4OnwU7KgWBxyKAl1g+
FukvrR4xJMn+tK4HbTm5Ry7shfx5Z2wWAEWGQyFa4kWS5KKj8Ty06FK253Y6rktzBCRaXrDBVChT
vV1hcb9t8kHzaKFtlSLkJlXjF35Kr1NbbQl7RxotBtATwlF9WyhZnV421GXxB8fFBBvNF+RQIrVT
4HVhAwIg8JkJ4ObwmU8AqgeBT0kA3s1PSRe2rxCgyV9X4gRRjpc3YunlyOwsGx43CjbJSnpFSlaZ
mVuIZGnZJRKcrNiFg/VCtIpiVBD4W/hGDPOMq5mEGk8k4qq2VYvFaP4ot0FPYwwWnOIqd6QUdkHg
WRPwOvSSXKcTXCiPjgI3h0dHjgpB4PEIwLv5eKxRE7klixmaLrnG15v3xZ9PJaTlbC3n9WiJT9t6
nVpW1L4mNHZai0enTpRLSzdk53MjCIfK0+s1BCGuhEfSAnfpoe2MPOvP0j02iH8xjfNjp8yOVYUD
EPhIAl7HmI2wJTCDsJhc0w0jE+Wu90HkjZ9dK2c63VDcMNS7FSTL42XpNblLS7To2W6zb7AXuj9y
wM3hkYGjOhB4VALwbj4q7mdYWb3jdDrkNGnUrII6M79apyfTc9IAhO/q9DqWahQ7rkfvSAlLTDj6
ay7ROlHM19LrOrVCgl7nfOHSFOoN8nhS6FhZerd7UosGctM3KErRNUFYnjNsnsvt2FnNcGgNVEmJ
Ca3XmWKHdG2jqifYo0KkQBFA4LMQ6I7V2qrk118vRK9MRB7LdOWgV6W10PKbwXTnK8nXRoyXFSXz
4KBc/o4vHHFtuQdKxM3hgUDCDAh8AQQgN7+Ak/QFN1EShJ1UJEKvy3v9JmdF9w6O+87oj1nwsDup
zHw6sjBHC3EuvE5vlI8ojygnymuLq8uRubn5pWxDpad6AknJd/KphTkKkVQ+dtAuDn0xgUFRNk/b
u8n88hLLtRBZronslX+05n61WRZK6cj8fOT1VjhORuHi/IK/X196030XYmyvSW+COD7kK+kKLbdL
L4RwTZ2CYdmNaiGr52rsj6Jep5gNVrJVtGyNuek9O5fx12k3tzKUny1s67m0ejublUJB1S/WbaB4
M6uytR4UVdOLtdblsv/iX7mNBo2m8+XUJlZHFQYNK9CbbDW2bIRqWNReHthSErqumTXXP75hK+Hm
cAMhJIPA10QA625+TWfzy+6Lv9zfpbUH2UJ/9GLoiZrwurQAxUSb/vqktATV448XftlnCK1/WAJe
R5+N0DsekuW2RYvIdm1lfpnGsvebfV12tdnIxft+Fvf7jWiGZ6blg5KxeqXOmlJunwpbc+T3H4ay
02koMlsvfmM3HnbN9TwZpD/yEuGuMbtA8RRisVi9TuX/4h8n/8s/HyvrVBWFIvbbfV1y/baNV9fX
pPGGcYNB+wW+zm5diO3fZe1bbuHGzcQL+bobwHVpQW0TbeLmcOO5QIYviwDW3fyyzhda+xgE/OX+
LklAttDfRK1JLbouLWjwRJu8ILTmY5xT1HEbApXUVjarz3CtSfJO4S56/0JY2S0fHR0dFqK/q+VI
mArCSrNvW3a/vMIOUjk7UQxeek4akVyk0eM9rimTGT2hJjSF5RJM23Vtk8fHDk/6tm3Tq9LL5b/7
Z+NltR99O7z63MnVMSern2f38Pj8/NRvRscJ/JvhxFoymYwPHsXjlT/MZuKFfN0N4Lq0oEkTbeLm
8DAnDFZA4AoBPCp0BQkiQAAEQOBRCVR2dvz6Vr5rF9jMkGB4WojHE/y5OqFj8ahk3Nei0fiKUCoJ
LpurPNSItO95XW6osjziG2XxPR6fzER9LSjKmkaxndGyvGCwCTx/k6rzc4TDYarZb0ar4VdKK5eZ
6qgV7IMACIDAgADmbg5I4BMEQAAEPgeBxe3D036f/p2fF305OWzFQHYOIirBa7hcx2FRXDuO5/EF
5ErzlDk7KfRP2oWEFIjSCl+6lpX0aD1b9sH2p4dJ1fm5/YLjxT2nZhWLtG6Zrz6nm0UKCIDA8yMA
ufn8zjl6DAIg8DQI+HJNlsI0Y2TqpBHeVDmeWWQ7mwk9V8jpyzstOtjOxEUxHOUJ6Uw2l812/iTN
j0pLasYsFgs5Y3Y+YrvCoHg+EtVM09SV2Uik5o2Xrf7ue14V2wzyX6lumGPSTieXSqfTZoP5XBFA
AARAYJQA5OYoDeyDAAiAwOMRCPOqpo1oU+JFUki1mwe0kkKrtLm6yaZxbh80s2xd2VDC5I+01/O0
IFLvm7/TOD7aSC5SvvV0enWTZmwmZZYr2mgfrtGruVqV9fX1UktIbsuXyw58lazSqdXxFo82jCKk
INLfCVN1CCAAAiAwTgBPpo/zwBEIgAAIPF0C7IlrkoVXnKH+ZEt6+iVoOh2zbCznIIqnBJMyx6Iv
lx3p/bTqRrJgFwRA4AkTeDpPpuNRoSf8NUHTQAAEQGCMwBWdGaReUpVMTo7JzIGRSdGT4oZmrx/j
H5jFJwiAAAhcTwCD6dfzQSoIgAAIgAAIgAAIgMC9CEBu3gsfCoMACIAACIAACIAACFxPAHLzej5I
BQEQAAEQAAEQAAEQuBcByM174UNhEAABEAABEAABEACB6wlAbl7PB6kgAAIgAAIgAAIgAAL3IgC5
eS98KAwCIAACIAACIAACIHA9AcjN6/kgFQRAAARAAARAAARA4F4EIDfvhe8hCnuWPjMp6J3BSz4e
ohbYAAEQAAEQAAEQAIHPQwBy8/NwH6vVHTsaHLCXgjzb0HVqhUKhaNl3f/uy59Qsu3P3cs+WNToO
AiAAAiAAAp+YAOTmJwZ8s3lRq/X7/fP+aZNeiExhr3l6fk4xRYXeCuK5Vm7g/FT1qsNVlOeaOgWj
YFlZTSHPqGpY3UCcukVDV1UWOTOjaHouEF7XFeG1mFlVoVKKqunFWquWM6iCXLXjN79RzOq6lrPo
0LMLlKSZNddPunbrWRpviL9RtFyx5t5CRLt2dn7pzerqajpl3Cb/pTY42dSy7TfPa1im5XQvZcAh
CIAACIAACIDAYxKA3HxM2lPq4u+b4xuWgb9Rjh95rjG7kNosJTd293fXFuult0tzVaa/vEaJQn41
ldqptKhIPZ8yfGno9cx8qS4oaxtryZhQKW0uRww+KH9NEV7L+k691YrFQvVKKf3maF7qUQWbb4su
WfccM71TKlVCcpiOulae9qsDeUsx1wVSehvlZrt5dHRYzkib6TcLs8qNktMp7AjbR+csOExz3zGI
ISE2eIGfm1vP+Rr9jkaQHQRAAARAAARA4KEIQG4+FMmHt+PWzDyzmszoCTWhKbwGk/vtfA22e3h8
fn5aXmEJHYcLQFFpnJ4ekzNS07WgRDAoP62Ia/u1xA5P+rZtn/fb5XL0Rwkjxqzu2B2PBqcrbH87
oYToI5xYSyaT8fBtZWBMVhRZiUZVLZM77x/vxlpvFrIuM0hCtls1A9+tohf8AXC3lntL9W1mNU3N
Mg3N/KnM8cqCouesgb/TLWgaF9++JVtXc4MkbpwKmnqqJbTSGsFQNXM81c+DLQiAAAiAAAiAwCcn
8G988hpQwccS8LwuL1pZjnC9d8VOOEzuRjEaXxFKpVaDZ+452bklLlIvco8Kw6tFvB4vmMxEfQUp
yprGymbXyGkqmEXL8yw6XDnQmG9TEFXDVNnORwVRyhTK65FUo5OTZK8QnV8NbTePTyWxW81GInO9
k/NsWI6uCUJ+RTcyksg6SIIznDWbihQSes7W0tuFXvg8pwrUrEpF3yoG7ei5pXrNELLBIfsQlXhm
rVjJKxnDUDwvdGuFPGIDuyAAAiAAAiAAAvcmAO/mvRF+QgO+UFxpnvb5yPJ5/6RdSEjDCj2+52/9
yE41x7Tm4nabSvTb/mTQYX7auVqEZBnLUGkMnH9ep+NShJrZp21rJ72ab5GH1YhLdEgG6EGcYrFY
/dgJkSINdfuGOrXVlrCX0ySx1xPCUX1bECxycIpSNBoTYvEoOUSZxGQCNxunTK7rdj2JnK7DlvqG
gi3rhc9rGB2So1EaWI+rUSWqRuVLqcNs2AEBEAABEAABEPikBCA3PyneexmX45lFZqC0pGbMYrGQ
M2bnI8EzMFMM83mfJBJrtSo9YqRNdoqOlx3Uko9ENdM0dWU2EqmRKhXlOAlAPyxuZIZzKDu5VDqd
Nhu9QeLdPj1vUJCrv9VMQo0nEnFV26rFYrLXG4jnwafgdbLKzNxCJEsS1/WT76gbh6bu1lLkBgEQ
AAEQAAEQeBgCGEx/GI4PaOVCTIWijeOjrWxmp1JaT5d4FUk5cA6yo4ucdCCxGCmR3Vgs7bTq66l6
cmWFhOelXFeLCFRL+zCbWc7XK+vrTKAmt2VmSwhr5ZXNFKs3m4nyGL6R6NEkITzSjIukm/e6xUxK
ENaYq5E/wXRoO+plU2Py0HMbO63Fo1OH/JQU3JCdzwXVhAXB7nR1WaLjwaNBQdLYx1ifx1JwAAIg
AAIgAAIg8AgE4N18BMi3q0KUi3zIXBsZ9aWR5Zzl0KpIp/SfVks6t1RJJMfjaE5Z40dFjckqUc45
bBUlyktj3txekdm7pghLVE16RigI51ZW9RWa6zis6bF9Gsse9EH0a7M0eRBzw2e943Q6Hcdp1KyC
OjO/Wl/87jgnUaUSm6O5PGfY5LTs9dyOndUMZ0xqDi23HKfT67G1OBOpiuDLU1GKx4QSLXPkdl2n
ZiRIxZL+DEJvsEOf9SqJ0q7bGUwWGEnCLgiAAAiAAAiAwCMQgNx8BMj3rYKGyENsZaSh5rvB4F3y
XpjipUYq6dnLO+QcFTa24r7Au8h6+z2Jnm5PRSKRpaXXb3JWdO/guO8E4lWUzdP2bjK/vLQwN0ej
5cs1Ubl4mmfQV1FOlNcWV5cjc3PzS9mGStNRA1UpaoWDxfrm0sL8wtKbnsznHQwaNlDsYqJQXqys
RubnFyJ4S9OADj5BAARAAARA4HEJzPzil7/64Yfvv/co9Gl7dnbW75/1z868fl//+a9/8uO5x20P
ansyBDyXXIrMC6mMDuA/fPPom8eMjgjdq3XQjE9PYJr7chJL8Lgav5wycsxruNb+SGbsggAIgAAI
gMBXQuD9+/evXr168eIFLSX47t07vqQg21D3/C2NgtKTuR8+fKABzlDo451LZPA3vz0t/uyn4uzs
7MuX7P/Ll98yP9Ysbb/55lvM3fxKvlIP3w3SmcrDW71q8TY6kAnKqyUp5ialyQvdpoaJ1hEJAiAA
AiAAAiDwAAQwmP4AEGECBEAABEAABEAABEBgGgHIzWlkEA8CIAACIAACIAACIPAABCA3HwAiTIAA
CIAACIAACIAACEwjALk5jQziQQAEQAAEQAAEQAAEHoAA5OYDQIQJEAABEAABEAABEACBaQQgN6eR
QTwIgAAIgAAIgAAIgMADEMBCSA8A8cmb8OjNPrRupSTLU9YTevI9QANB4BoCE9ZuffjvfLfT6Xpe
SJKlJ3oVPWCXH9DUNacNSSAAAs+IALybj3iyvY7Bl1jVrQ6r1XNzCj+eybqftBVeJ7NEIWLx15QP
q/I6ll99sNUstt76oJF+pKKoerbQcGm9dwQQeHIEvK5j6uoMrSrMAn1nFaPY8L/GE7/zN3Wga+Wy
WSNnT3jjqVfT6OVYSwn/4r3J0H3Txy9D6peqZWvstQvTw5TLfHqB6SleR+N3jOL4HWN6AaSAAAiA
wA0EIDdvAPSwyV1ujr9Gx6tmFzbZSyLpHeJb0sNWc9ma6Nu/+lKesYyDhdT9RvpJrVa9tLP6emHO
tEejx8p9WQfszeuFQtGyr/3pntgnz6lZ9vU/+RPLIfITEeg58fml9VKdzMeSyRh7j2krb/K/5ciX
zyu9oyOyV93c2clvTlCbghCSmUX5hquI1/oQm/HrrVWv7LyJZK6Vfx/X5UltFSXz4KBc/i543+yk
LA8VR+8F63Z7PXprGAIIgMBXTQBy81FPr8hrE0NCp5p9m2cHe0d2cE/3XCunB45GVa86XA55rqlT
MCy7US1k9VzNG8QULCurMe+oaljd4b16opEpXRRl7fy8X6a3kAtCcr99XtSC5vH8sb0mvdvq9Pho
jR+uLxsO9xrZBUPXNbPm8uhrN16H+qONeoOuxlxrYHqiZ2kBKvahaLlibaJEuGTBtbPzS29WV1fT
KeM2+S8Vd7KpZdvlkV7DMi1nXBJcyo3DT0zA63aY0qSLqNm3Lct2zvvHh9taaLTaas3KXbpM+BWk
6ab/BXBtU9P877Nn5zIVXtjcytBFR1+pwHtKV5mmv/XTfOu9TjEbfAWVwO/o2SZdGnrO/8L3nCy7
ck0uEL0aS+K1XH/9jjTdvxjL7T5dhs39FZ4yuNCvvcwndFlwi4auqv5giqLpOf5Xk1fL8QZXfYHu
+Zc2a7/XcxsNx3HoDbGs3gmdZYMzJuvgyK1JCCzc6ubAzZoaOabn5ufn5ubINa3kLId3ExcXx4AN
CHxlBOid6du/+Iut//YfZX/236z/V5v/6X+29ud//z/+M+0/+Hf+vZ/8r//8/6U7HcKDEei3/R+N
4VdordwOjPePfVWX3Njd311jbhpBODjun/fbXA0OSizu9y/F8JSkb2e6Eb/eff7TNd6dEbnpJwwa
yQQoD/3jA7/6/Sb98vXLMXYUG6SOWxs/4k0dy3k1ZrzErY94MzbKzXbz6OiwvLfBW0h+YvbbfE04
IJrbR9dkuDaJVTroTr+8KCzeBsK1FpF4HwL99r7/zaQhgpW17fLB4fHp4Asw+BoPMrDPwWXiX1NJ
9nU+P2/zv7f4aQ2uhWGRsuMML9jFRf+i5H+YXRiPJfnlQEVIF7bLPPvi7un5+cl3/gXNpPDwKmba
8Zrrd5TFoIq1vYPDw/JGktW+uHHImnzTZT5sP+0Mutxk5WMraxtrvhNYEFaoLUGDhe0TZrbp32r2
mqfDRrI7xqAlzIM80tlhnqA6ujXd6eZwfswu2sW175rtk5Njuo7Lu0Rvj58TXFyjXwXsg8C9CPzL
f/kv//qv//pv/uZv/vZv//bw8NC27Xq9/k94+Kc80O4PP/xAE+BPT+nWda9AopGkIwlIkpEkJklS
krAkeUkik6QmvJvB3fJzfMT0hOzX69ZM7utMZvSEmtAUHmtyR5rv5FjZLR+RsCpEKcWP2T08Juej
/wPXcZjb4xoj9+kdvTs9+OXkFYcTa8lkMh72W3Efw0K3Yem+x0VRDbPK3bnkNelWzcDLq+iFa8au
Y7KiyEo0qmqZHP0G78Zabxayrt+iSUbcWo45qDazmqZmmUeHOWOUYPqsQl6pgb/TLWhadXDgdW1d
zQ2OAuu2qadaQiutabqmaoGf7F4sUPjuBEQ5se9LJKFVym+m3i4vzM1qBT53c2Dt6mVCKf53d/AN
Zp9hll/UisFfd/4fZtGT/RKLjx2e9B2n4Y8D0DF9kXj8CnOq2n3/GkzlapKqs+wt+u54jsUvaEGg
6RfkIuWO0Y2ozOry653YMFZ8PORX3y4vp3YqbNpNy6VnlW6+zCdYFpXG6elxMavT9zW4uzC/pRzP
cAG5SXcar2PzRm4nFOYeHsCZ2lkq7ucZvTXd4eZAwzT0p18hF1fkcFii61gziud9XaSr8urFRd7c
gS9Zz1WHPl7KaZjFgqH6QxzBiNA4QByBAAg8EQKQm5/xRNSXogVfY9GgHW9HZTmysLDwmv+YjTUs
Hk9ESVj5v1c8JRymn8hQNE4uAaHVYMVvNDJm8fYHPdf2M9MvjCCSMLRoHD8u+XEfvfXc6vzrlGwU
jsm1YWZ6RV/g9QrR+bdVuXl8enrSNoTVyFzOR3NDRaKUKZQFId9gg5eTjYTlKNPNK7phbGkK0SNk
4azZbLMWbHmbqYUtm0d6VqVyMZes55bqtUAKs2QKohLPMBf0SsYgW8aDaG/fMrZ3IhDSrfPj9lF5
b3uF+/+ocGU1y8evAztXL5NBBb5YGhwNPkdjaVYhi05mouN/XAXPwSfjvnr0r0GBHqcLK7vMi1iv
VatWiTyuG2sxoV6tVWs1il3cTkj0MQjTGzbIwT+3D9unJyftJvPLU9/oKcMbL/MJlmlkf25uYYE9
6vR2Nbi7sJ6GlCy7fwjVml2zirSTLCf4hcEi/TC1s4MMI7emu90cqAGbr3WaJtRxu8GoPZsXe/Xi
6uZmF1I16ZAu1OZ3wubb+XiRLnIK3UYpv57uyMZR83BPqbxdUj9iRvagH/gEARD4tAQgNz8t34nW
V8ptmmPGklqras7medjNn/RLczAa2D9pF0Z+nvzbK88TbPyY8fgbjIwWv+W+1+uYiWXmWhFiCvt1
ZY/LFIvF6j2mLYb9uvm0sHAoFA7L9Nht0Skq5Nno1FZbwl5Ok8Qe/XpHdaJkXePgHO2FSFNieZhm
RJSiURoNjzPdrkiUmX4dSTaLPdd1u55Efp7GuBMzsM6o+mSDCPbUSDQaIlNqVBn7G2CYATuPQMCt
Zuk5dPorQstki5Zz4l9TvqdyUP2ky0TgkSWHn23v4g8LVmb8guJWKm7XtxZ8+Ack/oJ413FYFJOk
objBZOFmKkWaLmNkM3pSqG+muMIz4sqgJPuc2LDRDP6+FJbYFUKO/Is0/8t4w71itCOdai5PxRe3
aWx8fBCcLoE9SqmsLr/doat8MROXL+oZ3ZvQ2SB5pKK73BxEuXB8uJHspJZfRxbm59iyAprVcMno
pYtL6NQ2BeHQzqmyJCnxQrss1NNV/0+KLpvQYmYSUUXNFMgz3apyC6MNxz4IgMATIQC5+agnIviN
8QRJzR5uME9Ia3M5a7s0qsUOhNKSmjGLxULOmJ2P0AjXncJdjZB/UVWiOT6EVklHVKM6+hNIMTRE
NTsXWa+zVuweWiQHKXRyqXQ6bTZ67OCmQCUCv8VIzi7fF+V4eSOWXo7w9WtmjILNaudVrGYSajyR
iKvaVi0Wky8JghFLY7v0iGtwfL2R4c+j18kqM3MLkSyJZ9cXHbzkmNVrD4amrs2FxE9EwOs18unX
pFPoOR5D1+aXSZaQZFKl253GVIT+7JhZWuUXgN9EMRzl12E6k6UFkf75v/UTHr25QBVo0RS/EChm
cKFtJvRcIacvM6EmbGfiVK2kar4lchRG5ZAUjQ8O10ZGJgZx1376X66URo1UZmYXeN+EhBQe1H6H
e4XIvIZ0r6nVqvQ4ojbSYeZL3Bg2Y2WL/oi6FAbVTejspZx0eLebg6TSs0Hn/T4byGgebicrqdcJ
Z3hNDXdY45ND/zKtHkx/GA4udWG0vZQPC0dcPSmIAYEnQgBy81FPRJjX5t/81Vx1m/+27SwnbC/a
OD5iDwS0Suvp9OomOSOS8sitlP9cjDV1LEbiSaE7GvG8eqvFfip5qA+mRPmN9CMXF+n5gt2j41ND
HURLLCU80jY/54StKMVjQovclMPgdemnTlMkHhHScjY5W05Pjo/K2/nVZbYsKHd5Htr0UCwPNKvZ
tm63Gku3mEkJAv9Rv50Rz23stBaPTs/topnNZIxMcvgjRl21O12/1f7JGvZgbGfsHIyl4OARCISj
WxsrpD2EeqWULzERtbJ7cNLIjH43x06RxBslylsHvsRq1UNrGyv8IgzyhRIm8/YJ9TwtiHT2R/9u
u7zGDyulrszzCez7EFJtPrrdKm2ubrKx6e2DZlZl1ZIH3b+ohZWELNKhysuzkXQ6HA1jR9JoSrAf
XG+0FBm/RulCLB8dG1TLnS5zbllKZPnftvX1VMoRFV7BsH5J9yef0nM6hjqM9RvBDqd39iKPv0db
ie3d6ubgDdY+olGJEBvgyG7RZJiW73JmVoZNYZfzyOQWvhzBMPEiGz0qLwhxf5IMK48AAiDwtAjM
0ONCP/zw/fc0Q8fr0/bs7KzfP+ufnXn9vv7zX//kx3NPq71fe2vYeeB32sAh8VH9fRAjH1Xz5UId
S4ukKvRjnFEloecWs0vrlRg9YMHHza14wSsY5K8Ru4618DpNT+Inwq4xG8kLa4dNg8a7e12nsFXV
iqbvWB2x7lnqbCpabusKW7ev4+RSq3W2gmmDaVNaInuyEVaqoLdtXSZTXqc4G0nvHbY1JeQ2qvqb
1Vas3Lc1Kl9UZ9PCdrOoh3q0ivibfCvZ7luyyIrn9LbDivMGhPfaZkLseWGZakX4XAT4NUOV3+ma
oe+NJ4RCE8+bbzAw519NoQl/djAT7GoVJyV+ehh3vcx5r+7EaLQPD9xZzzFnl9a3aWnPKL2lKdRz
nQJzE9Mz8tnwpYtL8jKzkdLK/rGphb1OQVtar49kk/bbW/GQ0K1uLa2W/Ot0tNnYB4HnTuD9+/ev
Xr168eIFDVe+e/eOPVfHA3GhT9rSs+g0w+zDhw/9fj8UGv1r/c7ofvPb0+LPfirSOzdevmT/X778
lm454ixtv/nmW7zE8s5AP2kBdmruXcGDGLl3K5gBWSse9sTlt0v+UCC5bL9rszmaLNCUtPxyJJ/m
B8JG+Yh7MWXztC1lIstL5N9lYXFl35hIRBKEnVRkx88U29g7KOqJQPSJ1xoZWKPnmstrZmo5ssqr
WaOZX9wY6QetcGBG3i7xAUz2DMoggdIHPioxUSgvRlKRCpUOBHRQGh+PTeCjrhkmEqc1dMzg9Kvp
c+nMoNnTGza5X2O9mpzlmtgH7iy7+nbdVOrN4M5AV/peu5HhPt3LFxfN8hQWlhdK/F6xuNE8JUnK
A32U0pGSf7ByeFwYXJ7XdARJIAACn4cAvJufh/vzqtX3jEz6wfL9SFf9UtPi78TtNka4k2uSe4q3
eVKTR5twP4fRqCXsg8CzJBBcpFdvATSxhruOh38U8OF3Gnm/iBgOVlDW+4npZ4kenX4eBODdfB7n
Gb30CUxXbdN+JKbF34nobYywpk00Or3NI9lvU8NIduyCAAiME5h+CV1OGVWavg16OLDONOkErTpe
CY5AAAQ+PwEMpn/+c4AWgAAIgAAI3JWAkt3/TpHuWgr5QQAEPgsByM3Pgh2VggAIgAAI3IeASG9/
v095lAUBEHhMAlgI6TFpoy4QAAEQAAEQAAEQeHYEIDef3SlHh0EABEAABEAABEDgMQlAbj4mbdQF
AiAAAiAAAiAAAs+OAOTmszvl6DAIgAAIgAAIgAAIPCYBPCr0mLQfsC6v43Q8ekmeLE9ZyOfGDA/Y
GJgCARAAARAAARAAgakE4N2ciua6BHpNYvAiqOBDUXXL6Y4U6RVUP0mpDd5Fzl6uGGQ3SCr6wTGD
fOyN4aPhIjMro1AF2ULD7QVZvI62RCFSvFRqaMHrZHiGy2aHGdhbHK2gOf6HZrEWXF/vSHHsggAI
gAAIgAAIgMBtCEBu3obShDyj0pKSW/VSamnecgPJ6Lk1eoc3D61ctTMsPyiVL9gui/Sc3HqQb1xs
ssRBZrbfogp2Vl8vzJk2jxYl8+CgTG8cnvqyblFi5WgBZP5xm80g53X13sbO087TdWqFQqFo2QPl
fvvmek7Nsjt3L3f7GpATBEAABEAABL5GApCbH3lWfW223+zT6+1P2weL3Iw30IydamFot75quYOD
gaIT8m8ski1u1awMkq5++plje01WxfHRGs+xvmw4VIvXcxsNx3F6vMquU81q3EuqqJpuVJ1Lkqhb
NHTd0HTTHjSQ2RJl7fy8X06y/eR++7yo+TVeV6/g2QWypZk1lxW7PngdfWZGszoXua7GXKTdac+z
tBHPrKLlirWB1L/Ojmtn55ferK6uplPGbfJfsuVkU8v+3wmC17DMcX/2pbw4BAEQAAEQAAEQCAhA
bt7vq8ClGb1eu8XNBGLO6xS5z3Jjb49ruZ0aU4iXwqZl21audCn26mGY+ydDUjR3fMBTK2zSpuDV
dihskq+NxsTnl97uVOorGxsbSrhSyr8NJBHLLopeIxdP50ulvGDoqi8lr9ZyNWZKvULXIluV6nCG
wNWSIzHU0EsZr8aMZL/LblcQNsrNdvPo6LCckTbTbxZmlRslp1PYEbaPSL6fnzvK7VkM2iWGhNjA
Xezm1nOXZf0gHz5BAARAAARAAARGCEBujsC4+246MktOtvmlNCu6UtZkJmF6nVqeHa9lKHCf5Gqx
wSKCsLi9t70oCKvLy5stYWV7d4UObhFESeHGSEKy3EOx5Do1XnoxqiYyW+bJcbutyUN7qYW511SN
EPvuuKiEhtF32LlUbzixlkwm4+Fh/XcwdSlrt2HpqsK8lIpqmNXAJet1qyZ5RXm0Xrhm7DomK4qs
RKOqlsmd9493Y603C1nXr2OSEbeWe0vO5M2spqlZNsOBeWoVXj+1QM8Np0K4BU2rDpyfXtfW1dzg
KLBum3qqJbTSmqZrqmaOp17qJQ5BAARAAARA4LkTgNy81zdgMZYcasVDU+NyzrPNdW7UrlpW1ea7
+cKIf7MlqVqWuz1pENvQ1JDvGr2xIT3XNyaQh3AkyKrO29BaffN6YWF+fiHSuORRpMyLWnTqLM8R
WxN3x+oVSRhalpWNSxPz3j7Sc6vzr1OyUTg+bjfNTK/oC7xeITr/tio3j09PT9qGsBqZy3VvY1SU
MoWyIOQbzPU72UhYjjK9vqIbxpamhJlVL5w1m23Wgi1vM7WwZfNIz6pUekPIPbdUr43PThCVeGaN
oK9kDLJlPIj2ZjUjgAAIgAAIgMBXSQBy816nNVu0nNNDX3EuqwUmSnqOGYyQt9ZTqXwgJSvWyAC3
IIYT2V3KG9s2FEkclzKT2+P1OmZimRuLKdyHOszniXLt5LhJY8r7u774TRu1oVha296OUdbWaqbo
DIvcfudKvexxmWKxWB17DP/29lhOLvRI6rE2hkOhcFimGadFp0ij216nttoS9nIaUekJ4ai+LQjW
NQ7O0YpFGurmYZoRUYpGY0IsHiWHqCJRZpLOJJvFnuu6XU8iTI2Jbkrmx73kyw3J0SgNrMfVqBJV
o+PnY7RN2AcBEAABEAABEBAEyM2P/Bb4es4jzRRSa4ekipikU7O2a1v8UfOVI/LPsXBcXmGJOzmb
igxKCaJi0PxBOxulKD+SZRoPfnwlHaFx5dm5iP8I++6hdWnSoWvF5+f1WqcbliRF5iaYlgpCVDOK
B8ypV0kvXVoUifyLqhLN8YeVqBbVqAbN40Wn1dvJpdLptNnoDWq47pNUmv8w02imLj8Q5Xh5I5Ze
jsyy+QgzRoHx8WXdaiahxhOJuKpt1WIx2bvwNI6aubxPM2iDKK4NpxoZ4vY6WWVmbiGSJfHs+nXw
kpcNTz8empqeBSkgAAIgAAIgAAJY5v0jvwNhXs6XJ2E1e7hbW16vt3aWN5dZwuJ2JhpovlDc2BNK
q0KdFJo1WmpYsW/kqtLxM/vZFhdjCk3NNPSB2aA0lRJlXRDWN9Nc5ZLHdG2/mIuLQifI4QlSYms/
mU9XhFTEVM+zF2Y9r966GMivD4bgLzJQR67WKwlCnbySgfnrPkQpHhNK5KYcBq9L4nZPkXhESMvZ
Ws7rdbsd23qdWlbUvsa196HtqLexPzTLdrrFTIrmyzJXIxtPFyYZYfHD4LmNndbi0alDfkoKbsjO
54JEImB3uros0bF49cQEua74PIfx2AEBEAABEAABEBghALk5AuP2u6Jsnp+bI/lVwz43gmOaQjga
Qkrm/Dzjx6jjpVikKBfPz4t+8uj2ShWjiWOlZHKUGuRnpUADygN5NGpW1K1z3RozQAd8ISTtauyl
ro1nELXiuVYcj5t6JCqZpJBazsnNjCoJPbeYJTEe8wef6YH6eMErGAkpHA5LJPAEej2SGGbTK5fn
jMMmTTMI9bpOYauqFc1LDl2/wjq9WKlDY/K9bsfJpWid08XvjnMSpUm3N9JynI6shNxGVU9VhFiC
WeYqOW1ahqKHaGqETio2mGlLiT2WIwj1qt1RQ2LPC8sfPTF2YAufIAACIAACIPD1EoDc/ErOrcjD
U+uMrBUPe+Ly26XNoGXJ79psjiYLNGkzvxzJp/2UjfIRX7JeNk/bUiayvJT34xdX9o2J/kWJJiik
Ijs812JsY++gqCcC0UdK/RojA2uinCivmanlyCrZWFxZSwoDT6+oFQ7MyNulBdbqFZoPO0igQ3Ke
8iAmCuXFSCpSodKxZt+eKIj9rNiCAAiAAAiAwDMnMPOLX/7qhx++/565xvq0PTs76/fP+mdnXr+v
//zXP/nx3DMHhO4/AAHyQNIk1xHX69Amfe3YPmnlYRTfmRY/nuuGo9sYYU0TLnzCFxZ5myc1+SIL
e9yJmn+l8aM5sA8CIAACIAACn4vA+/fvX7169eLFC3pG4t27d+xRCR6oPfRJW3qMhJ6f/fDhQ7/f
D4VC92nnb357WvzZT8XZ2dmXL9n/ly+/ZY6wWdp+88238G7ehy3K3o7AdNU2TapNi79dfUGu2xhh
TZtodHqbR7LfpoaR7NgFARAAARAAgWdJAE+mP8vTjk6DAAiAAAiAAAiAwGMRgNx8LNKoBwRAAARA
AARAAASeJQHIzWd52tFpEAABEAABEAABEHgsApCbj0Ua9YAACIAACIAACIDAsyQAufksTzs6DQIg
AAIgAAIgAAKPRQBy87FIox4QAAEQAAEQAAEQeJYEsBDSR592j15qQ0s2SrI8ZSmdj7b8kQV7bqfj
9mgZSElRwpNX9/lIyygGAiAAAiAAAiAAAh9N4AvxbnodI1iaVLW7vLNeR2cxOim+6aFr5bJZI2e7
12WaXvzaFK+TWaIQsaa3gN7TGLTa/9Csm9rx8Q3uWMbcQuT18uvXr5euadK1XUIiCIAACIAACIAA
CDw8gS9EbgqCLzIFob6sFf33VnPpdr1+61U3d3bym59CbbJXa/PTcfl9ONeco5s9jh/dYM8psLc+
ruwftpvNuN+ya1qCJBAAARAAARAAARB4LAJfjNy8kGr19FatK1wcc1Sea+W4u5P8iKpedUiRenYu
U+GJ5lZG1//zf/Rf/xe6ruesDovrOVk60E3umvRqpqHrmllzeVKnmNV8d6SiZWsdLm4912T5Dctu
VAtZPVcb17ndIhkwNN20R+NFWTs/75eTzGpyv31e1FirB6YKlpXVFNZew+qyYpcabNRIJk/o14WF
QWP+8v8wM7k6q8WpFYuNnhRi7VFVZnxmRtH0nO33gtdumVlVoSRF1fRijdOYWAtJfKea1VRug/Ia
AdXCCCtWJwIIgAAIgAAIgAAIXEfgC3lnOg2dz0ZKFx1ZaZ5ki/ORvJBs9y1ZcI3ZBXLuJTd242HX
XM+3BOHg+NTLzqV8vckL/ne/+A//4T/4n4TF3VPH8GrG/BvmDtxr9jOyq81GKGO53dckd1BRLBmr
V7iG8+P9PEETFvf7jWiGN6l8fCpZ6utNqjPZPLWUy28c9SxtlppBctPSZVbc64yZ4haT5balSX7O
oApqj9NpKPKVfvUT4aDBQc7F/+EfK//Jnw/pJMv9ohydXWrFVtaioW7DrtSpbSttih2AooKxWKxe
p+7t9fvx7AR6/bhXnY2kKOfKxka46+6UKsJu89yQLXU2VRdi+23b786wudgBARAAARAAARB4SgSe
zjvTvxjvpn/6ykeHG2yvtBTXmFrkwa2ZfD+Z0RNqQlN4pGl3tWKbOxaF/XafXkL/D/79/4iltKqu
5zlWUNqyO17X4aJ0IyqLbi3HZdtKs29bdr+8wkqkuC/Td6eu7JaPjo4OC1GWwENqYY5rzdh3x8Ur
WnOQafzTN7V7eHx+fupX0XHIvyleanD0eG9Sv1wyNt6Yv/tnxcCHynpqaaKoNE5Pj4tZXdO1gIdH
/lPX9kHFDk/6tm2f99vlcvR3k+m5rlPjrV6MqonMlnly3G5rTC6HE2vJZDKOZ5E4HWxAAARAAARA
AARuJPClPZkejm41d3eW1oVWa9g3z+vy/coy81GOBV+WBVFhZXdRWG/Va9VqpyQsrmyo7k6+WquK
bEB5cTshCUKHqTJyU8ZlVlKMxleEUkmgx70HIR5PkCplRx4rdREWtag0VttF0pS9cDg8rKLV6Pq5
Rk1c0y8/80VjBN7sYUU0VWBuKRDUg0iy7PV4LclM1BeLNNivCR3Lr/oyPVnVF4VSS2itvnnt29hv
nsrhkGqY6sAmPkEABEAABEAABEDgRgJfmHeT1KCoZHyP4EjffJG20jxlXkwK/ZN2ganHSyosFDeY
u3MzlSIXZsbIZvSkUN9MrTKHphH3vaK0KwgV15dgruOwwxFP3risY4lr29sx+mitZoo8M4u7VfBN
XTI4fji1X34F45kvKu1Uc0xrLm4zr24/cPHyZG6w0qBJoTx4tHLS0FV6iZ4nyrWT4+bRYXl/N7nI
sqcNmrHqOTWrWCxWHZ8QN4MNCIAACIAACIAACEwn8MXIzRFpJWrmEVN4gyDHM1wOlZbUjFksFnLG
7HzEdklHhaO+TspkaUEkGkSXVG1QKBmVQ1I0Pjhc832WA1ObCT1XyOnLOy3KsJ2J+7pvkHnsM6oZ
xYM1iqqkL69A5LlVVYnmuMu1ko6oRnWkF2NGgoPxBnf+JD25X5OKjsaJ/tPyrVqtSg9QaUOX76B3
+UhUM01TV2YjkZo0hZ5rxefn9VqnG5YkRebmpRB9dHKpdDptNnqjNWIfBEAABEAABEAABKYR+GLk
Zpj3IJB9oWjxgM/h9CcxhqKN46MNcsG1Suvp9OomufaSMpNGoYS5x8rV87QgUo+tyR7d5gpOWEnQ
kLgoqUwn8pF0f4RcCKl284BcoK3S5uom83puHzSzKrPlhwm60xOkxNY+c5sKqYjZDTLyD8+rty5G
/ev8+fNh+pgpyY8eb/A3f2dKvwIbYxZ4nB8jJbIbrJv19VTKEZWLFALVPlwjqd6qrK+v00h5clsW
ptATZZ0sbKZTy8tvNytCbG3/uMBlt8TshS+QsEMEEAABEAABEAABEJhG4At5Mn1a88fjPQp8bDhw
7wWpPJZetnNVnY0XHznyvB43JYbuUmrEwL12Lzd4Sr9uqMOHMbH9fgWEajR1Yi0s0vPEz8Phhg4i
GQRAAARAAARA4BoCT+fJ9C/tUaFroHL1NElSjomqaw0MEz+vvrrcYDqe1K9hayfvXFNoYtLEWljk
x1Q+uUmIBQEQAAEQAAEQeIYEvpjB9Gd4btBlEAABEAABEAABEPgKCEBufgUnEV0AARAAARAAARAA
gadLAHLz6Z4btAwEQAAEQAAEQAAEvgICkJtfwUlEF0AABEAABEAABEDg6RKA3Hy65wYtAwEQAAEQ
AAEQAIGvgADk5ldwEtEFEAABEAABEAABEHi6BCA3n+65QctAAARAAARAAARA4CsgALn5FZxEdAEE
QAAEQAAEQAAEni6Br2qZ98fDTG/aYZV9thXQu51O1/NCkiyFPmIB+MfjhJpAAARAAARAAARAAN7N
u30HvK5j6urMrB9mZmYUo9jg0vNudu6X26tpkaWlpYTVuZ+dy6W9jkVdugiaxbrmdYyLKNpTNMNs
uI/e6cuNxTEIgAAIgAAIgMCXQQBy8y7nqefE55fWS3UqE0smY4v02cqbD6z5btOgkMxyyZ/69ZID
z2l3rE2tSn799ULU7o3F4gAEQAAEQAAEQAAEJhKA3JyIZXKk1+0wpSkIe82+bVm2c94/PtzWQkFu
z7VyeuAHVPWqM5BjFG9mVUUhv6Cq6cUal6e9TjGr+ZkVLVvr8Myea+oUjIJlZTXKP6MaVnfgRgwc
qxSp6W8rQZ2C4BYNXVVZZuZ31HP2uCnLblQLWT33l3+ZM8h0rhqI40Yxq+tabtw/Ksra+Xm/nGTG
k/vt86LmC05/G9trnp+fHx/u8bpb7rBlw7ZgBwRAAARAAARAAASuEMDczStIrosIpN/qUrSxpsXV
aFSNZrNcjHmuMbuQJ5W2sRsPu+Z6/u1S6eC4nwh3/XiyGovF6pVSvRLV+kJmLlJiFcWSFFfZeVPZ
Kbf7muQ1SiVSkqUSWWKhnk8ZUcXSZBrRzswv8SJCrxNIRpbD65n5Uiu2srahdht2pbRZKXXa/SIV
GDO1uL+e7ZU2S0IprJ3nJM8x0ztU0Z5RYEZuF8J8nqgky+TVbVGRAMbtCiMXCIAACIAACIDAcyUA
7+YdzrwoJ/a554/kVim/mXq7vDA3qxXY3E23ZnKFmMzoCTWhKdyqabuu7cfHDk/6tm2f99vlcvR3
tRwXjivMSWr3yyssdypXIzu+H3H38Pj8/NSP7zjMi+jaBV+ekh3HafgOSFZMVBqnp8fkqtR0LajW
f4wpMLWyWz46OjosRH+UMGKswI7d8Tynxt2j2wll4JplSTeESmorm9Vn5peZ1hRiiuw39oZSSAYB
EAABEAABEHjmBODdvNMXIKRb5+pWo2HbNdsqVZjuqqySBrNFr8sNVZYjF+PcFOP1eHwyEw1zcUbD
1ZrQsbhjMBnngk2MxlfInym4g8F3QQiHwyQk/fhWg1kYt8OL8/qEnpOdW+JK1z9mW15TcBiPJ6ID
XZhdI3epYBYtz7MoeeVAo2ruEio7O372le/aBWW0mrtYQV4QAAEQAAEQAIFnRQDezTucbreapefQ
w3JUy2SLlnNyuM0L+5rNF18rzdM+TXCk0D9pFxJSoP0qwye5vU7HDaqsuF2+5zoO+/T1KI/x5eSI
qOSxtBkUEfySgtCp5pjWXNxuU7X9duB7HWSnz1EjamafYlo76dU8CeWkEZdGMt68u7h9eNrv07/z
86KvlG8ugxwgAAIgAAIgAALPngDk5h2+Al6vkU+/nuUP6xi6Nr+8yQovqpIoyPEMe05dKC2pGbNY
LOSM2fmI7Q7j85GoZpqmrsxGIjUpyLyZ0HOFnL68Q+JP2M7Er3EXSlGNmRc2F+hBIS2aqvMjErMi
L9Sq1ar0nJI25lkNslx8iHLcF8gUtbiRueqe9NyqqkRz3EolHVGN6qjwlSWavSnSvwuL2AMBEAAB
EAABEACBmwhAbt5EaCQ9HN3aWGETIOmJnzx7pEdY2T04aWTY/MdQtHF8tJFcpFmd6+n06ib5HJMy
JVB8+3CNCrUq6+vrpZaQ3JaFkGo3D8gT2SptrtLjO6Q1D5pZlZnxw5igk1icKCXa5TW2R3V32cM6
FEj4SYnsBjuor6dSjqj40XwbbMZMCWHNnxAqCNlMdDRbsO959VaLiV8e6oNnz8P8cNxUkAcfIAAC
IAACIAACIHA9gZlf/PJXP/zw/ff0mhyvT9uzs7N+/6x/dub1+/rPf/2TH89dX/5ZpgbvFBq4FscY
MJB8BP3SG4cmlfG8Hs98a4+hb/yqf9Gv8zZuRzurMGdqbP/U1i/k7VgPcAACIAACIAACIPA1EHj/
/v2rV69evHhBayW+e/eOr5nINtQ3f0tz/6LR6IcPH/r9fih0L13wm9+eFn/2U5Feg/PyJfv/8uW3
pITEWdp+8823eFToI75Pl5TkmAXGdiwiOJgUfeeR6bsYn9SInu0P3G9sxe/1nZpkG3EgAAIgAAIg
AAIgMJEA5OZELF9ppCg1m002Mq/4w+NfaTfRLRAAARAAARAAgadEAHLzKZ2NT90W0pn+9M5PXRHs
gwAIgAAIgAAIgMCAAOTmgMQT+Ox2Ol3PC0myxN/fM2zRtPhhBuyAAAiAAAiAAAiAwJMlgCfTH+3U
9AqqP0lXqQ2e+B6v26tpkaWlpcT4e8xp6cwp8eOlcQQCIAACIAACIAACT5IA5OYjnRbPra0Gi2W2
ctXOxFpDMouWrzxrNC1+ohFEggAIgAAIgAAIgMCTIgC5+Uino1MtDGuqr1ru4MDrOqbO3J60fPvb
kVXaJ8d7rqlTMCy7US1kdf6adcFzaYV333E6o+pVp+fb7jrVrMYdqgrZNvz4iZF3seDZBUPXNbM2
7MGgJ/gEARAAARAAARAAgUkEMHdzEpUHjwyacX4AADo8SURBVPM6xXXm29zY23NXVyvCTs3ZYm/1
8TqZ+SW2zrsg9DojLs9p8YLXKLH15UslWkaeXg0kFwzXmF1ga8pv7MbDrrmef7tUOjjux73q/FKK
sqxsbIS77k4pX1H0vti5Gnkuh25v4VyRu1a+VBdcdctgLUAAARAAARAAARAAgRsIwLt5A6AHSe51
alwermUorDGTq8UGbV27wLVm7PCk7ziN8uCV59PiqYi/qOfKbvno6OiwEP1dzeSWkxk9oSY0/7lz
03Zdp8aqERajaiKzZZ4ct9uaPDnyLhbIYjixlkwm4yNveOcVYQMCIAACIAACIAACkwnAuzmZy4PG
era5zg3aVctybb6bLzg5Vex12UEyE2XqzeMJbONNiR9miMcTUZkpz47FLQiV5cjISDxNAFX1RYFe
mdlaffPaL7XfPNUnRUa9O1iQwyHVMNVhO7ADAiAAAiAAAiAAAjcRgHfzJkL3T+85pj9eLrTozeb5
lm+xYtluYLvi+opPCD4GVU6LH1WmA3dn87RPr6Ki0D9pFxKSJ8q1k+Pm0WF5f5de5E4hbdR6kyK/
v4sFT/CcmlUsFqvOpbYO2oxPEAABEAABEAABEBgnALk5zuMTHLm2xaZtCitHx6c8HJdX2PFOzg5H
NbYnbC7QwzxaNMXz0bE0JZ5nHtvI8QwXk6UlNWMWi4WcMTsfIR3rWvH5eb3W6YYlSZF5ESn0u0mR
P7qLBTLUyaXS6bTZCB5IGmsNDkAABEAABEAABEDgCgEMpl9B8sARXsNisysXtzNRKcRth+LGnlBa
FeqmE3La5bVIKi/UK6UYeSFb5PqkdZBEKTExftg0cbgXijaOj7aymZ1KaT3tO1GTckgQZV0Q1jfT
gYCNre0Xc3GhQU8jXY6k6m5vgR5uEiRBqAthvyvDZmAHBEAABEAABEAABKYQmPnFL3/1ww/ff+9R
6NP27Oys3z/rn515/b7+81//5MdzUwoi+sEIMPaCELqy3Oa0+IkV+5lJhoojdlik54nimO2JkWST
xfNHkW60MLEBiAQBEAABEAABEHhSBN6/f//q1asXL17Qaonv3r0L1kycmaFG0j5taQ5eNBr98OFD
v98Phe7lSfrNb0+LP/upODs7+/Il+//y5bekJ8RZ2n7zzbfwbn7+LwY7HZNaMS1+Ul6mMq8aYZFX
oidGks0JWf3IKxYmNgCRIAACIAACIAACIDCRAOZuTsSCSBAAARAAARAAARAAgYchALn5MBxhBQRA
AARAAARAAARAYCIByM2JWBAJAiAAAiAAAiAAAiDwMAQgNx+GI6yAAAiAAAiAAAiAAAhMJAC5OREL
IkEABEAABEAABEAABB6GAOTmw3CEFRAAARAAARAAARAAgYkEIDcnYkEkCIAACIAACIAACIDAwxCA
3HwYjjdb8To6X1/V6tBi6ix0LB6hWcGxH3v/rdcxhgu5zswoiqpnCw33xndOdq1cNmvkbPeBm3P/
DsECCIAACIAACIDAF00AcvPxTp+v4y6rue7DN2DUZKtVL+2svl6YM+3R6KuV9qqbOzv5TajNq2gQ
AwIgAAIgAAIgcB8CkJv3oXe3slff+jNavutUs5rK/JKKqulG1eH+SM+1cr5XdGZG1YeRpk7BsOxG
tZDVc7VLEtavKLbXpJdTnR4frfFq1pcNh+Vzi4auqgp3gCqanrM7VJFn5zIVns3cypDlmvsvJmWj
HJ5dMHRdM2suz44NCIAACIAACIAACNxAAHLzBkCPk+x1rPmltzuV+srGxoYSrpTyb21X8FxjdiG1
WUpu7O7vri3WS2+X5qrM/eg1ShTyqeXXb1d3StZkt2WYv3wyJEVzxwe8FxWHxvG9npkv1QVlbWMt
GRMqpc3liEHRXafu97RVYZZ7fzU5G+XpWvlSqVLtXpK4j8MJtYAACIAACIAACHx5BPDO9Cdxzlyn
xtuxGFUTcVkytrZ6ouTWsnkWm8zoCUns2uv5liCYtpvQBN9/ubJbzkQlTwhd3wdRUsjByUxRMVFp
nJ52e91ez3OlXqVOJj1PELViu1qJkINzv93XZWY+MSEbqyecWEuGu0rYbwKLQQABEAABEAABEACB
awhAbl4D55MkXZZpYVaLrOqLQqkltFbfvPZr3W+eRr0u368sMx04IcTjiSiXhhPSRqN6ru0fkkey
52TnlriKvcjhN2msYVOziaphqhdFsQcCIAACIAACIAACNxDAYPoNgB4w2R9+rtodbtNzqiW2w0el
PVGunRw3jw7L+7vJRRadNmrfD5yYzdM+zcKk0D9pFxISS+bBNzg4mvzp9TpmYpl8mIIQU2SxU80x
rbm43SaT/XZypNCotenZPKdmFYvFquNL4ZHy2AUBEAABEAABEACBSQQgNydR+RRxoqTzZ3Yqq0v0
hI6mzKa4y3LNUMmt6Frx+Xm91umGJUmRefVS6EfxDFeepSU1YxaLhZwxOx+hKZ03Bl84VtIReh5o
di6yzqdl7h5aiiiIfEKn0KrVqvQMknbhNRXDUV/mZrK0INI/+f/+TVbL1Wy0flMulU6nzcaNKyvd
2ExkAAEQAAEQAAEQeBYEIDcf7TSL8dzJwfYK1UeP41SYv3Fxu9zMcW+lKOuCUN9Mp5aX325WhNja
/nEhLoaijeOjDfJ2tkrr6fTqJvklk/LIRM2x4e+RfoRH9hcXYytru0fHp4bKoqVEdoPJyvp6KuWI
Cs/omwklzD12WM/Tgkjf/L1/OCUbmWC5wiPNYMcIIAACIAACIAACIDCFwMwvfvmrH374/nuPQp+2
Z2dn/f5Z/+zM6/f1n//6Jz+em1IQ0R9LwPN69HAO+RlDvqfxwg47CZ53NYHF+s/5XC5xUfZOe769
ScZ4ysAHOj3bnWpDZhAAARAAARAAgc9A4P37969evXrx4gWNdr57946vgcg21BR/S/P0otHohw8f
+v1+KHQvT9Jvfnta/NlPxdnZ2Zcv2f+XL7+lEVVxlrbffPMtHhV69NN/VU4OmsDOyyQNODl2UOoj
PifWwu2MpYwdfEQ1KAICIAACIAACIAACgoDBdHwLQAAEQAAEQAAEQAAEPiEByM1PCBemQQAEQAAE
QAAEQOApEPjmm2+uNmNi5NVs94+B3Lw/Q1gAARAAARAAARAAgSdNYG5uwtM4EyM/RTcgNz8FVdgE
ARAAARAAARAAgSdE4I/+6I9+7/d+b7RBdPjHf/zHozGfbh+PCn06trAMAiAAAiAAAiAAAk+CAD2i
LknSv/7X//qv/uqvqEF/+Id/SFrz93//9+mx9EdoH+TmI0BGFSAAAiAAAiAAAiDwmQmQ4vyDP/gD
WheJ2jFcCOlx2oTB9MfhjFpAAARAAARAAARA4JkSgNx8pice3QYBEAABEAABEACBxyGAwfTH4fxF
1OJ1nI4niJIsh6a9H/OL6AcaCQIgAAIgAAIg8JQIwLv52c6G17HYm6SGQbPoTZWD0CuofoJS6w6i
vY4RZDZIFfrBMYN81jDKT7jIHJRRVN1yugP7kz69TmaJQuSyqUl5EQcCIAACIAACIAACtyQAuXlL
UJ8+24hD0XNrq3W/xlau2hnWPVCL+YLtskjPya0H+Qb6c5hXGGQOYlr1Umpp3nKvZhwWESW+O+k9
msM82AEBEAABEHiuBP7Vb63iP+n5vf/hb6/5OfkYQKPGP6b8g5b5XI25oPq987//b3bn/3nQXn1O
Y5Cbn42+KGvn5/1ykjUgud8+L2pDwdmpFobNqq9a7uBgmCH/xqIL3q2alUHS1U8/836zf35+fto+
WOQ5PP/20OsUs1rgPtWytU5w9xgz4rlWTg9co6pedfw8nl0wdF0za+5YZhyAAAiAAAh8wQT+1sr8
xcy/PfZP+e9/e6lD3v/9f6X+F8f9G0H44f9UfvI/zgYZvm8U/2fr/2/vbKDaPM58P5gv8WFHbvNB
GloL0pMI73IRcc5aTk6M2E324m1PI7fJInKbRdw2WVHfxuJ2bxHbbo2zH4ju7VqkJ7XWadfSSW4Q
yU2Ms2lMT5winKbQ3WBESYPWuQH5q5bjrFFiMC/iQ/eZeSUhhMDYsRww/zF+Ne/MM8/M/CSkP8/M
+6r3VJzx3NMpdzN3btgX7zNqNus8WvTpZRYezFxQ2+3Wfb/0jU5daqRLQRRHdcrzzFD5G3GBo0v1
s4zrsXdz+T05ktchYpb1e/f6amvbWHOHp9GkiUpNecANLrc2YHVeevSinSQF+oUpV5uS17i+SLQs
qyzramtr3tbW3Do4blDFOJN85qyCFtLB9Xsq8ny2upbtpc4Dw+N6FfO7WpxdzKdrNMeYIwsCIAAC
ILCyCZCILC7sfug2FpwWE5lQ3JIXNyNFDmmGVP6pkpHv+K6G5W+QDXwH/dbgRcOmOPOY09FB+5v8
tO2Vt62PF6tiaqLZWefRok8vs9hgCNRdhX0Pb5BGR3xHj1e98k7DK+8ceuobFYVz7qAeN/ZLI6IG
c6kqclhZemqcn5V7Crm57J67gLeDdB5jO00mk89b29bCah09JpsuMtCSpr0GV21DbXk5lVQ37WGu
OqesJSMWsY81RVk10fPqVoNa4WuXVWp137hDo5D0xqwqJ6uydujt6qihr8MmxlBpMupVCr+7roV6
sLl9eqMqT7+zMs+vyYuTv9GmyIAACIAACKxIAmV3Fmk33R4/9NHjrh8eqjoapPJKJR3k793ODAy8
72UbNIWZ7j37qyYZe6XDMPBL/+RnHE/9uWreV3P7jrzdxrI7d+eV7xpq7z5n3hL5JptEzr0Hnzf1
rGtv+jLvjdLIgPnbb+mefFRfmOZ++nnz4Qv91B19/N1X2Fj3ZdHXmLu5tT03T3P2eM1R0soZrbsf
NGy6lRsFT3U88/q2QxcoW1l8o6n6AZ36Jipsf7pj+xsXqbCk4DbXkw+q1wstlGgw3Mm8VJZ/h6b4
DirWbmGGx47b/vvBbU+8MPxqjYqKEjifnofoQd8zCScSpbqOPMUmf/erlqeHnLTKmJ66c+sdjXUP
hOHEGi3vPBbTl9vzI7ltdWJM7naXq90tsi12j7wIzs/6VTqDRSzB06+P2aBTLqw1ybqkrFJeRqd8
p81AL1BJXlCvrFBzxajQVlTTA/PRq3g2SZJfnLSVFxUUFGyJCaIqdGaby+WyVKhmrZEDARAAARBY
6QRyWVfPb1wvvhr+cbR38PXxM/ZHD1YdZQe+Vz7YdI++MCokp/yHL9i9Y4xlau7fuDOdsYLbzMa7
G6v/MC9qMgvkTPtPLrC7inSbyvenszrnbyIfaImdq+5c1zUw5Br4WHbgffFISyBTk0+xwykWzLTs
uG/wqQcHdxdJbw4V/N0R2cY/fLHl0JD7ljv6mu7ZWxCs2vVzL5fHZ2yVL287NHFg9/2DTZt0ox+a
D9FH2xl75cvbe7P7nnp45Gf3m9npokdfEB94iQczO4k5uZjV84wNpu8XMnahh9NI6Hw+ooUmEqU6
pzPp5Ou3/v2Q+uF7hp+q6NuxIXDkON/PsNISopvL7BkLeGxhcddfV1UVGVyby23V6CJnijy9ZQ9r
qytrMmtUijk6MWISfbQ4XAalSbO+nERpuc4+4jGFq9p8fhdTkc70eHhJfLRSIcyq+0bsGnFXJMnv
9fFLiSRPR7vHLyk1FXpN/DqLaIIDCIAACIDAyiRwdqTjCI/58TQ5pV4/ocsZrJ1kB56q0RdmUpk6
x1919LioZiyHUfyCkrJ4szbH49lUrN3EA37zk+TtpSDKgcc2M5am/+6NNX8/1HN2SndLGpUndK5Q
b92vHKp5+ojR/mVF8H3rK9OVD90ropg5urpHAiePeYePB0YnVNT90HlSrvzjapSVfOV+x+MbKave
4a/9qyHv2QnVWG/dJGuNDv7H99Lnn+R9lTrdu2OzKicYYOu1D97IbB96R6aUZxMPZv505pcocrLl
QnlG853r5iFacCIRqnN6GZug07z16/JuLlQV3uG4f07lSjmB3PzUninJ116hb5T3VLbVFPk9Bzps
er/b1cVHVN09bFPzX+VAh7mAFrubre5GnVb+i5CikwqNORQyc0PJG/kzkZ/FpoixxJS6js6mW8sb
WH+tzqL2WEwlrK2fNeiNzKT21jbz6GiTqUIRcy27uoJsaIneWapje8w6hd9T29Cyt29crWFea1VN
FyvbOwi5GUsbeRAAARBY2QRGWdmDDziMcySj5B2ktWl1PtealCQeMpyfRKgvGBPwm2My1XNwiAps
P3zWncsCI3xd235wUPd4sbBK6HydfkceV6UjTDPwaydL7XtIjGr0Xcujh5snWVnB2gr1OvEZN6th
ZO1LPhX5t5WwoUBgggQxDV4TGbzoLrwXoPaHP7fL5zmpZcoMaYTruSXMVG4Tf5TGIhpdRHYTOF8v
mkQRLTqReO80I/Wm1ruOV/2wo0bU7dymse7YKseE5hsv25LZp2rZDvG6HZgkdfVzqSenLn5/TanH
1UKnJU0mLf/DjZKywryXOWtZl60n4MoTRXEvMvk0rpAMY43zdJbOPR3ldV39zeXWijPuvgOm0u1t
zoZa4bDpQJ9Fp2ThBXTxl6JS2zPc3WgxNbc562qcwqpSyF/GVIx1sbzob7aowwEEQAAEQGDFE5iv
JidJRAYDVC6ElEIcE08zYwE5IS4SqrzvCwZ1GqlVRUa+5vBg3SseumAob2Hnyi2b69nBxn2v6gdG
2H33aHJ5n9LwMdKa3c8+oRXqzXezveX5RGPJyFTLxWN88P4Rpr4lxowXss5/eUInS8BIjTSw5Jny
JrGTPeX4O9LTa7XqHMadJHDOGK2zE8Nwq6VOhLeR062GJ3cY2Fjg7IfeI29tcXo0WzXG4vj9nRHj
ZfoYi2yZDvF6HZa4EZIhbnYGV8jgmlOm1JhCIZNcpAuFbHMq+V89jlDIEVdIpwq1ba6xzuyW46HC
Vu8KjTsCfBenQqEM32hzriuFSmt1eRodwoabhQWtwREyJOhv/ghQAgIgAAIgsJIIdJ065hmYYJEg
nOLm29UFt5exE1sa2ge/fzcbGrT+kHRVBn1wyCkQydBjV8+Ad1u24oOJvOLbw58WolZcJJTat0Mv
S0ZeVjxR98RQe+85852LON9gemxt8zNDtNx3yKgRnsIHT++76uJ1vt7fGJ3B8HK+qIkdjF+UKAo2
VrMT5bte6PvefaqMoOfgLx1ss8O4cScVPrq/s2mrJj87cGrI/vQxw/+u0Sw609gBUJ5Aeb1TFNT0
Dx23Ok/zQdIFUlRx5wLOhVyOIlIKd0uZiDwpaeDViuen7N/arFp/Y14+X7hXKsPxZuFpZRwgN1fG
85SEUc7qzEWck8qMfeNYxBJVIAACIAACK5gARfuODpUe5QvfcirZlubZUdy++/j6XUNF3zhBhfV3
ZbCjadEPBXU4XJejry8saSCbl+k2SX2uHbPKko31vHKBFWtiShgr3LQ3fajW4TH9+IFFnKv+ZHP1
M4edxUW0y1Mej6J4c2vxiSrbYb4ul569M5/1yxXiGBkMP6HFPQXdQij3DvvPPlaafl1a+6JsuP97
6+hmQ7Znp1QNh8sbfi4XlhR8wczl4GIzlS3DRwGqSAaVnlq/rchRXa7KFYPMuGMB53GIvrrEiYQn
dfP6vIHeolr+FFCqf+ieis+vPLmZ8qMf/3MwODFBlytL43S8ePHi+PjF8YsXpfFx49/+9KvFc8PN
8lxxBAEQAAEQAAEQWCUEgh8HxiYU62+KCs1E856Q6G7nuTmL2iRqtyTnsw2l0XMSy1bmLnaTy1lr
kZNG6SL3TEXuHIkmCkmSzh3wZQ4mrqPoaWLnbA6iy52I8MlY7rrLInz69Ol169atWbOGvrQlNTVV
/uoWOqWhUp6O9EUwMyKNj48rlXLgNTqPy8u8PDDi+JtvKrKysrKz+f/s7EwessqiY0ZGJqKbl0cT
1iAAAiAAAiCwughkrFMusmszzCJezy0V0ZKczzpT5C6uemctozlFboJtjgkL2WUOJtpFXCax87mS
93InsoDPuJ6X7ylXuEggAAIgAAIgAAIgAAIgkCQCkJtJAgu3IAACIAACIAACIAACnADkJl4HIAAC
IAACIAACIAACSSQAuZlEuHANAiAAAiAAAiAAAiAAuYnXAAiAAAiAAAiAAAiAQBIJQG4mES5cgwAI
gAAIgAAIgAAIQG7iNQACIAACIAACIAACIJBEApCbSYQL1yAAAiAAAiAAAiAAApCbeA2AAAiAAAiA
AAiAAAgkkQDkZhLhwjUIgAAIgAAIgAAIgECyvsSyt7cXcEEABEAABEAABEAABK49gU2bNl37Thfp
MVlyc7nNcxEEqAIBEAABEAABEAABEEgeASymJ48tPIMACIAACIAACIAACOBLLPEaAAEQAAEQAAEQ
AAEQSCYBRDeTSRe+QQAEQAAEQAAEQGDVE4DcXPUvAQAAARAAARAAARAAgWQSgNxMJl34BgEQAAEQ
AAEQAIFVTwByc9W/BAAABEAABEAABEAABJJJAHIzmXThGwRAAARAAARAAARWPQHIzVX/EgAAEAAB
EAABEAABEEgmAcjNZNKFbxAAARAAARAAARBY9QSS9a1Cqx7sFQOQvB6vxBQqtVqpuGInaAgCIAAC
IAACIAACy4UAopvimZC85hSejC4vP5d8Vo04T7H4RP0VHiJuZV8pKRqD2dbjkxbzJnkNpZSKHKQ5
F0+zznVuvzCVvEYxiUs2XdwxakEABEAABEAABEDgKhKA3AzDDAs2rvGkdktBQz9lSg4NN6rC9Vf4
ILuNNO5va6nbUqB1ByIF8x8VKtuBA62thypUl45tRpx3lRscskshUS+lU+d3mqwSydPhcidL/MrO
F0H5SWaVVOeLDkySls/zt+hAUQkCILD6CJwdcDmOhN92g2Mr781qJY75enmVQW6Gn0lZ3CmUzNtu
2d7CC/d2u8OaT/K5rCJuSLFDnbHdQ79rUofVbDQare1euX2Pw2I0GqxycDTskj/Ibsv29oVCoeHO
vaKm3+enX1Kfw2zU6eQgqsZgtLq94ldYCvh6ejweT4BUh+SzUR9Gs8vd0263GK0dcb/bs4K0q6ax
wx/uLNz7Qv7DPu0ul8XAezfa3YGAl04or9FZPHxsIiWYNZVLbjtN3GDr8MlWix89lqpydxjR4pZX
UCuc+66gYaImUo/L5vJEBDxjV9V5og4TlkleTVZWlt2TsBKFIAACIJA0AmMu01MpX57zo3l6IK47
6YP3q/6vxzfKWPBdzVd/lhU2mOhxvODqPRVnHDkdc339Kc2+dyOnzPfa89SRYV+886jBkjNzxqwx
Pe/2nlus7ZwxL2aIumQQwN7NOVSd24ucomBn66BJq+RZyWfOKiD9WVm/pyLPZ6tr2V7qPDA8rlYF
nA1O5swzhKwqyWOraW4jhWq2z3EXOckT2zBpO2YJYzxsSopOCthanP1l1Tvrdf4ed5uzoc3pHRx3
qEnINnNXaqNZq5R6nE7KO51C/5ao7ZaIx3mPLdssxjOWvGj5wv7n+CTnteXO2nCz/q7mUmtFyKZb
aNZ6FfO7WpxdzKdrNEf7WjhD8r0saVtQuXPFrOReeBRLqvFZ66zmCoMmjPDqOl/SCMhIoXJ0djKV
eqn2sAMBEACBq0WARGRxYfdDt7HgtHA5obhl9iNF7kSRQ5ohlb/tZuQ7vqth+Rvkct9BvzV40bBJ
PktwFJ+mvJy0ZsFPPqz8yn2ux4sT2F1uEY35rsK+hzdII/72fYPlf9V64Klv6AtzEruZO+bENihN
GgFENxOiLTPqwx/5vg6b0HqVJqNepzdohLnN7VPrzWU830yLxbTySqKQsSa9Jvo7xc+jqa2q0WIx
ptxazrUmK9OoFUyh6RkZGaaYqMFoCHsNr6LGCig5X72ntbu7u9OujTqMzbR2d9bzc2dphUEMVVRe
yv+ezjOh8eE9pH9p00B953hovHuPmJAIby40azLO0++srKysyIsdpugx4SGPdXV0OEToNCXF4OKB
YUo8RKoJ747VGK0ueTur5Gs3aHQGniikayYyHeEKf7stHF3WGO1yFDi+N8nfYTfznavUjVkOFSfu
hRr6e1xGOa6s0Zlt7QEaj81Y1c/6a6hng85gi9te62236TSLDcbbbtWZXfLc+MACHrPO0M69cM9m
m8Nu1vGRaQwiNE4WC44t4G3v8fm5E7KxEpseimzTS4TC3+QOCQRAAASSR6DsziLtplLtlrvFz72a
wpt4X6PHXT+wy4FPww+GSG6KAWQGBt7vOTXC2IR7z/6qSdb/Sofh23ad6QVfMMEA5bdH32vPktas
fqjc9Xhp2Ch4qn3PT2Xnmm+/5B2ZonLvwed1Da/OvqOO9Jm/bm8fGkvglz5Q8+/QFBdrtz5gfa6i
mrHGQzTCCffT+zXbw5FaY/OrkSFFx0yextzNP7W++HbPwZeMJrux+QjeYBPivYqFiG4mhNlVqrWP
eExK+syX5M/+tvIiISmj5gqNZSframE2h0uSXFRcfcCQF62Nz7Q1N8tF1YcG7RqSagGPZX3prDoU
lVScMFVU6LWkUBdKedrGvj3NpXWsX6hZ2exS/vPylLT4nqfm4Va1hsSjQpmnYqxLbr3grJmCBJpO
Nlri0Vnn3nugr8/cY9tSVarQUASXpiLlWWx9GpWSODSWbi8I5IWsOoVSY7I1MoVCqfCbS7d3sTKT
nUwDdu2ttcqmvuERlcLfbikqWh84E4qJ4/JhBGzaW+v6Kw/0DaqZ320rN3dUeNQUKU7QC4naW7dU
NR3oHnYoAz6PzdzuM+k1FaadjrYWjcls1kiSMlZLexyG0pq2PZ3DYmdF4sGo1Kqu7VUOY4VZ/L3h
cRhbunRm7kXy9zhb2pw79x7o7mv02Mq3l3o7Rzw6/sJKMDaaid/eYjebTIKt3+NsoAh62c69Rq10
9eK4wjcOIAACIDCXQC7r6vmNK2cwXDo2pSy+u2JTqv3Rg7WTGQe+V67OnfC8+HbbUbl+yn/4gj19
zLQ1U3P/xp1HPC35t5mNG6Rgdl7GXLfiTL2e+Y5QXHOk/rEK64N3RCzO2Ctfrs25se+pL6lyRtr/
7nDRoy+cefUR1Z3rup4ZcvSeM2/ietfjeLMlsNacv1DMMuLs7DkPLQzmZDI2xYKZlh0aTeFn2Mix
xl2DBWNHQk9upfLImHkT//DFhjd/zZRr9279jJSRHfGCx2QRgNycQ7a6dbAxr72gvIH11+qsao9F
F9l+Wd03YteIdWHJ7/UpVNRMZ9rPWmr6m2tquY9KcwUvTJhKmjrdZi1VKSOigeJhXGuWNA32WNTM
a8iKE7Nz3Cz+VxcFRRUaU2t1XZW8D0A0vaT/OT7nnMhdk1SiNH/WFMltpwCoUlOhj6w7yw0SH/2s
ZP+gw6imWrWltdZZ5fXb1SrSrJaAz+v1+WiLqoqCquJyfYVSpdOpyNLrMpPsbR3soO0Mkrejtp/2
0RpUikCA5WmNTczp8gYspJajiWzq+lnrsEPPr69Sqx0hWa4l7IX+gKCGeUplXp5apVI7PAbuR62l
vjwVOq2GD5XEoDj63Y7G8hpv6+CIQc37W2gwOrW+tZJVmdtNbqNC8pjr+qtb2/lYKAkCNkFAax90
O4soeqmrUCUcG2+hpH+RRG33dHvEKydShEcQAAEQSBqBsyMdRy6GvU9OqddP6HIGayfZgadq9IUk
40jM+auOHg8b5ITfrJTFm7U5Hs+mYu2mqI6cO8Jc1uY83MbL1ppmtSa9o/aS8707NqtyggG2Xvvg
jcz2IQU4dery1vyhqj1vmZ7TK0YHzG+w6uqtqkQqlpFE7vW033xcGj5nPfRhP1vreoiPQVf3SODk
Me/w8cDohIreUofO03s6f4ONjJmPZZSV/Mk9nrq7eR4p+QQgN8OMZX1BUkSls3TWu8qb+/sbyi3a
YWuFqYQ5+2mpWsf2mHUKv6e2oWVv37hawxTqiibGGoSDknoTj1nOS7JbtYp2b86pVsin/R0d7ar2
dqv4PZzX+FIFsnNhpTDYuu3OLaTS5PQJ/asXnrXXWlVDgce9g0uSm1w+RYak4ltXAzRoyWvRFjX3
M9q5WqFVi1nMwvF1WIqqWvZ2k8ITheJQa9LbZTdKZVmZWiIvUb9Uzm0qeYg2Ni3QCz1rrfVlVeVF
NcJ4595Oq0kXbhkDlNE2gJrycrJp6pa1JjdfcDAKvWU/K61p9xm0PdYuVmnXq7i9SHEj5deE6RYj
EGnHH5XK2NaxNciDAAiAwFUlMMrKHnzAYZwjGSUvBTsz1Plca1KSEi2U82gipaA48lzClNH6WL79
maGC7S8MH/hzlWwiFGTtD38efnvPSS1TZkgjE2x9jn7HF1jDifaTY9qet7pYhn3b7Qmd8sJT591v
fhxgmebqTRXb7s3LJR35ruXRw82TrKxgbYV6nXhfTyx1lDkIai7I9apXJH4Orno3y99hnhiiLAJ1
1vamDn4vpOZyfcUZT89wd6PF1NzmrKtxCqtKEeqibJ6htbpBBBUtJm3COYbdzqtT6S31Jc7m/q66
qq7KatpwQuvgc9RS7ElsPtbTHOdKreNAfcH2ZtnPUv0L1/KsFbKCk50qtQvOWsWX3GODi7FDWjSv
UItqydfT3F/SPeKhgCIln9LdYg23C3gcBdua6w8Nh6/TomIRjOx0iwXosJX8IM2ecZs2v+SSBWq4
esFelAar22CVAn6/1+3aUlWu0Y2L4GPcM8DYzv2HtN5tVVvMqkGbQYx9wcFQgFm/t6SmSm8s62+j
GxHEjiTmiZV8jFVo8iRfx0IEZieFHAiAAAhcYwLz1eQkichggMqFNFSIY+JBZSwsJyiO+JWthgc3
6u98Neuvhgq+/tKZ577GP2rGuELt/JcndOvjXSqK792bfqLqiWfLJoNl22gdP94gfM4l8h/b4iTy
8DHSmt3PPqEVbn0321ueX6A5iq8hAVwqJGAr1Da6U1Eo5JBVBVNZPOI85NHl0eXCWqvLMz4+PkL/
x8dDIZdOJWQaSSWPh7cv25/4NpnxbmOeWIXa6gnJ/lwOh9w51ygKWgrmicf2YvMxTcPZiPNwFJAx
ld4a6+fS/pnCIDqTZ60yCAYugzy3BWYdbuIKg5o/rPiSQEyBfzbf7/F4AwG/p8Our2qThS6JMF1p
DSvZa9QofCJREJOGsZOx8vVmt8cXCNAKvNtiMHsiUlN2TjYk2MtNNtnETbeYcnhFV4l68bp0ZofX
J9Fm1TwVf8eLXjrf1e72+v0+qqNSPyvTaisM1sHWnS1VRUYXf6IXHYzSYN/D+tu6WIk1fO2XGAKJ
844er4/8euymUgp8GrW8U/oDYz4BuUEssdi8XIsjCIAACCSJQNepY56BAU9vn/zjPfmxouB22u60
paHde/aUt/t143f4pUL8HVKk2Deorp4BsvENvB+tjVjxR6U4Uai/PN5UyAKnb/06XaPJFHdu5G/v
j+53D7wfGDnjG3jLYtrvoYvNebrJ8N08NhmkJTvrI4tew75AVNXT+27g7CnPay/pnUFaQ4+m2DHH
5qMGyCSJQMqPfvzPweDEBN1cWhqn48WLF8fHL45fvCiNjxv/9qdfLZ73R0eSBgK3IAACIAACIAAC
IAACK5PAywMjjr/5poLuHp2dzf9nZ2fSxj5FFh0zMjIXjn5f6Wx7e3uvtCnagQAIgAAIgAAIgAAI
fAoENm1a+Napn3g4V19uJnW4n3i+cAACIAACIAACIAACIHBNCWDv5jXFjc5AAARAAARAAARAYLUR
gNxcbc845gsCIAACIAACIAAC15QA5OY1xY3OQAAEQAAEQAAEQGC1EYDcXG3POOYLAiAAAiAAAiAA
AteUAOTmNcWNzkAABEAABEAABEBgtRGA3FxtzzjmCwIgAAIgAAIgAALXlADk5jXFjc5AAARAAARA
AARAYLURgNxcbc845gsCIAACIAACIAAC15QA5OY1xY3OQAAEQAAEQAAEQGC1Ebj63yq02ghiviAA
AkkisHv37iR5vp7c7tq163qaDuYCAiBwXRKA3Lwun1ZMCgRWPAHSmn/913+94qeR5AmEQiECBcWZ
ZMxwDwIg8EkJQG5+UoJoDwIgkCQCoVCSHF8/boHo+nkuMRMQuK4JQG5e108vJgcCK5kAhe5W8vAv
b+wZ5xpTRv6TLXHGKSy0/rPBmxpXFaLLAwprEACB5UQAcnM5PRsYCwiAQAyBVaWluNYMxEz+UtkU
9p+hG4nQEvXppdyhHgRAAASSSQByM5l04RsEQOATEVhNWupy58rtITc/0csLjUEABK4ZAcjNa4Ya
HYEACFweAUTuFudFfBDdXBwRakEABJYJAdx3c5k8ERgGCIBAPAEeu7vcNPH//tcj+zbv6hy/3IaX
aT8+/Ivsh/f9xXP/cZntFjSPnzxjU4Vfn18YW0K+KMAZW4I8CIAACCxPAohuLs/nBaMCARC4otBd
aMo/yQZOB7msSybCUJB7D7E1yetn+kZtKDUrbei5lOnxhFOhrmdmEtagEARAAASWFwHIzeX1fGA0
IAACMQSuQDGGFNQ+Jy7sN/Hb51+rf+38m5Os+Ias73zr/oc0N0une/6y/nf/5ZH7v/NnG6L5HSVn
du723qDJ2+Dz1x+f/trG255sqNiQwaT3en7wj7/7yUdy8/KHNLfKYcVj773z9O4j9e9O37fxNkdD
xS0ZMWO/GtmZ9SWTRZ9NH2xZQHHSNKE3rwZo+AABEEgyASymJxkw3IMACFwpAbE3kWKcl/cj9xbb
aqTvF/ccPP8my7KW3cA+Gjc29YyQz7ELL02y334wwS2j+bEL/+ej6Z90na5nWV9LZy+9e/ofXjse
+uDfy7/PteZ/25glmr925IMpakVp4N1zz41xyzffPf2D14/Hdnq5+YUghbLzg5on6TjfQO5ifjlK
QAAEQGC5EVjR0c0Jz2uvBz6/WVd803LDivGAAAh8cgLj44kXkRfzPDk5RdUzM9Q2GhoNfb70rfqz
Ezd87vPs96ff6h+YCrz3n+NfnOBxwempSbKUonmR+YM//GLnd/5I8na+1Hxm7MPR3x4aHGDs23+h
+5vyz534VWe7N/UGaWxcWLI7v/iGhSyPvNR8auzM6JUMODKZ3BP72O8jJ+Jx8i5b5Dx9qvCxzJ7H
007+a6SEsc+x8Vv/fvYUORAAARBYxgQ+Fbk55jL9rOrULJWdf1Jk2fFA3mWvQ015nhmquX9DCHJz
liVyIHD9EJiZiSrGJU8q3IQ2NYaiy8wZM6O/en6g/mR/1Es61QpLsf1xTp5svvj5m3nzVL74QwYZ
WfTeNPkH+UoqzL9H9z/u4W4kCpAy9mChbMnzsitel4QUyrhB2tqW2f2X6UPPRt3LU4ieIgMCIAAC
y5bApyI3GRtl7K7Cvoc3sOCEr3dw+yuDnpzb3I9vvFxMihxWlp56ua1gDwIgsCIIkIC77HHSyji1
ucjFX7Txewf/vf7kzGNf3fzknynb/ucvzB+L2smwb245OS2fhNtMTvPCSPvxj/hlQSc+HA0VKj56
580fHBrTf2XzFvm9c67lbJuw76v8QN8lFOsx2d3F9oU8CIAACHwSAsmUm4HBc+1Da41f4jv356Wy
wiJN8e1UrNlUtP/Qz2zht/sJ99PPmw9f6BefBNX3FTbWfVklRz2DpzqeeX3boQvUpLL4RlP1Azp1
dqxX78EXTI6PLT+qqijMiS1HHgRAYIUSoAuvL3vkcpOPTz/y/fabGReRH1zM+dYm7uajj86//fp/
kNZkLJWFZjI/w99ADh4++l8/e9Ld5ucWIQp4Cj1HmZh8/j03scO//4d9v8x8/7NH3zh3kDGdIis0
lcDySgbMO750Sgl+lNn9WNqpV2NNk9ddbC/IgwAIgMAnJ5AsuXnh31xjhxvZDT9KWWCMXf8x4D7i
p+im943B2kl2YNsdwnCKBTMtOzSaws+wkWONuwYLxo6EntzK2Blb5ct1kxkHdt+vzhhx7+s1H/J7
1IWiCZ+CZ5+99JXgnu8+CK25AG8Ug8DKI3Ali8Uz4QBgt1+KTHh892bVVzrfe+GN915gax6+hb14
Vhr4/XhhofrFu99/+O3Jb7X9/ht3r9349oVQGu355I1EhhbTw/mM/Hu7q9/Y4jy/641zVPSt7Xd9
JT9dGkpgeSUD5m4ukUhrZh3+0zUjtIN0TkpSd3P6wAkIgAAIXA0CSZGb55/bFjwxnLrlNWV5YXrC
UebSJZ2n7SMiojDKIxCNew5pfqRXZeTo6h4JnDzmHT4eGJ1QKRkbOs8/NLy9dZOs9akafWEmnal/
fK+Jux3jB3bOve+X5a8EW5uqDNjEKYjgAALXB4ErWSxO2/BP9g3/NG/+T9uLfnRxRpHN11rkWlor
137zq+89IrH0dAXtyfmm3GbDSTvPUNeZ+fdE8/lb/vjklqB0cYZlK8gFry2YrY21lL1cxeOakd9m
vf6nKZM8KhuXroRPnAucggAIgMA1IZAMuTnBJL7knXLD2sRak+pGWdlDD7iMckSTOYZez3pi0NV7
xlI8Ynn0cPMkKytYW6FeJ6ITYoR8PT1Dk8+15pyUy7pe6S2novvugdacQwYnILDyCVxVOZWemcVl
YhyVzCz+rjK/PM5MnHIPSzRN1PxKyuhSdFpDT6g1yd3Shn0l/aINCIAACFxdAsmQm5mf+eavPnp9
33jHff6jz3z2m/clFp3iOznkyShuvrGEMf8HF6XhY6Q1u599Qrue1/hutrc8L0zG6N4mQf8IU98i
t4g5Fn/h0F0Xtjl/bS7Mtj182RcbxThCFgRAYHkRWOV7E+kidLoUfZGnZJXzWYQMqkAABJYbgWTI
TT7HGx54PHuj5vyrp0knJpSbXaeOe710d5EpacTv2vMO3aHEpt3APuCbkzy976qL1/l6f2N0Bhmt
pzOmKNhYzU6U73qh73v3qTKCnoO/dLDNjsc38CipdmPFw3cMsv1FzsOBsWmHsZg3QAIBEFj5BFZ5
9G5xrUlP7yrns/Jf4JgBCKwiAsmSm4Qw/bY/umWhv8wpeHl0sOjooEy6rCCv+7tf0t6Sxm7Z3Fp8
osp2uJa3z96Zz0iG8pR7h/1nHytNvy6tfVEu2P+9dXJGPqofrhGKs1N5c7btz/gF70ggAAIrnQAu
hVn8GQSfxfmgFgRAYPkQSKLcXHiSOYYfP2FIXH2roekJ/eg5iWUrc/n9jKLfqqG45W7bgbuto7Rf
PlORG97EaXhu1g8pztDDiZ2iFARAYCUSWF3RO7qLB/3Eby5d4HkTxquLzwIkUAwCILAiCHwqcvMS
ZBS5N/HLRxMlRe6coGYiE5SBAAhcJwRWlZya+lx+Gju1dLlJ9quKz3XymsY0QGC1EliOcnO1PheY
NwiAwBwCM/JtMOeUXbcnw7luFr5Xx5LnuJr4LBkKDEEABJYjAcjN5fisYEwgAAJEANE7vAxAAARA
4PogALl5fTyPmAUIXG8Edu3atXv37uttVkmYD4FKgle4BAEQAIGrSQBy82rShC8QAIGrSABC6irC
hCsQAAEQ+BQJrPkU+0bXIAACIAACIAACIAAC1z0ByM3r/inGBEEABEAABEAABEDg0yQAuflp0kff
IAACIAACIAACIHDdE4DcvO6fYkwQBEAABEAABEAABD5NAmvWrEmhxPiBp9ixzDmJrUAeBEAABEAA
BEAABEAABCIE4kRjWFWKB5KaPLoZpzLDDePaRdzhEQRAAARAAARAAARAAATiCSwsHcOL6bKBfFNl
rkEXbhDvGucgAAIgAAIgAAIgAAIgQARSmBzKlCUlyUk5prmGzuUibsIYLa4LYx79BDcQAAEQAAEQ
AAEQAAEQWAoBoR1nxaQsLGWdOedSoRA5o22cpEtTqRxycylsYQMCIAACIAACIAACIEAEuOAkGUkS
kkvKmDQrN2kjZyq/cIjinUJzijBnjCWyIAACIAACIAACIAACIJCYAKlISiQjRdySsrOBS9qmKZQo
lfEtm3IKhz8TO0MpCIAACIAACIAACIAACMQT4Cvn8u2OhKTk6pOUJeXXyOHOFFKjLMQ1KWOpqRTl
5D/xTnAOAiAAAiAAAiAAAiAAAokIkHRMTUsjGUliUkhKCnSKRPFOoTtpjT2UuiY1HNwk7Uk/WExP
hBJlIAACIAACIAACIAAC8wlw7Ug7N/mPSPxqIPnKIbGATg24whSJopr0KF8wNN8RSkAABEAABEAA
BEAABEBgPoGwgEzh1wJRnsKcsrzki+kkO2UdyjWpSKlpFApNo2Dn9NTk5HTcpUXznaMEBEAABEAA
BEAABEBg9RKYngnNzEyTvuQCkiRkJIlIJpeaJD9ppZ0XEyS+ZVNs3KQG1GI0cD4wPr164WHmIAAC
IAACIAACIAAClyJwYWJm/MJH8sbNqJikRiQvSVeS1BQ3QhLik+dT+HVCpEypltTp8Dv/5js/caku
UA8CIAACIAACIAACILB6CQyfn/C9e5SkIxeQ4moh+Z6aYnldbN+k5XS+wC6W2NPT00luUj49Iz0t
Pe39t91Hf+c99VFw9fLDzEEABEAABEAABEAABBYmcCIQPD4ycazndZKOJCDjJCUXmWtS0vhlQSyF
pOjU1BTlKbiZkZFBK/A8k5n5/tG3fh5if1RS9AVlhjKLB0QX7g41IAACIAACIAACIAACq4LATIh9
MDp5ciT49m9/N3T0VyKmyXdukowkDclvtskX0fm3VFI+TT6hLZ4U16T/M1xo8pROojMU8r8/cHKw
96yv4gtFmrXrb6IV+EsixLVFl0QEAxAAARAAARAAARBYtgSWElyk0OT5s6d877z9/tEjJBoViiw6
yhoyepQvDyKpyeUmX02fIQUqrhOanqY6WWsyuhtnaIZYeHt+8duuf6VrjiYnJykISh1MTU/TkVeL
RD6EJR8eFSxbfBgYCIAACIAACIAACIDA4gTkK8hJB5JGJLFHp5SEYlxDt3EnyUir4rQDk6RjRmYG
icbMzEzKZFBRRoYsMcVR3NBdtEsjrclmwpcOUWQzlJ7O7wVP9+OkJG7OST1NTaVRyTS/xJ3W3CdJ
UKZN0xmFUWkMoRmSnuISd8pTI8jNxZ9C1IIACIAACIAACIDAciZA4pKGR/qSIosUSiTtyLUm3aWd
Ryb5/YxIbdI/OiOlSXmuNcV/OvJrhcS1QMJQ+KG9m6RMxbcN0VdYpqan87lTxJIOaTNp4oQUpCxn
10xNTqWmTqVNkdSc5iqTJ7pNUorQl1x3Cnt+QAIBEAABEAABEAABEFjBBMSCOheZ/LuASDVSjJML
TQpTcs1JmpL+k+JMJbHJ45p0EGV0ayNZcPLYJ9mTyuR7N6k9d0TBUv596dwXaVJOJ4PfhpMeqSdq
OUX3fE+dTKdI5vQ0radTI9ruSTmqJbkpxCbFOlcwVQwdBEAABEAABEAABEBglgDpRBHRFI/i7uz8
2ygZl5U8dEl7L0lv8jwXmzyuyf+RjKQqEpo88dVyvmmT9m7SSWgmrDdDZDjbDalRqlmzhiRmSjBI
DkhoUkRzeopHN8UqOmXIDQVEudIkARrTFlkQAAEQAAEQAAEQAIGVSkCIRR6SlMUej1PSCd06k39v
EA9hUp5kJpee9F+IULGMzlUnj4iKUKi85ZNMRWxzZg2L1ZkiqJnCb43EZlJ5SJP80JFc0ckMBTlF
RJNqueoklUnBTlwhtFJfThg3CIAACIAACIAACCQgQJKRwpmkO0lZ8tVw8X3oXEiSLgwnOdK5hoQm
qURewQu4AuUhTmrImzJaTKeHNWzNDK2mR/uhqhkSoKKO9CW5peV5uiydLiOi6GZ49Vxs3yS9Sedi
fZ87oiYkQKN+kAEBEAABEAABEAABEFhZBGIVHak60o0k8kgNUjklLjdpv2UKoyvRKWgptCVXmOJa
ddKXQmmK5XTZnOQkD4SK7ZskLvm6uYxjhnywFNrDSU1mUqdpNZ1EJOXFVUQ8kEmRTtqqSX0IzSnr
y7DKhNxcWS8pjBYEQAAEQAAEQAAEYgkIcSgX8Eii0Jl0iQ8XflxcCrnIZaW4Yl2UyMVCY3ItSv9l
bUpHHo78/9U16wWMfU/RAAAAAElFTkSuQmCC

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://hazelcast.org/book/images/ec2-10.png

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
1Rtraevj1sM2tDZHbBpsvtlq2+baPrcTsou267entHe1r7f/7qDrUOCw6CjpmOA45sTi5O/U4Yx1
tneudd500XMpcll2lXdNd316WPBw7OFRNxa3ILfuI5RHSEduuKPdHdwb3HdIFqRq0qaHkcd5jw1P
Hc+znu+8NL0Kvda81bwLvFd81HwKfFZ91XzP+K75afgV+7331/Ev9f8UYBhQEfA90CLwcuBekENQ
czAu2D34VghNSGDIYChHaGzoZJhoWHrYYrhKeFH4RoRJRG0kFHk4siOKDg5k7kcLRZ+MXopRjymL
2Tpqf/RGLHVsSOz9YyLHTh1bidOPuxSPiveM7z/OfTzl+FKCVkJVIpTokdifxJuUlrScbJBcl4JP
CUx5kCqVWpD69YTDic409rTktFcnDU42plOkR6RPZ6hmVPyD+sf/n4enZE+dO/Ur0yvz3mmp08Wn
d7I8s+5lS2eXZO/l+OQ8zFXIvZCHyQvJe5qvkV9XQF0QV/DqjNmZtkKuwszCr0VHikaL5YorzuLP
Rp9dLDEt6TjHdy7v3E6pX+mTMu2y5vNs50+d/17uVT51QfNCUwV7xemK7Ur/ypkqg6q2aoHq4hpM
TUzNm4v2F4cvKV2qr2WpPV27eznk8mKddd1gvWJ9fQNbQ24jojG6ce2K65WJq7pXO5rEm6qaGZpP
XwPXoq+9bXFveXrd5Hr/DaUbTTf5b55vpW3NbIPajrVttPu1L3Y4dUzeMr7V36na2Xpb4vblLu6u
sm767twefE9az96duDubvWG97/t8+171H+l/PuA48HjQavDhkMnQyF39uwPDWsN3RtRGukZVRm/d
U7rXPqYw1nZf/n7rA/kHrQ8VHraNK453TChPdE4emuyZ0pjqe6T76O5jo8djT8yfTD61ezoz7Tq9
OOM1s/os6Nmn2ZjZn8+T59BzmfNU88ULbAvVL4RfNC8qLHYv6S7df2nz8vkrz1fvXke+3llOe0N8
U7zCuVK/KrPataa/NvHW5e3yu7B3P9+nr1Ovn/8g9OHmR82P9zccN5Y/RXza+5z1hfnL5a9yX/s3
LTcXvgV/+/k9c4t5q+6H0o/hbYftlZ9Hd7A7JbvCu52/TH7N7QXv7YWRIki/YwEkfEb4+ADw+TIc
JzgBQAvHv3iKP/HvbwYcHkMwB8b2EC90DeGEpEe+RrWgszHBWCvcITJ+PBM5DQFHRFFgKamp6Kk5
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
dXo9f1n0uaCv8yfJj/bxoe7RZ51MW3WuXrbLlCkjSkq2fFZA5m09PXnRQKIziOvqtJrOvXlZ0Gjk
lnmkRvWZfW1mwox7b3ww+9DyBhLdP/KrF2POpG1/5OhNUlpdqdGUOOJj8o8Q34sfEqFaNXbq7k0R
2/KG8Ok+3/yPrEQfo9B9B9H0XCkOwCsIgAAIgAAIdGACblZikvC5h8pPfHIhbRIhh2tTx55fd6i3
jSdqbt4U18qs0tcrzI9egyakvqq28aa/+WFR6oHhf7z3bnYB+Kdt3wkjdONeP2QaSu+oqyx87YWT
m0xdrCW/2XhT3ig8k0Iaaftmo4YuJLLNSlw0JBwNSlw5KS7/7KnvLhwsqNoq1Jo7D+U+90S//uba
SPVPzhglBuVeN73YnX/6PeEuwMa7B98Zva0wj5AF/3taME3Wz3vo7ttMF6idgdO9a8DNm8p7/6Ag
Jdq8i7V2wtRcE8IP7nnPbXKWEcWdYx6mMIr0pg1/Zd3uCVFY5av+P5/qvwlc/zLzcMnPwtiCoh9r
76VM9IKMsK0siHiNeTQa7d61600vr+7dCCkjvwsN8r4p7+pHE03nA8uXQz5mntvdafT218Zv9Tk+
Q170T+NAqzCNR9AAARAAARAAgY5EwN1KTFoK1OTliBmIldl+8MfOcyQ+fl0JoYt5Nx9dl52/5D5/
qkR9ded7R8jjj4wNN9zop9XVNzYy7Y30J43o00BE8fXaR/r70zbRlpeWkNsLv/yS1ZeygOy3R/WR
F8+c9e0uOphu9axaoVsjYY/72BJnR8St5OsvNlWELXmq35jIvmMIWfLd3gEfVtGfUmLi5tp++vK0
M0bZ8iVTrj3zs/p3kUqt2nAhnurTNoZsWdXzasnl/yuo2HuoYlcDef4fZx9/+z5jjekUHHKDqtKo
DQEwP21Qajws0Curuljf2IfhvP5TQU0fEfL0wQFnTlQdb7i64OOfNj71O4M6/Uv1Tx+WGDpe/uqS
eEi389tfoocZckQJFtoCQq9HCzLGPNJ9Qw/LUoOBvo4FYmgL6dM44iN64uwr/X/6SIdKrEm70QYB
EAABEACBDkbAzUpMbcESZa1+bSvoo17LkoJZ1cLf6Doj/wDtDY7dNvjnJ08QUnIpatYncX6dj9ew
wato5SFK0Ya+/buEPtFf5eYR7UMLv0weHuBTU7PohHrVXx99wE8onhpqDn6ZvTfnF1pfso1KqXzv
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

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400

@font-face {
	font-family: Droid Sans Mono;
	src: local("Droid Sans Mono"), local("DroidSansMono"), =
url(https://fonts.gstatic.com/s/droidsansmono/v7/ns-m2xQYezAtqh7ai59hJYW_=
AySPyikQrZReizgrnuw.ttf) format("truetype");
	font-weight: 400;
	font-style: normal;
}
@font-face {
	font-family: Noto Serif;
	src: local("Noto Serif"), local("NotoSerif"), =
url(https://fonts.gstatic.com/s/notoserif/v4/eCpfeMZI7q4jLksXVRWPQy3USBnS=
vpkopQaUR-2r7iU.ttf) format("truetype");
	font-weight: 400;
	font-style: normal;
}
@font-face {
	font-family: Noto Serif;
	src: local("Noto Serif Bold"), local("NotoSerif-Bold"), =
url(https://fonts.gstatic.com/s/notoserif/v4/lJAvZoKA5NttpPc9yc6lPfEr6Hm6=
RMS0v1dtXsGir4g.ttf) format("truetype");
	font-weight: 700;
	font-style: normal;
}
@font-face {
	font-family: Noto Serif;
	src: local("Noto Serif Italic"), local("NotoSerif-Italic"), =
url(https://fonts.gstatic.com/s/notoserif/v4/HQXBIwLHsOJCNEQeX9kNz4nF5uFd=
DttMLvmWuJdhhgs.ttf) format("truetype");
	font-weight: 400;
	font-style: italic;
}
@font-face {
	font-family: Noto Serif;
	src: local("Noto Serif Bold Italic"), local("NotoSerif-BoldItalic"), =
url(https://fonts.gstatic.com/s/notoserif/v4/Wreg0Be4tcFGM2t6VWytvH06qf9K=
HRHwsVx7iw5MXmY.ttf) format("truetype");
	font-weight: 700;
	font-style: italic;
}
@font-face {
	font-family: Open Sans;
	src: local("Open Sans Light"), local("OpenSans-Light"), =
url(https://fonts.gstatic.com/s/opensans/v13/DXI1ORHCpsQm3Vp6mXoaTYnF5uFd=
DttMLvmWuJdhhgs.ttf) format("truetype");
	font-weight: 300;
	font-style: normal;
}
@font-face {
	font-family: Open Sans;
	src: local("Open Sans"), local("OpenSans"), =
url(https://fonts.gstatic.com/s/opensans/v13/cJZKeOuBrn4kERxqtaUH3aCWcynf=
_cDxXwCLxiixG1c.ttf) format("truetype");
	font-weight: 400;
	font-style: normal;
}
@font-face {
	font-family: Open Sans;
	src: local("Open Sans Semibold"), local("OpenSans-Semibold"), =
url(https://fonts.gstatic.com/s/opensans/v13/MTP_ySUJH_bn48VBG8sNSonF5uFd=
DttMLvmWuJdhhgs.ttf) format("truetype");
	font-weight: 600;
	font-style: normal;
}
@font-face {
	font-family: Open Sans;
	src: local("Open Sans Light Italic"), local("OpenSansLight-Italic"), =
url(https://fonts.gstatic.com/s/opensans/v13/PRmiXeptR36kaC0GEAetxrfB31yx=
OzP-czbf6AAKCVo.ttf) format("truetype");
	font-weight: 300;
	font-style: italic;
}
@font-face {
	font-family: Open Sans;
	src: local("Open Sans Italic"), local("OpenSans-Italic"), =
url(https://fonts.gstatic.com/s/opensans/v13/xjAJXh38I15wypJXxuGMBp0EAVxt=
0G0biEntp43Qt6E.ttf) format("truetype");
	font-weight: 400;
	font-style: italic;
}
@font-face {
	font-family: Open Sans;
	src: local("Open Sans Semibold Italic"), =
local("OpenSans-SemiboldItalic"), =
url(https://fonts.gstatic.com/s/opensans/v13/PRmiXeptR36kaC0GEAetxi8cqLH4=
MEiSE0ROcU-qHOA.ttf) format("truetype");
	font-weight: 600;
	font-style: italic;
}

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.min.css

@font-face {
	font-family: FontAwesome;
	src: url(../fonts/fontawesome-webfont.eot?#iefix&v=3D4.2.0) =
format("embedded-opentype"), =
url(../fonts/fontawesome-webfont.woff?v=3D4.2.0) format("woff"), =
url(../fonts/fontawesome-webfont.ttf?v=3D4.2.0) format("truetype"), =
url(../fonts/fontawesome-webfont.svg?v=3D4.2.0#fontawesomeregular) =
format("svg");
	font-weight: normal;
	font-style: normal;
}
.fa {
	line-height: 1; font-family: FontAwesome; font-size: inherit; =
font-style: normal; font-variant: normal; font-weight: normal; display: =
inline-block; font-size-adjust: none; font-stretch: normal; =
-webkit-font-smoothing: antialiased; text-rendering: auto; =
-moz-osx-font-smoothing: grayscale;
}
.fa-lg {
	line-height: 0.75em; font-size: 1.33em; vertical-align: -15%;
}
.fa-2x {
	font-size: 2em;
}
.fa-3x {
	font-size: 3em;
}
.fa-4x {
	font-size: 4em;
}
.fa-5x {
	font-size: 5em;
}
.fa-fw {
	width: 1.28em; text-align: center;
}
.fa-ul {
	padding-left: 0px; margin-left: 2.14em; list-style-type: none;
}
.fa-ul > li {
	position: relative;
}
.fa-li {
	left: -2.14em; top: 0.14em; width: 2.14em; text-align: center; =
position: absolute;
}
.fa-lg.fa-li {
	left: -1.85em;
}
.fa-border {
	padding: 0.2em 0.25em 0.15em; border-radius: 0.1em; border: 0.08em =
solid rgb(238, 238, 238); border-image: none;
}
.pull-right {
	float: right;
}
.pull-left {
	float: left;
}
.pull-left.fa {
	margin-right: 0.3em;
}
.pull-right.fa {
	margin-left: 0.3em;
}
.fa-spin {
	animation:fa-spin 2s linear infinite; -webkit-animation: fa-spin 2s =
infinite linear;
}
.fa-rotate-90 {
	transform: rotate(90deg); -webkit-transform: rotate(90deg);
}
.fa-rotate-180 {
	transform: rotate(180deg); -webkit-transform: rotate(180deg);
}
.fa-rotate-270 {
	transform: rotate(270deg); -webkit-transform: rotate(270deg);
}
.fa-flip-horizontal {
	transform: scale(-1, 1); -webkit-transform: scale(-1, 1);
}
.fa-flip-vertical {
	transform: scale(1, -1); -webkit-transform: scale(1, -1);
}
:root .fa-rotate-90 {
	filter: none;
}
:root .fa-rotate-180 {
	filter: none;
}
:root .fa-rotate-270 {
	filter: none;
}
:root .fa-flip-horizontal {
	filter: none;
}
:root .fa-flip-vertical {
	filter: none;
}
.fa-stack {
	width: 2em; height: 2em; line-height: 2em; vertical-align: middle; =
display: inline-block; position: relative;
}
.fa-stack-1x {
	left: 0px; width: 100%; text-align: center; position: absolute;
}
.fa-stack-2x {
	left: 0px; width: 100%; text-align: center; position: absolute;
}
.fa-stack-1x {
	line-height: inherit;
}
.fa-stack-2x {
	font-size: 2em;
}
.fa-inverse {
	color: rgb(255, 255, 255);
}
.fa-glass::before {
	content: "\f000";
}
.fa-music::before {
	content: "\f001";
}
.fa-search::before {
	content: "\f002";
}
.fa-envelope-o::before {
	content: "\f003";
}
.fa-heart::before {
	content: "\f004";
}
.fa-star::before {
	content: "\f005";
}
.fa-star-o::before {
	content: "\f006";
}
.fa-user::before {
	content: "\f007";
}
.fa-film::before {
	content: "\f008";
}
.fa-th-large::before {
	content: "\f009";
}
.fa-th::before {
	content: "\f00a";
}
.fa-th-list::before {
	content: "\f00b";
}
.fa-check::before {
	content: "\f00c";
}
.fa-remove::before {
	content: "\f00d";
}
.fa-close::before {
	content: "\f00d";
}
.fa-times::before {
	content: "\f00d";
}
.fa-search-plus::before {
	content: "\f00e";
}
.fa-search-minus::before {
	content: "\f010";
}
.fa-power-off::before {
	content: "\f011";
}
.fa-signal::before {
	content: "\f012";
}
.fa-gear::before {
	content: "\f013";
}
.fa-cog::before {
	content: "\f013";
}
.fa-trash-o::before {
	content: "\f014";
}
.fa-home::before {
	content: "\f015";
}
.fa-file-o::before {
	content: "\f016";
}
.fa-clock-o::before {
	content: "\f017";
}
.fa-road::before {
	content: "\f018";
}
.fa-download::before {
	content: "\f019";
}
.fa-arrow-circle-o-down::before {
	content: "\f01a";
}
.fa-arrow-circle-o-up::before {
	content: "\f01b";
}
.fa-inbox::before {
	content: "\f01c";
}
.fa-play-circle-o::before {
	content: "\f01d";
}
.fa-rotate-right::before {
	content: "\f01e";
}
.fa-repeat::before {
	content: "\f01e";
}
.fa-refresh::before {
	content: "\f021";
}
.fa-list-alt::before {
	content: "\f022";
}
.fa-lock::before {
	content: "\f023";
}
.fa-flag::before {
	content: "\f024";
}
.fa-headphones::before {
	content: "\f025";
}
.fa-volume-off::before {
	content: "\f026";
}
.fa-volume-down::before {
	content: "\f027";
}
.fa-volume-up::before {
	content: "\f028";
}
.fa-qrcode::before {
	content: "\f029";
}
.fa-barcode::before {
	content: "\f02a";
}
.fa-tag::before {
	content: "\f02b";
}
.fa-tags::before {
	content: "\f02c";
}
.fa-book::before {
	content: "\f02d";
}
.fa-bookmark::before {
	content: "\f02e";
}
.fa-print::before {
	content: "\f02f";
}
.fa-camera::before {
	content: "\f030";
}
.fa-font::before {
	content: "\f031";
}
.fa-bold::before {
	content: "\f032";
}
.fa-italic::before {
	content: "\f033";
}
.fa-text-height::before {
	content: "\f034";
}
.fa-text-width::before {
	content: "\f035";
}
.fa-align-left::before {
	content: "\f036";
}
.fa-align-center::before {
	content: "\f037";
}
.fa-align-right::before {
	content: "\f038";
}
.fa-align-justify::before {
	content: "\f039";
}
.fa-list::before {
	content: "\f03a";
}
.fa-dedent::before {
	content: "\f03b";
}
.fa-outdent::before {
	content: "\f03b";
}
.fa-indent::before {
	content: "\f03c";
}
.fa-video-camera::before {
	content: "\f03d";
}
.fa-photo::before {
	content: "\f03e";
}
.fa-image::before {
	content: "\f03e";
}
.fa-picture-o::before {
	content: "\f03e";
}
.fa-pencil::before {
	content: "\f040";
}
.fa-map-marker::before {
	content: "\f041";
}
.fa-adjust::before {
	content: "\f042";
}
.fa-tint::before {
	content: "\f043";
}
.fa-edit::before {
	content: "\f044";
}
.fa-pencil-square-o::before {
	content: "\f044";
}
.fa-share-square-o::before {
	content: "\f045";
}
.fa-check-square-o::before {
	content: "\f046";
}
.fa-arrows::before {
	content: "\f047";
}
.fa-step-backward::before {
	content: "\f048";
}
.fa-fast-backward::before {
	content: "\f049";
}
.fa-backward::before {
	content: "\f04a";
}
.fa-play::before {
	content: "\f04b";
}
.fa-pause::before {
	content: "\f04c";
}
.fa-stop::before {
	content: "\f04d";
}
.fa-forward::before {
	content: "\f04e";
}
.fa-fast-forward::before {
	content: "\f050";
}
.fa-step-forward::before {
	content: "\f051";
}
.fa-eject::before {
	content: "\f052";
}
.fa-chevron-left::before {
	content: "\f053";
}
.fa-chevron-right::before {
	content: "\f054";
}
.fa-plus-circle::before {
	content: "\f055";
}
.fa-minus-circle::before {
	content: "\f056";
}
.fa-times-circle::before {
	content: "\f057";
}
.fa-check-circle::before {
	content: "\f058";
}
.fa-question-circle::before {
	content: "\f059";
}
.fa-info-circle::before {
	content: "\f05a";
}
.fa-crosshairs::before {
	content: "\f05b";
}
.fa-times-circle-o::before {
	content: "\f05c";
}
.fa-check-circle-o::before {
	content: "\f05d";
}
.fa-ban::before {
	content: "\f05e";
}
.fa-arrow-left::before {
	content: "\f060";
}
.fa-arrow-right::before {
	content: "\f061";
}
.fa-arrow-up::before {
	content: "\f062";
}
.fa-arrow-down::before {
	content: "\f063";
}
.fa-mail-forward::before {
	content: "\f064";
}
.fa-share::before {
	content: "\f064";
}
.fa-expand::before {
	content: "\f065";
}
.fa-compress::before {
	content: "\f066";
}
.fa-plus::before {
	content: "\f067";
}
.fa-minus::before {
	content: "\f068";
}
.fa-asterisk::before {
	content: "\f069";
}
.fa-exclamation-circle::before {
	content: "\f06a";
}
.fa-gift::before {
	content: "\f06b";
}
.fa-leaf::before {
	content: "\f06c";
}
.fa-fire::before {
	content: "\f06d";
}
.fa-eye::before {
	content: "\f06e";
}
.fa-eye-slash::before {
	content: "\f070";
}
.fa-warning::before {
	content: "\f071";
}
.fa-exclamation-triangle::before {
	content: "\f071";
}
.fa-plane::before {
	content: "\f072";
}
.fa-calendar::before {
	content: "\f073";
}
.fa-random::before {
	content: "\f074";
}
.fa-comment::before {
	content: "\f075";
}
.fa-magnet::before {
	content: "\f076";
}
.fa-chevron-up::before {
	content: "\f077";
}
.fa-chevron-down::before {
	content: "\f078";
}
.fa-retweet::before {
	content: "\f079";
}
.fa-shopping-cart::before {
	content: "\f07a";
}
.fa-folder::before {
	content: "\f07b";
}
.fa-folder-open::before {
	content: "\f07c";
}
.fa-arrows-v::before {
	content: "\f07d";
}
.fa-arrows-h::before {
	content: "\f07e";
}
.fa-bar-chart-o::before {
	content: "\f080";
}
.fa-bar-chart::before {
	content: "\f080";
}
.fa-twitter-square::before {
	content: "\f081";
}
.fa-facebook-square::before {
	content: "\f082";
}
.fa-camera-retro::before {
	content: "\f083";
}
.fa-key::before {
	content: "\f084";
}
.fa-gears::before {
	content: "\f085";
}
.fa-cogs::before {
	content: "\f085";
}
.fa-comments::before {
	content: "\f086";
}
.fa-thumbs-o-up::before {
	content: "\f087";
}
.fa-thumbs-o-down::before {
	content: "\f088";
}
.fa-star-half::before {
	content: "\f089";
}
.fa-heart-o::before {
	content: "\f08a";
}
.fa-sign-out::before {
	content: "\f08b";
}
.fa-linkedin-square::before {
	content: "\f08c";
}
.fa-thumb-tack::before {
	content: "\f08d";
}
.fa-external-link::before {
	content: "\f08e";
}
.fa-sign-in::before {
	content: "\f090";
}
.fa-trophy::before {
	content: "\f091";
}
.fa-github-square::before {
	content: "\f092";
}
.fa-upload::before {
	content: "\f093";
}
.fa-lemon-o::before {
	content: "\f094";
}
.fa-phone::before {
	content: "\f095";
}
.fa-square-o::before {
	content: "\f096";
}
.fa-bookmark-o::before {
	content: "\f097";
}
.fa-phone-square::before {
	content: "\f098";
}
.fa-twitter::before {
	content: "\f099";
}
.fa-facebook::before {
	content: "\f09a";
}
.fa-github::before {
	content: "\f09b";
}
.fa-unlock::before {
	content: "\f09c";
}
.fa-credit-card::before {
	content: "\f09d";
}
.fa-rss::before {
	content: "\f09e";
}
.fa-hdd-o::before {
	content: "\f0a0";
}
.fa-bullhorn::before {
	content: "\f0a1";
}
.fa-bell::before {
	content: "\f0f3";
}
.fa-certificate::before {
	content: "\f0a3";
}
.fa-hand-o-right::before {
	content: "\f0a4";
}
.fa-hand-o-left::before {
	content: "\f0a5";
}
.fa-hand-o-up::before {
	content: "\f0a6";
}
.fa-hand-o-down::before {
	content: "\f0a7";
}
.fa-arrow-circle-left::before {
	content: "\f0a8";
}
.fa-arrow-circle-right::before {
	content: "\f0a9";
}
.fa-arrow-circle-up::before {
	content: "\f0aa";
}
.fa-arrow-circle-down::before {
	content: "\f0ab";
}
.fa-globe::before {
	content: "\f0ac";
}
.fa-wrench::before {
	content: "\f0ad";
}
.fa-tasks::before {
	content: "\f0ae";
}
.fa-filter::before {
	content: "\f0b0";
}
.fa-briefcase::before {
	content: "\f0b1";
}
.fa-arrows-alt::before {
	content: "\f0b2";
}
.fa-group::before {
	content: "\f0c0";
}
.fa-users::before {
	content: "\f0c0";
}
.fa-chain::before {
	content: "\f0c1";
}
.fa-link::before {
	content: "\f0c1";
}
.fa-cloud::before {
	content: "\f0c2";
}
.fa-flask::before {
	content: "\f0c3";
}
.fa-cut::before {
	content: "\f0c4";
}
.fa-scissors::before {
	content: "\f0c4";
}
.fa-copy::before {
	content: "\f0c5";
}
.fa-files-o::before {
	content: "\f0c5";
}
.fa-paperclip::before {
	content: "\f0c6";
}
.fa-save::before {
	content: "\f0c7";
}
.fa-floppy-o::before {
	content: "\f0c7";
}
.fa-square::before {
	content: "\f0c8";
}
.fa-navicon::before {
	content: "\f0c9";
}
.fa-reorder::before {
	content: "\f0c9";
}
.fa-bars::before {
	content: "\f0c9";
}
.fa-list-ul::before {
	content: "\f0ca";
}
.fa-list-ol::before {
	content: "\f0cb";
}
.fa-strikethrough::before {
	content: "\f0cc";
}
.fa-underline::before {
	content: "\f0cd";
}
.fa-table::before {
	content: "\f0ce";
}
.fa-magic::before {
	content: "\f0d0";
}
.fa-truck::before {
	content: "\f0d1";
}
.fa-pinterest::before {
	content: "\f0d2";
}
.fa-pinterest-square::before {
	content: "\f0d3";
}
.fa-google-plus-square::before {
	content: "\f0d4";
}
.fa-google-plus::before {
	content: "\f0d5";
}
.fa-money::before {
	content: "\f0d6";
}
.fa-caret-down::before {
	content: "\f0d7";
}
.fa-caret-up::before {
	content: "\f0d8";
}
.fa-caret-left::before {
	content: "\f0d9";
}
.fa-caret-right::before {
	content: "\f0da";
}
.fa-columns::before {
	content: "\f0db";
}
.fa-unsorted::before {
	content: "\f0dc";
}
.fa-sort::before {
	content: "\f0dc";
}
.fa-sort-down::before {
	content: "\f0dd";
}
.fa-sort-desc::before {
	content: "\f0dd";
}
.fa-sort-up::before {
	content: "\f0de";
}
.fa-sort-asc::before {
	content: "\f0de";
}
.fa-envelope::before {
	content: "\f0e0";
}
.fa-linkedin::before {
	content: "\f0e1";
}
.fa-rotate-left::before {
	content: "\f0e2";
}
.fa-undo::before {
	content: "\f0e2";
}
.fa-legal::before {
	content: "\f0e3";
}
.fa-gavel::before {
	content: "\f0e3";
}
.fa-dashboard::before {
	content: "\f0e4";
}
.fa-tachometer::before {
	content: "\f0e4";
}
.fa-comment-o::before {
	content: "\f0e5";
}
.fa-comments-o::before {
	content: "\f0e6";
}
.fa-flash::before {
	content: "\f0e7";
}
.fa-bolt::before {
	content: "\f0e7";
}
.fa-sitemap::before {
	content: "\f0e8";
}
.fa-umbrella::before {
	content: "\f0e9";
}
.fa-paste::before {
	content: "\f0ea";
}
.fa-clipboard::before {
	content: "\f0ea";
}
.fa-lightbulb-o::before {
	content: "\f0eb";
}
.fa-exchange::before {
	content: "\f0ec";
}
.fa-cloud-download::before {
	content: "\f0ed";
}
.fa-cloud-upload::before {
	content: "\f0ee";
}
.fa-user-md::before {
	content: "\f0f0";
}
.fa-stethoscope::before {
	content: "\f0f1";
}
.fa-suitcase::before {
	content: "\f0f2";
}
.fa-bell-o::before {
	content: "\f0a2";
}
.fa-coffee::before {
	content: "\f0f4";
}
.fa-cutlery::before {
	content: "\f0f5";
}
.fa-file-text-o::before {
	content: "\f0f6";
}
.fa-building-o::before {
	content: "\f0f7";
}
.fa-hospital-o::before {
	content: "\f0f8";
}
.fa-ambulance::before {
	content: "\f0f9";
}
.fa-medkit::before {
	content: "\f0fa";
}
.fa-fighter-jet::before {
	content: "\f0fb";
}
.fa-beer::before {
	content: "\f0fc";
}
.fa-h-square::before {
	content: "\f0fd";
}
.fa-plus-square::before {
	content: "\f0fe";
}
.fa-angle-double-left::before {
	content: "\f100";
}
.fa-angle-double-right::before {
	content: "\f101";
}
.fa-angle-double-up::before {
	content: "\f102";
}
.fa-angle-double-down::before {
	content: "\f103";
}
.fa-angle-left::before {
	content: "\f104";
}
.fa-angle-right::before {
	content: "\f105";
}
.fa-angle-up::before {
	content: "\f106";
}
.fa-angle-down::before {
	content: "\f107";
}
.fa-desktop::before {
	content: "\f108";
}
.fa-laptop::before {
	content: "\f109";
}
.fa-tablet::before {
	content: "\f10a";
}
.fa-mobile-phone::before {
	content: "\f10b";
}
.fa-mobile::before {
	content: "\f10b";
}
.fa-circle-o::before {
	content: "\f10c";
}
.fa-quote-left::before {
	content: "\f10d";
}
.fa-quote-right::before {
	content: "\f10e";
}
.fa-spinner::before {
	content: "\f110";
}
.fa-circle::before {
	content: "\f111";
}
.fa-mail-reply::before {
	content: "\f112";
}
.fa-reply::before {
	content: "\f112";
}
.fa-github-alt::before {
	content: "\f113";
}
.fa-folder-o::before {
	content: "\f114";
}
.fa-folder-open-o::before {
	content: "\f115";
}
.fa-smile-o::before {
	content: "\f118";
}
.fa-frown-o::before {
	content: "\f119";
}
.fa-meh-o::before {
	content: "\f11a";
}
.fa-gamepad::before {
	content: "\f11b";
}
.fa-keyboard-o::before {
	content: "\f11c";
}
.fa-flag-o::before {
	content: "\f11d";
}
.fa-flag-checkered::before {
	content: "\f11e";
}
.fa-terminal::before {
	content: "\f120";
}
.fa-code::before {
	content: "\f121";
}
.fa-mail-reply-all::before {
	content: "\f122";
}
.fa-reply-all::before {
	content: "\f122";
}
.fa-star-half-empty::before {
	content: "\f123";
}
.fa-star-half-full::before {
	content: "\f123";
}
.fa-star-half-o::before {
	content: "\f123";
}
.fa-location-arrow::before {
	content: "\f124";
}
.fa-crop::before {
	content: "\f125";
}
.fa-code-fork::before {
	content: "\f126";
}
.fa-unlink::before {
	content: "\f127";
}
.fa-chain-broken::before {
	content: "\f127";
}
.fa-question::before {
	content: "\f128";
}
.fa-info::before {
	content: "\f129";
}
.fa-exclamation::before {
	content: "\f12a";
}
.fa-superscript::before {
	content: "\f12b";
}
.fa-subscript::before {
	content: "\f12c";
}
.fa-eraser::before {
	content: "\f12d";
}
.fa-puzzle-piece::before {
	content: "\f12e";
}
.fa-microphone::before {
	content: "\f130";
}
.fa-microphone-slash::before {
	content: "\f131";
}
.fa-shield::before {
	content: "\f132";
}
.fa-calendar-o::before {
	content: "\f133";
}
.fa-fire-extinguisher::before {
	content: "\f134";
}
.fa-rocket::before {
	content: "\f135";
}
.fa-maxcdn::before {
	content: "\f136";
}
.fa-chevron-circle-left::before {
	content: "\f137";
}
.fa-chevron-circle-right::before {
	content: "\f138";
}
.fa-chevron-circle-up::before {
	content: "\f139";
}
.fa-chevron-circle-down::before {
	content: "\f13a";
}
.fa-html5::before {
	content: "\f13b";
}
.fa-css3::before {
	content: "\f13c";
}
.fa-anchor::before {
	content: "\f13d";
}
.fa-unlock-alt::before {
	content: "\f13e";
}
.fa-bullseye::before {
	content: "\f140";
}
.fa-ellipsis-h::before {
	content: "\f141";
}
.fa-ellipsis-v::before {
	content: "\f142";
}
.fa-rss-square::before {
	content: "\f143";
}
.fa-play-circle::before {
	content: "\f144";
}
.fa-ticket::before {
	content: "\f145";
}
.fa-minus-square::before {
	content: "\f146";
}
.fa-minus-square-o::before {
	content: "\f147";
}
.fa-level-up::before {
	content: "\f148";
}
.fa-level-down::before {
	content: "\f149";
}
.fa-check-square::before {
	content: "\f14a";
}
.fa-pencil-square::before {
	content: "\f14b";
}
.fa-external-link-square::before {
	content: "\f14c";
}
.fa-share-square::before {
	content: "\f14d";
}
.fa-compass::before {
	content: "\f14e";
}
.fa-toggle-down::before {
	content: "\f150";
}
.fa-caret-square-o-down::before {
	content: "\f150";
}
.fa-toggle-up::before {
	content: "\f151";
}
.fa-caret-square-o-up::before {
	content: "\f151";
}
.fa-toggle-right::before {
	content: "\f152";
}
.fa-caret-square-o-right::before {
	content: "\f152";
}
.fa-euro::before {
	content: "\f153";
}
.fa-eur::before {
	content: "\f153";
}
.fa-gbp::before {
	content: "\f154";
}
.fa-dollar::before {
	content: "\f155";
}
.fa-usd::before {
	content: "\f155";
}
.fa-rupee::before {
	content: "\f156";
}
.fa-inr::before {
	content: "\f156";
}
.fa-cny::before {
	content: "\f157";
}
.fa-rmb::before {
	content: "\f157";
}
.fa-yen::before {
	content: "\f157";
}
.fa-jpy::before {
	content: "\f157";
}
.fa-ruble::before {
	content: "\f158";
}
.fa-rouble::before {
	content: "\f158";
}
.fa-rub::before {
	content: "\f158";
}
.fa-won::before {
	content: "\f159";
}
.fa-krw::before {
	content: "\f159";
}
.fa-bitcoin::before {
	content: "\f15a";
}
.fa-btc::before {
	content: "\f15a";
}
.fa-file::before {
	content: "\f15b";
}
.fa-file-text::before {
	content: "\f15c";
}
.fa-sort-alpha-asc::before {
	content: "\f15d";
}
.fa-sort-alpha-desc::before {
	content: "\f15e";
}
.fa-sort-amount-asc::before {
	content: "\f160";
}
.fa-sort-amount-desc::before {
	content: "\f161";
}
.fa-sort-numeric-asc::before {
	content: "\f162";
}
.fa-sort-numeric-desc::before {
	content: "\f163";
}
.fa-thumbs-up::before {
	content: "\f164";
}
.fa-thumbs-down::before {
	content: "\f165";
}
.fa-youtube-square::before {
	content: "\f166";
}
.fa-youtube::before {
	content: "\f167";
}
.fa-xing::before {
	content: "\f168";
}
.fa-xing-square::before {
	content: "\f169";
}
.fa-youtube-play::before {
	content: "\f16a";
}
.fa-dropbox::before {
	content: "\f16b";
}
.fa-stack-overflow::before {
	content: "\f16c";
}
.fa-instagram::before {
	content: "\f16d";
}
.fa-flickr::before {
	content: "\f16e";
}
.fa-adn::before {
	content: "\f170";
}
.fa-bitbucket::before {
	content: "\f171";
}
.fa-bitbucket-square::before {
	content: "\f172";
}
.fa-tumblr::before {
	content: "\f173";
}
.fa-tumblr-square::before {
	content: "\f174";
}
.fa-long-arrow-down::before {
	content: "\f175";
}
.fa-long-arrow-up::before {
	content: "\f176";
}
.fa-long-arrow-left::before {
	content: "\f177";
}
.fa-long-arrow-right::before {
	content: "\f178";
}
.fa-apple::before {
	content: "\f179";
}
.fa-windows::before {
	content: "\f17a";
}
.fa-android::before {
	content: "\f17b";
}
.fa-linux::before {
	content: "\f17c";
}
.fa-dribbble::before {
	content: "\f17d";
}
.fa-skype::before {
	content: "\f17e";
}
.fa-foursquare::before {
	content: "\f180";
}
.fa-trello::before {
	content: "\f181";
}
.fa-female::before {
	content: "\f182";
}
.fa-male::before {
	content: "\f183";
}
.fa-gittip::before {
	content: "\f184";
}
.fa-sun-o::before {
	content: "\f185";
}
.fa-moon-o::before {
	content: "\f186";
}
.fa-archive::before {
	content: "\f187";
}
.fa-bug::before {
	content: "\f188";
}
.fa-vk::before {
	content: "\f189";
}
.fa-weibo::before {
	content: "\f18a";
}
.fa-renren::before {
	content: "\f18b";
}
.fa-pagelines::before {
	content: "\f18c";
}
.fa-stack-exchange::before {
	content: "\f18d";
}
.fa-arrow-circle-o-right::before {
	content: "\f18e";
}
.fa-arrow-circle-o-left::before {
	content: "\f190";
}
.fa-toggle-left::before {
	content: "\f191";
}
.fa-caret-square-o-left::before {
	content: "\f191";
}
.fa-dot-circle-o::before {
	content: "\f192";
}
.fa-wheelchair::before {
	content: "\f193";
}
.fa-vimeo-square::before {
	content: "\f194";
}
.fa-turkish-lira::before {
	content: "\f195";
}
.fa-try::before {
	content: "\f195";
}
.fa-plus-square-o::before {
	content: "\f196";
}
.fa-space-shuttle::before {
	content: "\f197";
}
.fa-slack::before {
	content: "\f198";
}
.fa-envelope-square::before {
	content: "\f199";
}
.fa-wordpress::before {
	content: "\f19a";
}
.fa-openid::before {
	content: "\f19b";
}
.fa-institution::before {
	content: "\f19c";
}
.fa-bank::before {
	content: "\f19c";
}
.fa-university::before {
	content: "\f19c";
}
.fa-mortar-board::before {
	content: "\f19d";
}
.fa-graduation-cap::before {
	content: "\f19d";
}
.fa-yahoo::before {
	content: "\f19e";
}
.fa-google::before {
	content: "\f1a0";
}
.fa-reddit::before {
	content: "\f1a1";
}
.fa-reddit-square::before {
	content: "\f1a2";
}
.fa-stumbleupon-circle::before {
	content: "\f1a3";
}
.fa-stumbleupon::before {
	content: "\f1a4";
}
.fa-delicious::before {
	content: "\f1a5";
}
.fa-digg::before {
	content: "\f1a6";
}
.fa-pied-piper::before {
	content: "\f1a7";
}
.fa-pied-piper-alt::before {
	content: "\f1a8";
}
.fa-drupal::before {
	content: "\f1a9";
}
.fa-joomla::before {
	content: "\f1aa";
}
.fa-language::before {
	content: "\f1ab";
}
.fa-fax::before {
	content: "\f1ac";
}
.fa-building::before {
	content: "\f1ad";
}
.fa-child::before {
	content: "\f1ae";
}
.fa-paw::before {
	content: "\f1b0";
}
.fa-spoon::before {
	content: "\f1b1";
}
.fa-cube::before {
	content: "\f1b2";
}
.fa-cubes::before {
	content: "\f1b3";
}
.fa-behance::before {
	content: "\f1b4";
}
.fa-behance-square::before {
	content: "\f1b5";
}
.fa-steam::before {
	content: "\f1b6";
}
.fa-steam-square::before {
	content: "\f1b7";
}
.fa-recycle::before {
	content: "\f1b8";
}
.fa-automobile::before {
	content: "\f1b9";
}
.fa-car::before {
	content: "\f1b9";
}
.fa-cab::before {
	content: "\f1ba";
}
.fa-taxi::before {
	content: "\f1ba";
}
.fa-tree::before {
	content: "\f1bb";
}
.fa-spotify::before {
	content: "\f1bc";
}
.fa-deviantart::before {
	content: "\f1bd";
}
.fa-soundcloud::before {
	content: "\f1be";
}
.fa-database::before {
	content: "\f1c0";
}
.fa-file-pdf-o::before {
	content: "\f1c1";
}
.fa-file-word-o::before {
	content: "\f1c2";
}
.fa-file-excel-o::before {
	content: "\f1c3";
}
.fa-file-powerpoint-o::before {
	content: "\f1c4";
}
.fa-file-photo-o::before {
	content: "\f1c5";
}
.fa-file-picture-o::before {
	content: "\f1c5";
}
.fa-file-image-o::before {
	content: "\f1c5";
}
.fa-file-zip-o::before {
	content: "\f1c6";
}
.fa-file-archive-o::before {
	content: "\f1c6";
}
.fa-file-sound-o::before {
	content: "\f1c7";
}
.fa-file-audio-o::before {
	content: "\f1c7";
}
.fa-file-movie-o::before {
	content: "\f1c8";
}
.fa-file-video-o::before {
	content: "\f1c8";
}
.fa-file-code-o::before {
	content: "\f1c9";
}
.fa-vine::before {
	content: "\f1ca";
}
.fa-codepen::before {
	content: "\f1cb";
}
.fa-jsfiddle::before {
	content: "\f1cc";
}
.fa-life-bouy::before {
	content: "\f1cd";
}
.fa-life-buoy::before {
	content: "\f1cd";
}
.fa-life-saver::before {
	content: "\f1cd";
}
.fa-support::before {
	content: "\f1cd";
}
.fa-life-ring::before {
	content: "\f1cd";
}
.fa-circle-o-notch::before {
	content: "\f1ce";
}
.fa-ra::before {
	content: "\f1d0";
}
.fa-rebel::before {
	content: "\f1d0";
}
.fa-ge::before {
	content: "\f1d1";
}
.fa-empire::before {
	content: "\f1d1";
}
.fa-git-square::before {
	content: "\f1d2";
}
.fa-git::before {
	content: "\f1d3";
}
.fa-hacker-news::before {
	content: "\f1d4";
}
.fa-tencent-weibo::before {
	content: "\f1d5";
}
.fa-qq::before {
	content: "\f1d6";
}
.fa-wechat::before {
	content: "\f1d7";
}
.fa-weixin::before {
	content: "\f1d7";
}
.fa-send::before {
	content: "\f1d8";
}
.fa-paper-plane::before {
	content: "\f1d8";
}
.fa-send-o::before {
	content: "\f1d9";
}
.fa-paper-plane-o::before {
	content: "\f1d9";
}
.fa-history::before {
	content: "\f1da";
}
.fa-circle-thin::before {
	content: "\f1db";
}
.fa-header::before {
	content: "\f1dc";
}
.fa-paragraph::before {
	content: "\f1dd";
}
.fa-sliders::before {
	content: "\f1de";
}
.fa-share-alt::before {
	content: "\f1e0";
}
.fa-share-alt-square::before {
	content: "\f1e1";
}
.fa-bomb::before {
	content: "\f1e2";
}
.fa-soccer-ball-o::before {
	content: "\f1e3";
}
.fa-futbol-o::before {
	content: "\f1e3";
}
.fa-tty::before {
	content: "\f1e4";
}
.fa-binoculars::before {
	content: "\f1e5";
}
.fa-plug::before {
	content: "\f1e6";
}
.fa-slideshare::before {
	content: "\f1e7";
}
.fa-twitch::before {
	content: "\f1e8";
}
.fa-yelp::before {
	content: "\f1e9";
}
.fa-newspaper-o::before {
	content: "\f1ea";
}
.fa-wifi::before {
	content: "\f1eb";
}
.fa-calculator::before {
	content: "\f1ec";
}
.fa-paypal::before {
	content: "\f1ed";
}
.fa-google-wallet::before {
	content: "\f1ee";
}
.fa-cc-visa::before {
	content: "\f1f0";
}
.fa-cc-mastercard::before {
	content: "\f1f1";
}
.fa-cc-discover::before {
	content: "\f1f2";
}
.fa-cc-amex::before {
	content: "\f1f3";
}
.fa-cc-paypal::before {
	content: "\f1f4";
}
.fa-cc-stripe::before {
	content: "\f1f5";
}
.fa-bell-slash::before {
	content: "\f1f6";
}
.fa-bell-slash-o::before {
	content: "\f1f7";
}
.fa-trash::before {
	content: "\f1f8";
}
.fa-copyright::before {
	content: "\f1f9";
}
.fa-at::before {
	content: "\f1fa";
}
.fa-eyedropper::before {
	content: "\f1fb";
}
.fa-paint-brush::before {
	content: "\f1fc";
}
.fa-birthday-cake::before {
	content: "\f1fd";
}
.fa-area-chart::before {
	content: "\f1fe";
}
.fa-pie-chart::before {
	content: "\f200";
}
.fa-line-chart::before {
	content: "\f201";
}
.fa-lastfm::before {
	content: "\f202";
}
.fa-lastfm-square::before {
	content: "\f203";
}
.fa-toggle-off::before {
	content: "\f204";
}
.fa-toggle-on::before {
	content: "\f205";
}
.fa-bicycle::before {
	content: "\f206";
}
.fa-bus::before {
	content: "\f207";
}
.fa-ioxhost::before {
	content: "\f208";
}
.fa-angellist::before {
	content: "\f209";
}
.fa-cc::before {
	content: "\f20a";
}
.fa-shekel::before {
	content: "\f20b";
}
.fa-sheqel::before {
	content: "\f20b";
}
.fa-ils::before {
	content: "\f20b";
}
.fa-meanpath::before {
	content: "\f20c";
}

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://hazelcast.org/book/css/gate.css

body > header {
	position: relative; z-index: 9999;
}
body > footer {
	position: relative; z-index: 9999;
}
.gate {
	background: rgba(51, 51, 51, 0.85); left: 0px; width: 100%; height: =
100%; font-size: 18px; position: fixed; z-index: 9999; -ms-overflow-y: =
scroll;
}
.gate .holder {
	margin: 100px auto 0px; width: 990px; position: relative;
}
.gate .holder .intro {
	background: rgb(255, 255, 255); padding: 40px; border-radius: 0px 0px =
2px 2px; transition:margin-left 1000ms, opacity 300ms; width: 900px; =
margin-bottom: 100px; border-top-color: rgb(255, 95, 0); =
border-top-width: 7px; border-top-style: solid; position: absolute; =
z-index: 999; opacity: 1;
}
.gate .holder .remove.intro {
	margin-left: -1000px; opacity: 0;
}
.gate .holder h3 {
	margin-top: 0px;
}
.gate .holder .form {
	background: rgb(255, 255, 255); margin: 0px auto 100px; padding: 40px; =
border-radius: 0px 0px 2px 2px; transition:opacity 700ms; width: 450px; =
overflow: scroll; border-top-color: rgb(255, 95, 0); border-top-width: =
7px; border-top-style: solid; z-index: 99;
}
.gate .holder .form iframe {
	width: 385px; height: 900px;
}
.gate .text {
	width: 560px; padding-right: 40px; float: left;
}
.gate .side {
	width: 300px; float: left;
}
.gate img {
	border: 1px solid rgb(187, 187, 187); border-image: none; width: 300px;
}
.gate .top.button {
	margin-bottom: 10px;
}
.gate .button {
	background: rgb(255, 95, 0); padding: 14px 35px; border-radius: 2px; =
border: 1px solid rgb(136, 136, 136); transition:background 150ms; =
border-image: none; color: rgb(255, 255, 255) !important; line-height: =
1.3; font-size: 16px; font-weight: bold; display: inline-block; cursor: =
pointer; text-shadow: 1px 1px 1px rgba(0,0,0,0.2);
}
.gate .button:hover {
	background: rgb(202, 67, 38);
}
.gate .gray.button {
	background: rgb(170, 170, 170); border: 1px solid rgb(136, 136, 136); =
border-image: none;
}
.gate .gray.button:hover {
	background: rgb(119, 119, 119);
}

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://hazelcast.com/wp-content/themes/bright-2014/css/forms.css

body {
	margin: 0px; padding: 0px; color: rgb(102, 102, 102); line-height: 1.4; =
font-family: "Open Sans", helvetica, sans-serif; -webkit-font-smoothing: =
antialiased;
}
p {
	font-size: 16px;
}
a {
	transition:color 200ms; color: rgb(46, 125, 225); font-weight: bold; =
text-decoration: none;
}
.thank-you {
	background: rgb(255, 255, 197); padding: 15px 18px; display: block;
}
a:hover {
	color: rgb(39, 98, 174);
}
h3 {
	font-size: 20px; font-weight: bold; margin-bottom: 8px;
}
#pardot-form {
	font: 16px/120% Helvetica, sans-serif; margin: 0px; padding: 0px; =
color: rgb(102, 102, 102); font-size-adjust: none; font-stretch: normal;
}
#pardot-form p.required label {
	background: none; font-weight: normal;
}
#pardot-form span.required label {
	background: none; font-weight: normal;
}
form.form p.form-field {
	margin: 0px 0px 5px; padding: 0px;
}
form.form p.form-field label {
	width: 360px; color: rgb(102, 102, 102); line-height: 1.2; font-size: =
14px; margin-top: 8px; margin-bottom: 4px;
}
form.form p.form-field span.description {
	color: rgb(102, 102, 102); font-size: 14px; margin-top: 0px;
}
form.form p.form-field span.description a {
	color: rgb(46, 125, 225); text-decoration: none; border-bottom-color: =
rgb(46, 125, 225); border-bottom-width: 1px; border-bottom-style: =
dotted;
}
form.form p.form-field input.text {
	padding: 8px 10px; border: 1px solid rgb(204, 204, 204); border-image: =
none; width: 350px; color: rgb(102, 102, 102); font-size: 16px;
}
form.form p.form-field select {
	background: =
url("//hazelcast.org/wp-content/themes/pure-2014/images/select-bg.png") =
no-repeat right rgb(242, 242, 242); padding: 5px 10px; border-radius: =
2px; border: 1px solid rgb(204, 204, 204); border-image: none; width: =
370px; height: 34px; color: rgb(102, 102, 102); line-height: 25px; =
font-size: 16px; -webkit-appearance: none;
}
form.form p.form-field textarea.standard {
	padding: 8px 10px; border-radius: 0px; border: 1px solid rgb(204, 204, =
204); border-image: none; width: 350px; color: rgb(102, 102, 102); =
font-size: 16px; box-sizing: border-box; box-shadow: none; =
-webkit-appearance: none; -webkit-box-sizing: border-box;
}
#pardot-form p.no-label {
	font-size: 14px; margin-left: 0px;
}
#pardot-form p.submit {
	margin: 10px 15px 0px 0px; float: right;
}
#pardot-form p.submit input {
	background: rgb(46, 125, 225); margin: 0px; padding: 14px 35px; =
border-radius: 0px; border: currentColor; transition:background 150ms; =
border-image: none; color: rgb(255, 255, 255); font-size: 16px; cursor: =
pointer; -webkit-appearance: none;
}
#pardot-form p.submit input:hover {
	background: rgb(39, 98, 174);
}
#org #pardot-form p.submit input {
	background: rgb(255, 95, 0);
}
#online-book #pardot-form p.submit input {
	background: rgb(255, 95, 0);
}
#org #pardot-form p.submit input:hover {
	background: rgb(202, 67, 38);
}
#online-book #pardot-form p.submit input:hover {
	background: rgb(202, 67, 38);
}
#newsletter form.form {
	position: relative;
}
#newsletter form.form p.no-label {
	margin: 0px;
}
form.form p.email-pref {
	margin: 0px;
}
#newsletter form.form p.form-field {
	left: 0px; top: 0px; position: absolute;
}
#newsletter form.form p.form-field input.text {
	width: 250px;
}
#newsletter form.form p.error.form-field input.text {
	border: 1px solid red; border-image: none;
}
#newsletter form.form p.submit {
	margin: 0px; left: 280px; top: 3px; position: absolute;
}
#newsletter form.form p.submit input {
	padding: 8px 26px; border: currentColor; border-image: none; =
margin-top: -2px;
}
#newsletter form.form p.errors {
	display: none;
}
#newsletter form.form p.error {
	bottom: -65px; position: absolute;
}
#training-bundle form.form {
	position: relative;
}
#training-bundle form.form p.no-label {
	margin: 0px;
}
form.form p.email-pref {
	margin: 0px;
}
#training-bundle form.form p.form-field {
=09
}
#training-bundle form.form p.form-field input.text {
	width: 300px;
}
#training-bundle form.form p.error.form-field input.text {
	border: 1px solid red; border-image: none;
}
#training-bundle form.form p.submit {
	margin: 10px 0px 0px; float: left;
}
#training-bundle form.form p.submit input {
	background: rgb(255, 95, 0); padding: 9px 26px; border: currentColor; =
border-image: none; width: 322px; margin-top: -2px; -webkit-appearance: =
none;
}
#training-bundle form.form p.submit input:hover {
	background: rgb(202, 67, 38);
}
#training-bundle form.form p.errors {
	display: none;
}
#training-bundle form.form p.error {
	bottom: -65px; position: absolute;
}
#enterprise-trial form.form p.form-field label {
	width: 100%;
}
#enterprise-trial form.form p.form-field {
	margin-bottom: 10px;
}
#sidebar .form::before {
	display: table; content: "";
}
#sidebar .form::after {
	display: table; content: "";
}
#sidebar .form::after {
	clear: both;
}
#sidebar .form {
	-ms-zoom: 1;
}
#sidebar .formbox {
	background: rgb(242, 242, 242); padding: 8px 30px 30px;
}
#sidebar #pardot-form {
	width: 100%;
}
#sidebar #pardot-form p.pd-radio.required span label {
	background: none; padding-left: 5px;
}
#sidebar #pardot-form p.required label {
	background: none; font-weight: normal;
}
#sidebar #pardot-form span.required label {
	background: none; font-weight: normal;
}
#sidebar form.form p.form-field input.text {
	padding: 8px; border-radius: 0px; border: 1px solid rgb(204, 204, 204); =
border-image: none; width: 100%; font-size: 16px; box-sizing: =
border-box; -webkit-appearance: none; -webkit-box-sizing: border-box;
}
#sidebar form.form p.form-field input.text:hover {
	border: 1px solid rgb(170, 170, 170); border-image: none;
}
#sidebar form.form p.form-field input.text:focus {
	border: 1px solid rgb(46, 125, 225); border-image: none;
}
#sidebar form.form p.form-field select {
	width: 266px;
}
#sidebar form.form p.form-field textarea.standard {
	width: 240px;
}
#sidebar p.submit {
	margin-right: 0px;
}
#sidebar form.form p.form-field label {
	width: 100%; font-size: 14px;
}
#sidebar #pardot-form p.submit {
	text-align: center; margin-top: 15px; float: none;
}
#sidebar #pardot-form p.submit input {
	padding: 14px 35px; width: 100%; text-transform: uppercase; =
letter-spacing: 1px; font-size: 16px; font-weight: 600; =
-webkit-appearance: none;
}
#contact #pardot-form {
	width: 690px;
}
#contact form.form p.form-field input.text {
	width: 650px;
}
#contact form.form .left {
	width: 345px; clear: none; float: left;
}
#contact form.form p.left.form-field input.text {
	width: 305px;
}
#contact form.form p.form-field textarea.standard {
	width: 650px;
}
#contact form.form p.form-field label {
	width: 320px;
}
.placeholder {
	color: rgb(153, 153, 153);
}
#contact-responsive #pardot-form {
	width: 100%;
}
#contact-responsive form.form p.form-field input.text {
	border-radius: 0px; width: 100%; box-sizing: border-box; =
-webkit-appearance: none; -webkit-box-sizing: border-box;
}
#contact-responsive form.form div.left {
	width: 50%; clear: none; float: left;
}
#contact-responsive form.form p.first.left {
	margin-right: 10px;
}
#contact-responsive form.form p.left.form-field input.text {
	width: 100%;
}
#contact-responsive form.form p.form-field textarea.standard {
	width: 100%;
}
#contact-responsive form.form p.form-field input.text:hover {
	border: 1px solid rgb(170, 170, 170); border-image: none;
}
#contact-responsive form.form p.form-field textarea.standard:hover {
	border: 1px solid rgb(170, 170, 170); border-image: none;
}
#contact-responsive form.form p.form-field input.text:focus {
	border: 1px solid rgb(46, 125, 225); border-image: none;
}
#contact-responsive form.form p.form-field textarea.standard:focus {
	border: 1px solid rgb(46, 125, 225); border-image: none;
}
#contact-responsive form.form p.form-field label {
	max-width: 320px;
}
#contact-responsive p.submit {
	margin-right: 0px;
}
.placeholder {
	color: rgb(153, 153, 153);
}
@media all and (max-width:40em)
{
#contact-responsive form.form div.left {
	width: 100%; float: none;
}
#contact-responsive form.form p.first.left {
	margin-right: 0px;
}
}

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700,800

@font-face {
	font-family: Open Sans;
	src: local("Open Sans Light"), local("OpenSans-Light"), =
url(http://fonts.gstatic.com/s/opensans/v13/DXI1ORHCpsQm3Vp6mXoaTYnF5uFdD=
ttMLvmWuJdhhgs.ttf) format("truetype");
	font-weight: 300;
	font-style: normal;
}
@font-face {
	font-family: Open Sans;
	src: local("Open Sans"), local("OpenSans"), =
url(http://fonts.gstatic.com/s/opensans/v13/cJZKeOuBrn4kERxqtaUH3aCWcynf_=
cDxXwCLxiixG1c.ttf) format("truetype");
	font-weight: 400;
	font-style: normal;
}
@font-face {
	font-family: Open Sans;
	src: local("Open Sans Semibold"), local("OpenSans-Semibold"), =
url(http://fonts.gstatic.com/s/opensans/v13/MTP_ySUJH_bn48VBG8sNSonF5uFdD=
ttMLvmWuJdhhgs.ttf) format("truetype");
	font-weight: 600;
	font-style: normal;
}
@font-face {
	font-family: Open Sans;
	src: local("Open Sans Bold"), local("OpenSans-Bold"), =
url(http://fonts.gstatic.com/s/opensans/v13/k3k702ZOKiLJc3WVjuplzInF5uFdD=
ttMLvmWuJdhhgs.ttf) format("truetype");
	font-weight: 700;
	font-style: normal;
}
@font-face {
	font-family: Open Sans;
	src: local("Open Sans Extrabold"), local("OpenSans-Extrabold"), =
url(http://fonts.gstatic.com/s/opensans/v13/EInbV5DfGHOiMmvb1Xr-honF5uFdD=
ttMLvmWuJdhhgs.ttf) format("truetype");
	font-weight: 800;
	font-style: normal;
}

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www2.hazelcast.com/css/form.css?ver=20121030

form.form {
	font: 13px/120% Tahoma, Arial, Helvetica, Verdana, sans-serif; margin: =
0.5em 0px 1em; padding: 0.5em; color: rgb(102, 102, 102); =
font-size-adjust: none; font-stretch: normal;
}
* html form.form {
	padding-top: 0.1em;
}
form.form span.error {
	padding-left: 166px; clear: left; font-weight: bold; margin-top: 2px; =
display: block;
}
form.form span.value {
	margin-left: 153px; display: block;
}
form.form .value span {
	display: block;
}
form.form .no-label .value {
	margin-left: 0px;
}
form.form .no-label .description {
	margin-left: 0px;
}
form.form span.unsubscribe-value {
	display: block;
}
form.form sup {
	font-size: 1em; font-weight: normal; text-decoration: underline; =
cursor: pointer;
}
form.form p.required {
	font-weight: bold;
}
form.form span.required {
	font-weight: bold;
}
form.form label.required {
	font-weight: bold;
}
form.form p.required label {
	background: url("/images/required.gif") no-repeat right top;
}
form.form span.required label {
	background: url("/images/required.gif") no-repeat right top;
}
form.form p span {
	font-weight: normal;
}
form.form p span.description {
	clear: both; margin-left: 153px; display: block;
}
form.form p.email-pref span.description {
	font-size: 0.9em; margin-left: 5px; display: block;
}
form.form p {
	margin: 3px 5px; padding: 3px 2px; line-height: 1.4em; clear: left;
}
* html form.form p {
	margin-top: 0px;
}
form.form ul {
	line-height: 1.5em; margin-bottom: 1em;
}
form.form ol {
	line-height: 1.5em; margin-bottom: 1em;
}
form.form li {
	line-height: 1.5em;
}
form.form p.hidden {
	left: -999px; width: 190px; position: absolute;
}
form.form .hidden {
	left: -999px; width: 190px; position: absolute;
}
form.form p label.inline {
	background: 0px; padding: 0px; text-align: left; line-height: 2em; =
font-weight: normal; margin-right: 10px; vertical-align: baseline; =
float: none; display: inline;
}
form.form p label {
	margin: 0px; padding: 3px 13px 0px 0px; width: 140px; text-align: =
right; float: left; display: block;
}
* html form.form p label {
	margin-right: -0.2em;
}
form.form p.no-label {
	margin: 0.2em 0.5em 0.6em 160px; padding: 0px;
}
form.form p.email-pref {
	margin: 0.2em 0.5em 0.6em 160px; padding: 0px;
}
form.form p.submit {
	margin: 1em 0.5em 0.2em 160px; padding: 0px;
}
form.form p.inline {
	margin: 0px 0px 5px 160px; padding: 0px 0px 3px;
}
*:first-child + html form.form p.inline {
=09
}
form.form p.full-width {
	margin: 0px; padding: 0px; clear: none;
}
form.form p.full-width a {
	margin: 0px; padding: 0px; line-height: 16px; display: inline;
}
form.form p span.inline a {
	margin: 0px; padding: 0px; line-height: 16px; display: inline;
}
form.form p.submit input {
	margin: 0px 10px 0px 0px; padding: 2px 12px;
}
form.form select {
	font-weight: normal;
}
form.form select option {
	margin: 0px; padding: 0px 0.3em;
}
form.form textarea.standard {
	padding: 2px; width: 200px; height: 70px; overflow: auto; float: none;
}
form.form input {
	padding: 2px; font-weight: normal;
}
*:first-child + html form.form input {
	margin-right: 2px;
}
* html form.form input {
	padding-right: 0px;
}
form.form input.text {
	width: 200px;
}
form.form div.error {
	padding: 0px 0px 0.5em 170px; color: rgb(139, 0, 0);
}
form.form div.message {
	color: green;
}
form.form input.date {
	background: url("/images/calendar.png") no-repeat left; padding-left: =
20px;
}
.red-color {
	color: rgb(139, 0, 0);
}
form.form p.error {
	color: rgb(139, 0, 0);
}
form.form span.error {
	color: rgb(139, 0, 0);
}
form.form div.error {
	color: rgb(139, 0, 0);
}
form.form p.error label {
	color: rgb(139, 0, 0);
}
.red-background {
	background: rgb(139, 0, 0); color: rgb(255, 255, 255); padding-left: =
0.5em; margin-bottom: 1em;
}
form.form p.errors {
	background: rgb(139, 0, 0); color: rgb(255, 255, 255); padding-left: =
0.5em; margin-bottom: 1em;
}
.ui-helper-hidden {
	display: none;
}
.ui-helper-hidden-accessible {
	position: absolute !important; clip: rect(1px, 1px, 1px, 1px);
}
.ui-helper-reset {
	list-style: none; margin: 0px; padding: 0px; outline: 0px; border: 0px =
currentColor; border-image: none; line-height: 1.3; font-size: 100%; =
text-decoration: none;
}
.ui-helper-clearfix::before {
	display: table; content: "";
}
.ui-helper-clearfix::after {
	display: table; content: "";
}
.ui-helper-clearfix::after {
	clear: both;
}
.ui-helper-clearfix {
	-ms-zoom: 1;
}
.ui-helper-zfix {
	left: 0px; top: 0px; width: 100%; height: 100%; position: absolute; =
opacity: 0;
}
.ui-widget {
	font-family: Verdana,Arial,sans-serif; font-size: 13px;
}
.ui-widget .ui-widget {
	font-size: 1em;
}
.ui-widget input {
	font-family: Verdana,Arial,sans-serif; font-size: 1em;
}
.ui-widget select {
	font-family: Verdana,Arial,sans-serif; font-size: 1em;
}
.ui-widget textarea {
	font-family: Verdana,Arial,sans-serif; font-size: 1em;
}
.ui-widget button {
	font-family: Verdana,Arial,sans-serif; font-size: 1em;
}
.ui-widget-content {
	background: rgb(255, 255, 255); border: 1px solid rgb(170, 170, 170); =
border-image: none; color: rgb(34, 34, 34);
}
.ui-widget-content a {
	color: rgb(34, 34, 34);
}
.ui-widget-header {
	background: rgb(255, 255, 255); border: 1px solid rgb(170, 170, 170); =
border-image: none; color: rgb(34, 34, 34); font-weight: bold;
}
.ui-widget-header a {
	color: rgb(34, 34, 34);
}
.ui-state-default {
	background: rgb(230, 230, 230); border: 1px solid rgb(211, 211, 211); =
border-image: none; color: rgb(85, 85, 85); font-weight: normal;
}
.ui-widget-content .ui-state-default {
	background: rgb(230, 230, 230); border: 1px solid rgb(211, 211, 211); =
border-image: none; color: rgb(85, 85, 85); font-weight: normal;
}
.ui-widget-header .ui-state-default {
	background: rgb(230, 230, 230); border: 1px solid rgb(211, 211, 211); =
border-image: none; color: rgb(85, 85, 85); font-weight: normal;
}
.ui-state-default a {
	color: rgb(85, 85, 85); text-decoration: none;
}
.ui-state-default a:link {
	color: rgb(85, 85, 85); text-decoration: none;
}
.ui-state-default a:visited {
	color: rgb(85, 85, 85); text-decoration: none;
}
.ui-state-hover {
	background: rgb(218, 218, 218); border: 1px solid rgb(153, 153, 153); =
border-image: none; color: rgb(33, 33, 33); font-weight: normal;
}
.ui-widget-content .ui-state-hover {
	background: rgb(218, 218, 218); border: 1px solid rgb(153, 153, 153); =
border-image: none; color: rgb(33, 33, 33); font-weight: normal;
}
.ui-widget-header .ui-state-hover {
	background: rgb(218, 218, 218); border: 1px solid rgb(153, 153, 153); =
border-image: none; color: rgb(33, 33, 33); font-weight: normal;
}
.ui-state-focus {
	background: rgb(218, 218, 218); border: 1px solid rgb(153, 153, 153); =
border-image: none; color: rgb(33, 33, 33); font-weight: normal;
}
.ui-widget-content .ui-state-focus {
	background: rgb(218, 218, 218); border: 1px solid rgb(153, 153, 153); =
border-image: none; color: rgb(33, 33, 33); font-weight: normal;
}
.ui-widget-header .ui-state-focus {
	background: rgb(218, 218, 218); border: 1px solid rgb(153, 153, 153); =
border-image: none; color: rgb(33, 33, 33); font-weight: normal;
}
.ui-state-hover a {
	color: rgb(33, 33, 33); text-decoration: none;
}
.ui-state-hover a:hover {
	color: rgb(33, 33, 33); text-decoration: none;
}
.ui-state-active {
	background: rgb(255, 255, 255); border: 1px solid rgb(170, 170, 170); =
border-image: none; color: rgb(33, 33, 33); font-weight: normal;
}
.ui-widget-content .ui-state-active {
	background: rgb(255, 255, 255); border: 1px solid rgb(170, 170, 170); =
border-image: none; color: rgb(33, 33, 33); font-weight: normal;
}
.ui-widget-header .ui-state-active {
	background: rgb(255, 255, 255); border: 1px solid rgb(170, 170, 170); =
border-image: none; color: rgb(33, 33, 33); font-weight: normal;
}
.ui-state-active a {
	color: rgb(33, 33, 33); text-decoration: none;
}
.ui-state-active a:link {
	color: rgb(33, 33, 33); text-decoration: none;
}
.ui-state-active a:visited {
	color: rgb(33, 33, 33); text-decoration: none;
}
.ui-widget :active {
	outline: 0px;
}
.ui-state-disabled {
	cursor: default !important;
}
.ui-state-highlight {
	background: rgb(251, 249, 238); border: 1px solid rgb(252, 239, 161); =
border-image: none; color: rgb(54, 54, 54);
}
.ui-widget-content .ui-state-highlight {
	background: rgb(251, 249, 238); border: 1px solid rgb(252, 239, 161); =
border-image: none; color: rgb(54, 54, 54);
}
.ui-widget-header .ui-state-highlight {
	background: rgb(251, 249, 238); border: 1px solid rgb(252, 239, 161); =
border-image: none; color: rgb(54, 54, 54);
}
.ui-state-highlight a {
	color: rgb(54, 54, 54);
}
.ui-widget-content .ui-state-highlight a {
	color: rgb(54, 54, 54);
}
.ui-widget-header .ui-state-highlight a {
	color: rgb(54, 54, 54);
}
.ui-state-error {
	background: rgb(254, 241, 236); border: 1px solid rgb(205, 10, 10); =
border-image: none; color: rgb(205, 10, 10);
}
.ui-widget-content .ui-state-error {
	background: rgb(254, 241, 236); border: 1px solid rgb(205, 10, 10); =
border-image: none; color: rgb(205, 10, 10);
}
.ui-widget-header .ui-state-error {
	background: rgb(254, 241, 236); border: 1px solid rgb(205, 10, 10); =
border-image: none; color: rgb(205, 10, 10);
}
.ui-state-error a {
	color: rgb(205, 10, 10);
}
.ui-widget-content .ui-state-error a {
	color: rgb(205, 10, 10);
}
.ui-widget-header .ui-state-error a {
	color: rgb(205, 10, 10);
}
.ui-state-error-text {
	color: rgb(205, 10, 10);
}
.ui-widget-content .ui-state-error-text {
	color: rgb(205, 10, 10);
}
.ui-widget-header .ui-state-error-text {
	color: rgb(205, 10, 10);
}
.ui-priority-primary {
	font-weight: bold;
}
.ui-widget-content .ui-priority-primary {
	font-weight: bold;
}
.ui-widget-header .ui-priority-primary {
	font-weight: bold;
}
.ui-priority-secondary {
	font-weight: normal; opacity: 0.7;
}
.ui-widget-content .ui-priority-secondary {
	font-weight: normal; opacity: 0.7;
}
.ui-widget-header .ui-priority-secondary {
	font-weight: normal; opacity: 0.7;
}
.ui-state-disabled {
	opacity: 0.35; background-image: none;
}
.ui-widget-content .ui-state-disabled {
	opacity: 0.35; background-image: none;
}
.ui-widget-header .ui-state-disabled {
	opacity: 0.35; background-image: none;
}
.ui-icon {
	width: 16px; height: 16px; text-indent: -99999px; overflow: hidden; =
display: block; background-image: =
url("/images/ui-icons_222222_256x240.png"); background-repeat: =
no-repeat;
}
.ui-widget-content .ui-icon {
	background-image: url("/images/ui-icons_222222_256x240.png");
}
.ui-widget-header .ui-icon {
	background-image: url("/images/ui-icons_222222_256x240.png");
}
.ui-state-default .ui-icon {
	background-image: url("/images/ui-icons_888888_256x240.png");
}
.ui-state-hover .ui-icon {
	background-image: url("/images/ui-icons_454545_256x240.png");
}
.ui-state-focus .ui-icon {
	background-image: url("/images/ui-icons_454545_256x240.png");
}
.ui-state-active .ui-icon {
	background-image: url("/images/ui-icons_454545_256x240.png");
}
.ui-state-highlight .ui-icon {
	background-image: url("/images/ui-icons_2e83ff_256x240.png");
}
.ui-state-error .ui-icon {
	background-image: url("/images/ui-icons_cd0a0a_256x240.png");
}
.ui-state-error-text .ui-icon {
	background-image: url("/images/ui-icons_cd0a0a_256x240.png");
}
.ui-icon-circle-triangle-e {
	background-position: -48px -192px;
}
.ui-icon-circle-triangle-w {
	background-position: -80px -192px;
}
.ui-widget-overlay {
	background: rgb(170, 170, 170); left: 0px; top: 0px; width: 100%; =
height: 100%; position: absolute;
}
.ui-widget-shadow {
	background: url("images/ui-bg_flat_0_aaaaaa_40x100.png") repeat-x 50% =
50% rgb(170, 170, 170); margin: -8px 0px 0px -8px; padding: 8px; =
border-radius: 8px; opacity: 0.3; -moz-border-radius: 8px; =
-khtml-border-radius: 8px; -webkit-border-radius: 8px;
}
.ui-datepicker {
	padding: 0.2em 0.2em 0px; width: 17em; display: none;
}
.ui-datepicker .ui-datepicker-header {
	padding: 0.2em 0px; position: relative;
}
.ui-datepicker .ui-datepicker-prev {
	top: 2px; width: 1.8em; height: 1.8em; position: absolute;
}
.ui-datepicker .ui-datepicker-next {
	top: 2px; width: 1.8em; height: 1.8em; position: absolute;
}
.ui-datepicker .ui-datepicker-prev-hover {
	top: 1px;
}
.ui-datepicker .ui-datepicker-next-hover {
	top: 1px;
}
.ui-datepicker .ui-datepicker-prev {
	left: 2px;
}
.ui-datepicker .ui-datepicker-next {
	right: 2px;
}
.ui-datepicker .ui-datepicker-prev-hover {
	left: 1px;
}
.ui-datepicker .ui-datepicker-next-hover {
	right: 1px;
}
.ui-datepicker .ui-datepicker-prev span {
	left: 50%; top: 50%; margin-top: -8px; margin-left: -8px; display: =
block; position: absolute;
}
.ui-datepicker .ui-datepicker-next span {
	left: 50%; top: 50%; margin-top: -8px; margin-left: -8px; display: =
block; position: absolute;
}
.ui-datepicker .ui-datepicker-title {
	margin: 0px 2.3em; text-align: center; line-height: 1.8em;
}
.ui-datepicker .ui-datepicker-title select {
	margin: 1px 0px; font-size: 1em;
}
.ui-datepicker select.ui-datepicker-month-year {
	width: 100%;
}
.ui-datepicker select.ui-datepicker-month {
	width: 49%;
}
.ui-datepicker select.ui-datepicker-year {
	width: 49%;
}
.ui-datepicker table {
	margin: 0px 0px 0.4em; width: 100%; font-size: 0.9em; border-collapse: =
collapse;
}
.ui-datepicker th {
	padding: 0.7em 0.3em; border: 0px currentColor; border-image: none; =
text-align: center; font-weight: bold;
}
.ui-datepicker td {
	padding: 1px; border: 0px currentColor; border-image: none;
}
.ui-datepicker td span {
	padding: 0.2em; text-align: center; text-decoration: none; display: =
block;
}
.ui-datepicker td a {
	padding: 0.2em; text-align: center; text-decoration: none; display: =
block;
}
.ui-datepicker .ui-datepicker-buttonpane {
	margin: 0.7em 0px 0px; padding: 0px 0.2em; border-right-color: =
currentColor; border-bottom-color: currentColor; border-left-color: =
currentColor; border-right-width: 0px; border-bottom-width: 0px; =
border-left-width: 0px; border-right-style: none; border-bottom-style: =
none; border-left-style: none; background-image: none;
}
.ui-datepicker .ui-datepicker-buttonpane button {
	margin: 0.5em 0.2em 0.4em; padding: 0.2em 0.6em 0.3em; width: auto; =
overflow: visible; float: right; cursor: pointer;
}
.ui-datepicker .ui-datepicker-buttonpane button.ui-datepicker-current {
	float: left;
}
.ui-datepicker-multi.ui-datepicker {
	width: auto;
}
.ui-datepicker-multi .ui-datepicker-group {
	float: left;
}
.ui-datepicker-multi .ui-datepicker-group table {
	margin: 0px auto 0.4em; width: 95%;
}
.ui-datepicker-multi-2 .ui-datepicker-group {
	width: 50%;
}
.ui-datepicker-multi-3 .ui-datepicker-group {
	width: 33.3%;
}
.ui-datepicker-multi-4 .ui-datepicker-group {
	width: 25%;
}
.ui-datepicker-multi .ui-datepicker-group-last .ui-datepicker-header {
	border-left-width: 0px;
}
.ui-datepicker-multi .ui-datepicker-group-middle .ui-datepicker-header {
	border-left-width: 0px;
}
.ui-datepicker-multi .ui-datepicker-buttonpane {
	clear: left;
}
.ui-datepicker-row-break {
	width: 100%; clear: both; font-size: 0px;
}
.ui-datepicker-rtl {
	direction: rtl;
}
.ui-datepicker-rtl .ui-datepicker-prev {
	left: auto; right: 2px;
}
.ui-datepicker-rtl .ui-datepicker-next {
	left: 2px; right: auto;
}
.ui-datepicker-rtl .ui-datepicker-prev:hover {
	left: auto; right: 1px;
}
.ui-datepicker-rtl .ui-datepicker-next:hover {
	left: 1px; right: auto;
}
.ui-datepicker-rtl .ui-datepicker-buttonpane {
	clear: right;
}
.ui-datepicker-rtl .ui-datepicker-buttonpane button {
	float: left;
}
.ui-datepicker-rtl .ui-datepicker-buttonpane =
button.ui-datepicker-current {
	float: right;
}
.ui-datepicker-rtl .ui-datepicker-group {
	float: right;
}
.ui-datepicker-rtl .ui-datepicker-group-last .ui-datepicker-header {
	border-right-width: 0px; border-left-width: 1px;
}
.ui-datepicker-rtl .ui-datepicker-group-middle .ui-datepicker-header {
	border-right-width: 0px; border-left-width: 1px;
}
.ui-datepicker-cover {
	left: -4px; top: -4px; width: 200px; height: 200px; display: block; =
position: absolute; z-index: -1;
}
.dependentFieldSlave {
	display: none;
}

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.js

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3.org/TR/html4/loose.dtd">=0A=
<HTML><HEAD>=0A=
<META HTTP-EQUIV=3D"Content-Type" CONTENT=3D"text/html; =
charset=3Dgb2312"> =0A=
<TITLE>=B4=ED=CE=F3=A3=BA=C4=FA=CB=F9=C7=EB=C7=F3=B5=C4=CD=F8=D6=B7=A3=A8=
URL=A3=A9=CE=DE=B7=A8=BB=F1=C8=A1</TITLE>=0A=
<STYLE =
type=3D"text/css"><!--BODY{background-color:#ffffff;font-family:verdana,s=
ans-serif}PRE{font-family:sans-serif}--></STYLE>=0A=
</HEAD><BODY>=0A=
<H1>=B4=ED=CE=F3</H1>=0A=
<H2>=C4=FA=CB=F9=C7=EB=C7=F3=B5=C4=CD=F8=D6=B7=A3=A8URL=A3=A9=CE=DE=B7=A8=
=BB=F1=C8=A1</H2>=0A=
<HR noshade size=3D"1px">=0A=
<P>=0A=
=B5=B1=B3=A2=CA=D4=B6=C1=C8=A1=D2=D4=CF=C2=CD=F8=D6=B7=A3=A8URL=A3=A9=CA=B1=
=A3=BA=0A=
<A =
HREF=3D"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.js">http=
://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.js</A>=0A=
<P>=0A=
=B7=A2=C9=FA=C1=CB=CF=C2=C1=D0=B5=C4=B4=ED=CE=F3=A3=BA=0A=
<UL>=0A=
<LI>=0A=
<STRONG>=0A=
Connection Failed=0A=
<BR>=0A=
=C1=AC=BD=D3=CA=A7=B0=DC=0A=
</STRONG>=0A=
</UL>=0A=
=0A=
<P>=0A=
=CF=B5=CD=B3=B7=B5=BB=D8=D2=D4=CF=C2=C4=DA=C8=DD=A3=BA=0A=
<PRE><I>    (110) Connection timed out</I></PRE>=0A=
=0A=
<P>=0A=
The remote host or network may be down.  Please try the request again.=0A=
<BR>=0A=
=C4=FA=D2=AA=C1=AC=BD=E1=B5=C4=CD=F8=C2=E7=B7=FE=CE=F1=C6=F7=BB=F2=CD=F8=C2=
=E7=BF=C9=C4=DC=B7=A2=C9=FA=B9=CA=D5=CF=A1=A3=C7=EB=C9=D4=BA=F3=D4=D9=CA=D4=
=A1=A3=0A=
</P>=0A=
<P>=B1=BE=BB=BA=B4=E6=B7=FE=CE=F1=C6=F7=B9=DC=C0=ED=D4=B1=A3=BA<A =
HREF=3D"mailto:ProxyAdmin@zte.com.cn">ProxyAdmin@zte.com.cn</A>=0A=
=0A=
<BR clear=3D"all">=0A=
<HR noshade size=3D"1px">=0A=
<ADDRESS>=0A=
Generated Tue, 24 Nov 2015 05:31:11 GMT by ProxyNJ13 (squid/2.7.STABLE9)=0A=
</ADDRESS>=0A=
</BODY></HTML>=0A=

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://hazelcast.com/wp-content/themes/bright-2014/js/cookieHandler.js

// COOKIE HANDLER SCRIPT	=0A=
=0A=
function createCookie(name,value,days) {=0A=
	if (days) {=0A=
		var date =3D new Date();=0A=
		date.setTime(date.getTime()+(days*24*60*60*1000));=0A=
		var expires =3D "; expires=3D"+date.toGMTString();=0A=
	}=0A=
	else var expires =3D "";=0A=
	document.cookie =3D name+"=3D"+value+expires+"; =
domain=3D.hazelcast.com; path=3D/";=0A=
}=0A=
=0A=
function readCookie(name) {=0A=
	var nameEQ =3D name + "=3D";=0A=
	var ca =3D document.cookie.split(';');=0A=
	for(var i=3D0;i < ca.length;i++) {=0A=
		var c =3D ca[i];=0A=
		while (c.charAt(0)=3D=3D' ') c =3D c.substring(1,c.length);=0A=
		if (c.indexOf(nameEQ) =3D=3D 0) return =
c.substring(nameEQ.length,c.length);=0A=
	}=0A=
	return null;=0A=
}=0A=
=0A=
function eraseCookie(name) {=0A=
	createCookie(name,"",-1);=0A=
}=0A=

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://hazelcast.com/wp-content/themes/bright-2014/js/communityID-capture.js

$(document).ready(function(){  =0A=
	=0A=
	var cphID =3D readCookie('cphID_1');			=0A=
	if (cphID) {=0A=
		// If cookie exists, insert into value of hidden form field=0A=
		$(".CommunityPhoneHomeID input").val(cphID);=0A=
		//console.log("Community Phone Home field updated with value of: =
"+cphID);		=0A=
	} =0A=
=0A=
});  =0A=

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://form-cdn.pardot.com/js/piUtils.js?ver=20130530

/* jQuery v1.7.1 jquery.com | jquery.org/license */=0A=
(function(a,b){function cy(a){return =
f.isWindow(a)?a:a.nodeType=3D=3D=3D9?a.defaultView||a.parentWindow:!1}fun=
ction cv(a){if(!ck[a]){var =
b=3Dc.body,d=3Df("<"+a+">").appendTo(b),e=3Dd.css("display");d.remove();i=
f(e=3D=3D=3D"none"||e=3D=3D=3D""){cl||(cl=3Dc.createElement("iframe"),cl.=
frameBorder=3Dcl.width=3Dcl.height=3D0),b.appendChild(cl);if(!cm||!cl.cre=
ateElement){cm=3D(cl.contentWindow||cl.contentDocument).document,cm.write=
((c.compatMode=3D=3D=3D"CSS1Compat"?"<!doctype =
html>":"")+"<html><body>"),cm.close()}d=3Dcm.createElement(a),cm.body.app=
endChild(d),e=3Df.css(d,"display"),b.removeChild(cl)}ck[a]=3De}return =
ck[a]}function cu(a,b){var =
c=3D{};f.each(cq.concat.apply([],cq.slice(0,b)),function(){c[this]=3Da});=
return c}function ct(){cr=3Db}function cs(){setTimeout(ct,0);return =
cr=3Df.now()}function cj(){try{return new =
a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function ci(){try{return =
new a.XMLHttpRequest}catch(b){}}function =
cc(a,c){a.dataFilter&&(c=3Da.dataFilter(c,a.dataType));var =
d=3Da.dataTypes,e=3D{},g,h,i=3Dd.length,j,k=3Dd[0],l,m,n,o,p;for(g=3D1;g<=
i;g++){if(g=3D=3D=3D1){for(h in a.converters){typeof =
h=3D=3D"string"&&(e[h.toLowerCase()]=3Da.converters[h])}}l=3Dk,k=3Dd[g];i=
f(k=3D=3D=3D"*"){k=3Dl}else{if(l!=3D=3D"*"&&l!=3D=3Dk){m=3Dl+" =
"+k,n=3De[m]||e["* "+k];if(!n){p=3Db;for(o in e){j=3Do.split(" =
");if(j[0]=3D=3D=3Dl||j[0]=3D=3D=3D"*"){p=3De[j[1]+" =
"+k];if(p){o=3De[o],o=3D=3D=3D!0?n=3Dp:p=3D=3D=3D!0&&(n=3Do);break}}}}!n&=
&!p&&f.error("No conversion from "+m.replace(" "," to =
")),n!=3D=3D!0&&(c=3Dn?n(c):p(o(c)))}}}return c}function cb(a,c,d){var =
e=3Da.contents,f=3Da.dataTypes,g=3Da.responseFields,h,i,j,k;for(i in =
g){i in =
d&&(c[g[i]]=3Dd[i])}while(f[0]=3D=3D=3D"*"){f.shift(),h=3D=3D=3Db&&(h=3Da=
.mimeType||c.getResponseHeader("content-type"))}if(h){for(i in =
e){if(e[i]&&e[i].test(h)){f.unshift(i);break}}}if(f[0] in =
d){j=3Df[0]}else{for(i in d){if(!f[0]||a.converters[i+" =
"+f[0]]){j=3Di;break}k||(k=3Di)}j=3Dj||k}if(j){j!=3D=3Df[0]&&f.unshift(j)=
;return d[j]}}function =
ca(a,b,c,d){if(f.isArray(b)){f.each(b,function(b,e){c||bE.test(a)?d(a,e):=
ca(a+"["+(typeof =
e=3D=3D"object"||f.isArray(e)?b:"")+"]",e,c,d)})}else{if(!c&&b!=3Dnull&&t=
ypeof b=3D=3D"object"){for(var e in =
b){ca(a+"["+e+"]",b[e],c,d)}}else{d(a,b)}}}function b_(a,c){var =
d,e,g=3Df.ajaxSettings.flatOptions||{};for(d in =
c){c[d]!=3D=3Db&&((g[d]?a:e||(e=3D{}))[d]=3Dc[d])}e&&f.extend(!0,a,e)}fun=
ction b$(a,c,d,e,f,g){f=3Df||c.dataTypes[0],g=3Dg||{},g[f]=3D!0;var =
h=3Da[f],i=3D0,j=3Dh?h.length:0,k=3Da=3D=3D=3DbT,l;for(;i<j&&(k||!l);i++)=
{l=3Dh[i](c,d,e),typeof =
l=3D=3D"string"&&(!k||g[l]?l=3Db:(c.dataTypes.unshift(l),l=3Db$(a,c,d,e,l=
,g)))}(k||!l)&&!g["*"]&&(l=3Db$(a,c,d,e,"*",g));return l}function =
bZ(a){return function(b,c){typeof =
b!=3D"string"&&(c=3Db,b=3D"*");if(f.isFunction(c)){var =
d=3Db.toLowerCase().split(bP),e=3D0,g=3Dd.length,h,i,j;for(;e<g;e++){h=3D=
d[e],j=3D/^\+/.test(h),j&&(h=3Dh.substr(1)||"*"),i=3Da[h]=3Da[h]||[],i[j?=
"unshift":"push"](c)}}}}function bC(a,b,c){var =
d=3Db=3D=3D=3D"width"?a.offsetWidth:a.offsetHeight,e=3Db=3D=3D=3D"width"?=
bx:by,g=3D0,h=3De.length;if(d>0){if(c!=3D=3D"border"){for(;g<h;g++){c||(d=
-=3DparseFloat(f.css(a,"padding"+e[g]))||0),c=3D=3D=3D"margin"?d+=3Dparse=
Float(f.css(a,c+e[g]))||0:d-=3DparseFloat(f.css(a,"border"+e[g]+"Width"))=
||0}}return =
d+"px"}d=3Dbz(a,b,b);if(d<0||d=3D=3Dnull){d=3Da.style[b]||0}d=3DparseFloa=
t(d)||0;if(c){for(;g<h;g++){d+=3DparseFloat(f.css(a,"padding"+e[g]))||0,c=
!=3D=3D"padding"&&(d+=3DparseFloat(f.css(a,"border"+e[g]+"Width"))||0),c=3D=
=3D=3D"margin"&&(d+=3DparseFloat(f.css(a,c+e[g]))||0)}}return =
d+"px"}function =
bp(a,b){b.src?f.ajax({url:b.src,async:!1,dataType:"script"}):f.globalEval=
((b.text||b.textContent||b.innerHTML||"").replace(bf,"/*$0*/")),b.parentN=
ode&&b.parentNode.removeChild(b)}function bo(a){var =
b=3Dc.createElement("div");bh.appendChild(b),b.innerHTML=3Da.outerHTML;re=
turn b.firstChild}function bn(a){var =
b=3D(a.nodeName||"").toLowerCase();b=3D=3D=3D"input"?bm(a):b!=3D=3D"scrip=
t"&&typeof =
a.getElementsByTagName!=3D"undefined"&&f.grep(a.getElementsByTagName("inp=
ut"),bm)}function =
bm(a){if(a.type=3D=3D=3D"checkbox"||a.type=3D=3D=3D"radio"){a.defaultChec=
ked=3Da.checked}}function bl(a){return typeof =
a.getElementsByTagName!=3D"undefined"?a.getElementsByTagName("*"):typeof =
a.querySelectorAll!=3D"undefined"?a.querySelectorAll("*"):[]}function =
bk(a,b){var =
c;if(b.nodeType=3D=3D=3D1){b.clearAttributes&&b.clearAttributes(),b.merge=
Attributes&&b.mergeAttributes(a),c=3Db.nodeName.toLowerCase();if(c=3D=3D=3D=
"object"){b.outerHTML=3Da.outerHTML}else{if(c!=3D=3D"input"||a.type!=3D=3D=
"checkbox"&&a.type!=3D=3D"radio"){if(c=3D=3D=3D"option"){b.selected=3Da.d=
efaultSelected}else{if(c=3D=3D=3D"input"||c=3D=3D=3D"textarea"){b.default=
Value=3Da.defaultValue}}}else{a.checked&&(b.defaultChecked=3Db.checked=3D=
a.checked),b.value!=3D=3Da.value&&(b.value=3Da.value)}}b.removeAttribute(=
f.expando)}}function =
bj(a,b){if(b.nodeType=3D=3D=3D1&&!!f.hasData(a)){var =
c,d,e,g=3Df._data(a),h=3Df._data(b,g),i=3Dg.events;if(i){delete =
h.handle,h.events=3D{};for(c in =
i){for(d=3D0,e=3Di[c].length;d<e;d++){f.event.add(b,c+(i[c][d].namespace?=
".":"")+i[c][d].namespace,i[c][d],i[c][d].data)}}}h.data&&(h.data=3Df.ext=
end({},h.data))}}function bi(a,b){return =
f.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a=
.ownerDocument.createElement("tbody")):a}function U(a){var =
b=3DV.split("|"),c=3Da.createDocumentFragment();if(c.createElement){while=
(b.length){c.createElement(b.pop())}}return c}function =
T(a,b,c){b=3Db||0;if(f.isFunction(b)){return f.grep(a,function(a,d){var =
e=3D!!b.call(a,d,a);return e=3D=3D=3Dc})}if(b.nodeType){return =
f.grep(a,function(a,d){return a=3D=3D=3Db=3D=3D=3Dc})}if(typeof =
b=3D=3D"string"){var d=3Df.grep(a,function(a){return =
a.nodeType=3D=3D=3D1});if(O.test(b)){return =
f.filter(b,d,!c)}b=3Df.filter(b,d)}return f.grep(a,function(a,d){return =
f.inArray(a,b)>=3D0=3D=3D=3Dc})}function S(a){return =
!a||!a.parentNode||a.parentNode.nodeType=3D=3D=3D11}function K(){return =
!0}function J(){return !1}function n(a,b,c){var =
d=3Db+"defer",e=3Db+"queue",g=3Db+"mark",h=3Df._data(a,d);h&&(c=3D=3D=3D"=
queue"||!f._data(a,e))&&(c=3D=3D=3D"mark"||!f._data(a,g))&&setTimeout(fun=
ction(){!f._data(a,e)&&!f._data(a,g)&&(f.removeData(a,d,!0),h.fire())},0)=
}function m(a){for(var b in =
a){if(b=3D=3D=3D"data"&&f.isEmptyObject(a[b])){continue}if(b!=3D=3D"toJSO=
N"){return !1}}return !0}function =
l(a,c,d){if(d=3D=3D=3Db&&a.nodeType=3D=3D=3D1){var =
e=3D"data-"+c.replace(k,"-$1").toLowerCase();d=3Da.getAttribute(e);if(typ=
eof =
d=3D=3D"string"){try{d=3Dd=3D=3D=3D"true"?!0:d=3D=3D=3D"false"?!1:d=3D=3D=
=3D"null"?null:f.isNumeric(d)?parseFloat(d):j.test(d)?f.parseJSON(d):d}ca=
tch(g){}f.data(a,c,d)}else{d=3Db}}return d}function h(a){var =
b=3Dg[a]=3D{},c,d;a=3Da.split(/\s+/);for(c=3D0,d=3Da.length;c<d;c++){b[a[=
c]]=3D!0}return b}var =
c=3Da.document,d=3Da.navigator,e=3Da.location,f=3Dfunction(){function =
J(){if(!e.isReady){try{c.documentElement.doScroll("left")}catch(a){setTim=
eout(J,1);return}e.ready()}}var e=3Dfunction(a,b){return new =
e.fn.init(a,b,h)},f=3Da.jQuery,g=3Da.$,h,i=3D/^(?:[^#<]*(<[\w\W]+>)[^>]*$=
|#([\w\-]*)$)/,j=3D/\S/,k=3D/^\s+/,l=3D/\s+$/,m=3D/^<(\w+)\s*\/?>(?:<\/\1=
>)?$/,n=3D/^[\],:{}\s]*$/,o=3D/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,p=3D/=
"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,q=3D/(?=
:^|:|,)(?:\s*\[)+/g,r=3D/(webkit)[ =
\/]([\w.]+)/,s=3D/(opera)(?:.*version)?[ \/]([\w.]+)/,t=3D/(msie) =
([\w.]+)/,u=3D/(mozilla)(?:.*? =
rv:([\w.]+))?/,v=3D/-([a-z]|[0-9])/ig,w=3D/^-ms-/,x=3Dfunction(a,b){retur=
n(b+"").toUpperCase()},y=3Dd.userAgent,z,A,B,C=3DObject.prototype.toStrin=
g,D=3DObject.prototype.hasOwnProperty,E=3DArray.prototype.push,F=3DArray.=
prototype.slice,G=3DString.prototype.trim,H=3DArray.prototype.indexOf,I=3D=
{};e.fn=3De.prototype=3D{constructor:e,init:function(a,d,f){var =
g,h,j,k;if(!a){return =
this}if(a.nodeType){this.context=3Dthis[0]=3Da,this.length=3D1;return =
this}if(a=3D=3D=3D"body"&&!d&&c.body){this.context=3Dc,this[0]=3Dc.body,t=
his.selector=3Da,this.length=3D1;return this}if(typeof =
a=3D=3D"string"){a.charAt(0)!=3D=3D"<"||a.charAt(a.length-1)!=3D=3D">"||a=
.length<3?g=3Di.exec(a):g=3D[null,a,null];if(g&&(g[1]||!d)){if(g[1]){d=3D=
d instanceof =
e?d[0]:d,k=3Dd?d.ownerDocument||d:c,j=3Dm.exec(a),j?e.isPlainObject(d)?(a=
=3D[c.createElement(j[1])],e.fn.attr.call(a,d,!0)):a=3D[k.createElement(j=
[1])]:(j=3De.buildFragment([g[1]],[k]),a=3D(j.cacheable?e.clone(j.fragmen=
t):j.fragment).childNodes);return =
e.merge(this,a)}h=3Dc.getElementById(g[2]);if(h&&h.parentNode){if(h.id!=3D=
=3Dg[2]){return =
f.find(a)}this.length=3D1,this[0]=3Dh}this.context=3Dc,this.selector=3Da;=
return this}return =
!d||d.jquery?(d||f).find(a):this.constructor(d).find(a)}if(e.isFunction(a=
)){return =
f.ready(a)}a.selector!=3D=3Db&&(this.selector=3Da.selector,this.context=3D=
a.context);return =
e.makeArray(a,this)},selector:"",jquery:"1.7.1",length:0,size:function(){=
return this.length},toArray:function(){return =
F.call(this,0)},get:function(a){return =
a=3D=3Dnull?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:fun=
ction(a,b,c){var =
d=3Dthis.constructor();e.isArray(a)?E.apply(d,a):e.merge(d,a),d.prevObjec=
t=3Dthis,d.context=3Dthis.context,b=3D=3D=3D"find"?d.selector=3Dthis.sele=
ctor+(this.selector?" =
":"")+c:b&&(d.selector=3Dthis.selector+"."+b+"("+c+")");return =
d},each:function(a,b){return =
e.each(this,a,b)},ready:function(a){e.bindReady(),A.add(a);return =
this},eq:function(a){a=3D+a;return =
a=3D=3D=3D-1?this.slice(a):this.slice(a,a+1)},first:function(){return =
this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return =
this.pushStack(F.apply(this,arguments),"slice",F.call(arguments).join(","=
))},map:function(a){return =
this.pushStack(e.map(this,function(b,c){return =
a.call(b,c,b)}))},end:function(){return =
this.prevObject||this.constructor(null)},push:E,sort:[].sort,splice:[].sp=
lice},e.fn.init.prototype=3De.fn,e.extend=3De.fn.extend=3Dfunction(){var =
a,c,d,f,g,h,i=3Darguments[0]||{},j=3D1,k=3Darguments.length,l=3D!1;typeof=
 i=3D=3D"boolean"&&(l=3Di,i=3Darguments[1]||{},j=3D2),typeof =
i!=3D"object"&&!e.isFunction(i)&&(i=3D{}),k=3D=3D=3Dj&&(i=3Dthis,--j);for=
(;j<k;j++){if((a=3Darguments[j])!=3Dnull){for(c in =
a){d=3Di[c],f=3Da[c];if(i=3D=3D=3Df){continue}l&&f&&(e.isPlainObject(f)||=
(g=3De.isArray(f)))?(g?(g=3D!1,h=3Dd&&e.isArray(d)?d:[]):h=3Dd&&e.isPlain=
Object(d)?d:{},i[c]=3De.extend(l,h,f)):f!=3D=3Db&&(i[c]=3Df)}}}return =
i},e.extend({noConflict:function(b){a.$=3D=3D=3De&&(a.$=3Dg),b&&a.jQuery=3D=
=3D=3De&&(a.jQuery=3Df);return =
e},isReady:!1,readyWait:1,holdReady:function(a){a?e.readyWait++:e.ready(!=
0)},ready:function(a){if(a=3D=3D=3D!0&&!--e.readyWait||a!=3D=3D!0&&!e.isR=
eady){if(!c.body){return =
setTimeout(e.ready,1)}e.isReady=3D!0;if(a!=3D=3D!0&&--e.readyWait>0){retu=
rn}A.fireWith(c,[e]),e.fn.trigger&&e(c).trigger("ready").off("ready")}},b=
indReady:function(){if(!A){A=3De.Callbacks("once =
memory");if(c.readyState=3D=3D=3D"complete"){return =
setTimeout(e.ready,1)}if(c.addEventListener){c.addEventListener("DOMConte=
ntLoaded",B,!1),a.addEventListener("load",e.ready,!1)}else{if(c.attachEve=
nt){c.attachEvent("onreadystatechange",B),a.attachEvent("onload",e.ready)=
;var =
b=3D!1;try{b=3Da.frameElement=3D=3Dnull}catch(d){}c.documentElement.doScr=
oll&&b&&J()}}}},isFunction:function(a){return =
e.type(a)=3D=3D=3D"function"},isArray:Array.isArray||function(a){return =
e.type(a)=3D=3D=3D"array"},isWindow:function(a){return a&&typeof =
a=3D=3D"object"&&"setInterval" in a},isNumeric:function(a){return =
!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return =
a=3D=3Dnull?String(a):I[C.call(a)]||"object"},isPlainObject:function(a){i=
f(!a||e.type(a)!=3D=3D"object"||a.nodeType||e.isWindow(a)){return =
!1}try{if(a.constructor&&!D.call(a,"constructor")&&!D.call(a.constructor.=
prototype,"isPrototypeOf")){return !1}}catch(c){return !1}var d;for(d in =
a){}return d=3D=3D=3Db||D.call(a,d)},isEmptyObject:function(a){for(var b =
in a){return !1}return !0},error:function(a){throw new =
Error(a)},parseJSON:function(b){if(typeof b!=3D"string"||!b){return =
null}b=3De.trim(b);if(a.JSON&&a.JSON.parse){return =
a.JSON.parse(b)}if(n.test(b.replace(o,"@").replace(p,"]").replace(q,"")))=
{return(new Function("return "+b))()}e.error("Invalid JSON: =
"+b)},parseXML:function(c){var d,f;try{a.DOMParser?(f=3Dnew =
DOMParser,d=3Df.parseFromString(c,"text/xml")):(d=3Dnew =
ActiveXObject("Microsoft.XMLDOM"),d.async=3D"false",d.loadXML(c))}catch(g=
){d=3Db}(!d||!d.documentElement||d.getElementsByTagName("parsererror").le=
ngth)&&e.error("Invalid XML: "+c);return =
d},noop:function(){},globalEval:function(b){b&&j.test(b)&&(a.execScript||=
function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return =
a.replace(w,"ms-").replace(v,x)},nodeName:function(a,b){return =
a.nodeName&&a.nodeName.toUpperCase()=3D=3D=3Db.toUpperCase()},each:functi=
on(a,c,d){var =
f,g=3D0,h=3Da.length,i=3Dh=3D=3D=3Db||e.isFunction(a);if(d){if(i){for(f =
in =
a){if(c.apply(a[f],d)=3D=3D=3D!1){break}}}else{for(;g<h;){if(c.apply(a[g+=
+],d)=3D=3D=3D!1){break}}}}else{if(i){for(f in =
a){if(c.call(a[f],f,a[f])=3D=3D=3D!1){break}}}else{for(;g<h;){if(c.call(a=
[g],g,a[g++])=3D=3D=3D!1){break}}}}return a},trim:G?function(a){return =
a=3D=3Dnull?"":G.call(a)}:function(a){return =
a=3D=3Dnull?"":(a+"").replace(k,"").replace(l,"")},makeArray:function(a,b=
){var c=3Db||[];if(a!=3Dnull){var =
d=3De.type(a);a.length=3D=3Dnull||d=3D=3D=3D"string"||d=3D=3D=3D"function=
"||d=3D=3D=3D"regexp"||e.isWindow(a)?E.call(c,a):e.merge(c,a)}return =
c},inArray:function(a,b,c){var d;if(b){if(H){return =
H.call(b,a,c)}d=3Db.length,c=3Dc?c<0?Math.max(0,d+c):c:0;for(;c<d;c++){if=
(c in b&&b[c]=3D=3D=3Da){return c}}}return -1},merge:function(a,c){var =
d=3Da.length,e=3D0;if(typeof c.length=3D=3D"number"){for(var =
f=3Dc.length;e<f;e++){a[d++]=3Dc[e]}}else{while(c[e]!=3D=3Db){a[d++]=3Dc[=
e++]}}a.length=3Dd;return a},grep:function(a,b,c){var =
d=3D[],e;c=3D!!c;for(var =
f=3D0,g=3Da.length;f<g;f++){e=3D!!b(a[f],f),c!=3D=3De&&d.push(a[f])}retur=
n d},map:function(a,c,d){var f,g,h=3D[],i=3D0,j=3Da.length,k=3Da =
instanceof e||j!=3D=3Db&&typeof =
j=3D=3D"number"&&(j>0&&a[0]&&a[j-1]||j=3D=3D=3D0||e.isArray(a));if(k){for=
(;i<j;i++){f=3Dc(a[i],i,d),f!=3Dnull&&(h[h.length]=3Df)}}else{for(g in =
a){f=3Dc(a[g],g,d),f!=3Dnull&&(h[h.length]=3Df)}}return =
h.concat.apply([],h)},guid:1,proxy:function(a,c){if(typeof =
c=3D=3D"string"){var d=3Da[c];c=3Da,a=3Dd}if(!e.isFunction(a)){return =
b}var f=3DF.call(arguments,2),g=3Dfunction(){return =
a.apply(c,f.concat(F.call(arguments)))};g.guid=3Da.guid=3Da.guid||g.guid|=
|e.guid++;return g},access:function(a,c,d,f,g,h){var =
i=3Da.length;if(typeof c=3D=3D"object"){for(var j in =
c){e.access(a,j,c[j],f,g,d)}return =
a}if(d!=3D=3Db){f=3D!h&&f&&e.isFunction(d);for(var =
k=3D0;k<i;k++){g(a[k],c,f?d.call(a[k],k,g(a[k],c)):d,h)}return a}return =
i?g(a[0],c):b},now:function(){return(new =
Date).getTime()},uaMatch:function(a){a=3Da.toLowerCase();var =
b=3Dr.exec(a)||s.exec(a)||t.exec(a)||a.indexOf("compatible")<0&&u.exec(a)=
||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function =
a(b,c){return new =
a.fn.init(b,c)}e.extend(!0,a,this),a.superclass=3Dthis,a.fn=3Da.prototype=
=3Dthis(),a.fn.constructor=3Da,a.sub=3Dthis.sub,a.fn.init=3Dfunction(d,f)=
{f&&f instanceof e&&!(f instanceof a)&&(f=3Da(f));return =
e.fn.init.call(this,d,f,b)},a.fn.init.prototype=3Da.fn;var =
b=3Da(c);return a},browser:{}}),e.each("Boolean Number String Function =
Array Date RegExp Object".split(" "),function(a,b){I["[object =
"+b+"]"]=3Db.toLowerCase()}),z=3De.uaMatch(y),z.browser&&(e.browser[z.bro=
wser]=3D!0,e.browser.version=3Dz.version),e.browser.webkit&&(e.browser.sa=
fari=3D!0),j.test("=C2=A0")&&(k=3D/^[\s\xA0]+/,l=3D/[\s\xA0]+$/),h=3De(c)=
,c.addEventListener?B=3Dfunction(){c.removeEventListener("DOMContentLoade=
d",B,!1),e.ready()}:c.attachEvent&&(B=3Dfunction(){c.readyState=3D=3D=3D"=
complete"&&(c.detachEvent("onreadystatechange",B),e.ready())});return =
e}(),g=3D{};f.Callbacks=3Dfunction(a){a=3Da?g[a]||h(a):{};var =
c=3D[],d=3D[],e,i,j,k,l,m=3Dfunction(b){var =
d,e,g,h,i;for(d=3D0,e=3Db.length;d<e;d++){g=3Db[d],h=3Df.type(g),h=3D=3D=3D=
"array"?m(g):h=3D=3D=3D"function"&&(!a.unique||!o.has(g))&&c.push(g)}},n=3D=
function(b,f){f=3Df||[],e=3D!a.memory||[b,f],i=3D!0,l=3Dj||0,j=3D0,k=3Dc.=
length;for(;c&&l<k;l++){if(c[l].apply(b,f)=3D=3D=3D!1&&a.stopOnFalse){e=3D=
!0;break}}i=3D!1,c&&(a.once?e=3D=3D=3D!0?o.disable():c=3D[]:d&&d.length&&=
(e=3Dd.shift(),o.fireWith(e[0],e[1])))},o=3D{add:function(){if(c){var =
a=3Dc.length;m(arguments),i?k=3Dc.length:e&&e!=3D=3D!0&&(j=3Da,n(e[0],e[1=
]))}return this},remove:function(){if(c){var =
b=3Darguments,d=3D0,e=3Db.length;for(;d<e;d++){for(var =
f=3D0;f<c.length;f++){if(b[d]=3D=3D=3Dc[f]){i&&f<=3Dk&&(k--,f<=3Dl&&l--),=
c.splice(f--,1);if(a.unique){break}}}}}return =
this},has:function(a){if(c){var =
b=3D0,d=3Dc.length;for(;b<d;b++){if(a=3D=3D=3Dc[b]){return !0}}}return =
!1},empty:function(){c=3D[];return =
this},disable:function(){c=3Dd=3De=3Db;return =
this},disabled:function(){return =
!c},lock:function(){d=3Db,(!e||e=3D=3D=3D!0)&&o.disable();return =
this},locked:function(){return =
!d},fireWith:function(b,c){d&&(i?a.once||d.push([b,c]):(!a.once||!e)&&n(b=
,c));return this},fire:function(){o.fireWith(this,arguments);return =
this},fired:function(){return !!e}};return o};var =
i=3D[].slice;f.extend({Deferred:function(a){var b=3Df.Callbacks("once =
memory"),c=3Df.Callbacks("once =
memory"),d=3Df.Callbacks("memory"),e=3D"pending",g=3D{resolve:b,reject:c,=
notify:d},h=3D{done:b.add,fail:c.add,progress:d.add,state:function(){retu=
rn =
e},isResolved:b.fired,isRejected:c.fired,then:function(a,b,c){i.done(a).f=
ail(b).progress(c);return =
this},always:function(){i.done.apply(i,arguments).fail.apply(i,arguments)=
;return this},pipe:function(a,b,c){return =
f.Deferred(function(d){f.each({done:[a,"resolve"],fail:[b,"reject"],progr=
ess:[c,"notify"]},function(a,b){var =
c=3Db[0],e=3Db[1],g;f.isFunction(c)?i[a](function(){g=3Dc.apply(this,argu=
ments),g&&f.isFunction(g.promise)?g.promise().then(d.resolve,d.reject,d.n=
otify):d[e+"With"](this=3D=3D=3Di?d:this,[g])}):i[a](d[e])})}).promise()}=
,promise:function(a){if(a=3D=3Dnull){a=3Dh}else{for(var b in =
h){a[b]=3Dh[b]}}return a}},i=3Dh.promise({}),j;for(j in =
g){i[j]=3Dg[j].fire,i[j+"With"]=3Dg[j].fireWith}i.done(function(){e=3D"re=
solved"},c.disable,d.lock).fail(function(){e=3D"rejected"},b.disable,d.lo=
ck),a&&a.call(i,i);return i},when:function(a){function m(a){return =
function(b){e[a]=3Darguments.length>1?i.call(arguments,0):b,j.notifyWith(=
k,e)}}function l(a){return =
function(c){b[a]=3Darguments.length>1?i.call(arguments,0):c,--g||j.resolv=
eWith(j,b)}}var =
b=3Di.call(arguments,0),c=3D0,d=3Db.length,e=3DArray(d),g=3Dd,h=3Dd,j=3Dd=
<=3D1&&a&&f.isFunction(a.promise)?a:f.Deferred(),k=3Dj.promise();if(d>1){=
for(;c<d;c++){b[c]&&b[c].promise&&f.isFunction(b[c].promise)?b[c].promise=
().then(l(c),j.reject,m(c)):--g}g||j.resolveWith(j,b)}else{j!=3D=3Da&&j.r=
esolveWith(j,d?[a]:[])}return k}}),f.support=3Dfunction(){var =
b,d,e,g,h,i,j,k,l,m,n,o,p,q=3Dc.createElement("div"),r=3Dc.documentElemen=
t;q.setAttribute("className","t"),q.innerHTML=3D"   =
<link/><table></table><a href=3D'/a' =
style=3D'top:1px;float:left;opacity:.55;'>a</a><input =
type=3D'checkbox'/>",d=3Dq.getElementsByTagName("*"),e=3Dq.getElementsByT=
agName("a")[0];if(!d||!d.length||!e){return{}}g=3Dc.createElement("select=
"),h=3Dg.appendChild(c.createElement("option")),i=3Dq.getElementsByTagNam=
e("input")[0],b=3D{leadingWhitespace:q.firstChild.nodeType=3D=3D=3D3,tbod=
y:!q.getElementsByTagName("tbody").length,htmlSerialize:!!q.getElementsBy=
TagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNorm=
alized:e.getAttribute("href")=3D=3D=3D"/a",opacity:/^0.55/.test(e.style.o=
pacity),cssFloat:!!e.style.cssFloat,checkOn:i.value=3D=3D=3D"on",optSelec=
ted:h.selected,getSetAttribute:q.className!=3D=3D"t",enctype:!!c.createEl=
ement("form").enctype,html5Clone:c.createElement("nav").cloneNode(!0).out=
erHTML!=3D=3D"<:nav></:nav>",submitBubbles:!0,changeBubbles:!0,focusinBub=
bles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrink=
WrapBlocks:!1,reliableMarginRight:!0},i.checked=3D!0,b.noCloneChecked=3Di=
.cloneNode(!0).checked,g.disabled=3D!0,b.optDisabled=3D!h.disabled;try{de=
lete =
q.test}catch(s){b.deleteExpando=3D!1}!q.addEventListener&&q.attachEvent&&=
q.fireEvent&&(q.attachEvent("onclick",function(){b.noCloneEvent=3D!1}),q.=
cloneNode(!0).fireEvent("onclick")),i=3Dc.createElement("input"),i.value=3D=
"t",i.setAttribute("type","radio"),b.radioValue=3Di.value=3D=3D=3D"t",i.s=
etAttribute("checked","checked"),q.appendChild(i),k=3Dc.createDocumentFra=
gment(),k.appendChild(q.lastChild),b.checkClone=3Dk.cloneNode(!0).cloneNo=
de(!0).lastChild.checked,b.appendChecked=3Di.checked,k.removeChild(i),k.a=
ppendChild(q),q.innerHTML=3D"",a.getComputedStyle&&(j=3Dc.createElement("=
div"),j.style.width=3D"0",j.style.marginRight=3D"0",q.style.width=3D"2px"=
,q.appendChild(j),b.reliableMarginRight=3D(parseInt((a.getComputedStyle(j=
,null)||{marginRight:0}).marginRight,10)||0)=3D=3D=3D0);if(q.attachEvent)=
{for(o in {submit:1,change:1,focusin:1}){n=3D"on"+o,p=3Dn in =
q,p||(q.setAttribute(n,"return;"),p=3Dtypeof =
q[n]=3D=3D"function"),b[o+"Bubbles"]=3Dp}}k.removeChild(q),k=3Dg=3Dh=3Dj=3D=
q=3Di=3Dnull,f(function(){var =
a,d,e,g,h,i,j,k,m,n,o,r=3Dc.getElementsByTagName("body")[0];!r||(j=3D1,k=3D=
"position:absolute;top:0;left:0;width:1px;height:1px;margin:0;",m=3D"visi=
bility:hidden;border:0;",n=3D"style=3D'"+k+"border:5px solid =
#000;padding:0;'",o=3D"<div "+n+"><div></div></div><table "+n+" =
cellpadding=3D'0' =
cellspacing=3D'0'><tr><td></td></tr></table>",a=3Dc.createElement("div"),=
a.style.cssText=3Dm+"width:0;height:0;position:static;top:0;margin-top:"+=
j+"px",r.insertBefore(a,r.firstChild),q=3Dc.createElement("div"),a.append=
Child(q),q.innerHTML=3D"<table><tr><td =
style=3D'padding:0;border:0;display:none'></td><td>t</td></tr></table>",l=
=3Dq.getElementsByTagName("td"),p=3Dl[0].offsetHeight=3D=3D=3D0,l[0].styl=
e.display=3D"",l[1].style.display=3D"none",b.reliableHiddenOffsets=3Dp&&l=
[0].offsetHeight=3D=3D=3D0,q.innerHTML=3D"",q.style.width=3Dq.style.paddi=
ngLeft=3D"1px",f.boxModel=3Db.boxModel=3Dq.offsetWidth=3D=3D=3D2,typeof =
q.style.zoom!=3D"undefined"&&(q.style.display=3D"inline",q.style.zoom=3D1=
,b.inlineBlockNeedsLayout=3Dq.offsetWidth=3D=3D=3D2,q.style.display=3D"",=
q.innerHTML=3D"<div =
style=3D'width:4px;'></div>",b.shrinkWrapBlocks=3Dq.offsetWidth!=3D=3D2),=
q.style.cssText=3Dk+m,q.innerHTML=3Do,d=3Dq.firstChild,e=3Dd.firstChild,h=
=3Dd.nextSibling.firstChild.firstChild,i=3D{doesNotAddBorder:e.offsetTop!=
=3D=3D5,doesAddBorderForTableAndCells:h.offsetTop=3D=3D=3D5},e.style.posi=
tion=3D"fixed",e.style.top=3D"20px",i.fixedPosition=3De.offsetTop=3D=3D=3D=
20||e.offsetTop=3D=3D=3D15,e.style.position=3De.style.top=3D"",d.style.ov=
erflow=3D"hidden",d.style.position=3D"relative",i.subtractsBorderForOverf=
lowNotVisible=3De.offsetTop=3D=3D=3D-5,i.doesNotIncludeMarginInBodyOffset=
=3Dr.offsetTop!=3D=3Dj,r.removeChild(a),q=3Da=3Dnull,f.extend(b,i))});ret=
urn b}();var =
j=3D/^(?:\{.*\}|\[.*\])$/,k=3D/([A-Z])/g;f.extend({cache:{},uuid:0,expand=
o:"jQuery"+(f.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0=
,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:f=
unction(a){a=3Da.nodeType?f.cache[a[f.expando]]:a[f.expando];return =
!!a&&!m(a)},data:function(a,c,d,e){if(!!f.acceptData(a)){var =
g,h,i,j=3Df.expando,k=3Dtypeof =
c=3D=3D"string",l=3Da.nodeType,m=3Dl?f.cache:a,n=3Dl?a[j]:a[j]&&j,o=3Dc=3D=
=3D=3D"events";if((!n||!m[n]||!o&&!e&&!m[n].data)&&k&&d=3D=3D=3Db){return=
}n||(l?a[j]=3Dn=3D++f.uuid:n=3Dj),m[n]||(m[n]=3D{},l||(m[n].toJSON=3Df.no=
op));if(typeof c=3D=3D"object"||typeof =
c=3D=3D"function"){e?m[n]=3Df.extend(m[n],c):m[n].data=3Df.extend(m[n].da=
ta,c)}g=3Dh=3Dm[n],e||(h.data||(h.data=3D{}),h=3Dh.data),d!=3D=3Db&&(h[f.=
camelCase(c)]=3Dd);if(o&&!h[c]){return =
g.events}k?(i=3Dh[c],i=3D=3Dnull&&(i=3Dh[f.camelCase(c)])):i=3Dh;return =
i}},removeData:function(a,b,c){if(!!f.acceptData(a)){var =
d,e,g,h=3Df.expando,i=3Da.nodeType,j=3Di?f.cache:a,k=3Di?a[h]:h;if(!j[k])=
{return}if(b){d=3Dc?j[k]:j[k].data;if(d){f.isArray(b)||(b in =
d?b=3D[b]:(b=3Df.camelCase(b),b in d?b=3D[b]:b=3Db.split(" =
")));for(e=3D0,g=3Db.length;e<g;e++){delete =
d[b[e]]}if(!(c?m:f.isEmptyObject)(d)){return}}}if(!c){delete =
j[k].data;if(!m(j[k])){return}}f.support.deleteExpando||!j.setInterval?de=
lete j[k]:j[k]=3Dnull,i&&(f.support.deleteExpando?delete =
a[h]:a.removeAttribute?a.removeAttribute(h):a[h]=3Dnull)}},_data:function=
(a,b,c){return =
f.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var =
b=3Df.noData[a.nodeName.toLowerCase()];if(b){return =
b!=3D=3D!0&&a.getAttribute("classid")=3D=3D=3Db}}return =
!0}}),f.fn.extend({data:function(a,c){var d,e,g,h=3Dnull;if(typeof =
a=3D=3D"undefined"){if(this.length){h=3Df.data(this[0]);if(this[0].nodeTy=
pe=3D=3D=3D1&&!f._data(this[0],"parsedAttrs")){e=3Dthis[0].attributes;for=
(var =
i=3D0,j=3De.length;i<j;i++){g=3De[i].name,g.indexOf("data-")=3D=3D=3D0&&(=
g=3Df.camelCase(g.substring(5)),l(this[0],g,h[g]))}f._data(this[0],"parse=
dAttrs",!0)}}return h}if(typeof a=3D=3D"object"){return =
this.each(function(){f.data(this,a)})}d=3Da.split("."),d[1]=3Dd[1]?"."+d[=
1]:"";if(c=3D=3D=3Db){h=3Dthis.triggerHandler("getData"+d[1]+"!",[d[0]]),=
h=3D=3D=3Db&&this.length&&(h=3Df.data(this[0],a),h=3Dl(this[0],a,h));retu=
rn h=3D=3D=3Db&&d[1]?this.data(d[0]):h}return this.each(function(){var =
b=3Df(this),e=3D[d[0],c];b.triggerHandler("setData"+d[1]+"!",e),f.data(th=
is,a,c),b.triggerHandler("changeData"+d[1]+"!",e)})},removeData:function(=
a){return =
this.each(function(){f.removeData(this,a)})}}),f.extend({_mark:function(a=
,b){a&&(b=3D(b||"fx")+"mark",f._data(a,b,(f._data(a,b)||0)+1))},_unmark:f=
unction(a,b,c){a!=3D=3D!0&&(c=3Db,b=3Da,a=3D!1);if(b){c=3Dc||"fx";var =
d=3Dc+"mark",e=3Da?0:(f._data(b,d)||1)-1;e?f._data(b,d,e):(f.removeData(b=
,d,!0),n(b,c,"mark"))}},queue:function(a,b,c){var =
d;if(a){b=3D(b||"fx")+"queue",d=3Df._data(a,b),c&&(!d||f.isArray(c)?d=3Df=
._data(a,b,f.makeArray(c)):d.push(c));return =
d||[]}},dequeue:function(a,b){b=3Db||"fx";var =
c=3Df.queue(a,b),d=3Dc.shift(),e=3D{};d=3D=3D=3D"inprogress"&&(d=3Dc.shif=
t()),d&&(b=3D=3D=3D"fx"&&c.unshift("inprogress"),f._data(a,b+".run",e),d.=
call(a,function(){f.dequeue(a,b)},e)),c.length||(f.removeData(a,b+"queue =
"+b+".run",!0),n(a,b,"queue"))}}),f.fn.extend({queue:function(a,c){typeof=
 a!=3D"string"&&(c=3Da,a=3D"fx");if(c=3D=3D=3Db){return =
f.queue(this[0],a)}return this.each(function(){var =
b=3Df.queue(this,a,c);a=3D=3D=3D"fx"&&b[0]!=3D=3D"inprogress"&&f.dequeue(=
this,a)})},dequeue:function(a){return =
this.each(function(){f.dequeue(this,a)})},delay:function(a,b){a=3Df.fx?f.=
fx.speeds[a]||a:a,b=3Db||"fx";return this.queue(b,function(b,c){var =
d=3DsetTimeout(b,a);c.stop=3Dfunction(){clearTimeout(d)}})},clearQueue:fu=
nction(a){return this.queue(a||"fx",[])},promise:function(a,c){function =
m(){--h||d.resolveWith(e,[e])}typeof =
a!=3D"string"&&(c=3Da,a=3Db),a=3Da||"fx";var =
d=3Df.Deferred(),e=3Dthis,g=3De.length,h=3D1,i=3Da+"defer",j=3Da+"queue",=
k=3Da+"mark",l;while(g--){if(l=3Df.data(e[g],i,b,!0)||(f.data(e[g],j,b,!0=
)||f.data(e[g],k,b,!0))&&f.data(e[g],i,f.Callbacks("once =
memory"),!0)){h++,l.add(m)}}m();return d.promise()}});var =
o=3D/[\n\t\r]/g,p=3D/\s+/,q=3D/\r/g,r=3D/^(?:button|input)$/i,s=3D/^(?:bu=
tton|input|object|select|textarea)$/i,t=3D/^a(?:rea)?$/i,u=3D/^(?:autofoc=
us|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|op=
en|readonly|required|scoped|selected)$/i,v=3Df.support.getSetAttribute,w,=
x,y;f.fn.extend({attr:function(a,b){return =
f.access(this,a,b,!0,f.attr)},removeAttr:function(a){return =
this.each(function(){f.removeAttr(this,a)})},prop:function(a,b){return =
f.access(this,a,b,!0,f.prop)},removeProp:function(a){a=3Df.propFix[a]||a;=
return this.each(function(){try{this[a]=3Db,delete =
this[a]}catch(c){}})},addClass:function(a){var =
b,c,d,e,g,h,i;if(f.isFunction(a)){return =
this.each(function(b){f(this).addClass(a.call(this,b,this.className))})}i=
f(a&&typeof =
a=3D=3D"string"){b=3Da.split(p);for(c=3D0,d=3Dthis.length;c<d;c++){e=3Dth=
is[c];if(e.nodeType=3D=3D=3D1){if(!e.className&&b.length=3D=3D=3D1){e.cla=
ssName=3Da}else{g=3D" "+e.className+" =
";for(h=3D0,i=3Db.length;h<i;h++){~g.indexOf(" "+b[h]+" ")||(g+=3Db[h]+" =
")}e.className=3Df.trim(g)}}}}return this},removeClass:function(a){var =
c,d,e,g,h,i,j;if(f.isFunction(a)){return =
this.each(function(b){f(this).removeClass(a.call(this,b,this.className))}=
)}if(a&&typeof =
a=3D=3D"string"||a=3D=3D=3Db){c=3D(a||"").split(p);for(d=3D0,e=3Dthis.len=
gth;d<e;d++){g=3Dthis[d];if(g.nodeType=3D=3D=3D1&&g.className){if(a){h=3D=
(" "+g.className+" ").replace(o," =
");for(i=3D0,j=3Dc.length;i<j;i++){h=3Dh.replace(" "+c[i]+" "," =
")}g.className=3Df.trim(h)}else{g.className=3D""}}}}return =
this},toggleClass:function(a,b){var c=3Dtypeof a,d=3Dtypeof =
b=3D=3D"boolean";if(f.isFunction(a)){return =
this.each(function(c){f(this).toggleClass(a.call(this,c,this.className,b)=
,b)})}return this.each(function(){if(c=3D=3D=3D"string"){var =
e,g=3D0,h=3Df(this),i=3Db,j=3Da.split(p);while(e=3Dj[g++]){i=3Dd?i:!h.has=
Class(e),h[i?"addClass":"removeClass"](e)}}else{if(c=3D=3D=3D"undefined"|=
|c=3D=3D=3D"boolean"){this.className&&f._data(this,"__className__",this.c=
lassName),this.className=3Dthis.className||a=3D=3D=3D!1?"":f._data(this,"=
__className__")||""}}})},hasClass:function(a){var b=3D" "+a+" =
",c=3D0,d=3Dthis.length;for(;c<d;c++){if(this[c].nodeType=3D=3D=3D1&&(" =
"+this[c].className+" ").replace(o," ").indexOf(b)>-1){return !0}}return =
!1},val:function(a){var =
c,d,e,g=3Dthis[0];if(!!arguments.length){e=3Df.isFunction(a);return =
this.each(function(d){var =
g=3Df(this),h;if(this.nodeType=3D=3D=3D1){e?h=3Da.call(this,d,g.val()):h=3D=
a,h=3D=3Dnull?h=3D"":typeof =
h=3D=3D"number"?h+=3D"":f.isArray(h)&&(h=3Df.map(h,function(a){return =
a=3D=3Dnull?"":a+""})),c=3Df.valHooks[this.nodeName.toLowerCase()]||f.val=
Hooks[this.type];if(!c||!("set" in =
c)||c.set(this,h,"value")=3D=3D=3Db){this.value=3Dh}}})}if(g){c=3Df.valHo=
oks[g.nodeName.toLowerCase()]||f.valHooks[g.type];if(c&&"get" in =
c&&(d=3Dc.get(g,"value"))!=3D=3Db){return d}d=3Dg.value;return typeof =
d=3D=3D"string"?d.replace(q,""):d=3D=3Dnull?"":d}}}),f.extend({valHooks:{=
option:{get:function(a){var b=3Da.attributes.value;return =
!b||b.specified?a.value:a.text}},select:{get:function(a){var =
b,c,d,e,g=3Da.selectedIndex,h=3D[],i=3Da.options,j=3Da.type=3D=3D=3D"sele=
ct-one";if(g<0){return =
null}c=3Dj?g:0,d=3Dj?g+1:i.length;for(;c<d;c++){e=3Di[c];if(e.selected&&(=
f.support.optDisabled?!e.disabled:e.getAttribute("disabled")=3D=3D=3Dnull=
)&&(!e.parentNode.disabled||!f.nodeName(e.parentNode,"optgroup"))){b=3Df(=
e).val();if(j){return b}h.push(b)}}if(j&&!h.length&&i.length){return =
f(i[g]).val()}return h},set:function(a,b){var =
c=3Df.makeArray(b);f(a).find("option").each(function(){this.selected=3Df.=
inArray(f(this).val(),c)>=3D0}),c.length||(a.selectedIndex=3D-1);return =
c}}},attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,off=
set:!0},attr:function(a,c,d,e){var =
g,h,i,j=3Da.nodeType;if(!!a&&j!=3D=3D3&&j!=3D=3D8&&j!=3D=3D2){if(e&&c in =
f.attrFn){return f(a)[c](d)}if(typeof =
a.getAttribute=3D=3D"undefined"){return =
f.prop(a,c,d)}i=3Dj!=3D=3D1||!f.isXMLDoc(a),i&&(c=3Dc.toLowerCase(),h=3Df=
.attrHooks[c]||(u.test(c)?x:w));if(d!=3D=3Db){if(d=3D=3D=3Dnull){f.remove=
Attr(a,c);return}if(h&&"set" in h&&i&&(g=3Dh.set(a,d,c))!=3D=3Db){return =
g}a.setAttribute(c,""+d);return d}if(h&&"get" in =
h&&i&&(g=3Dh.get(a,c))!=3D=3Dnull){return g}g=3Da.getAttribute(c);return =
g=3D=3D=3Dnull?b:g}},removeAttr:function(a,b){var =
c,d,e,g,h=3D0;if(b&&a.nodeType=3D=3D=3D1){d=3Db.toLowerCase().split(p),g=3D=
d.length;for(;h<g;h++){e=3Dd[h],e&&(c=3Df.propFix[e]||e,f.attr(a,e,""),a.=
removeAttribute(v?e:c),u.test(e)&&c in =
a&&(a[c]=3D!1))}}},attrHooks:{type:{set:function(a,b){if(r.test(a.nodeNam=
e)&&a.parentNode){f.error("type property can't be =
changed")}else{if(!f.support.radioValue&&b=3D=3D=3D"radio"&&f.nodeName(a,=
"input")){var =
c=3Da.value;a.setAttribute("type",b),c&&(a.value=3Dc);return =
b}}}},value:{get:function(a,b){if(w&&f.nodeName(a,"button")){return =
w.get(a,b)}return b in =
a?a.value:null},set:function(a,b,c){if(w&&f.nodeName(a,"button")){return =
w.set(a,b,c)}a.value=3Db}}},propFix:{tabindex:"tabIndex",readonly:"readOn=
ly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing=
:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSp=
an",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEdi=
table"},prop:function(a,c,d){var =
e,g,h,i=3Da.nodeType;if(!!a&&i!=3D=3D3&&i!=3D=3D8&&i!=3D=3D2){h=3Di!=3D=3D=
1||!f.isXMLDoc(a),h&&(c=3Df.propFix[c]||c,g=3Df.propHooks[c]);return =
d!=3D=3Db?g&&"set" in g&&(e=3Dg.set(a,d,c))!=3D=3Db?e:a[c]=3Dd:g&&"get" =
in =
g&&(e=3Dg.get(a,c))!=3D=3Dnull?e:a[c]}},propHooks:{tabIndex:{get:function=
(a){var c=3Da.getAttributeNode("tabindex");return =
c&&c.specified?parseInt(c.value,10):s.test(a.nodeName)||t.test(a.nodeName=
)&&a.href?0:b}}}}),f.attrHooks.tabindex=3Df.propHooks.tabIndex,x=3D{get:f=
unction(a,c){var d,e=3Df.prop(a,c);return e=3D=3D=3D!0||typeof =
e!=3D"boolean"&&(d=3Da.getAttributeNode(c))&&d.nodeValue!=3D=3D!1?c.toLow=
erCase():b},set:function(a,b,c){var =
d;b=3D=3D=3D!1?f.removeAttr(a,c):(d=3Df.propFix[c]||c,d in =
a&&(a[d]=3D!0),a.setAttribute(c,c.toLowerCase()));return =
c}},v||(y=3D{name:!0,id:!0},w=3Df.valHooks.button=3D{get:function(a,c){va=
r d;d=3Da.getAttributeNode(c);return =
d&&(y[c]?d.nodeValue!=3D=3D"":d.specified)?d.nodeValue:b},set:function(a,=
b,d){var =
e=3Da.getAttributeNode(d);e||(e=3Dc.createAttribute(d),a.setAttributeNode=
(e));return =
e.nodeValue=3Db+""}},f.attrHooks.tabindex.set=3Dw.set,f.each(["width","he=
ight"],function(a,b){f.attrHooks[b]=3Df.extend(f.attrHooks[b],{set:functi=
on(a,c){if(c=3D=3D=3D""){a.setAttribute(b,"auto");return =
c}}})}),f.attrHooks.contenteditable=3D{get:w.get,set:function(a,b,c){b=3D=
=3D=3D""&&(b=3D"false"),w.set(a,b,c)}}),f.support.hrefNormalized||f.each(=
["href","src","width","height"],function(a,c){f.attrHooks[c]=3Df.extend(f=
.attrHooks[c],{get:function(a){var d=3Da.getAttribute(c,2);return =
d=3D=3D=3Dnull?b:d}})}),f.support.style||(f.attrHooks.style=3D{get:functi=
on(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return =
a.style.cssText=3D""+b}}),f.support.optSelected||(f.propHooks.selected=3D=
f.extend(f.propHooks.selected,{get:function(a){var =
b=3Da.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedI=
ndex);return =
null}})),f.support.enctype||(f.propFix.enctype=3D"encoding"),f.support.ch=
eckOn||f.each(["radio","checkbox"],function(){f.valHooks[this]=3D{get:fun=
ction(a){return =
a.getAttribute("value")=3D=3D=3Dnull?"on":a.value}}}),f.each(["radio","ch=
eckbox"],function(){f.valHooks[this]=3Df.extend(f.valHooks[this],{set:fun=
ction(a,b){if(f.isArray(b)){return =
a.checked=3Df.inArray(f(a).val(),b)>=3D0}}})});var =
z=3D/^(?:textarea|input|select)$/i,A=3D/^([^\.]*)?(?:\.(.+))?$/,B=3D/\bho=
ver(\.\S+)?\b/,C=3D/^key/,D=3D/^(?:mouse|contextmenu)|click/,E=3D/^(?:foc=
usinfocus|focusoutblur)$/,F=3D/^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,G=3D=
function(a){var =
b=3DF.exec(a);b&&(b[1]=3D(b[1]||"").toLowerCase(),b[3]=3Db[3]&&new =
RegExp("(?:^|\\s)"+b[3]+"(?:\\s|$)"));return b},H=3Dfunction(a,b){var =
c=3Da.attributes||{};return(!b[1]||a.nodeName.toLowerCase()=3D=3D=3Db[1])=
&&(!b[2]||(c.id||{}).value=3D=3D=3Db[2])&&(!b[3]||b[3].test((c["class"]||=
{}).value))},I=3Dfunction(a){return =
f.event.special.hover?a:a.replace(B,"mouseenter$1 =
mouseleave$1")};f.event=3D{add:function(a,c,d,e,g){var =
h,i,j,k,l,m,n,o,p,q,r,s;if(!(a.nodeType=3D=3D=3D3||a.nodeType=3D=3D=3D8||=
!c||!d||!(h=3Df._data(a)))){d.handler&&(p=3Dd,d=3Dp.handler),d.guid||(d.g=
uid=3Df.guid++),j=3Dh.events,j||(h.events=3Dj=3D{}),i=3Dh.handle,i||(h.ha=
ndle=3Di=3Dfunction(a){return typeof =
f!=3D"undefined"&&(!a||f.event.triggered!=3D=3Da.type)?f.event.dispatch.a=
pply(i.elem,arguments):b},i.elem=3Da),c=3Df.trim(I(c)).split(" =
");for(k=3D0;k<c.length;k++){l=3DA.exec(c[k])||[],m=3Dl[1],n=3D(l[2]||"")=
.split(".").sort(),s=3Df.event.special[m]||{},m=3D(g?s.delegateType:s.bin=
dType)||m,s=3Df.event.special[m]||{},o=3Df.extend({type:m,origType:l[1],d=
ata:e,handler:d,guid:d.guid,selector:g,quick:G(g),namespace:n.join(".")},=
p),r=3Dj[m];if(!r){r=3Dj[m]=3D[],r.delegateCount=3D0;if(!s.setup||s.setup=
.call(a,e,n,i)=3D=3D=3D!1){a.addEventListener?a.addEventListener(m,i,!1):=
a.attachEvent&&a.attachEvent("on"+m,i)}}s.add&&(s.add.call(a,o),o.handler=
.guid||(o.handler.guid=3Dd.guid)),g?r.splice(r.delegateCount++,0,o):r.pus=
h(o),f.event.global[m]=3D!0}a=3Dnull}},global:{},remove:function(a,b,c,d,=
e){var =
g=3Df.hasData(a)&&f._data(a),h,i,j,k,l,m,n,o,p,q,r,s;if(!!g&&!!(o=3Dg.eve=
nts)){b=3Df.trim(I(b||"")).split(" =
");for(h=3D0;h<b.length;h++){i=3DA.exec(b[h])||[],j=3Dk=3Di[1],l=3Di[2];i=
f(!j){for(j in =
o){f.event.remove(a,j+b[h],c,d,!0)}continue}p=3Df.event.special[j]||{},j=3D=
(d?p.delegateType:p.bindType)||j,r=3Do[j]||[],m=3Dr.length,l=3Dl?new =
RegExp("(^|\\.)"+l.split(".").sort().join("\\.(?:.*\\.)?")+"(\\.|$)"):nul=
l;for(n=3D0;n<r.length;n++){s=3Dr[n],(e||k=3D=3D=3Ds.origType)&&(!c||c.gu=
id=3D=3D=3Ds.guid)&&(!l||l.test(s.namespace))&&(!d||d=3D=3D=3Ds.selector|=
|d=3D=3D=3D"**"&&s.selector)&&(r.splice(n--,1),s.selector&&r.delegateCoun=
t--,p.remove&&p.remove.call(a,s))}r.length=3D=3D=3D0&&m!=3D=3Dr.length&&(=
(!p.teardown||p.teardown.call(a,l)=3D=3D=3D!1)&&f.removeEvent(a,j,g.handl=
e),delete =
o[j])}f.isEmptyObject(o)&&(q=3Dg.handle,q&&(q.elem=3Dnull),f.removeData(a=
,["events","handle"],!0))}},customEvent:{getData:!0,setData:!0,changeData=
:!0},trigger:function(c,d,e,g){if(!e||e.nodeType!=3D=3D3&&e.nodeType!=3D=3D=
8){var =
h=3Dc.type||c,i=3D[],j,k,l,m,n,o,p,q,r,s;if(E.test(h+f.event.triggered)){=
return}h.indexOf("!")>=3D0&&(h=3Dh.slice(0,-1),k=3D!0),h.indexOf(".")>=3D=
0&&(i=3Dh.split("."),h=3Di.shift(),i.sort());if((!e||f.event.customEvent[=
h])&&!f.event.global[h]){return}c=3Dtypeof =
c=3D=3D"object"?c[f.expando]?c:new f.Event(h,c):new =
f.Event(h),c.type=3Dh,c.isTrigger=3D!0,c.exclusive=3Dk,c.namespace=3Di.jo=
in("."),c.namespace_re=3Dc.namespace?new =
RegExp("(^|\\.)"+i.join("\\.(?:.*\\.)?")+"(\\.|$)"):null,o=3Dh.indexOf(":=
")<0?"on"+h:"";if(!e){j=3Df.cache;for(l in =
j){j[l].events&&j[l].events[h]&&f.event.trigger(c,d,j[l].handle.elem,!0)}=
return}c.result=3Db,c.target||(c.target=3De),d=3Dd!=3Dnull?f.makeArray(d)=
:[],d.unshift(c),p=3Df.event.special[h]||{};if(p.trigger&&p.trigger.apply=
(e,d)=3D=3D=3D!1){return}r=3D[[e,p.bindType||h]];if(!g&&!p.noBubble&&!f.i=
sWindow(e)){s=3Dp.delegateType||h,m=3DE.test(s+h)?e:e.parentNode,n=3Dnull=
;for(;m;m=3Dm.parentNode){r.push([m,s]),n=3Dm}n&&n=3D=3D=3De.ownerDocumen=
t&&r.push([n.defaultView||n.parentWindow||a,s])}for(l=3D0;l<r.length&&!c.=
isPropagationStopped();l++){m=3Dr[l][0],c.type=3Dr[l][1],q=3D(f._data(m,"=
events")||{})[c.type]&&f._data(m,"handle"),q&&q.apply(m,d),q=3Do&&m[o],q&=
&f.acceptData(m)&&q.apply(m,d)=3D=3D=3D!1&&c.preventDefault()}c.type=3Dh,=
!g&&!c.isDefaultPrevented()&&(!p._default||p._default.apply(e.ownerDocume=
nt,d)=3D=3D=3D!1)&&(h!=3D=3D"click"||!f.nodeName(e,"a"))&&f.acceptData(e)=
&&o&&e[h]&&(h!=3D=3D"focus"&&h!=3D=3D"blur"||c.target.offsetWidth!=3D=3D0=
)&&!f.isWindow(e)&&(n=3De[o],n&&(e[o]=3Dnull),f.event.triggered=3Dh,e[h](=
),f.event.triggered=3Db,n&&(e[o]=3Dn));return =
c.result}},dispatch:function(c){c=3Df.event.fix(c||a.event);var =
d=3D(f._data(this,"events")||{})[c.type]||[],e=3Dd.delegateCount,g=3D[].s=
lice.call(arguments,0),h=3D!c.exclusive&&!c.namespace,i=3D[],j,k,l,m,n,o,=
p,q,r,s,t;g[0]=3Dc,c.delegateTarget=3Dthis;if(e&&!c.target.disabled&&(!c.=
button||c.type!=3D=3D"click")){m=3Df(this),m.context=3Dthis.ownerDocument=
||this;for(l=3Dc.target;l!=3Dthis;l=3Dl.parentNode||this){o=3D{},q=3D[],m=
[0]=3Dl;for(j=3D0;j<e;j++){r=3Dd[j],s=3Dr.selector,o[s]=3D=3D=3Db&&(o[s]=3D=
r.quick?H(l,r.quick):m.is(s)),o[s]&&q.push(r)}q.length&&i.push({elem:l,ma=
tches:q})}}d.length>e&&i.push({elem:this,matches:d.slice(e)});for(j=3D0;j=
<i.length&&!c.isPropagationStopped();j++){p=3Di[j],c.currentTarget=3Dp.el=
em;for(k=3D0;k<p.matches.length&&!c.isImmediatePropagationStopped();k++){=
r=3Dp.matches[k];if(h||!c.namespace&&!r.namespace||c.namespace_re&&c.name=
space_re.test(r.namespace)){c.data=3Dr.data,c.handleObj=3Dr,n=3D((f.event=
.special[r.origType]||{}).handle||r.handler).apply(p.elem,g),n!=3D=3Db&&(=
c.result=3Dn,n=3D=3D=3D!1&&(c.preventDefault(),c.stopPropagation()))}}}re=
turn c.result},props:"attrChange attrName relatedNode srcElement altKey =
bubbles cancelable ctrlKey currentTarget eventPhase metaKey =
relatedTarget shiftKey target timeStamp view which".split(" =
"),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" =
"),filter:function(a,b){a.which=3D=3Dnull&&(a.which=3Db.charCode!=3Dnull?=
b.charCode:b.keyCode);return a}},mouseHooks:{props:"button buttons =
clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY =
toElement".split(" "),filter:function(a,d){var =
e,f,g,h=3Dd.button,i=3Dd.fromElement;a.pageX=3D=3Dnull&&d.clientX!=3Dnull=
&&(e=3Da.target.ownerDocument||c,f=3De.documentElement,g=3De.body,a.pageX=
=3Dd.clientX+(f&&f.scrollLeft||g&&g.scrollLeft||0)-(f&&f.clientLeft||g&&g=
.clientLeft||0),a.pageY=3Dd.clientY+(f&&f.scrollTop||g&&g.scrollTop||0)-(=
f&&f.clientTop||g&&g.clientTop||0)),!a.relatedTarget&&i&&(a.relatedTarget=
=3Di=3D=3D=3Da.target?d.toElement:i),!a.which&&h!=3D=3Db&&(a.which=3Dh&1?=
1:h&2?3:h&4?2:0);return a}},fix:function(a){if(a[f.expando]){return =
a}var =
d,e,g=3Da,h=3Df.event.fixHooks[a.type]||{},i=3Dh.props?this.props.concat(=
h.props):this.props;a=3Df.Event(g);for(d=3Di.length;d;){e=3Di[--d],a[e]=3D=
g[e]}a.target||(a.target=3Dg.srcElement||c),a.target.nodeType=3D=3D=3D3&&=
(a.target=3Da.target.parentNode),a.metaKey=3D=3D=3Db&&(a.metaKey=3Da.ctrl=
Key);return =
h.filter?h.filter(a,g):a},special:{ready:{setup:f.bindReady},load:{noBubb=
le:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},befo=
reunload:{setup:function(a,b,c){f.isWindow(this)&&(this.onbeforeunload=3D=
c)},teardown:function(a,b){this.onbeforeunload=3D=3D=3Db&&(this.onbeforeu=
nload=3Dnull)}}},simulate:function(a,b,c,d){var e=3Df.extend(new =
f.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?f.event.trigger(e,n=
ull,b):f.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefaul=
t()}},f.event.handle=3Df.event.dispatch,f.removeEvent=3Dc.removeEventList=
ener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)=
}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},f.Event=3Dfunct=
ion(a,b){if(!(this instanceof f.Event)){return new =
f.Event(a,b)}a&&a.type?(this.originalEvent=3Da,this.type=3Da.type,this.is=
DefaultPrevented=3Da.defaultPrevented||a.returnValue=3D=3D=3D!1||a.getPre=
ventDefault&&a.getPreventDefault()?K:J):this.type=3Da,b&&f.extend(this,b)=
,this.timeStamp=3Da&&a.timeStamp||f.now(),this[f.expando]=3D!0},f.Event.p=
rototype=3D{preventDefault:function(){this.isDefaultPrevented=3DK;var =
a=3Dthis.originalEvent;!a||(a.preventDefault?a.preventDefault():a.returnV=
alue=3D!1)},stopPropagation:function(){this.isPropagationStopped=3DK;var =
a=3Dthis.originalEvent;!a||(a.stopPropagation&&a.stopPropagation(),a.canc=
elBubble=3D!0)},stopImmediatePropagation:function(){this.isImmediatePropa=
gationStopped=3DK,this.stopPropagation()},isDefaultPrevented:J,isPropagat=
ionStopped:J,isImmediatePropagationStopped:J},f.each({mouseenter:"mouseov=
er",mouseleave:"mouseout"},function(a,b){f.event.special[a]=3D{delegateTy=
pe:b,bindType:b,handle:function(a){var =
c=3Dthis,d=3Da.relatedTarget,e=3Da.handleObj,g=3De.selector,h;if(!d||d!=3D=
=3Dc&&!f.contains(c,d)){a.type=3De.origType,h=3De.handler.apply(this,argu=
ments),a.type=3Db}return =
h}}}),f.support.submitBubbles||(f.event.special.submit=3D{setup:function(=
){if(f.nodeName(this,"form")){return !1}f.event.add(this,"click._submit =
keypress._submit",function(a){var =
c=3Da.target,d=3Df.nodeName(c,"input")||f.nodeName(c,"button")?c.form:b;d=
&&!d._submit_attached&&(f.event.add(d,"submit._submit",function(a){this.p=
arentNode&&!a.isTrigger&&f.event.simulate("submit",this.parentNode,a,!0)}=
),d._submit_attached=3D!0)})},teardown:function(){if(f.nodeName(this,"for=
m")){return =
!1}f.event.remove(this,"._submit")}}),f.support.changeBubbles||(f.event.s=
pecial.change=3D{setup:function(){if(z.test(this.nodeName)){if(this.type=3D=
=3D=3D"checkbox"||this.type=3D=3D=3D"radio"){f.event.add(this,"propertych=
ange._change",function(a){a.originalEvent.propertyName=3D=3D=3D"checked"&=
&(this._just_changed=3D!0)}),f.event.add(this,"click._change",function(a)=
{this._just_changed&&!a.isTrigger&&(this._just_changed=3D!1,f.event.simul=
ate("change",this,a,!0))})}return =
!1}f.event.add(this,"beforeactivate._change",function(a){var =
b=3Da.target;z.test(b.nodeName)&&!b._change_attached&&(f.event.add(b,"cha=
nge._change",function(a){this.parentNode&&!a.isSimulated&&!a.isTrigger&&f=
.event.simulate("change",this.parentNode,a,!0)}),b._change_attached=3D!0)=
})},handle:function(a){var =
b=3Da.target;if(this!=3D=3Db||a.isSimulated||a.isTrigger||b.type!=3D=3D"r=
adio"&&b.type!=3D=3D"checkbox"){return =
a.handleObj.handler.apply(this,arguments)}},teardown:function(){f.event.r=
emove(this,"._change");return =
z.test(this.nodeName)}}),f.support.focusinBubbles||f.each({focus:"focusin=
",blur:"focusout"},function(a,b){var =
d=3D0,e=3Dfunction(a){f.event.simulate(b,a.target,f.event.fix(a),!0)};f.e=
vent.special[b]=3D{setup:function(){d++=3D=3D=3D0&&c.addEventListener(a,e=
,!0)},teardown:function(){--d=3D=3D=3D0&&c.removeEventListener(a,e,!0)}}}=
),f.fn.extend({on:function(a,c,d,e,g){var h,i;if(typeof =
a=3D=3D"object"){typeof c!=3D"string"&&(d=3Dc,c=3Db);for(i in =
a){this.on(i,c,d,a[i],g)}return =
this}d=3D=3Dnull&&e=3D=3Dnull?(e=3Dc,d=3Dc=3Db):e=3D=3Dnull&&(typeof =
c=3D=3D"string"?(e=3Dd,d=3Db):(e=3Dd,d=3Dc,c=3Db));if(e=3D=3D=3D!1){e=3DJ=
}else{if(!e){return =
this}}g=3D=3D=3D1&&(h=3De,e=3Dfunction(a){f().off(a);return =
h.apply(this,arguments)},e.guid=3Dh.guid||(h.guid=3Df.guid++));return =
this.each(function(){f.event.add(this,a,e,d,c)})},one:function(a,b,c,d){r=
eturn =
this.on.call(this,a,b,c,d,1)},off:function(a,c,d){if(a&&a.preventDefault&=
&a.handleObj){var =
e=3Da.handleObj;f(a.delegateTarget).off(e.namespace?e.type+"."+e.namespac=
e:e.type,e.selector,e.handler);return this}if(typeof =
a=3D=3D"object"){for(var g in a){this.off(g,c,a[g])}return =
this}if(c=3D=3D=3D!1||typeof =
c=3D=3D"function"){d=3Dc,c=3Db}d=3D=3D=3D!1&&(d=3DJ);return =
this.each(function(){f.event.remove(this,a,d,c)})},bind:function(a,b,c){r=
eturn this.on(a,null,b,c)},unbind:function(a,b){return =
this.off(a,null,b)},live:function(a,b,c){f(this.context).on(a,this.select=
or,b,c);return =
this},die:function(a,b){f(this.context).off(a,this.selector||"**",b);retu=
rn this},delegate:function(a,b,c,d){return =
this.on(b,a,c,d)},undelegate:function(a,b,c){return =
arguments.length=3D=3D1?this.off(a,"**"):this.off(b,a,c)},trigger:functio=
n(a,b){return =
this.each(function(){f.event.trigger(a,b,this)})},triggerHandler:function=
(a,b){if(this[0]){return =
f.event.trigger(a,b,this[0],!0)}},toggle:function(a){var =
b=3Darguments,c=3Da.guid||f.guid++,d=3D0,e=3Dfunction(c){var =
e=3D(f._data(this,"lastToggle"+a.guid)||0)%d;f._data(this,"lastToggle"+a.=
guid,e+1),c.preventDefault();return =
b[e].apply(this,arguments)||!1};e.guid=3Dc;while(d<b.length){b[d++].guid=3D=
c}return this.click(e)},hover:function(a,b){return =
this.mouseenter(a).mouseleave(b||a)}}),f.each("blur focus focusin =
focusout load resize scroll unload click dblclick mousedown mouseup =
mousemove mouseover mouseout mouseenter mouseleave change select submit =
keydown keypress keyup error contextmenu".split(" =
"),function(a,b){f.fn[b]=3Dfunction(a,c){c=3D=3Dnull&&(c=3Da,a=3Dnull);re=
turn =
arguments.length>0?this.on(b,null,a,c):this.trigger(b)},f.attrFn&&(f.attr=
Fn[b]=3D!0),C.test(b)&&(f.event.fixHooks[b]=3Df.event.keyHooks),D.test(b)=
&&(f.event.fixHooks[b]=3Df.event.mouseHooks)}),function(){function =
x(a,b,c,e,f,g){for(var h=3D0,i=3De.length;h<i;h++){var =
j=3De[h];if(j){var =
k=3D!1;j=3Dj[a];while(j){if(j[d]=3D=3D=3Dc){k=3De[j.sizset];break}if(j.no=
deType=3D=3D=3D1){g||(j[d]=3Dc,j.sizset=3Dh);if(typeof =
b!=3D"string"){if(j=3D=3D=3Db){k=3D!0;break}}else{if(m.filter(b,[j]).leng=
th>0){k=3Dj;break}}}j=3Dj[a]}e[h]=3Dk}}}function w(a,b,c,e,f,g){for(var =
h=3D0,i=3De.length;h<i;h++){var j=3De[h];if(j){var =
k=3D!1;j=3Dj[a];while(j){if(j[d]=3D=3D=3Dc){k=3De[j.sizset];break}j.nodeT=
ype=3D=3D=3D1&&!g&&(j[d]=3Dc,j.sizset=3Dh);if(j.nodeName.toLowerCase()=3D=
=3D=3Db){k=3Dj;break}j=3Dj[a]}e[h]=3Dk}}}var =
a=3D/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[=
\]'"]+)+\]|\\.|[^ =
>+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,d=3D"sizcache"+(Math.rando=
m()+"").replace(".",""),e=3D0,g=3DObject.prototype.toString,h=3D!1,i=3D!0=
,j=3D/\\/g,k=3D/\r\n/g,l=3D/\W/;[0,0].sort(function(){i=3D!1;return =
0});var m=3Dfunction(b,d,e,f){e=3De||[],d=3Dd||c;var =
h=3Dd;if(d.nodeType!=3D=3D1&&d.nodeType!=3D=3D9){return[]}if(!b||typeof =
b!=3D"string"){return e}var =
i,j,k,l,n,q,r,t,u=3D!0,v=3Dm.isXML(d),w=3D[],x=3Db;do{a.exec(""),i=3Da.ex=
ec(x);if(i){x=3Di[3],w.push(i[1]);if(i[2]){l=3Di[3];break}}}while(i);if(w=
.length>1&&p.exec(b)){if(w.length=3D=3D=3D2&&o.relative[w[0]]){j=3Dy(w[0]=
+w[1],d,f)}else{j=3Do.relative[w[0]]?[d]:m(w.shift(),d);while(w.length){b=
=3Dw.shift(),o.relative[b]&&(b+=3Dw.shift()),j=3Dy(b,j,f)}}}else{!f&&w.le=
ngth>1&&d.nodeType=3D=3D=3D9&&!v&&o.match.ID.test(w[0])&&!o.match.ID.test=
(w[w.length-1])&&(n=3Dm.find(w.shift(),d,v),d=3Dn.expr?m.filter(n.expr,n.=
set)[0]:n.set[0]);if(d){n=3Df?{expr:w.pop(),set:s(f)}:m.find(w.pop(),w.le=
ngth=3D=3D=3D1&&(w[0]=3D=3D=3D"~"||w[0]=3D=3D=3D"+")&&d.parentNode?d.pare=
ntNode:d,v),j=3Dn.expr?m.filter(n.expr,n.set):n.set,w.length>0?k=3Ds(j):u=
=3D!1;while(w.length){q=3Dw.pop(),r=3Dq,o.relative[q]?r=3Dw.pop():q=3D"",=
r=3D=3Dnull&&(r=3Dd),o.relative[q](k,r,v)}}else{k=3Dw=3D[]}}k||(k=3Dj),k|=
|m.error(q||b);if(g.call(k)=3D=3D=3D"[object =
Array]"){if(!u){e.push.apply(e,k)}else{if(d&&d.nodeType=3D=3D=3D1){for(t=3D=
0;k[t]!=3Dnull;t++){k[t]&&(k[t]=3D=3D=3D!0||k[t].nodeType=3D=3D=3D1&&m.co=
ntains(d,k[t]))&&e.push(j[t])}}else{for(t=3D0;k[t]!=3Dnull;t++){k[t]&&k[t=
].nodeType=3D=3D=3D1&&e.push(j[t])}}}}else{s(k,e)}l&&(m(l,h,e,f),m.unique=
Sort(e));return =
e};m.uniqueSort=3Dfunction(a){if(u){h=3Di,a.sort(u);if(h){for(var =
b=3D1;b<a.length;b++){a[b]=3D=3D=3Da[b-1]&&a.splice(b--,1)}}}return =
a},m.matches=3Dfunction(a,b){return =
m(a,null,null,b)},m.matchesSelector=3Dfunction(a,b){return =
m(b,null,null,[a]).length>0},m.find=3Dfunction(a,b,c){var =
d,e,f,g,h,i;if(!a){return[]}for(e=3D0,f=3Do.order.length;e<f;e++){h=3Do.o=
rder[e];if(g=3Do.leftMatch[h].exec(a)){i=3Dg[1],g.splice(1,1);if(i.substr=
(i.length-1)!=3D=3D"\\"){g[1]=3D(g[1]||"").replace(j,""),d=3Do.find[h](g,=
b,c);if(d!=3Dnull){a=3Da.replace(o.match[h],"");break}}}}d||(d=3Dtypeof =
b.getElementsByTagName!=3D"undefined"?b.getElementsByTagName("*"):[]);ret=
urn{set:d,expr:a}},m.filter=3Dfunction(a,c,d,e){var =
f,g,h,i,j,k,l,n,p,q=3Da,r=3D[],s=3Dc,t=3Dc&&c[0]&&m.isXML(c[0]);while(a&&=
c.length){for(h in =
o.filter){if((f=3Do.leftMatch[h].exec(a))!=3Dnull&&f[2]){k=3Do.filter[h],=
l=3Df[1],g=3D!1,f.splice(1,1);if(l.substr(l.length-1)=3D=3D=3D"\\"){conti=
nue}s=3D=3D=3Dr&&(r=3D[]);if(o.preFilter[h]){f=3Do.preFilter[h](f,s,d,r,e=
,t);if(!f){g=3Di=3D!0}else{if(f=3D=3D=3D!0){continue}}}if(f){for(n=3D0;(j=
=3Ds[n])!=3Dnull;n++){j&&(i=3Dk(j,f,n,s),p=3De^i,d&&i!=3Dnull?p?g=3D!0:s[=
n]=3D!1:p&&(r.push(j),g=3D!0))}}if(i!=3D=3Db){d||(s=3Dr),a=3Da.replace(o.=
match[h],"");if(!g){return[]}break}}}if(a=3D=3D=3Dq){if(g=3D=3Dnull){m.er=
ror(a)}else{break}}q=3Da}return s},m.error=3Dfunction(a){throw new =
Error("Syntax error, unrecognized expression: "+a)};var =
n=3Dm.getText=3Dfunction(a){var =
b,c,d=3Da.nodeType,e=3D"";if(d){if(d=3D=3D=3D1||d=3D=3D=3D9){if(typeof =
a.textContent=3D=3D"string"){return a.textContent}if(typeof =
a.innerText=3D=3D"string"){return =
a.innerText.replace(k,"")}for(a=3Da.firstChild;a;a=3Da.nextSibling){e+=3D=
n(a)}}else{if(d=3D=3D=3D3||d=3D=3D=3D4){return =
a.nodeValue}}}else{for(b=3D0;c=3Da[b];b++){c.nodeType!=3D=3D8&&(e+=3Dn(c)=
)}}return =
e},o=3Dm.selectors=3D{order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0=
-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=3D=
['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFF=
FF\-]|\\.)+)\s*(?:(\S?=3D)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\=
\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth=
|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\=
-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\)=
)?(?=3D[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\=
([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","=
for":"htmlFor"},attrHandle:{href:function(a){return =
a.getAttribute("href")},type:function(a){return =
a.getAttribute("type")}},relative:{"+":function(a,b){var c=3Dtypeof =
b=3D=3D"string",d=3Dc&&!l.test(b),e=3Dc&&!d;d&&(b=3Db.toLowerCase());for(=
var =
f=3D0,g=3Da.length,h;f<g;f++){if(h=3Da[f]){while((h=3Dh.previousSibling)&=
&h.nodeType!=3D=3D1){}a[f]=3De||h&&h.nodeName.toLowerCase()=3D=3D=3Db?h||=
!1:h=3D=3D=3Db}}e&&m.filter(b,a,!0)},">":function(a,b){var c,d=3Dtypeof =
b=3D=3D"string",e=3D0,f=3Da.length;if(d&&!l.test(b)){b=3Db.toLowerCase();=
for(;e<f;e++){c=3Da[e];if(c){var =
g=3Dc.parentNode;a[e]=3Dg.nodeName.toLowerCase()=3D=3D=3Db?g:!1}}}else{fo=
r(;e<f;e++){c=3Da[e],c&&(a[e]=3Dd?c.parentNode:c.parentNode=3D=3D=3Db)}d&=
&m.filter(b,a,!0)}},"":function(a,b,c){var d,f=3De++,g=3Dx;typeof =
b=3D=3D"string"&&!l.test(b)&&(b=3Db.toLowerCase(),d=3Db,g=3Dw),g("parentN=
ode",b,f,a,d,c)},"~":function(a,b,c){var d,f=3De++,g=3Dx;typeof =
b=3D=3D"string"&&!l.test(b)&&(b=3Db.toLowerCase(),d=3Db,g=3Dw),g("previou=
sSibling",b,f,a,d,c)}},find:{ID:function(a,b,c){if(typeof =
b.getElementById!=3D"undefined"&&!c){var =
d=3Db.getElementById(a[1]);return =
d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof =
b.getElementsByName!=3D"undefined"){var =
c=3D[],d=3Db.getElementsByName(a[1]);for(var =
e=3D0,f=3Dd.length;e<f;e++){d[e].getAttribute("name")=3D=3D=3Da[1]&&c.pus=
h(d[e])}return c.length=3D=3D=3D0?null:c}},TAG:function(a,b){if(typeof =
b.getElementsByTagName!=3D"undefined"){return =
b.getElementsByTagName(a[1])}}},preFilter:{CLASS:function(a,b,c,d,e,f){a=3D=
" "+a[1].replace(j,"")+" ";if(f){return a}for(var =
g=3D0,h;(h=3Db[g])!=3Dnull;g++){h&&(e^(h.className&&(" "+h.className+" =
").replace(/[\t\n\r]/g," =
").indexOf(a)>=3D0)?c||d.push(h):c&&(b[g]=3D!1))}return =
!1},ID:function(a){return a[1].replace(j,"")},TAG:function(a,b){return =
a[1].replace(j,"").toLowerCase()},CHILD:function(a){if(a[1]=3D=3D=3D"nth"=
){a[2]||m.error(a[0]),a[2]=3Da[2].replace(/^\+|\s*/g,"");var =
b=3D/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]=3D=3D=3D"even"&&"2n"||a[2]=3D=3D=
=3D"odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=3Db[1]+(b[2]||=
1)-0,a[3]=3Db[3]-0}else{a[2]&&m.error(a[0])}a[0]=3De++;return =
a},ATTR:function(a,b,c,d,e,f){var =
g=3Da[1]=3Da[1].replace(j,"");!f&&o.attrMap[g]&&(a[1]=3Do.attrMap[g]),a[4=
]=3D(a[4]||a[5]||"").replace(j,""),a[2]=3D=3D=3D"~=3D"&&(a[4]=3D" =
"+a[4]+" ");return =
a},PSEUDO:function(b,c,d,e,f){if(b[1]=3D=3D=3D"not"){if((a.exec(b[3])||""=
).length>1||/^\w/.test(b[3])){b[3]=3Dm(b[3],null,null,c)}else{var =
g=3Dm.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return =
!1}}else{if(o.match.POS.test(b[0])||o.match.CHILD.test(b[0])){return =
!0}}return b},POS:function(a){a.unshift(!0);return =
a}},filters:{enabled:function(a){return =
a.disabled=3D=3D=3D!1&&a.type!=3D=3D"hidden"},disabled:function(a){return=
 a.disabled=3D=3D=3D!0},checked:function(a){return =
a.checked=3D=3D=3D!0},selected:function(a){a.parentNode&&a.parentNode.sel=
ectedIndex;return a.selected=3D=3D=3D!0},parent:function(a){return =
!!a.firstChild},empty:function(a){return =
!a.firstChild},has:function(a,b,c){return =
!!m(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},tex=
t:function(a){var b=3Da.getAttribute("type"),c=3Da.type;return =
a.nodeName.toLowerCase()=3D=3D=3D"input"&&"text"=3D=3D=3Dc&&(b=3D=3D=3Dc|=
|b=3D=3D=3Dnull)},radio:function(a){return =
a.nodeName.toLowerCase()=3D=3D=3D"input"&&"radio"=3D=3D=3Da.type},checkbo=
x:function(a){return =
a.nodeName.toLowerCase()=3D=3D=3D"input"&&"checkbox"=3D=3D=3Da.type},file=
:function(a){return =
a.nodeName.toLowerCase()=3D=3D=3D"input"&&"file"=3D=3D=3Da.type},password=
:function(a){return =
a.nodeName.toLowerCase()=3D=3D=3D"input"&&"password"=3D=3D=3Da.type},subm=
it:function(a){var =
b=3Da.nodeName.toLowerCase();return(b=3D=3D=3D"input"||b=3D=3D=3D"button"=
)&&"submit"=3D=3D=3Da.type},image:function(a){return =
a.nodeName.toLowerCase()=3D=3D=3D"input"&&"image"=3D=3D=3Da.type},reset:f=
unction(a){var =
b=3Da.nodeName.toLowerCase();return(b=3D=3D=3D"input"||b=3D=3D=3D"button"=
)&&"reset"=3D=3D=3Da.type},button:function(a){var =
b=3Da.nodeName.toLowerCase();return =
b=3D=3D=3D"input"&&"button"=3D=3D=3Da.type||b=3D=3D=3D"button"},input:fun=
ction(a){return/input|select|textarea|button/i.test(a.nodeName)},focus:fu=
nction(a){return =
a=3D=3D=3Da.ownerDocument.activeElement}},setFilters:{first:function(a,b)=
{return b=3D=3D=3D0},last:function(a,b,c,d){return =
b=3D=3D=3Dd.length-1},even:function(a,b){return =
b%2=3D=3D=3D0},odd:function(a,b){return =
b%2=3D=3D=3D1},lt:function(a,b,c){return =
b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return =
c[3]-0=3D=3D=3Db},eq:function(a,b,c){return =
c[3]-0=3D=3D=3Db}},filter:{PSEUDO:function(a,b,c,d){var =
e=3Db[1],f=3Do.filters[e];if(f){return =
f(a,c,b,d)}if(e=3D=3D=3D"contains"){return(a.textContent||a.innerText||n(=
[a])||"").indexOf(b[3])>=3D0}if(e=3D=3D=3D"not"){var g=3Db[3];for(var =
h=3D0,i=3Dg.length;h<i;h++){if(g[h]=3D=3D=3Da){return !1}}return =
!0}m.error(e)},CHILD:function(a,b){var =
c,e,f,g,h,i,j,k=3Db[1],l=3Da;switch(k){case"only":case"first":while(l=3Dl=
.previousSibling){if(l.nodeType=3D=3D=3D1){return =
!1}}if(k=3D=3D=3D"first"){return =
!0}l=3Da;case"last":while(l=3Dl.nextSibling){if(l.nodeType=3D=3D=3D1){ret=
urn !1}}return =
!0;case"nth":c=3Db[2],e=3Db[3];if(c=3D=3D=3D1&&e=3D=3D=3D0){return =
!0}f=3Db[0],g=3Da.parentNode;if(g&&(g[d]!=3D=3Df||!a.nodeIndex)){i=3D0;fo=
r(l=3Dg.firstChild;l;l=3Dl.nextSibling){l.nodeType=3D=3D=3D1&&(l.nodeInde=
x=3D++i)}g[d]=3Df}j=3Da.nodeIndex-e;return =
c=3D=3D=3D0?j=3D=3D=3D0:j%c=3D=3D=3D0&&j/c>=3D0}},ID:function(a,b){return=
 =
a.nodeType=3D=3D=3D1&&a.getAttribute("id")=3D=3D=3Db},TAG:function(a,b){r=
eturn =
b=3D=3D=3D"*"&&a.nodeType=3D=3D=3D1||!!a.nodeName&&a.nodeName.toLowerCase=
()=3D=3D=3Db},CLASS:function(a,b){return(" =
"+(a.className||a.getAttribute("class"))+" =
").indexOf(b)>-1},ATTR:function(a,b){var =
c=3Db[1],d=3Dm.attr?m.attr(a,c):o.attrHandle[c]?o.attrHandle[c](a):a[c]!=3D=
null?a[c]:a.getAttribute(c),e=3Dd+"",f=3Db[2],g=3Db[4];return =
d=3D=3Dnull?f=3D=3D=3D"!=3D":!f&&m.attr?d!=3Dnull:f=3D=3D=3D"=3D"?e=3D=3D=
=3Dg:f=3D=3D=3D"*=3D"?e.indexOf(g)>=3D0:f=3D=3D=3D"~=3D"?(" "+e+" =
").indexOf(g)>=3D0:g?f=3D=3D=3D"!=3D"?e!=3D=3Dg:f=3D=3D=3D"^=3D"?e.indexO=
f(g)=3D=3D=3D0:f=3D=3D=3D"$=3D"?e.substr(e.length-g.length)=3D=3D=3Dg:f=3D=
=3D=3D"|=3D"?e=3D=3D=3Dg||e.substr(0,g.length+1)=3D=3D=3Dg+"-":!1:e&&d!=3D=
=3D!1},POS:function(a,b,c,d){var =
e=3Db[2],f=3Do.setFilters[e];if(f){return =
f(a,c,b,d)}}}},p=3Do.match.POS,q=3Dfunction(a,b){return"\\"+(b-0+1)};for(=
var r in o.match){o.match[r]=3Dnew =
RegExp(o.match[r].source+/(?![^\[]*\])(?![^\(]*\))/.source),o.leftMatch[r=
]=3Dnew =
RegExp(/(^(?:.|\r|\n)*?)/.source+o.match[r].source.replace(/\\(\d+)/g,q))=
}var =
s=3Dfunction(a,b){a=3DArray.prototype.slice.call(a,0);if(b){b.push.apply(=
b,a);return b}return =
a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].node=
Type}catch(t){s=3Dfunction(a,b){var =
c=3D0,d=3Db||[];if(g.call(a)=3D=3D=3D"[object =
Array]"){Array.prototype.push.apply(d,a)}else{if(typeof =
a.length=3D=3D"number"){for(var =
e=3Da.length;c<e;c++){d.push(a[c])}}else{for(;a[c];c++){d.push(a[c])}}}re=
turn d}}var =
u,v;c.documentElement.compareDocumentPosition?u=3Dfunction(a,b){if(a=3D=3D=
=3Db){h=3D!0;return =
0}if(!a.compareDocumentPosition||!b.compareDocumentPosition){return =
a.compareDocumentPosition?-1:1}return =
a.compareDocumentPosition(b)&4?-1:1}:(u=3Dfunction(a,b){if(a=3D=3D=3Db){h=
=3D!0;return 0}if(a.sourceIndex&&b.sourceIndex){return =
a.sourceIndex-b.sourceIndex}var =
c,d,e=3D[],f=3D[],g=3Da.parentNode,i=3Db.parentNode,j=3Dg;if(g=3D=3D=3Di)=
{return v(a,b)}if(!g){return -1}if(!i){return =
1}while(j){e.unshift(j),j=3Dj.parentNode}j=3Di;while(j){f.unshift(j),j=3D=
j.parentNode}c=3De.length,d=3Df.length;for(var =
k=3D0;k<c&&k<d;k++){if(e[k]!=3D=3Df[k]){return v(e[k],f[k])}}return =
k=3D=3D=3Dc?v(a,f[k],-1):v(e[k],b,1)},v=3Dfunction(a,b,c){if(a=3D=3D=3Db)=
{return c}var d=3Da.nextSibling;while(d){if(d=3D=3D=3Db){return =
-1}d=3Dd.nextSibling}return 1}),function(){var =
a=3Dc.createElement("div"),d=3D"script"+(new =
Date).getTime(),e=3Dc.documentElement;a.innerHTML=3D"<a =
name=3D'"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(o.=
find.ID=3Dfunction(a,c,d){if(typeof =
c.getElementById!=3D"undefined"&&!d){var =
e=3Dc.getElementById(a[1]);return e?e.id=3D=3D=3Da[1]||typeof =
e.getAttributeNode!=3D"undefined"&&e.getAttributeNode("id").nodeValue=3D=3D=
=3Da[1]?[e]:b:[]}},o.filter.ID=3Dfunction(a,b){var c=3Dtypeof =
a.getAttributeNode!=3D"undefined"&&a.getAttributeNode("id");return =
a.nodeType=3D=3D=3D1&&c&&c.nodeValue=3D=3D=3Db}),e.removeChild(a),e=3Da=3D=
null}(),function(){var =
a=3Dc.createElement("div");a.appendChild(c.createComment("")),a.getElemen=
tsByTagName("*").length>0&&(o.find.TAG=3Dfunction(a,b){var =
c=3Db.getElementsByTagName(a[1]);if(a[1]=3D=3D=3D"*"){var d=3D[];for(var =
e=3D0;c[e];e++){c[e].nodeType=3D=3D=3D1&&d.push(c[e])}c=3Dd}return =
c}),a.innerHTML=3D"<a href=3D'#'></a>",a.firstChild&&typeof =
a.firstChild.getAttribute!=3D"undefined"&&a.firstChild.getAttribute("href=
")!=3D=3D"#"&&(o.attrHandle.href=3Dfunction(a){return =
a.getAttribute("href",2)}),a=3Dnull}(),c.querySelectorAll&&function(){var=
 a=3Dm,b=3Dc.createElement("div"),d=3D"__sizzle__";b.innerHTML=3D"<p =
class=3D'TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").=
length!=3D=3D0){m=3Dfunction(b,e,f,g){e=3De||c;if(!g&&!m.isXML(e)){var =
h=3D/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType=3D=3D=3D=
1||e.nodeType=3D=3D=3D9)){if(h[1]){return =
s(e.getElementsByTagName(b),f)}if(h[2]&&o.find.CLASS&&e.getElementsByClas=
sName){return =
s(e.getElementsByClassName(h[2]),f)}}if(e.nodeType=3D=3D=3D9){if(b=3D=3D=3D=
"body"&&e.body){return s([e.body],f)}if(h&&h[3]){var =
i=3De.getElementById(h[3]);if(!i||!i.parentNode){return =
s([],f)}if(i.id=3D=3D=3Dh[3]){return s([i],f)}}try{return =
s(e.querySelectorAll(b),f)}catch(j){}}else{if(e.nodeType=3D=3D=3D1&&e.nod=
eName.toLowerCase()!=3D=3D"object"){var =
k=3De,l=3De.getAttribute("id"),n=3Dl||d,p=3De.parentNode,q=3D/^\s*[+~]/.t=
est(b);l?n=3Dn.replace(/'/g,"\\$&"):e.setAttribute("id",n),q&&p&&(e=3De.p=
arentNode);try{if(!q||p){return s(e.querySelectorAll("[id=3D'"+n+"'] =
"+b),f)}}catch(r){}finally{l||k.removeAttribute("id")}}}}return =
a(b,e,f,g)};for(var e in a){m[e]=3Da[e]}b=3Dnull}}(),function(){var =
a=3Dc.documentElement,b=3Da.matchesSelector||a.mozMatchesSelector||a.webk=
itMatchesSelector||a.msMatchesSelector;if(b){var =
d=3D!b.call(c.createElement("div"),"div"),e=3D!1;try{b.call(c.documentEle=
ment,"[test!=3D'']:sizzle")}catch(f){e=3D!0}m.matchesSelector=3Dfunction(=
a,c){c=3Dc.replace(/\=3D\s*([^'"\]]*)\s*\]/g,"=3D'$1']");if(!m.isXML(a)){=
try{if(e||!o.match.PSEUDO.test(c)&&!/!=3D/.test(c)){var =
f=3Db.call(a,c);if(f||!d||a.document&&a.document.nodeType!=3D=3D11){retur=
n f}}}catch(g){}}return m(c,null,null,[a]).length>0}}}(),function(){var =
a=3Dc.createElement("div");a.innerHTML=3D"<div class=3D'test =
e'></div><div =
class=3D'test'></div>";if(!!a.getElementsByClassName&&a.getElementsByClas=
sName("e").length!=3D=3D0){a.lastChild.className=3D"e";if(a.getElementsBy=
ClassName("e").length=3D=3D=3D1){return}o.order.splice(1,0,"CLASS"),o.fin=
d.CLASS=3Dfunction(a,b,c){if(typeof =
b.getElementsByClassName!=3D"undefined"&&!c){return =
b.getElementsByClassName(a[1])}},a=3Dnull}}(),c.documentElement.contains?=
m.contains=3Dfunction(a,b){return =
a!=3D=3Db&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocume=
ntPosition?m.contains=3Dfunction(a,b){return =
!!(a.compareDocumentPosition(b)&16)}:m.contains=3Dfunction(){return =
!1},m.isXML=3Dfunction(a){var =
b=3D(a?a.ownerDocument||a:0).documentElement;return =
b?b.nodeName!=3D=3D"HTML":!1};var y=3Dfunction(a,b,c){var =
d,e=3D[],f=3D"",g=3Db.nodeType?[b]:b;while(d=3Do.match.PSEUDO.exec(a)){f+=
=3Dd[0],a=3Da.replace(o.match.PSEUDO,"")}a=3Do.relative[a]?a+"*":a;for(va=
r h=3D0,i=3Dg.length;h<i;h++){m(a,g[h],e,c)}return =
m.filter(f,e)};m.attr=3Df.attr,m.selectors.attrMap=3D{},f.find=3Dm,f.expr=
=3Dm.selectors,f.expr[":"]=3Df.expr.filters,f.unique=3Dm.uniqueSort,f.tex=
t=3Dm.getText,f.isXMLDoc=3Dm.isXML,f.contains=3Dm.contains}();var =
L=3D/Until$/,M=3D/^(?:parents|prevUntil|prevAll)/,N=3D/,/,O=3D/^.[^:#\[\.=
,]*$/,P=3DArray.prototype.slice,Q=3Df.expr.match.POS,R=3D{children:!0,con=
tents:!0,next:!0,prev:!0};f.fn.extend({find:function(a){var =
b=3Dthis,c,d;if(typeof a!=3D"string"){return =
f(a).filter(function(){for(c=3D0,d=3Db.length;c<d;c++){if(f.contains(b[c]=
,this)){return !0}}})}var =
e=3Dthis.pushStack("","find",a),g,h,i;for(c=3D0,d=3Dthis.length;c<d;c++){=
g=3De.length,f.find(a,this[c],e);if(c>0){for(h=3Dg;h<e.length;h++){for(i=3D=
0;i<g;i++){if(e[i]=3D=3D=3De[h]){e.splice(h--,1);break}}}}}return =
e},has:function(a){var b=3Df(a);return this.filter(function(){for(var =
a=3D0,c=3Db.length;a<c;a++){if(f.contains(this,b[a])){return =
!0}}})},not:function(a){return =
this.pushStack(T(this,a,!1),"not",a)},filter:function(a){return =
this.pushStack(T(this,a,!0),"filter",a)},is:function(a){return =
!!a&&(typeof =
a=3D=3D"string"?Q.test(a)?f(a,this.context).index(this[0])>=3D0:f.filter(=
a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var =
c=3D[],d,e,g=3Dthis[0];if(f.isArray(a)){var =
h=3D1;while(g&&g.ownerDocument&&g!=3D=3Db){for(d=3D0;d<a.length;d++){f(g)=
.is(a[d])&&c.push({selector:a[d],elem:g,level:h})}g=3Dg.parentNode,h++}re=
turn c}var i=3DQ.test(a)||typeof =
a!=3D"string"?f(a,b||this.context):0;for(d=3D0,e=3Dthis.length;d<e;d++){g=
=3Dthis[d];while(g){if(i?i.index(g)>-1:f.find.matchesSelector(g,a)){c.pus=
h(g);break}g=3Dg.parentNode;if(!g||!g.ownerDocument||g=3D=3D=3Db||g.nodeT=
ype=3D=3D=3D11){break}}}c=3Dc.length>1?f.unique(c):c;return =
this.pushStack(c,"closest",a)},index:function(a){if(!a){return =
this[0]&&this[0].parentNode?this.prevAll().length:-1}if(typeof =
a=3D=3D"string"){return f.inArray(this[0],f(a))}return =
f.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=3Dtypeof =
a=3D=3D"string"?f(a,b):f.makeArray(a&&a.nodeType?[a]:a),d=3Df.merge(this.=
get(),c);return =
this.pushStack(S(c[0])||S(d[0])?d:f.unique(d))},andSelf:function(){return=
 this.add(this.prevObject)}}),f.each({parent:function(a){var =
b=3Da.parentNode;return =
b&&b.nodeType!=3D=3D11?b:null},parents:function(a){return =
f.dir(a,"parentNode")},parentsUntil:function(a,b,c){return =
f.dir(a,"parentNode",c)},next:function(a){return =
f.nth(a,2,"nextSibling")},prev:function(a){return =
f.nth(a,2,"previousSibling")},nextAll:function(a){return =
f.dir(a,"nextSibling")},prevAll:function(a){return =
f.dir(a,"previousSibling")},nextUntil:function(a,b,c){return =
f.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return =
f.dir(a,"previousSibling",c)},siblings:function(a){return =
f.sibling(a.parentNode.firstChild,a)},children:function(a){return =
f.sibling(a.firstChild)},contents:function(a){return =
f.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:f.make=
Array(a.childNodes)}},function(a,b){f.fn[a]=3Dfunction(c,d){var =
e=3Df.map(this,b,c);L.test(a)||(d=3Dc),d&&typeof =
d=3D=3D"string"&&(e=3Df.filter(d,e)),e=3Dthis.length>1&&!R[a]?f.unique(e)=
:e,(this.length>1||N.test(d))&&M.test(a)&&(e=3De.reverse());return =
this.pushStack(e,a,P.call(arguments).join(","))}}),f.extend({filter:funct=
ion(a,b,c){c&&(a=3D":not("+a+")");return =
b.length=3D=3D=3D1?f.find.matchesSelector(b[0],a)?[b[0]]:[]:f.find.matche=
s(a,b)},dir:function(a,c,d){var =
e=3D[],g=3Da[c];while(g&&g.nodeType!=3D=3D9&&(d=3D=3D=3Db||g.nodeType!=3D=
=3D1||!f(g).is(d))){g.nodeType=3D=3D=3D1&&e.push(g),g=3Dg[c]}return =
e},nth:function(a,b,c,d){b=3Db||1;var =
e=3D0;for(;a;a=3Da[c]){if(a.nodeType=3D=3D=3D1&&++e=3D=3D=3Db){break}}ret=
urn a},sibling:function(a,b){var =
c=3D[];for(;a;a=3Da.nextSibling){a.nodeType=3D=3D=3D1&&a!=3D=3Db&&c.push(=
a)}return c}});var =
V=3D"abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|f=
ooter|header|hgroup|mark|meter|nav|output|progress|section|summary|time|v=
ideo",W=3D/ =
jQuery\d+=3D"(?:\d+|null)"/g,X=3D/^\s+/,Y=3D/<(?!area|br|col|embed|hr|img=
|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,Z=3D/<([\w:]+)/,$=3D/<tbody/=
i,_=3D/<|&#?\w+;/,ba=3D/<(?:script|style)/i,bb=3D/<(?:script|object|embed=
|option|style)/i,bc=3Dnew =
RegExp("<(?:"+V+")","i"),bd=3D/checked\s*(?:[^=3D]|=3D\s*.checked.)/i,be=3D=
/\/(java|ecma)script/i,bf=3D/^\s*<!(?:\[CDATA\[|\-\-)/,bg=3D{option:[1,"<=
select =
multiple=3D'multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"=
],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>=
"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tb=
ody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],=
_default:[0,"",""]},bh=3DU(c);bg.optgroup=3Dbg.option,bg.tbody=3Dbg.tfoot=
=3Dbg.colgroup=3Dbg.caption=3Dbg.thead,bg.th=3Dbg.td,f.support.htmlSerial=
ize||(bg._default=3D[1,"div<div>","</div>"]),f.fn.extend({text:function(a=
){if(f.isFunction(a)){return this.each(function(b){var =
c=3Df(this);c.text(a.call(this,b,c.text()))})}if(typeof =
a!=3D"object"&&a!=3D=3Db){return =
this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a)=
)}return f.text(this)},wrapAll:function(a){if(f.isFunction(a)){return =
this.each(function(b){f(this).wrapAll(a.call(this,b))})}if(this[0]){var =
b=3Df(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.inse=
rtBefore(this[0]),b.map(function(){var =
a=3Dthis;while(a.firstChild&&a.firstChild.nodeType=3D=3D=3D1){a=3Da.first=
Child}return a}).append(this)}return =
this},wrapInner:function(a){if(f.isFunction(a)){return =
this.each(function(b){f(this).wrapInner(a.call(this,b))})}return =
this.each(function(){var =
b=3Df(this),c=3Db.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:fu=
nction(a){var b=3Df.isFunction(a);return =
this.each(function(c){f(this).wrapAll(b?a.call(this,c):a)})},unwrap:funct=
ion(){return =
this.parent().each(function(){f.nodeName(this,"body")||f(this).replaceWit=
h(this.childNodes)}).end()},append:function(){return =
this.domManip(arguments,!0,function(a){this.nodeType=3D=3D=3D1&&this.appe=
ndChild(a)})},prepend:function(){return =
this.domManip(arguments,!0,function(a){this.nodeType=3D=3D=3D1&&this.inse=
rtBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].pare=
ntNode){return =
this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,thi=
s)})}if(arguments.length){var =
a=3Df.clean(arguments);a.push.apply(a,this.toArray());return =
this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[=
0].parentNode){return =
this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,thi=
s.nextSibling)})}if(arguments.length){var =
a=3Dthis.pushStack(this,"after",arguments);a.push.apply(a,f.clean(argumen=
ts));return a}},remove:function(a,b){for(var =
c=3D0,d;(d=3Dthis[c])!=3Dnull;c++){if(!a||f.filter(a,[d]).length){!b&&d.n=
odeType=3D=3D=3D1&&(f.cleanData(d.getElementsByTagName("*")),f.cleanData(=
[d])),d.parentNode&&d.parentNode.removeChild(d)}}return =
this},empty:function(){for(var =
a=3D0,b;(b=3Dthis[a])!=3Dnull;a++){b.nodeType=3D=3D=3D1&&f.cleanData(b.ge=
tElementsByTagName("*"));while(b.firstChild){b.removeChild(b.firstChild)}=
}return =
this},clone:function(a,b){a=3Da=3D=3Dnull?!1:a,b=3Db=3D=3Dnull?a:b;return=
 this.map(function(){return =
f.clone(this,a,b)})},html:function(a){if(a=3D=3D=3Db){return =
this[0]&&this[0].nodeType=3D=3D=3D1?this[0].innerHTML.replace(W,""):null}=
if(typeof =
a=3D=3D"string"&&!ba.test(a)&&(f.support.leadingWhitespace||!X.test(a))&&=
!bg[(Z.exec(a)||["",""])[1].toLowerCase()]){a=3Da.replace(Y,"<$1></$2>");=
try{for(var =
c=3D0,d=3Dthis.length;c<d;c++){this[c].nodeType=3D=3D=3D1&&(f.cleanData(t=
his[c].getElementsByTagName("*")),this[c].innerHTML=3Da)}}catch(e){this.e=
mpty().append(a)}}else{f.isFunction(a)?this.each(function(b){var =
c=3Df(this);c.html(a.call(this,b,c.html()))}):this.empty().append(a)}retu=
rn =
this},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(f.isFunc=
tion(a)){return this.each(function(b){var =
c=3Df(this),d=3Dc.html();c.replaceWith(a.call(this,b,d))})}typeof =
a!=3D"string"&&(a=3Df(a).detach());return this.each(function(){var =
b=3Dthis.nextSibling,c=3Dthis.parentNode;f(this).remove(),b?f(b).before(a=
):f(c).append(a)})}return =
this.length?this.pushStack(f(f.isFunction(a)?a():a),"replaceWith",a):this=
},detach:function(a){return =
this.remove(a,!0)},domManip:function(a,c,d){var =
e,g,h,i,j=3Da[0],k=3D[];if(!f.support.checkClone&&arguments.length=3D=3D=3D=
3&&typeof j=3D=3D"string"&&bd.test(j)){return =
this.each(function(){f(this).domManip(a,c,d,!0)})}if(f.isFunction(j)){ret=
urn this.each(function(e){var =
g=3Df(this);a[0]=3Dj.call(this,e,c?g.html():b),g.domManip(a,c,d)})}if(thi=
s[0]){i=3Dj&&j.parentNode,f.support.parentNode&&i&&i.nodeType=3D=3D=3D11&=
&i.childNodes.length=3D=3D=3Dthis.length?e=3D{fragment:i}:e=3Df.buildFrag=
ment(a,this,k),h=3De.fragment,h.childNodes.length=3D=3D=3D1?g=3Dh=3Dh.fir=
stChild:g=3Dh.firstChild;if(g){c=3Dc&&f.nodeName(g,"tr");for(var =
l=3D0,m=3Dthis.length,n=3Dm-1;l<m;l++){d.call(c?bi(this[l],g):this[l],e.c=
acheable||m>1&&l<n?f.clone(h,!0,!0):h)}}k.length&&f.each(k,bp)}return =
this}}),f.buildFragment=3Dfunction(a,b,d){var =
e,g,h,i,j=3Da[0];b&&b[0]&&(i=3Db[0].ownerDocument||b[0]),i.createDocument=
Fragment||(i=3Dc),a.length=3D=3D=3D1&&typeof =
j=3D=3D"string"&&j.length<512&&i=3D=3D=3Dc&&j.charAt(0)=3D=3D=3D"<"&&!bb.=
test(j)&&(f.support.checkClone||!bd.test(j))&&(f.support.html5Clone||!bc.=
test(j))&&(g=3D!0,h=3Df.fragments[j],h&&h!=3D=3D1&&(e=3Dh)),e||(e=3Di.cre=
ateDocumentFragment(),f.clean(a,i,e,d)),g&&(f.fragments[j]=3Dh?e:1);retur=
n{fragment:e,cacheable:g}},f.fragments=3D{},f.each({appendTo:"append",pre=
pendTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"re=
placeWith"},function(a,b){f.fn[a]=3Dfunction(c){var =
d=3D[],e=3Df(c),g=3Dthis.length=3D=3D=3D1&&this[0].parentNode;if(g&&g.nod=
eType=3D=3D=3D11&&g.childNodes.length=3D=3D=3D1&&e.length=3D=3D=3D1){e[b]=
(this[0]);return this}for(var h=3D0,i=3De.length;h<i;h++){var =
j=3D(h>0?this.clone(!0):this).get();f(e[h])[b](j),d=3Dd.concat(j)}return =
this.pushStack(d,a,e.selector)}}),f.extend({clone:function(a,b,c){var =
d,e,g,h=3Df.support.html5Clone||!bc.test("<"+a.nodeName)?a.cloneNode(!0):=
bo(a);if((!f.support.noCloneEvent||!f.support.noCloneChecked)&&(a.nodeTyp=
e=3D=3D=3D1||a.nodeType=3D=3D=3D11)&&!f.isXMLDoc(a)){bk(a,h),d=3Dbl(a),e=3D=
bl(h);for(g=3D0;d[g];++g){e[g]&&bk(d[g],e[g])}}if(b){bj(a,h);if(c){d=3Dbl=
(a),e=3Dbl(h);for(g=3D0;d[g];++g){bj(d[g],e[g])}}}d=3De=3Dnull;return =
h},clean:function(a,b,d,e){var g;b=3Db||c,typeof =
b.createElement=3D=3D"undefined"&&(b=3Db.ownerDocument||b[0]&&b[0].ownerD=
ocument||c);var h=3D[],i;for(var j=3D0,k;(k=3Da[j])!=3Dnull;j++){typeof =
k=3D=3D"number"&&(k+=3D"");if(!k){continue}if(typeof =
k=3D=3D"string"){if(!_.test(k)){k=3Db.createTextNode(k)}else{k=3Dk.replac=
e(Y,"<$1></$2>");var =
l=3D(Z.exec(k)||["",""])[1].toLowerCase(),m=3Dbg[l]||bg._default,n=3Dm[0]=
,o=3Db.createElement("div");b=3D=3D=3Dc?bh.appendChild(o):U(b).appendChil=
d(o),o.innerHTML=3Dm[1]+k+m[2];while(n--){o=3Do.lastChild}if(!f.support.t=
body){var =
p=3D$.test(k),q=3Dl=3D=3D=3D"table"&&!p?o.firstChild&&o.firstChild.childN=
odes:m[1]=3D=3D=3D"<table>"&&!p?o.childNodes:[];for(i=3Dq.length-1;i>=3D0=
;--i){f.nodeName(q[i],"tbody")&&!q[i].childNodes.length&&q[i].parentNode.=
removeChild(q[i])}}!f.support.leadingWhitespace&&X.test(k)&&o.insertBefor=
e(b.createTextNode(X.exec(k)[0]),o.firstChild),k=3Do.childNodes}}var =
r;if(!f.support.appendChecked){if(k[0]&&typeof(r=3Dk.length)=3D=3D"number=
"){for(i=3D0;i<r;i++){bn(k[i])}}else{bn(k)}}k.nodeType?h.push(k):h=3Df.me=
rge(h,k)}if(d){g=3Dfunction(a){return =
!a.type||be.test(a.type)};for(j=3D0;h[j];j++){if(e&&f.nodeName(h[j],"scri=
pt")&&(!h[j].type||h[j].type.toLowerCase()=3D=3D=3D"text/javascript")){e.=
push(h[j].parentNode?h[j].parentNode.removeChild(h[j]):h[j])}else{if(h[j]=
.nodeType=3D=3D=3D1){var =
s=3Df.grep(h[j].getElementsByTagName("script"),g);h.splice.apply(h,[j+1,0=
].concat(s))}d.appendChild(h[j])}}}return h},cleanData:function(a){var =
b,c,d=3Df.cache,e=3Df.event.special,g=3Df.support.deleteExpando;for(var =
h=3D0,i;(i=3Da[h])!=3Dnull;h++){if(i.nodeName&&f.noData[i.nodeName.toLowe=
rCase()]){continue}c=3Di[f.expando];if(c){b=3Dd[c];if(b&&b.events){for(va=
r j in =
b.events){e[j]?f.event.remove(i,j):f.removeEvent(i,j,b.handle)}b.handle&&=
(b.handle.elem=3Dnull)}g?delete =
i[f.expando]:i.removeAttribute&&i.removeAttribute(f.expando),delete =
d[c]}}}});var =
bq=3D/alpha\([^)]*\)/i,br=3D/opacity=3D([^)]*)/,bs=3D/([A-Z]|^ms)/g,bt=3D=
/^-?\d+(?:px)?$/i,bu=3D/^-?\d/,bv=3D/^([\-+])=3D([\-+.\de]+)/,bw=3D{posit=
ion:"absolute",visibility:"hidden",display:"block"},bx=3D["Left","Right"]=
,by=3D["Top","Bottom"],bz,bA,bB;f.fn.css=3Dfunction(a,c){if(arguments.len=
gth=3D=3D=3D2&&c=3D=3D=3Db){return this}return =
f.access(this,a,c,!0,function(a,c,d){return =
d!=3D=3Db?f.style(a,c,d):f.css(a,c)})},f.extend({cssHooks:{opacity:{get:f=
unction(a,b){if(b){var c=3Dbz(a,"opacity","opacity");return =
c=3D=3D=3D""?"1":c}return =
a.style.opacity}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,=
opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":f.su=
pport.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!!a&&a=
.nodeType!=3D=3D3&&a.nodeType!=3D=3D8&&!!a.style){var =
g,h,i=3Df.camelCase(c),j=3Da.style,k=3Df.cssHooks[i];c=3Df.cssProps[i]||i=
;if(d=3D=3D=3Db){if(k&&"get" in k&&(g=3Dk.get(a,!1,e))!=3D=3Db){return =
g}return j[c]}h=3Dtypeof =
d,h=3D=3D=3D"string"&&(g=3Dbv.exec(d))&&(d=3D+(g[1]+1)*+g[2]+parseFloat(f=
.css(a,c)),h=3D"number");if(d=3D=3Dnull||h=3D=3D=3D"number"&&isNaN(d)){re=
turn}h=3D=3D=3D"number"&&!f.cssNumber[i]&&(d+=3D"px");if(!k||!("set" in =
k)||(d=3Dk.set(a,d))!=3D=3Db){try{j[c]=3Dd}catch(l){}}}},css:function(a,c=
,d){var =
e,g;c=3Df.camelCase(c),g=3Df.cssHooks[c],c=3Df.cssProps[c]||c,c=3D=3D=3D"=
cssFloat"&&(c=3D"float");if(g&&"get" in =
g&&(e=3Dg.get(a,!0,d))!=3D=3Db){return e}if(bz){return =
bz(a,c)}},swap:function(a,b,c){var d=3D{};for(var e in =
b){d[e]=3Da.style[e],a.style[e]=3Db[e]}c.call(a);for(e in =
b){a.style[e]=3Dd[e]}}}),f.curCSS=3Df.css,f.each(["height","width"],funct=
ion(a,b){f.cssHooks[b]=3D{get:function(a,c,d){var =
e;if(c){if(a.offsetWidth!=3D=3D0){return =
bC(a,b,d)}f.swap(a,bw,function(){e=3DbC(a,b,d)});return =
e}},set:function(a,b){if(!bt.test(b)){return =
b}b=3DparseFloat(b);if(b>=3D0){return =
b+"px"}}}}),f.support.opacity||(f.cssHooks.opacity=3D{get:function(a,b){r=
eturn =
br.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?par=
seFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var =
c=3Da.style,d=3Da.currentStyle,e=3Df.isNumeric(b)?"alpha(opacity=3D"+b*10=
0+")":"",g=3Dd&&d.filter||c.filter||"";c.zoom=3D1;if(b>=3D1&&f.trim(g.rep=
lace(bq,""))=3D=3D=3D""){c.removeAttribute("filter");if(d&&!d.filter){ret=
urn}}c.filter=3Dbq.test(g)?g.replace(bq,e):g+" =
"+e}}),f(function(){f.support.reliableMarginRight||(f.cssHooks.marginRigh=
t=3D{get:function(a,b){var =
c;f.swap(a,{display:"inline-block"},function(){b?c=3Dbz(a,"margin-right",=
"marginRight"):c=3Da.style.marginRight});return =
c}})}),c.defaultView&&c.defaultView.getComputedStyle&&(bA=3Dfunction(a,b)=
{var =
c,d,e;b=3Db.replace(bs,"-$1").toLowerCase(),(d=3Da.ownerDocument.defaultV=
iew)&&(e=3Dd.getComputedStyle(a,null))&&(c=3De.getPropertyValue(b),c=3D=3D=
=3D""&&!f.contains(a.ownerDocument.documentElement,a)&&(c=3Df.style(a,b))=
);return c}),c.documentElement.currentStyle&&(bB=3Dfunction(a,b){var =
c,d,e,f=3Da.currentStyle&&a.currentStyle[b],g=3Da.style;f=3D=3D=3Dnull&&g=
&&(e=3Dg[b])&&(f=3De),!bt.test(f)&&bu.test(f)&&(c=3Dg.left,d=3Da.runtimeS=
tyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=3Da.currentStyle.left),=
g.left=3Db=3D=3D=3D"fontSize"?"1em":f||0,f=3Dg.pixelLeft+"px",g.left=3Dc,=
d&&(a.runtimeStyle.left=3Dd));return =
f=3D=3D=3D""?"auto":f}),bz=3DbA||bB,f.expr&&f.expr.filters&&(f.expr.filte=
rs.hidden=3Dfunction(a){var b=3Da.offsetWidth,c=3Da.offsetHeight;return =
b=3D=3D=3D0&&c=3D=3D=3D0||!f.support.reliableHiddenOffsets&&(a.style&&a.s=
tyle.display||f.css(a,"display"))=3D=3D=3D"none"},f.expr.filters.visible=3D=
function(a){return !f.expr.filters.hidden(a)});var =
bD=3D/%20/g,bE=3D/\[\]$/,bF=3D/\r?\n/g,bG=3D/#.*$/,bH=3D/^(.*?):[ =
\t]*([^\r\n]*)\r?$/mg,bI=3D/^(?:color|date|datetime|datetime-local|email|=
hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bJ=3D=
/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,bK=3D/^(?:G=
ET|HEAD)$/,bL=3D/^\/\//,bM=3D/\?/,bN=3D/<script\b[^<]*(?:(?!<\/script>)<[=
^<]*)*<\/script>/gi,bO=3D/^(?:select|textarea)/i,bP=3D/\s+/,bQ=3D/([?&])_=
=3D[^&]*/,bR=3D/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bS=3Df.fn=
.load,bT=3D{},bU=3D{},bV,bW,bX=3D["*/"]+["*"];try{bV=3De.href}catch(bY){b=
V=3Dc.createElement("a"),bV.href=3D"",bV=3DbV.href}bW=3DbR.exec(bV.toLowe=
rCase())||[],f.fn.extend({load:function(a,c,d){if(typeof =
a!=3D"string"&&bS){return =
bS.apply(this,arguments)}if(!this.length){return this}var =
e=3Da.indexOf(" ");if(e>=3D0){var =
g=3Da.slice(e,a.length);a=3Da.slice(0,e)}var =
h=3D"GET";c&&(f.isFunction(c)?(d=3Dc,c=3Db):typeof =
c=3D=3D"object"&&(c=3Df.param(c,f.ajaxSettings.traditional),h=3D"POST"));=
var =
i=3Dthis;f.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,=
b,c){c=3Da.responseText,a.isResolved()&&(a.done(function(a){c=3Da}),i.htm=
l(g?f("<div>").append(c.replace(bN,"")).find(g):c)),d&&i.each(d,[c,b,a])}=
});return this},serialize:function(){return =
f.param(this.serializeArray())},serializeArray:function(){return =
this.map(function(){return =
this.elements?f.makeArray(this.elements):this}).filter(function(){return =
this.name&&!this.disabled&&(this.checked||bO.test(this.nodeName)||bI.test=
(this.type))}).map(function(a,b){var c=3Df(this).val();return =
c=3D=3Dnull?null:f.isArray(c)?f.map(c,function(a,c){return{name:b.name,va=
lue:a.replace(bF,"\r\n")}}):{name:b.name,value:c.replace(bF,"\r\n")}}).ge=
t()}}),f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess =
ajaxSend".split(" "),function(a,b){f.fn[b]=3Dfunction(a){return =
this.on(b,a)}}),f.each(["get","post"],function(a,c){f[c]=3Dfunction(a,d,e=
,g){f.isFunction(d)&&(g=3Dg||e,e=3Dd,d=3Db);return =
f.ajax({type:c,url:a,data:d,success:e,dataType:g})}}),f.extend({getScript=
:function(a,c){return =
f.get(a,b,c,"script")},getJSON:function(a,b,c){return =
f.get(a,b,c,"json")},ajaxSetup:function(a,b){b?b_(a,f.ajaxSettings):(b=3D=
a,a=3Df.ajaxSettings),b_(a,b);return =
a},ajaxSettings:{url:bV,isLocal:bJ.test(bW[1]),global:!0,type:"GET",conte=
ntType:"application/x-www-form-urlencoded",processData:!0,async:!0,accept=
s:{xml:"application/xml, =
text/xml",html:"text/html",text:"text/plain",json:"application/json, =
text/javascript","*":bX},contents:{xml:/xml/,html:/html/,json:/json/},res=
ponseFields:{xml:"responseXML",text:"responseText"},converters:{"* =
text":a.String,"text html":!0,"text json":f.parseJSON,"text =
xml":f.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:bZ(bT),aj=
axTransport:bZ(bU),ajax:function(a,c){function =
w(a,c,l,m){if(s!=3D=3D2){s=3D2,q&&clearTimeout(q),p=3Db,n=3Dm||"",v.ready=
State=3Da>0?4:0;var =
o,r,u,w=3Dc,x=3Dl?cb(d,v,l):b,y,z;if(a>=3D200&&a<300||a=3D=3D=3D304){if(d=
.ifModified){if(y=3Dv.getResponseHeader("Last-Modified")){f.lastModified[=
k]=3Dy}if(z=3Dv.getResponseHeader("Etag")){f.etag[k]=3Dz}}if(a=3D=3D=3D30=
4){w=3D"notmodified",o=3D!0}else{try{r=3Dcc(d,x),w=3D"success",o=3D!0}cat=
ch(A){w=3D"parsererror",u=3DA}}}else{u=3Dw;if(!w||a){w=3D"error",a<0&&(a=3D=
0)}}v.status=3Da,v.statusText=3D""+(c||w),o?h.resolveWith(e,[r,w,v]):h.re=
jectWith(e,[v,w,u]),v.statusCode(j),j=3Db,t&&g.trigger("ajax"+(o?"Success=
":"Error"),[v,d,o?r:u]),i.fireWith(e,[v,w]),t&&(g.trigger("ajaxComplete",=
[v,d]),--f.active||f.event.trigger("ajaxStop"))}}typeof =
a=3D=3D"object"&&(c=3Da,a=3Db),c=3Dc||{};var =
d=3Df.ajaxSetup({},c),e=3Dd.context||d,g=3De!=3D=3Dd&&(e.nodeType||e =
instanceof f)?f(e):f.event,h=3Df.Deferred(),i=3Df.Callbacks("once =
memory"),j=3Dd.statusCode||{},k,l=3D{},m=3D{},n,o,p,q,r,s=3D0,t,u,v=3D{re=
adyState:0,setRequestHeader:function(a,b){if(!s){var =
c=3Da.toLowerCase();a=3Dm[c]=3Dm[c]||a,l[a]=3Db}return =
this},getAllResponseHeaders:function(){return =
s=3D=3D=3D2?n:null},getResponseHeader:function(a){var =
c;if(s=3D=3D=3D2){if(!o){o=3D{};while(c=3DbH.exec(n)){o[c[1].toLowerCase(=
)]=3Dc[2]}}c=3Do[a.toLowerCase()]}return =
c=3D=3D=3Db?null:c},overrideMimeType:function(a){s||(d.mimeType=3Da);retu=
rn this},abort:function(a){a=3Da||"abort",p&&p.abort(a),w(0,a);return =
this}};h.promise(v),v.success=3Dv.done,v.error=3Dv.fail,v.complete=3Di.ad=
d,v.statusCode=3Dfunction(a){if(a){var b;if(s<2){for(b in =
a){j[b]=3D[j[b],a[b]]}}else{b=3Da[v.status],v.then(b,b)}}return =
this},d.url=3D((a||d.url)+"").replace(bG,"").replace(bL,bW[1]+"//"),d.dat=
aTypes=3Df.trim(d.dataType||"*").toLowerCase().split(bP),d.crossDomain=3D=
=3Dnull&&(r=3DbR.exec(d.url.toLowerCase()),d.crossDomain=3D!(!r||r[1]=3D=3D=
bW[1]&&r[2]=3D=3DbW[2]&&(r[3]||(r[1]=3D=3D=3D"http:"?80:443))=3D=3D(bW[3]=
||(bW[1]=3D=3D=3D"http:"?80:443)))),d.data&&d.processData&&typeof =
d.data!=3D"string"&&(d.data=3Df.param(d.data,d.traditional)),b$(bT,d,c,v)=
;if(s=3D=3D=3D2){return =
!1}t=3Dd.global,d.type=3Dd.type.toUpperCase(),d.hasContent=3D!bK.test(d.t=
ype),t&&f.active++=3D=3D=3D0&&f.event.trigger("ajaxStart");if(!d.hasConte=
nt){d.data&&(d.url+=3D(bM.test(d.url)?"&":"?")+d.data,delete =
d.data),k=3Dd.url;if(d.cache=3D=3D=3D!1){var =
x=3Df.now(),y=3Dd.url.replace(bQ,"$1_=3D"+x);d.url=3Dy+(y=3D=3D=3Dd.url?(=
bM.test(d.url)?"&":"?")+"_=3D"+x:"")}}(d.data&&d.hasContent&&d.contentTyp=
e!=3D=3D!1||c.contentType)&&v.setRequestHeader("Content-Type",d.contentTy=
pe),d.ifModified&&(k=3Dk||d.url,f.lastModified[k]&&v.setRequestHeader("If=
-Modified-Since",f.lastModified[k]),f.etag[k]&&v.setRequestHeader("If-Non=
e-Match",f.etag[k])),v.setRequestHeader("Accept",d.dataTypes[0]&&d.accept=
s[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+(d.dataTypes[0]!=3D=3D"*"?", =
"+bX+"; q=3D0.01":""):d.accepts["*"]);for(u in =
d.headers){v.setRequestHeader(u,d.headers[u])}if(d.beforeSend&&(d.beforeS=
end.call(e,v,d)=3D=3D=3D!1||s=3D=3D=3D2)){v.abort();return !1}for(u in =
{success:1,error:1,complete:1}){v[u](d[u])}p=3Db$(bU,d,c,v);if(!p){w(-1,"=
No =
Transport")}else{v.readyState=3D1,t&&g.trigger("ajaxSend",[v,d]),d.async&=
&d.timeout>0&&(q=3DsetTimeout(function(){v.abort("timeout")},d.timeout));=
try{s=3D1,p.send(l,w)}catch(z){if(s<2){w(-1,z)}else{throw z}}}return =
v},param:function(a,c){var =
d=3D[],e=3Dfunction(a,b){b=3Df.isFunction(b)?b():b,d[d.length]=3DencodeUR=
IComponent(a)+"=3D"+encodeURIComponent(b)};c=3D=3D=3Db&&(c=3Df.ajaxSettin=
gs.traditional);if(f.isArray(a)||a.jquery&&!f.isPlainObject(a)){f.each(a,=
function(){e(this.name,this.value)})}else{for(var g in =
a){ca(g,a[g],c,e)}}return =
d.join("&").replace(bD,"+")}}),f.extend({active:0,lastModified:{},etag:{}=
});var =
cd=3Df.now(),ce=3D/(\=3D)\?(&|$)|\?\?/i;f.ajaxSetup({jsonp:"callback",jso=
npCallback:function(){return f.expando+"_"+cd++}}),f.ajaxPrefilter("json =
jsonp",function(b,c,d){var =
e=3Db.contentType=3D=3D=3D"application/x-www-form-urlencoded"&&typeof =
b.data=3D=3D"string";if(b.dataTypes[0]=3D=3D=3D"jsonp"||b.jsonp!=3D=3D!1&=
&(ce.test(b.url)||e&&ce.test(b.data))){var =
g,h=3Db.jsonpCallback=3Df.isFunction(b.jsonpCallback)?b.jsonpCallback():b=
.jsonpCallback,i=3Da[h],j=3Db.url,k=3Db.data,l=3D"$1"+h+"$2";b.jsonp!=3D=3D=
!1&&(j=3Dj.replace(ce,l),b.url=3D=3D=3Dj&&(e&&(k=3Dk.replace(ce,l)),b.dat=
a=3D=3D=3Dk&&(j+=3D(/\?/.test(j)?"&":"?")+b.jsonp+"=3D"+h))),b.url=3Dj,b.=
data=3Dk,a[h]=3Dfunction(a){g=3D[a]},d.always(function(){a[h]=3Di,g&&f.is=
Function(i)&&a[h](g[0])}),b.converters["script =
json"]=3Dfunction(){g||f.error(h+" was not called");return =
g[0]},b.dataTypes[0]=3D"json";return"script"}}),f.ajaxSetup({accepts:{scr=
ipt:"text/javascript, application/javascript, application/ecmascript, =
application/x-ecmascript"},contents:{script:/javascript|ecmascript/},conv=
erters:{"text script":function(a){f.globalEval(a);return =
a}}}),f.ajaxPrefilter("script",function(a){a.cache=3D=3D=3Db&&(a.cache=3D=
!1),a.crossDomain&&(a.type=3D"GET",a.global=3D!1)}),f.ajaxTransport("scri=
pt",function(a){if(a.crossDomain){var =
d,e=3Dc.head||c.getElementsByTagName("head")[0]||c.documentElement;return=
{send:function(f,g){d=3Dc.createElement("script"),d.async=3D"async",a.scr=
iptCharset&&(d.charset=3Da.scriptCharset),d.src=3Da.url,d.onload=3Dd.onre=
adystatechange=3Dfunction(a,c){if(c||!d.readyState||/loaded|complete/.tes=
t(d.readyState)){d.onload=3Dd.onreadystatechange=3Dnull,e&&d.parentNode&&=
e.removeChild(d),d=3Db,c||g(200,"success")}},e.insertBefore(d,e.firstChil=
d)},abort:function(){d&&d.onload(0,1)}}}});var =
cf=3Da.ActiveXObject?function(){for(var a in =
ch){ch[a](0,1)}}:!1,cg=3D0,ch;f.ajaxSettings.xhr=3Da.ActiveXObject?functi=
on(){return =
!this.isLocal&&ci()||cj()}:ci,function(a){f.extend(f.support,{ajax:!!a,co=
rs:!!a&&"withCredentials" in =
a})}(f.ajaxSettings.xhr()),f.support.ajax&&f.ajaxTransport(function(c){if=
(!c.crossDomain||f.support.cors){var d;return{send:function(e,g){var =
h=3Dc.xhr(),i,j;c.username?h.open(c.type,c.url,c.async,c.username,c.passw=
ord):h.open(c.type,c.url,c.async);if(c.xhrFields){for(j in =
c.xhrFields){h[j]=3Dc.xhrFields[j]}}c.mimeType&&h.overrideMimeType&&h.ove=
rrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-R=
equested-With"]=3D"XMLHttpRequest");try{for(j in =
e){h.setRequestHeader(j,e[j])}}catch(k){}h.send(c.hasContent&&c.data||nul=
l),d=3Dfunction(a,e){var =
j,k,l,m,n;try{if(d&&(e||h.readyState=3D=3D=3D4)){d=3Db,i&&(h.onreadystate=
change=3Df.noop,cf&&delete =
ch[i]);if(e){h.readyState!=3D=3D4&&h.abort()}else{j=3Dh.status,l=3Dh.getA=
llResponseHeaders(),m=3D{},n=3Dh.responseXML,n&&n.documentElement&&(m.xml=
=3Dn),m.text=3Dh.responseText;try{k=3Dh.statusText}catch(o){k=3D""}!j&&c.=
isLocal&&!c.crossDomain?j=3Dm.text?200:404:j=3D=3D=3D1223&&(j=3D204)}}}ca=
tch(p){e||g(-1,p)}m&&g(j,k,m,l)},!c.async||h.readyState=3D=3D=3D4?d():(i=3D=
++cg,cf&&(ch||(ch=3D{},f(a).unload(cf)),ch[i]=3Dd),h.onreadystatechange=3D=
d)},abort:function(){d&&d(0,1)}}}});var =
ck=3D{},cl,cm,cn=3D/^(?:toggle|show|hide)$/,co=3D/^([+\-]=3D)?([\d+.\-]+)=
([a-z%]*)$/i,cp,cq=3D[["height","marginTop","marginBottom","paddingTop","=
paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddin=
gRight"],["opacity"]],cr;f.fn.extend({show:function(a,b,c){var =
d,e;if(a||a=3D=3D=3D0){return this.animate(cu("show",3),a,b,c)}for(var =
g=3D0,h=3Dthis.length;g<h;g++){d=3Dthis[g],d.style&&(e=3Dd.style.display,=
!f._data(d,"olddisplay")&&e=3D=3D=3D"none"&&(e=3Dd.style.display=3D""),e=3D=
=3D=3D""&&f.css(d,"display")=3D=3D=3D"none"&&f._data(d,"olddisplay",cv(d.=
nodeName)))}for(g=3D0;g<h;g++){d=3Dthis[g];if(d.style){e=3Dd.style.displa=
y;if(e=3D=3D=3D""||e=3D=3D=3D"none"){d.style.display=3Df._data(d,"olddisp=
lay")||""}}}return this},hide:function(a,b,c){if(a||a=3D=3D=3D0){return =
this.animate(cu("hide",3),a,b,c)}var =
d,e,g=3D0,h=3Dthis.length;for(;g<h;g++){d=3Dthis[g],d.style&&(e=3Df.css(d=
,"display"),e!=3D=3D"none"&&!f._data(d,"olddisplay")&&f._data(d,"olddispl=
ay",e))}for(g=3D0;g<h;g++){this[g].style&&(this[g].style.display=3D"none"=
)}return this},_toggle:f.fn.toggle,toggle:function(a,b,c){var d=3Dtypeof =
a=3D=3D"boolean";f.isFunction(a)&&f.isFunction(b)?this._toggle.apply(this=
,arguments):a=3D=3Dnull||d?this.each(function(){var =
b=3Dd?a:f(this).is(":hidden");f(this)[b?"show":"hide"]()}):this.animate(c=
u("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return =
this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},=
a,c,d)},animate:function(a,b,c,d){function =
g(){e.queue=3D=3D=3D!1&&f._mark(this);var =
b=3Df.extend({},e),c=3Dthis.nodeType=3D=3D=3D1,d=3Dc&&f(this).is(":hidden=
"),g,h,i,j,k,l,m,n,o;b.animatedProperties=3D{};for(i in =
a){g=3Df.camelCase(i),i!=3D=3Dg&&(a[g]=3Da[i],delete =
a[i]),h=3Da[g],f.isArray(h)?(b.animatedProperties[g]=3Dh[1],h=3Da[g]=3Dh[=
0]):b.animatedProperties[g]=3Db.specialEasing&&b.specialEasing[g]||b.easi=
ng||"swing";if(h=3D=3D=3D"hide"&&d||h=3D=3D=3D"show"&&!d){return =
b.complete.call(this)}c&&(g=3D=3D=3D"height"||g=3D=3D=3D"width")&&(b.over=
flow=3D[this.style.overflow,this.style.overflowX,this.style.overflowY],f.=
css(this,"display")=3D=3D=3D"inline"&&f.css(this,"float")=3D=3D=3D"none"&=
&(!f.support.inlineBlockNeedsLayout||cv(this.nodeName)=3D=3D=3D"inline"?t=
his.style.display=3D"inline-block":this.style.zoom=3D1))}b.overflow!=3Dnu=
ll&&(this.style.overflow=3D"hidden");for(i in a){j=3Dnew =
f.fx(this,b,i),h=3Da[i],cn.test(h)?(o=3Df._data(this,"toggle"+i)||(h=3D=3D=
=3D"toggle"?d?"show":"hide":0),o?(f._data(this,"toggle"+i,o=3D=3D=3D"show=
"?"hide":"show"),j[o]()):j[h]()):(k=3Dco.exec(h),l=3Dj.cur(),k?(m=3Dparse=
Float(k[2]),n=3Dk[3]||(f.cssNumber[i]?"":"px"),n!=3D=3D"px"&&(f.style(thi=
s,i,(m||1)+n),l=3D(m||1)/j.cur()*l,f.style(this,i,l+n)),k[1]&&(m=3D(k[1]=3D=
=3D=3D"-=3D"?-1:1)*m+l),j.custom(l,m,n)):j.custom(l,h,""))}return !0}var =
e=3Df.speed(b,c,d);if(f.isEmptyObject(a)){return =
this.each(e.complete,[!1])}a=3Df.extend({},a);return =
e.queue=3D=3D=3D!1?this.each(g):this.queue(e.queue,g)},stop:function(a,c,=
d){typeof =
a!=3D"string"&&(d=3Dc,c=3Da,a=3Db),c&&a!=3D=3D!1&&this.queue(a||"fx",[]);=
return this.each(function(){function h(a,b,c){var =
e=3Db[c];f.removeData(a,c,!0),e.stop(d)}var =
b,c=3D!1,e=3Df.timers,g=3Df._data(this);d||f._unmark(!0,this);if(a=3D=3Dn=
ull){for(b in =
g){g[b]&&g[b].stop&&b.indexOf(".run")=3D=3D=3Db.length-4&&h(this,g,b)}}el=
se{g[b=3Da+".run"]&&g[b].stop&&h(this,g,b)}for(b=3De.length;b--;){e[b].el=
em=3D=3D=3Dthis&&(a=3D=3Dnull||e[b].queue=3D=3D=3Da)&&(d?e[b](!0):e[b].sa=
veState(),c=3D!0,e.splice(b,1))}(!d||!c)&&f.dequeue(this,a)})}}),f.each({=
slideDown:cu("show",1),slideUp:cu("hide",1),slideToggle:cu("toggle",1),fa=
deIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggl=
e"}},function(a,b){f.fn[a]=3Dfunction(a,c,d){return =
this.animate(b,a,c,d)}}),f.extend({speed:function(a,b,c){var =
d=3Da&&typeof =
a=3D=3D"object"?f.extend({},a):{complete:c||!c&&b||f.isFunction(a)&&a,dur=
ation:a,easing:c&&b||b&&!f.isFunction(b)&&b};d.duration=3Df.fx.off?0:type=
of d.duration=3D=3D"number"?d.duration:d.duration in =
f.fx.speeds?f.fx.speeds[d.duration]:f.fx.speeds._default;if(d.queue=3D=3D=
null||d.queue=3D=3D=3D!0){d.queue=3D"fx"}d.old=3Dd.complete,d.complete=3D=
function(a){f.isFunction(d.old)&&d.old.call(this),d.queue?f.dequeue(this,=
d.queue):a!=3D=3D!1&&f._unmark(this)};return =
d},easing:{linear:function(a,b,c,d){return =
c+d*a},swing:function(a,b,c,d){return(-Math.cos(a*Math.PI)/2+0.5)*d+c}},t=
imers:[],fx:function(a,b,c){this.options=3Db,this.elem=3Da,this.prop=3Dc,=
b.orig=3Db.orig||{}}}),f.fx.prototype=3D{update:function(){this.options.s=
tep&&this.options.step.call(this.elem,this.now,this),(f.fx.step[this.prop=
]||f.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=3Dn=
ull&&(!this.elem.style||this.elem.style[this.prop]=3D=3Dnull)){return =
this.elem[this.prop]}var a,b=3Df.css(this.elem,this.prop);return =
isNaN(a=3DparseFloat(b))?!b||b=3D=3D=3D"auto"?0:b:a},custom:function(a,c,=
d){function h(a){return e.step(a)}var =
e=3Dthis,g=3Df.fx;this.startTime=3Dcr||cs(),this.end=3Dc,this.now=3Dthis.=
start=3Da,this.pos=3Dthis.state=3D0,this.unit=3Dd||this.unit||(f.cssNumbe=
r[this.prop]?"":"px"),h.queue=3Dthis.options.queue,h.elem=3Dthis.elem,h.s=
aveState=3Dfunction(){e.options.hide&&f._data(e.elem,"fxshow"+e.prop)=3D=3D=
=3Db&&f._data(e.elem,"fxshow"+e.prop,e.start)},h()&&f.timers.push(h)&&!cp=
&&(cp=3DsetInterval(g.tick,g.interval))},show:function(){var =
a=3Df._data(this.elem,"fxshow"+this.prop);this.options.orig[this.prop]=3D=
a||f.style(this.elem,this.prop),this.options.show=3D!0,a!=3D=3Db?this.cus=
tom(this.cur(),a):this.custom(this.prop=3D=3D=3D"width"||this.prop=3D=3D=3D=
"height"?1:0,this.cur()),f(this.elem).show()},hide:function(){this.option=
s.orig[this.prop]=3Df._data(this.elem,"fxshow"+this.prop)||f.style(this.e=
lem,this.prop),this.options.hide=3D!0,this.custom(this.cur(),0)},step:fun=
ction(a){var =
b,c,d,e=3Dcr||cs(),g=3D!0,h=3Dthis.elem,i=3Dthis.options;if(a||e>=3Di.dur=
ation+this.startTime){this.now=3Dthis.end,this.pos=3Dthis.state=3D1,this.=
update(),i.animatedProperties[this.prop]=3D!0;for(b in =
i.animatedProperties){i.animatedProperties[b]!=3D=3D!0&&(g=3D!1)}if(g){i.=
overflow!=3Dnull&&!f.support.shrinkWrapBlocks&&f.each(["","X","Y"],functi=
on(a,b){h.style["overflow"+b]=3Di.overflow[a]}),i.hide&&f(h).hide();if(i.=
hide||i.show){for(b in =
i.animatedProperties){f.style(h,b,i.orig[b]),f.removeData(h,"fxshow"+b,!0=
),f.removeData(h,"toggle"+b,!0)}}d=3Di.complete,d&&(i.complete=3D!1,d.cal=
l(h))}return =
!1}i.duration=3D=3DInfinity?this.now=3De:(c=3De-this.startTime,this.state=
=3Dc/i.duration,this.pos=3Df.easing[i.animatedProperties[this.prop]](this=
.state,c,0,1,i.duration),this.now=3Dthis.start+(this.end-this.start)*this=
.pos),this.update();return !0}},f.extend(f.fx,{tick:function(){var =
a,b=3Df.timers,c=3D0;for(;c<b.length;c++){a=3Db[c],!a()&&b[c]=3D=3D=3Da&&=
b.splice(c--,1)}b.length||f.fx.stop()},interval:13,stop:function(){clearI=
nterval(cp),cp=3Dnull},speeds:{slow:600,fast:200,_default:400},step:{opac=
ity:function(a){f.style(a.elem,"opacity",a.now)},_default:function(a){a.e=
lem.style&&a.elem.style[a.prop]!=3Dnull?a.elem.style[a.prop]=3Da.now+a.un=
it:a.elem[a.prop]=3Da.now}}}),f.each(["width","height"],function(a,b){f.f=
x.step[b]=3Dfunction(a){f.style(a.elem,b,Math.max(0,a.now)+a.unit)}}),f.e=
xpr&&f.expr.filters&&(f.expr.filters.animated=3Dfunction(a){return =
f.grep(f.timers,function(b){return a=3D=3D=3Db.elem}).length});var =
cw=3D/^t(?:able|d|h)$/i,cx=3D/^(?:body|html)$/i;"getBoundingClientRect" =
in c.documentElement?f.fn.offset=3Dfunction(a){var =
b=3Dthis[0],c;if(a){return =
this.each(function(b){f.offset.setOffset(this,a,b)})}if(!b||!b.ownerDocum=
ent){return null}if(b=3D=3D=3Db.ownerDocument.body){return =
f.offset.bodyOffset(b)}try{c=3Db.getBoundingClientRect()}catch(d){}var =
e=3Db.ownerDocument,g=3De.documentElement;if(!c||!f.contains(g,b)){return=
 c?{top:c.top,left:c.left}:{top:0,left:0}}var =
h=3De.body,i=3Dcy(e),j=3Dg.clientTop||h.clientTop||0,k=3Dg.clientLeft||h.=
clientLeft||0,l=3Di.pageYOffset||f.support.boxModel&&g.scrollTop||h.scrol=
lTop,m=3Di.pageXOffset||f.support.boxModel&&g.scrollLeft||h.scrollLeft,n=3D=
c.top+l-j,o=3Dc.left+m-k;return{top:n,left:o}}:f.fn.offset=3Dfunction(a){=
var b=3Dthis[0];if(a){return =
this.each(function(b){f.offset.setOffset(this,a,b)})}if(!b||!b.ownerDocum=
ent){return null}if(b=3D=3D=3Db.ownerDocument.body){return =
f.offset.bodyOffset(b)}var =
c,d=3Db.offsetParent,e=3Db,g=3Db.ownerDocument,h=3Dg.documentElement,i=3D=
g.body,j=3Dg.defaultView,k=3Dj?j.getComputedStyle(b,null):b.currentStyle,=
l=3Db.offsetTop,m=3Db.offsetLeft;while((b=3Db.parentNode)&&b!=3D=3Di&&b!=3D=
=3Dh){if(f.support.fixedPosition&&k.position=3D=3D=3D"fixed"){break}c=3Dj=
?j.getComputedStyle(b,null):b.currentStyle,l-=3Db.scrollTop,m-=3Db.scroll=
Left,b=3D=3D=3Dd&&(l+=3Db.offsetTop,m+=3Db.offsetLeft,f.support.doesNotAd=
dBorder&&(!f.support.doesAddBorderForTableAndCells||!cw.test(b.nodeName))=
&&(l+=3DparseFloat(c.borderTopWidth)||0,m+=3DparseFloat(c.borderLeftWidth=
)||0),e=3Dd,d=3Db.offsetParent),f.support.subtractsBorderForOverflowNotVi=
sible&&c.overflow!=3D=3D"visible"&&(l+=3DparseFloat(c.borderTopWidth)||0,=
m+=3DparseFloat(c.borderLeftWidth)||0),k=3Dc}if(k.position=3D=3D=3D"relat=
ive"||k.position=3D=3D=3D"static"){l+=3Di.offsetTop,m+=3Di.offsetLeft}f.s=
upport.fixedPosition&&k.position=3D=3D=3D"fixed"&&(l+=3DMath.max(h.scroll=
Top,i.scrollTop),m+=3DMath.max(h.scrollLeft,i.scrollLeft));return{top:l,l=
eft:m}},f.offset=3D{bodyOffset:function(a){var =
b=3Da.offsetTop,c=3Da.offsetLeft;f.support.doesNotIncludeMarginInBodyOffs=
et&&(b+=3DparseFloat(f.css(a,"marginTop"))||0,c+=3DparseFloat(f.css(a,"ma=
rginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var =
d=3Df.css(a,"position");d=3D=3D=3D"static"&&(a.style.position=3D"relative=
");var =
e=3Df(a),g=3De.offset(),h=3Df.css(a,"top"),i=3Df.css(a,"left"),j=3D(d=3D=3D=
=3D"absolute"||d=3D=3D=3D"fixed")&&f.inArray("auto",[h,i])>-1,k=3D{},l=3D=
{},m,n;j?(l=3De.position(),m=3Dl.top,n=3Dl.left):(m=3DparseFloat(h)||0,n=3D=
parseFloat(i)||0),f.isFunction(b)&&(b=3Db.call(a,c,g)),b.top!=3Dnull&&(k.=
top=3Db.top-g.top+m),b.left!=3Dnull&&(k.left=3Db.left-g.left+n),"using" =
in =
b?b.using.call(a,k):e.css(k)}},f.fn.extend({position:function(){if(!this[=
0]){return null}var =
a=3Dthis[0],b=3Dthis.offsetParent(),c=3Dthis.offset(),d=3Dcx.test(b[0].no=
deName)?{top:0,left:0}:b.offset();c.top-=3DparseFloat(f.css(a,"marginTop"=
))||0,c.left-=3DparseFloat(f.css(a,"marginLeft"))||0,d.top+=3DparseFloat(=
f.css(b[0],"borderTopWidth"))||0,d.left+=3DparseFloat(f.css(b[0],"borderL=
eftWidth"))||0;return{top:c.top-d.top,left:c.left-d.left}},offsetParent:f=
unction(){return this.map(function(){var =
a=3Dthis.offsetParent||c.body;while(a&&!cx.test(a.nodeName)&&f.css(a,"pos=
ition")=3D=3D=3D"static"){a=3Da.offsetParent}return =
a})}}),f.each(["Left","Top"],function(a,c){var =
d=3D"scroll"+c;f.fn[d]=3Dfunction(c){var =
e,g;if(c=3D=3D=3Db){e=3Dthis[0];if(!e){return null}g=3Dcy(e);return =
g?"pageXOffset" in =
g?g[a?"pageYOffset":"pageXOffset"]:f.support.boxModel&&g.document.documen=
tElement[d]||g.document.body[d]:e[d]}return =
this.each(function(){g=3Dcy(this),g?g.scrollTo(a?f(g).scrollLeft():c,a?c:=
f(g).scrollTop()):this[d]=3Dc})}}),f.each(["Height","Width"],function(a,c=
){var d=3Dc.toLowerCase();f.fn["inner"+c]=3Dfunction(){var =
a=3Dthis[0];return =
a?a.style?parseFloat(f.css(a,d,"padding")):this[d]():null},f.fn["outer"+c=
]=3Dfunction(a){var b=3Dthis[0];return =
b?b.style?parseFloat(f.css(b,d,a?"margin":"border")):this[d]():null},f.fn=
[d]=3Dfunction(a){var e=3Dthis[0];if(!e){return =
a=3D=3Dnull?null:this}if(f.isFunction(a)){return =
this.each(function(b){var =
c=3Df(this);c[d](a.call(this,b,c[d]()))})}if(f.isWindow(e)){var =
g=3De.document.documentElement["client"+c],h=3De.document.body;return =
e.document.compatMode=3D=3D=3D"CSS1Compat"&&g||h&&h["client"+c]||g}if(e.n=
odeType=3D=3D=3D9){return =
Math.max(e.documentElement["client"+c],e.body["scroll"+c],e.documentEleme=
nt["scroll"+c],e.body["offset"+c],e.documentElement["offset"+c])}if(a=3D=3D=
=3Db){var i=3Df.css(e,d),j=3DparseFloat(i);return =
f.isNumeric(j)?j:i}return this.css(d,typeof =
a=3D=3D"string"?a:a+"px")}}),a.jQuery=3Da.$=3Df,typeof =
define=3D=3D"function"&&define.amd&&define.amd.jQuery&&define("jquery",[]=
,function(){return f})})(window);=0A=
/* jQuery UI 1.8.18 | jquery.org/license */=0A=
(function(f,e){function g(a){return =
!f(a).parents().andSelf().filter(function(){return =
f.curCSS(this,"visibility")=3D=3D=3D"hidden"||f.expr.filters.hidden(this)=
}).length}function h(a,l){var =
k=3Da.nodeName.toLowerCase();if("area"=3D=3D=3Dk){var =
j=3Da.parentNode,i=3Dj.name,d;if(!a.href||!i||j.nodeName.toLowerCase()!=3D=
=3D"map"){return !1}d=3Df("img[usemap=3D#"+i+"]")[0];return =
!!d&&g(d)}return(/input|select|textarea|button|object/.test(k)?!a.disable=
d:"a"=3D=3Dk?a.href||l:l)&&g(a)}f.ui=3Df.ui||{};f.ui.version||(f.extend(f=
.ui,{version:"1.8.18",keyCode:{ALT:18,BACKSPACE:8,CAPS_LOCK:20,COMMA:188,=
COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,=
END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:10=
7,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:1=
06,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:=
16,SPACE:32,TAB:9,UP:38,WINDOWS:91}}),f.fn.extend({propAttr:f.fn.prop||f.=
fn.attr,_focus:f.fn.focus,focus:function(a,d){return typeof =
a=3D=3D"number"?this.each(function(){var =
b=3Dthis;setTimeout(function(){f(b).focus(),d&&d.call(b)},a)}):this._focu=
s.apply(this,arguments)},scrollParent:function(){var =
a;f.browser.msie&&/(static|relative)/.test(this.css("position"))||/absolu=
te/.test(this.css("position"))?a=3Dthis.parents().filter(function(){retur=
n/(relative|absolute|fixed)/.test(f.curCSS(this,"position",1))&&/(auto|sc=
roll)/.test(f.curCSS(this,"overflow",1)+f.curCSS(this,"overflow-y",1)+f.c=
urCSS(this,"overflow-x",1))}).eq(0):a=3Dthis.parents().filter(function(){=
return/(auto|scroll)/.test(f.curCSS(this,"overflow",1)+f.curCSS(this,"ove=
rflow-y",1)+f.curCSS(this,"overflow-x",1))}).eq(0);return/fixed/.test(thi=
s.css("position"))||!a.length?f(document):a},zIndex:function(j){if(j!=3D=3D=
e){return this.css("zIndex",j)}if(this.length){var =
i=3Df(this[0]),b,a;while(i.length&&i[0]!=3D=3Ddocument){b=3Di.css("positi=
on");if(b=3D=3D=3D"absolute"||b=3D=3D=3D"relative"||b=3D=3D=3D"fixed"){a=3D=
parseInt(i.css("zIndex"),10);if(!isNaN(a)&&a!=3D=3D0){return =
a}}i=3Di.parent()}}return 0},disableSelection:function(){return =
this.bind((f.support.selectstart?"selectstart":"mousedown")+".ui-disableS=
election",function(b){b.preventDefault()})},enableSelection:function(){re=
turn =
this.unbind(".ui-disableSelection")}}),f.each(["Width","Height"],function=
(l,k){function =
a(m,p,o,n){f.each(j,function(){p-=3DparseFloat(f.curCSS(m,"padding"+this,=
!0))||0,o&&(p-=3DparseFloat(f.curCSS(m,"border"+this+"Width",!0))||0),n&&=
(p-=3DparseFloat(f.curCSS(m,"margin"+this,!0))||0)});return p}var =
j=3Dk=3D=3D=3D"Width"?["Left","Right"]:["Top","Bottom"],i=3Dk.toLowerCase=
(),b=3D{innerWidth:f.fn.innerWidth,innerHeight:f.fn.innerHeight,outerWidt=
h:f.fn.outerWidth,outerHeight:f.fn.outerHeight};f.fn["inner"+k]=3Dfunctio=
n(d){if(d=3D=3D=3De){return b["inner"+k].call(this)}return =
this.each(function(){f(this).css(i,a(this,d)+"px")})},f.fn["outer"+k]=3Df=
unction(d,m){if(typeof d!=3D"number"){return =
b["outer"+k].call(this,d)}return =
this.each(function(){f(this).css(i,a(this,d,!0,m)+"px")})}}),f.extend(f.e=
xpr[":"],{data:function(a,j,i){return =
!!f.data(a,i[3])},focusable:function(a){return =
h(a,!isNaN(f.attr(a,"tabindex")))},tabbable:function(a){var =
i=3Df.attr(a,"tabindex"),c=3DisNaN(i);return(c||i>=3D0)&&h(a,!c)}}),f(fun=
ction(){var =
a=3Ddocument.body,d=3Da.appendChild(d=3Ddocument.createElement("div"));d.=
offsetHeight,f.extend(d.style,{minHeight:"100px",height:"auto",padding:0,=
borderWidth:0}),f.support.minHeight=3Dd.offsetHeight=3D=3D=3D100,f.suppor=
t.selectstart=3D"onselectstart" in =
d,a.removeChild(d).style.display=3D"none"}),f.extend(f.ui,{plugin:{add:fu=
nction(a,l,k){var j=3Df.ui[a].prototype;for(var i in =
k){j.plugins[i]=3Dj.plugins[i]||[],j.plugins[i].push([l,k[i]])}},call:fun=
ction(j,i,m){var =
l=3Dj.plugins[i];if(!!l&&!!j.element[0].parentNode){for(var =
k=3D0;k<l.length;k++){j.options[l[k][0]]&&l[k][1].apply(j.element,m)}}}},=
contains:function(d,c){return =
document.compareDocumentPosition?d.compareDocumentPosition(c)&16:d!=3D=3D=
c&&d.contains(c)},hasScroll:function(a,k){if(f(a).css("overflow")=3D=3D=3D=
"hidden"){return !1}var =
j=3Dk&&k=3D=3D=3D"left"?"scrollLeft":"scrollTop",i=3D!1;if(a[j]>0){return=
 !0}a[j]=3D1,i=3Da[j]>0,a[j]=3D0;return =
i},isOverAxis:function(i,d,j){return =
i>d&&i<d+j},isOver:function(a,m,l,k,j,i){return =
f.ui.isOverAxis(a,l,j)&&f.ui.isOverAxis(m,k,i)}}))})(jQuery);(function(f,=
e){if(f.cleanData){var h=3Df.cleanData;f.cleanData=3Dfunction(a){for(var =
j=3D0,i;(i=3Da[j])!=3Dnull;j++){try{f(i).triggerHandler("remove")}catch(c=
){}}h(a)}}else{var g=3Df.fn.remove;f.fn.remove=3Dfunction(a,d){return =
this.each(function(){d||(!a||f.filter(a,[this]).length)&&f("*",this).add(=
[this]).each(function(){try{f(this).triggerHandler("remove")}catch(c){}})=
;return g.call(f(this),a,d)})}}f.widget=3Dfunction(a,m,l){var =
k=3Da.split(".")[0],j;a=3Da.split(".")[1],j=3Dk+"-"+a,l||(l=3Dm,m=3Df.Wid=
get),f.expr[":"][j]=3Dfunction(b){return =
!!f.data(b,a)},f[k]=3Df[k]||{},f[k][a]=3Dfunction(d,c){arguments.length&&=
this._createWidget(d,c)};var i=3Dnew =
m;i.options=3Df.extend(!0,{},i.options),f[k][a].prototype=3Df.extend(!0,i=
,{namespace:k,widgetName:a,widgetEventPrefix:f[k][a].prototype.widgetEven=
tPrefix||a,widgetBaseClass:j},l),f.widget.bridge(a,f[k][a])},f.widget.bri=
dge=3Dfunction(b,a){f.fn[b]=3Dfunction(j){var i=3Dtypeof =
j=3D=3D"string",d=3DArray.prototype.slice.call(arguments,1),c=3Dthis;j=3D=
!i&&d.length?f.extend.apply(null,[!0,j].concat(d)):j;if(i&&j.charAt(0)=3D=
=3D=3D"_"){return c}i?this.each(function(){var =
l=3Df.data(this,b),k=3Dl&&f.isFunction(l[j])?l[j].apply(l,d):l;if(k!=3D=3D=
l&&k!=3D=3De){c=3Dk;return !1}}):this.each(function(){var =
k=3Df.data(this,b);k?k.option(j||{})._init():f.data(this,b,new =
a(j,this))});return =
c}},f.Widget=3Dfunction(d,c){arguments.length&&this._createWidget(d,c)},f=
.Widget.prototype=3D{widgetName:"widget",widgetEventPrefix:"",options:{di=
sabled:!1},_createWidget:function(a,j){f.data(j,this.widgetName,this),thi=
s.element=3Df(j),this.options=3Df.extend(!0,{},this.options,this._getCrea=
teOptions(),a);var =
i=3Dthis;this.element.bind("remove."+this.widgetName,function(){i.destroy=
()}),this._create(),this._trigger("create"),this._init()},_getCreateOptio=
ns:function(){return =
f.metadata&&f.metadata.get(this.element[0])[this.widgetName]},_create:fun=
ction(){},_init:function(){},destroy:function(){this.element.unbind("."+t=
his.widgetName).removeData(this.widgetName),this.widget().unbind("."+this=
.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass=
+"-disabled ui-state-disabled")},widget:function(){return =
this.element},option:function(i,b){var =
a=3Di;if(arguments.length=3D=3D=3D0){return =
f.extend({},this.options)}if(typeof =
i=3D=3D"string"){if(b=3D=3D=3De){return =
this.options[i]}a=3D{},a[i]=3Db}this._setOptions(a);return =
this},_setOptions:function(a){var =
d=3Dthis;f.each(a,function(i,c){d._setOption(i,c)});return =
this},_setOption:function(d,c){this.options[d]=3Dc,d=3D=3D=3D"disabled"&&=
this.widget()[c?"addClass":"removeClass"](this.widgetBaseClass+"-disabled=
 ui-state-disabled").attr("aria-disabled",c);return =
this},enable:function(){return =
this._setOption("disabled",!1)},disable:function(){return =
this._setOption("disabled",!0)},_trigger:function(a,m,l){var =
k,j,i=3Dthis.options[a];l=3Dl||{},m=3Df.Event(m),m.type=3D(a=3D=3D=3Dthis=
.widgetEventPrefix?a:this.widgetEventPrefix+a).toLowerCase(),m.target=3Dt=
his.element[0],j=3Dm.originalEvent;if(j){for(k in j){k in =
m||(m[k]=3Dj[k])}}this.element.trigger(m,l);return =
!(f.isFunction(i)&&i.call(this.element[0],m,l)=3D=3D=3D!1||m.isDefaultPre=
vented())}}})(jQuery);(function(e,d){var =
f=3D!1;e(document).mouseup(function(b){f=3D!1}),e.widget("ui.mouse",{opti=
ons:{cancel:":input,option",distance:1,delay:0},_mouseInit:function(){var=
 =
a=3Dthis;this.element.bind("mousedown."+this.widgetName,function(b){retur=
n =
a._mouseDown(b)}).bind("click."+this.widgetName,function(b){if(!0=3D=3D=3D=
e.data(b.target,a.widgetName+".preventClickEvent")){e.removeData(b.target=
,a.widgetName+".preventClickEvent"),b.stopImmediatePropagation();return =
!1}}),this.started=3D!1},_mouseDestroy:function(){this.element.unbind("."=
+this.widgetName)},_mouseDown:function(a){if(!f){this._mouseStarted&&this=
._mouseUp(a),this._mouseDownEvent=3Da;var =
h=3Dthis,g=3Da.which=3D=3D1,c=3Dtypeof =
this.options.cancel=3D=3D"string"&&a.target.nodeName?e(a.target).closest(=
this.options.cancel).length:!1;if(!g||c||!this._mouseCapture(a)){return =
!0}this.mouseDelayMet=3D!this.options.delay,this.mouseDelayMet||(this._mo=
useDelayTimer=3DsetTimeout(function(){h.mouseDelayMet=3D!0},this.options.=
delay));if(this._mouseDistanceMet(a)&&this._mouseDelayMet(a)){this._mouse=
Started=3Dthis._mouseStart(a)!=3D=3D!1;if(!this._mouseStarted){a.preventD=
efault();return =
!0}}!0=3D=3D=3De.data(a.target,this.widgetName+".preventClickEvent")&&e.r=
emoveData(a.target,this.widgetName+".preventClickEvent"),this._mouseMoveD=
elegate=3Dfunction(b){return =
h._mouseMove(b)},this._mouseUpDelegate=3Dfunction(b){return =
h._mouseUp(b)},e(document).bind("mousemove."+this.widgetName,this._mouseM=
oveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),a.pre=
ventDefault(),f=3D!0;return =
!0}},_mouseMove:function(a){if(e.browser.msie&&!(document.documentMode>=3D=
9)&&!a.button){return =
this._mouseUp(a)}if(this._mouseStarted){this._mouseDrag(a);return =
a.preventDefault()}this._mouseDistanceMet(a)&&this._mouseDelayMet(a)&&(th=
is._mouseStarted=3Dthis._mouseStart(this._mouseDownEvent,a)!=3D=3D!1,this=
._mouseStarted?this._mouseDrag(a):this._mouseUp(a));return =
!this._mouseStarted},_mouseUp:function(a){e(document).unbind("mousemove."=
+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetNa=
me,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=3D!1,a.=
target=3D=3Dthis._mouseDownEvent.target&&e.data(a.target,this.widgetName+=
".preventClickEvent",!0),this._mouseStop(a));return =
!1},_mouseDistanceMet:function(b){return =
Math.max(Math.abs(this._mouseDownEvent.pageX-b.pageX),Math.abs(this._mous=
eDownEvent.pageY-b.pageY))>=3Dthis.options.distance},_mouseDelayMet:funct=
ion(b){return =
this.mouseDelayMet},_mouseStart:function(b){},_mouseDrag:function(b){},_m=
ouseStop:function(b){},_mouseCapture:function(b){return =
!0}})})(jQuery);(function(j,i){j.ui=3Dj.ui||{};var =
p=3D/left|center|right/,o=3D/top|center|bottom/,n=3D"center",m=3D{},l=3Dj=
.fn.position,k=3Dj.fn.offset;j.fn.position=3Dfunction(c){if(!c||!c.of){re=
turn l.apply(this,arguments)}c=3Dj.extend({},c);var =
q=3Dj(c.of),g=3Dq[0],f=3D(c.collision||"flip").split(" =
"),e=3Dc.offset?c.offset.split(" =
"):[0,0],d,a,r;g.nodeType=3D=3D=3D9?(d=3Dq.width(),a=3Dq.height(),r=3D{to=
p:0,left:0}):g.setTimeout?(d=3Dq.width(),a=3Dq.height(),r=3D{top:q.scroll=
Top(),left:q.scrollLeft()}):g.preventDefault?(c.at=3D"left =
top",d=3Da=3D0,r=3D{top:c.of.pageY,left:c.of.pageX}):(d=3Dq.outerWidth(),=
a=3Dq.outerHeight(),r=3Dq.offset()),j.each(["my","at"],function(){var =
b=3D(c[this]||"").split(" =
");b.length=3D=3D=3D1&&(b=3Dp.test(b[0])?b.concat([n]):o.test(b[0])?[n].c=
oncat(b):[n,n]),b[0]=3Dp.test(b[0])?b[0]:n,b[1]=3Do.test(b[1])?b[1]:n,c[t=
his]=3Db}),f.length=3D=3D=3D1&&(f[1]=3Df[0]),e[0]=3DparseInt(e[0],10)||0,=
e.length=3D=3D=3D1&&(e[1]=3De[0]),e[1]=3DparseInt(e[1],10)||0,c.at[0]=3D=3D=
=3D"right"?r.left+=3Dd:c.at[0]=3D=3D=3Dn&&(r.left+=3Dd/2),c.at[1]=3D=3D=3D=
"bottom"?r.top+=3Da:c.at[1]=3D=3D=3Dn&&(r.top+=3Da/2),r.left+=3De[0],r.to=
p+=3De[1];return this.each(function(){var =
z=3Dj(this),y=3Dz.outerWidth(),x=3Dz.outerHeight(),w=3DparseInt(j.curCSS(=
this,"marginLeft",!0))||0,v=3DparseInt(j.curCSS(this,"marginTop",!0))||0,=
u=3Dy+w+(parseInt(j.curCSS(this,"marginRight",!0))||0),t=3Dx+v+(parseInt(=
j.curCSS(this,"marginBottom",!0))||0),s=3Dj.extend({},r),b;c.my[0]=3D=3D=3D=
"right"?s.left-=3Dy:c.my[0]=3D=3D=3Dn&&(s.left-=3Dy/2),c.my[1]=3D=3D=3D"b=
ottom"?s.top-=3Dx:c.my[1]=3D=3D=3Dn&&(s.top-=3Dx/2),m.fractions||(s.left=3D=
Math.round(s.left),s.top=3DMath.round(s.top)),b=3D{left:s.left-w,top:s.to=
p-v},j.each(["left","top"],function(A,h){j.ui.position[f[A]]&&j.ui.positi=
on[f[A]][h](s,{targetWidth:d,targetHeight:a,elemWidth:y,elemHeight:x,coll=
isionPosition:b,collisionWidth:u,collisionHeight:t,offset:e,my:c.my,at:c.=
at})}),j.fn.bgiframe&&z.bgiframe(),z.offset(j.extend(s,{using:c.using}))}=
)},j.ui.position=3D{fit:{left:function(a,h){var =
g=3Dj(window),f=3Dh.collisionPosition.left+h.collisionWidth-g.width()-g.s=
crollLeft();a.left=3Df>0?a.left-f:Math.max(a.left-h.collisionPosition.lef=
t,a.left)},top:function(a,h){var =
g=3Dj(window),f=3Dh.collisionPosition.top+h.collisionHeight-g.height()-g.=
scrollTop();a.top=3Df>0?a.top-f:Math.max(a.top-h.collisionPosition.top,a.=
top)}},flip:{left:function(a,u){if(u.at[0]!=3D=3Dn){var =
t=3Dj(window),s=3Du.collisionPosition.left+u.collisionWidth-t.width()-t.s=
crollLeft(),r=3Du.my[0]=3D=3D=3D"left"?-u.elemWidth:u.my[0]=3D=3D=3D"righ=
t"?u.elemWidth:0,q=3Du.at[0]=3D=3D=3D"left"?u.targetWidth:-u.targetWidth,=
e=3D-2*u.offset[0];a.left+=3Du.collisionPosition.left<0?r+q+e:s>0?r+q+e:0=
}},top:function(a,u){if(u.at[1]!=3D=3Dn){var =
t=3Dj(window),s=3Du.collisionPosition.top+u.collisionHeight-t.height()-t.=
scrollTop(),r=3Du.my[1]=3D=3D=3D"top"?-u.elemHeight:u.my[1]=3D=3D=3D"bott=
om"?u.elemHeight:0,q=3Du.at[1]=3D=3D=3D"top"?u.targetHeight:-u.targetHeig=
ht,e=3D-2*u.offset[1];a.top+=3Du.collisionPosition.top<0?r+q+e:s>0?r+q+e:=
0}}}},j.offset.setOffset||(j.offset.setOffset=3Dfunction(a,v){/static/.te=
st(j.curCSS(a,"position"))&&(a.style.position=3D"relative");var =
u=3Dj(a),t=3Du.offset(),s=3DparseInt(j.curCSS(a,"top",!0),10)||0,r=3Dpars=
eInt(j.curCSS(a,"left",!0),10)||0,q=3D{top:v.top-t.top+s,left:v.left-t.le=
ft+r};"using" in =
v?v.using.call(a,q):u.css(q)},j.fn.offset=3Dfunction(a){var =
d=3Dthis[0];if(!d||!d.ownerDocument){return null}if(a){return =
this.each(function(){j.offset.setOffset(this,a)})}return =
k.call(this)}),function(){var =
a=3Ddocument.getElementsByTagName("body")[0],v=3Ddocument.createElement("=
div"),u,t,s,r,q;u=3Ddocument.createElement(a?"div":"body"),s=3D{visibilit=
y:"hidden",width:0,height:0,border:0,margin:0,background:"none"},a&&j.ext=
end(s,{position:"absolute",left:"-1000px",top:"-1000px"});for(var f in =
s){u.style[f]=3Ds[f]}u.appendChild(v),t=3Da||document.documentElement,t.i=
nsertBefore(u,t.firstChild),v.style.cssText=3D"position: absolute; left: =
10.7432222px; top: 10.432325px; height: 30px; width: =
201px;",r=3Dj(v).offset(function(d,c){return =
c}).offset(),u.innerHTML=3D"",t.removeChild(u),q=3Dr.top+r.left+(a?2000:0=
),m.fractions=3Dq>21&&q<22}()})(jQuery);(function($,undefined){function =
isArray(a){return a&&($.browser.safari&&typeof =
a=3D=3D"object"&&a.length||a.constructor&&a.constructor.toString().match(=
/\Array\(\)/))}function extendRemove(a,b){$.extend(a,b);for(var c in =
b){if(b[c]=3D=3Dnull||b[c]=3D=3Dundefined){a[c]=3Db[c]}}return =
a}function bindHover(a){var b=3D"button, .ui-datepicker-prev, =
.ui-datepicker-next, .ui-datepicker-calendar td a";return =
a.bind("mouseout",function(a){var =
c=3D$(a.target).closest(b);!c.length||c.removeClass("ui-state-hover =
ui-datepicker-prev-hover =
ui-datepicker-next-hover")}).bind("mouseover",function(c){var =
d=3D$(c.target).closest(b);!$.datepicker._isDisabledDatepicker(instActive=
.inline?a.parent()[0]:instActive.input[0])&&!!d.length&&(d.parents(".ui-d=
atepicker-calendar").find("a").removeClass("ui-state-hover"),d.addClass("=
ui-state-hover"),d.hasClass("ui-datepicker-prev")&&d.addClass("ui-datepic=
ker-prev-hover"),d.hasClass("ui-datepicker-next")&&d.addClass("ui-datepic=
ker-next-hover"))})}function =
Datepicker(){this.debug=3D!1,this._curInst=3Dnull,this._keyEvent=3D!1,thi=
s._disabledInputs=3D[],this._datepickerShowing=3D!1,this._inDialog=3D!1,t=
his._mainDivId=3D"ui-datepicker-div",this._inlineClass=3D"ui-datepicker-i=
nline",this._appendClass=3D"ui-datepicker-append",this._triggerClass=3D"u=
i-datepicker-trigger",this._dialogClass=3D"ui-datepicker-dialog",this._di=
sableClass=3D"ui-datepicker-disabled",this._unselectableClass=3D"ui-datep=
icker-unselectable",this._currentClass=3D"ui-datepicker-current-day",this=
._dayOverClass=3D"ui-datepicker-days-cell-over",this.regional=3D[],this.r=
egional[""]=3D{closeText:"Done",prevText:"Prev",nextText:"Next",currentTe=
xt:"Today",monthNames:["January","February","March","April","May","June",=
"July","August","September","October","November","December"],monthNamesSh=
ort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","D=
ec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday=
","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],d=
ayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateForma=
t:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},thi=
s._defaults=3D{showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDat=
e:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,h=
ideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!=
1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonth=
s:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",min=
Date:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null=
,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showC=
urrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",cons=
trainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},$.extend(this._=
defaults,this.regional[""]),this.dpDiv=3DbindHover($('<div =
id=3D"'+this._mainDivId+'" class=3D"ui-datepicker ui-widget =
ui-widget-content ui-helper-clearfix =
ui-corner-all"></div>'))}$.extend($.ui,{datepicker:{version:"1.8.18"}});v=
ar PROP_NAME=3D"datepicker",dpuuid=3D(new =
Date).getTime(),instActive;$.extend(Datepicker.prototype,{markerClassName=
:"hasDatepicker",maxRows:4,log:function(){this.debug&&console.log.apply("=
",arguments)},_widgetDatepicker:function(){return =
this.dpDiv},setDefaults:function(a){extendRemove(this._defaults,a||{});re=
turn this},_attachDatepicker:function(target,settings){var =
inlineSettings=3Dnull;for(var attrName in this._defaults){var =
attrValue=3Dtarget.getAttribute("date:"+attrName);if(attrValue){inlineSet=
tings=3DinlineSettings||{};try{inlineSettings[attrName]=3Deval(attrValue)=
}catch(err){inlineSettings[attrName]=3DattrValue}}}var =
nodeName=3Dtarget.nodeName.toLowerCase(),inline=3DnodeName=3D=3D"div"||no=
deName=3D=3D"span";target.id||(this.uuid+=3D1,target.id=3D"dp"+this.uuid)=
;var =
inst=3Dthis._newInst($(target),inline);inst.settings=3D$.extend({},settin=
gs||{},inlineSettings||{}),nodeName=3D=3D"input"?this._connectDatepicker(=
target,inst):inline&&this._inlineDatepicker(target,inst)},_newInst:functi=
on(a,b){var =
c=3Da[0].id.replace(/([^A-Za-z0-9_-])/g,"\\\\$1");return{id:c,input:a,sel=
ectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:b=
,dpDiv:b?bindHover($('<div class=3D"'+this._inlineClass+' ui-datepicker =
ui-widget ui-widget-content ui-helper-clearfix =
ui-corner-all"></div>')):this.dpDiv}},_connectDatepicker:function(a,b){va=
r =
c=3D$(a);b.append=3D$([]),b.trigger=3D$([]);c.hasClass(this.markerClassNa=
me)||(this._attachments(c,b),c.addClass(this.markerClassName).keydown(thi=
s._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind("setDa=
ta.datepicker",function(a,c,d){b.settings[c]=3Dd}).bind("getData.datepick=
er",function(a,c){return =
this._get(b,c)}),this._autoSize(b),$.data(a,PROP_NAME,b),b.settings.disab=
led&&this._disableDatepicker(a))},_attachments:function(a,b){var =
c=3Dthis._get(b,"appendText"),d=3Dthis._get(b,"isRTL");b.append&&b.append=
.remove(),c&&(b.append=3D$('<span =
class=3D"'+this._appendClass+'">'+c+"</span>"),a[d?"before":"after"](b.ap=
pend)),a.unbind("focus",this._showDatepicker),b.trigger&&b.trigger.remove=
();var =
e=3Dthis._get(b,"showOn");(e=3D=3D"focus"||e=3D=3D"both")&&a.focus(this._=
showDatepicker);if(e=3D=3D"button"||e=3D=3D"both"){var =
f=3Dthis._get(b,"buttonText"),g=3Dthis._get(b,"buttonImage");b.trigger=3D=
$(this._get(b,"buttonImageOnly")?$("<img/>").addClass(this._triggerClass)=
.attr({src:g,alt:f,title:f}):$('<button =
type=3D"button"></button>').addClass(this._triggerClass).html(g=3D=3D""?f=
:$("<img/>").attr({src:g,alt:f,title:f}))),a[d?"before":"after"](b.trigge=
r),b.trigger.click(function(){$.datepicker._datepickerShowing&&$.datepick=
er._lastInput=3D=3Da[0]?$.datepicker._hideDatepicker():$.datepicker._date=
pickerShowing&&$.datepicker._lastInput!=3Da[0]?($.datepicker._hideDatepic=
ker(),$.datepicker._showDatepicker(a[0])):$.datepicker._showDatepicker(a[=
0]);return =
!1})}},_autoSize:function(a){if(this._get(a,"autoSize")&&!a.inline){var =
b=3Dnew =
Date(2009,11,20),c=3Dthis._get(a,"dateFormat");if(c.match(/[DM]/)){var =
d=3Dfunction(a){var b=3D0,c=3D0;for(var =
d=3D0;d<a.length;d++){a[d].length>b&&(b=3Da[d].length,c=3Dd)}return =
c};b.setMonth(d(this._get(a,c.match(/MM/)?"monthNames":"monthNamesShort")=
)),b.setDate(d(this._get(a,c.match(/DD/)?"dayNames":"dayNamesShort"))+20-=
b.getDay())}a.input.attr("size",this._formatDate(a,b).length)}},_inlineDa=
tepicker:function(a,b){var =
c=3D$(a);c.hasClass(this.markerClassName)||(c.addClass(this.markerClassNa=
me).append(b.dpDiv).bind("setData.datepicker",function(a,c,d){b.settings[=
c]=3Dd}).bind("getData.datepicker",function(a,c){return =
this._get(b,c)}),$.data(a,PROP_NAME,b),this._setDate(b,this._getDefaultDa=
te(b),!0),this._updateDatepicker(b),this._updateAlternate(b),b.settings.d=
isabled&&this._disableDatepicker(a),b.dpDiv.css("display","block"))},_dia=
logDatepicker:function(a,b,c,d,e){var =
f=3Dthis._dialogInst;if(!f){this.uuid+=3D1;var =
g=3D"dp"+this.uuid;this._dialogInput=3D$('<input type=3D"text" =
id=3D"'+g+'" style=3D"position: absolute; top: -100px; width: 0px; =
z-index: =
-10;"/>'),this._dialogInput.keydown(this._doKeyDown),$("body").append(thi=
s._dialogInput),f=3Dthis._dialogInst=3Dthis._newInst(this._dialogInput,!1=
),f.settings=3D{},$.data(this._dialogInput[0],PROP_NAME,f)}extendRemove(f=
.settings,d||{}),b=3Db&&b.constructor=3D=3DDate?this._formatDate(f,b):b,t=
his._dialogInput.val(b),this._pos=3De?e.length?e:[e.pageX,e.pageY]:null;i=
f(!this._pos){var =
h=3Ddocument.documentElement.clientWidth,i=3Ddocument.documentElement.cli=
entHeight,j=3Ddocument.documentElement.scrollLeft||document.body.scrollLe=
ft,k=3Ddocument.documentElement.scrollTop||document.body.scrollTop;this._=
pos=3D[h/2-100+j,i/2-150+k]}this._dialogInput.css("left",this._pos[0]+20+=
"px").css("top",this._pos[1]+"px"),f.settings.onSelect=3Dc,this._inDialog=
=3D!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._d=
ialogInput[0]),$.blockUI&&$.blockUI(this.dpDiv),$.data(this._dialogInput[=
0],PROP_NAME,f);return this},_destroyDatepicker:function(a){var =
b=3D$(a),c=3D$.data(a,PROP_NAME);if(!!b.hasClass(this.markerClassName)){v=
ar =
d=3Da.nodeName.toLowerCase();$.removeData(a,PROP_NAME),d=3D=3D"input"?(c.=
append.remove(),c.trigger.remove(),b.removeClass(this.markerClassName).un=
bind("focus",this._showDatepicker).unbind("keydown",this._doKeyDown).unbi=
nd("keypress",this._doKeyPress).unbind("keyup",this._doKeyUp)):(d=3D=3D"d=
iv"||d=3D=3D"span")&&b.removeClass(this.markerClassName).empty()}},_enabl=
eDatepicker:function(a){var =
b=3D$(a),c=3D$.data(a,PROP_NAME);if(!!b.hasClass(this.markerClassName)){v=
ar =
d=3Da.nodeName.toLowerCase();if(d=3D=3D"input"){a.disabled=3D!1,c.trigger=
.filter("button").each(function(){this.disabled=3D!1}).end().filter("img"=
).css({opacity:"1.0",cursor:""})}else{if(d=3D=3D"div"||d=3D=3D"span"){var=
 =
e=3Db.children("."+this._inlineClass);e.children().removeClass("ui-state-=
disabled"),e.find("select.ui-datepicker-month, =
select.ui-datepicker-year").removeAttr("disabled")}}this._disabledInputs=3D=
$.map(this._disabledInputs,function(b){return =
b=3D=3Da?null:b})}},_disableDatepicker:function(a){var =
b=3D$(a),c=3D$.data(a,PROP_NAME);if(!!b.hasClass(this.markerClassName)){v=
ar =
d=3Da.nodeName.toLowerCase();if(d=3D=3D"input"){a.disabled=3D!0,c.trigger=
.filter("button").each(function(){this.disabled=3D!0}).end().filter("img"=
).css({opacity:"0.5",cursor:"default"})}else{if(d=3D=3D"div"||d=3D=3D"spa=
n"){var =
e=3Db.children("."+this._inlineClass);e.children().addClass("ui-state-dis=
abled"),e.find("select.ui-datepicker-month, =
select.ui-datepicker-year").attr("disabled","disabled")}}this._disabledIn=
puts=3D$.map(this._disabledInputs,function(b){return =
b=3D=3Da?null:b}),this._disabledInputs[this._disabledInputs.length]=3Da}}=
,_isDisabledDatepicker:function(a){if(!a){return !1}for(var =
b=3D0;b<this._disabledInputs.length;b++){if(this._disabledInputs[b]=3D=3D=
a){return !0}}return !1},_getInst:function(a){try{return =
$.data(a,PROP_NAME)}catch(b){throw"Missing instance data for this =
datepicker"}},_optionDatepicker:function(a,b,c){var =
d=3Dthis._getInst(a);if(arguments.length=3D=3D2&&typeof =
b=3D=3D"string"){return =
b=3D=3D"defaults"?$.extend({},$.datepicker._defaults):d?b=3D=3D"all"?$.ex=
tend({},d.settings):this._get(d,b):null}var e=3Db||{};typeof =
b=3D=3D"string"&&(e=3D{},e[b]=3Dc);if(d){this._curInst=3D=3Dd&&this._hide=
Datepicker();var =
f=3Dthis._getDateDatepicker(a,!0),g=3Dthis._getMinMaxDate(d,"min"),h=3Dth=
is._getMinMaxDate(d,"max");extendRemove(d.settings,e),g!=3D=3Dnull&&e.dat=
eFormat!=3D=3Dundefined&&e.minDate=3D=3D=3Dundefined&&(d.settings.minDate=
=3Dthis._formatDate(d,g)),h!=3D=3Dnull&&e.dateFormat!=3D=3Dundefined&&e.m=
axDate=3D=3D=3Dundefined&&(d.settings.maxDate=3Dthis._formatDate(d,h)),th=
is._attachments($(a),d),this._autoSize(d),this._setDate(d,f),this._update=
Alternate(d),this._updateDatepicker(d)}},_changeDatepicker:function(a,b,c=
){this._optionDatepicker(a,b,c)},_refreshDatepicker:function(a){var =
b=3Dthis._getInst(a);b&&this._updateDatepicker(b)},_setDateDatepicker:fun=
ction(a,b){var =
c=3Dthis._getInst(a);c&&(this._setDate(c,b),this._updateDatepicker(c),thi=
s._updateAlternate(c))},_getDateDatepicker:function(a,b){var =
c=3Dthis._getInst(a);c&&!c.inline&&this._setDateFromField(c,b);return =
c?this._getDate(c):null},_doKeyDown:function(a){var =
b=3D$.datepicker._getInst(a.target),c=3D!0,d=3Db.dpDiv.is(".ui-datepicker=
-rtl");b._keyEvent=3D!0;if($.datepicker._datepickerShowing){switch(a.keyC=
ode){case 9:$.datepicker._hideDatepicker(),c=3D!1;break;case 13:var =
e=3D$("td."+$.datepicker._dayOverClass+":not(."+$.datepicker._currentClas=
s+")",b.dpDiv);e[0]&&$.datepicker._selectDay(a.target,b.selectedMonth,b.s=
electedYear,e[0]);var f=3D$.datepicker._get(b,"onSelect");if(f){var =
g=3D$.datepicker._formatDate(b);f.apply(b.input?b.input[0]:null,[g,b])}el=
se{$.datepicker._hideDatepicker()}return !1;case =
27:$.datepicker._hideDatepicker();break;case =
33:$.datepicker._adjustDate(a.target,a.ctrlKey?-$.datepicker._get(b,"step=
BigMonths"):-$.datepicker._get(b,"stepMonths"),"M");break;case =
34:$.datepicker._adjustDate(a.target,a.ctrlKey?+$.datepicker._get(b,"step=
BigMonths"):+$.datepicker._get(b,"stepMonths"),"M");break;case =
35:(a.ctrlKey||a.metaKey)&&$.datepicker._clearDate(a.target),c=3Da.ctrlKe=
y||a.metaKey;break;case =
36:(a.ctrlKey||a.metaKey)&&$.datepicker._gotoToday(a.target),c=3Da.ctrlKe=
y||a.metaKey;break;case =
37:(a.ctrlKey||a.metaKey)&&$.datepicker._adjustDate(a.target,d?1:-1,"D"),=
c=3Da.ctrlKey||a.metaKey,a.originalEvent.altKey&&$.datepicker._adjustDate=
(a.target,a.ctrlKey?-$.datepicker._get(b,"stepBigMonths"):-$.datepicker._=
get(b,"stepMonths"),"M");break;case =
38:(a.ctrlKey||a.metaKey)&&$.datepicker._adjustDate(a.target,-7,"D"),c=3D=
a.ctrlKey||a.metaKey;break;case =
39:(a.ctrlKey||a.metaKey)&&$.datepicker._adjustDate(a.target,d?-1:1,"D"),=
c=3Da.ctrlKey||a.metaKey,a.originalEvent.altKey&&$.datepicker._adjustDate=
(a.target,a.ctrlKey?+$.datepicker._get(b,"stepBigMonths"):+$.datepicker._=
get(b,"stepMonths"),"M");break;case =
40:(a.ctrlKey||a.metaKey)&&$.datepicker._adjustDate(a.target,7,"D"),c=3Da=
.ctrlKey||a.metaKey;break;default:c=3D!1}}else{a.keyCode=3D=3D36&&a.ctrlK=
ey?$.datepicker._showDatepicker(this):c=3D!1}c&&(a.preventDefault(),a.sto=
pPropagation())},_doKeyPress:function(a){var =
b=3D$.datepicker._getInst(a.target);if($.datepicker._get(b,"constrainInpu=
t")){var =
c=3D$.datepicker._possibleChars($.datepicker._get(b,"dateFormat")),d=3DSt=
ring.fromCharCode(a.charCode=3D=3Dundefined?a.keyCode:a.charCode);return =
a.ctrlKey||a.metaKey||d<" =
"||!c||c.indexOf(d)>-1}},_doKeyUp:function(a){var =
b=3D$.datepicker._getInst(a.target);if(b.input.val()!=3Db.lastVal){try{va=
r =
c=3D$.datepicker.parseDate($.datepicker._get(b,"dateFormat"),b.input?b.in=
put.val():null,$.datepicker._getFormatConfig(b));c&&($.datepicker._setDat=
eFromField(b),$.datepicker._updateAlternate(b),$.datepicker._updateDatepi=
cker(b))}catch(a){$.datepicker.log(a)}}return =
!0},_showDatepicker:function(a){a=3Da.target||a,a.nodeName.toLowerCase()!=
=3D"input"&&(a=3D$("input",a.parentNode)[0]);if(!$.datepicker._isDisabled=
Datepicker(a)&&$.datepicker._lastInput!=3Da){var =
b=3D$.datepicker._getInst(a);$.datepicker._curInst&&$.datepicker._curInst=
!=3Db&&($.datepicker._curInst.dpDiv.stop(!0,!0),b&&$.datepicker._datepick=
erShowing&&$.datepicker._hideDatepicker($.datepicker._curInst.input[0]));=
var =
c=3D$.datepicker._get(b,"beforeShow"),d=3Dc?c.apply(a,[a,b]):{};if(d=3D=3D=
=3D!1){return}extendRemove(b.settings,d),b.lastVal=3Dnull,$.datepicker._l=
astInput=3Da,$.datepicker._setDateFromField(b),$.datepicker._inDialog&&(a=
.value=3D""),$.datepicker._pos||($.datepicker._pos=3D$.datepicker._findPo=
s(a),$.datepicker._pos[1]+=3Da.offsetHeight);var =
e=3D!1;$(a).parents().each(function(){e|=3D$(this).css("position")=3D=3D"=
fixed";return =
!e}),e&&$.browser.opera&&($.datepicker._pos[0]-=3Ddocument.documentElemen=
t.scrollLeft,$.datepicker._pos[1]-=3Ddocument.documentElement.scrollTop);=
var =
f=3D{left:$.datepicker._pos[0],top:$.datepicker._pos[1]};$.datepicker._po=
s=3Dnull,b.dpDiv.empty(),b.dpDiv.css({position:"absolute",display:"block"=
,top:"-1000px"}),$.datepicker._updateDatepicker(b),f=3D$.datepicker._chec=
kOffset(b,f,e),b.dpDiv.css({position:$.datepicker._inDialog&&$.blockUI?"s=
tatic":e?"fixed":"absolute",display:"none",left:f.left+"px",top:f.top+"px=
"});if(!b.inline){var =
g=3D$.datepicker._get(b,"showAnim"),h=3D$.datepicker._get(b,"duration"),i=
=3Dfunction(){var =
a=3Db.dpDiv.find("iframe.ui-datepicker-cover");if(!!a.length){var =
c=3D$.datepicker._getBorders(b.dpDiv);a.css({left:-c[0],top:-c[1],width:b=
.dpDiv.outerWidth(),height:b.dpDiv.outerHeight()})}};b.dpDiv.zIndex($(a).=
zIndex()+1),$.datepicker._datepickerShowing=3D!0,$.effects&&$.effects[g]?=
b.dpDiv.show(g,$.datepicker._get(b,"showOptions"),h,i):b.dpDiv[g||"show"]=
(g?h:null,i),(!g||!h)&&i(),b.input.is(":visible")&&!b.input.is(":disabled=
")&&b.input.focus(),$.datepicker._curInst=3Db}}},_updateDatepicker:functi=
on(a){var b=3Dthis;b.maxRows=3D4;var =
c=3D$.datepicker._getBorders(a.dpDiv);instActive=3Da,a.dpDiv.empty().appe=
nd(this._generateHTML(a));var =
d=3Da.dpDiv.find("iframe.ui-datepicker-cover");!d.length||d.css({left:-c[=
0],top:-c[1],width:a.dpDiv.outerWidth(),height:a.dpDiv.outerHeight()}),a.=
dpDiv.find("."+this._dayOverClass+" a").mouseover();var =
e=3Dthis._getNumberOfMonths(a),f=3De[1],g=3D17;a.dpDiv.removeClass("ui-da=
tepicker-multi-2 ui-datepicker-multi-3 =
ui-datepicker-multi-4").width(""),f>1&&a.dpDiv.addClass("ui-datepicker-mu=
lti-"+f).css("width",g*f+"em"),a.dpDiv[(e[0]!=3D1||e[1]!=3D1?"add":"remov=
e")+"Class"]("ui-datepicker-multi"),a.dpDiv[(this._get(a,"isRTL")?"add":"=
remove")+"Class"]("ui-datepicker-rtl"),a=3D=3D$.datepicker._curInst&&$.da=
tepicker._datepickerShowing&&a.input&&a.input.is(":visible")&&!a.input.is=
(":disabled")&&a.input[0]!=3Ddocument.activeElement&&a.input.focus();if(a=
.yearshtml){var =
h=3Da.yearshtml;setTimeout(function(){h=3D=3D=3Da.yearshtml&&a.yearshtml&=
&a.dpDiv.find("select.ui-datepicker-year:first").replaceWith(a.yearshtml)=
,h=3Da.yearshtml=3Dnull},0)}},_getBorders:function(a){var =
b=3Dfunction(a){return{thin:1,medium:2,thick:3}[a]||a};return[parseFloat(=
b(a.css("border-left-width"))),parseFloat(b(a.css("border-top-width")))]}=
,_checkOffset:function(a,b,c){var =
d=3Da.dpDiv.outerWidth(),e=3Da.dpDiv.outerHeight(),f=3Da.input?a.input.ou=
terWidth():0,g=3Da.input?a.input.outerHeight():0,h=3Ddocument.documentEle=
ment.clientWidth+$(document).scrollLeft(),i=3Ddocument.documentElement.cl=
ientHeight+$(document).scrollTop();b.left-=3Dthis._get(a,"isRTL")?d-f:0,b=
.left-=3Dc&&b.left=3D=3Da.input.offset().left?$(document).scrollLeft():0,=
b.top-=3Dc&&b.top=3D=3Da.input.offset().top+g?$(document).scrollTop():0,b=
.left-=3DMath.min(b.left,b.left+d>h&&h>d?Math.abs(b.left+d-h):0),b.top-=3D=
Math.min(b.top,b.top+e>i&&i>e?Math.abs(e+g):0);return =
b},_findPos:function(a){var =
b=3Dthis._getInst(a),c=3Dthis._get(b,"isRTL");while(a&&(a.type=3D=3D"hidd=
en"||a.nodeType!=3D1||$.expr.filters.hidden(a))){a=3Da[c?"previousSibling=
":"nextSibling"]}var =
d=3D$(a).offset();return[d.left,d.top]},_hideDatepicker:function(a){var =
b=3Dthis._curInst;if(!(!b||a&&b!=3D$.data(a,PROP_NAME))&&this._datepicker=
Showing){var =
c=3Dthis._get(b,"showAnim"),d=3Dthis._get(b,"duration"),e=3Dthis,f=3Dfunc=
tion(){$.datepicker._tidyDialog(b),e._curInst=3Dnull};$.effects&&$.effect=
s[c]?b.dpDiv.hide(c,$.datepicker._get(b,"showOptions"),d,f):b.dpDiv[c=3D=3D=
"slideDown"?"slideUp":c=3D=3D"fadeIn"?"fadeOut":"hide"](c?d:null,f),c||f(=
),this._datepickerShowing=3D!1;var =
g=3Dthis._get(b,"onClose");g&&g.apply(b.input?b.input[0]:null,[b.input?b.=
input.val():"",b]),this._lastInput=3Dnull,this._inDialog&&(this._dialogIn=
put.css({position:"absolute",left:"0",top:"-100px"}),$.blockUI&&($.unbloc=
kUI(),$("body").append(this.dpDiv))),this._inDialog=3D!1}},_tidyDialog:fu=
nction(a){a.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-c=
alendar")},_checkExternalClick:function(a){if(!!$.datepicker._curInst){va=
r =
b=3D$(a.target),c=3D$.datepicker._getInst(b[0]);(b[0].id!=3D$.datepicker.=
_mainDivId&&b.parents("#"+$.datepicker._mainDivId).length=3D=3D0&&!b.hasC=
lass($.datepicker.markerClassName)&&!b.closest("."+$.datepicker._triggerC=
lass).length&&$.datepicker._datepickerShowing&&(!$.datepicker._inDialog||=
!$.blockUI)||b.hasClass($.datepicker.markerClassName)&&$.datepicker._curI=
nst!=3Dc)&&$.datepicker._hideDatepicker()}},_adjustDate:function(a,b,c){v=
ar =
d=3D$(a),e=3Dthis._getInst(d[0]);this._isDisabledDatepicker(d[0])||(this.=
_adjustInstDate(e,b+(c=3D=3D"M"?this._get(e,"showCurrentAtPos"):0),c),thi=
s._updateDatepicker(e))},_gotoToday:function(a){var =
b=3D$(a),c=3Dthis._getInst(b[0]);if(this._get(c,"gotoCurrent")&&c.current=
Day){c.selectedDay=3Dc.currentDay,c.drawMonth=3Dc.selectedMonth=3Dc.curre=
ntMonth,c.drawYear=3Dc.selectedYear=3Dc.currentYear}else{var d=3Dnew =
Date;c.selectedDay=3Dd.getDate(),c.drawMonth=3Dc.selectedMonth=3Dd.getMon=
th(),c.drawYear=3Dc.selectedYear=3Dd.getFullYear()}this._notifyChange(c),=
this._adjustDate(b)},_selectMonthYear:function(a,b,c){var =
d=3D$(a),e=3Dthis._getInst(d[0]);e["selected"+(c=3D=3D"M"?"Month":"Year")=
]=3De["draw"+(c=3D=3D"M"?"Month":"Year")]=3DparseInt(b.options[b.selected=
Index].value,10),this._notifyChange(e),this._adjustDate(d)},_selectDay:fu=
nction(a,b,c,d){var =
e=3D$(a);if(!$(d).hasClass(this._unselectableClass)&&!this._isDisabledDat=
epicker(e[0])){var =
f=3Dthis._getInst(e[0]);f.selectedDay=3Df.currentDay=3D$("a",d).html(),f.=
selectedMonth=3Df.currentMonth=3Db,f.selectedYear=3Df.currentYear=3Dc,thi=
s._selectDate(a,this._formatDate(f,f.currentDay,f.currentMonth,f.currentY=
ear))}},_clearDate:function(a){var =
b=3D$(a),c=3Dthis._getInst(b[0]);this._selectDate(b,"")},_selectDate:func=
tion(a,b){var =
c=3D$(a),d=3Dthis._getInst(c[0]);b=3Db!=3Dnull?b:this._formatDate(d),d.in=
put&&d.input.val(b),this._updateAlternate(d);var =
e=3Dthis._get(d,"onSelect");e?e.apply(d.input?d.input[0]:null,[b,d]):d.in=
put&&d.input.trigger("change"),d.inline?this._updateDatepicker(d):(this._=
hideDatepicker(),this._lastInput=3Dd.input[0],typeof =
d.input[0]!=3D"object"&&d.input.focus(),this._lastInput=3Dnull)},_updateA=
lternate:function(a){var b=3Dthis._get(a,"altField");if(b){var =
c=3Dthis._get(a,"altFormat")||this._get(a,"dateFormat"),d=3Dthis._getDate=
(a),e=3Dthis.formatDate(c,d,this._getFormatConfig(a));$(b).each(function(=
){$(this).val(e)})}},noWeekends:function(a){var =
b=3Da.getDay();return[b>0&&b<6,""]},iso8601Week:function(a){var b=3Dnew =
Date(a.getTime());b.setDate(b.getDate()+4-(b.getDay()||7));var =
c=3Db.getTime();b.setMonth(0),b.setDate(1);return =
Math.floor(Math.round((c-b)/86400000)/7)+1},parseDate:function(a,b,c){if(=
a=3D=3Dnull||b=3D=3Dnull){throw"Invalid arguments"}b=3Dtypeof =
b=3D=3D"object"?b.toString():b+"";if(b=3D=3D""){return null}var =
d=3D(c?c.shortYearCutoff:null)||this._defaults.shortYearCutoff;d=3Dtypeof=
 d!=3D"string"?d:(new Date).getFullYear()%100+parseInt(d,10);var =
e=3D(c?c.dayNamesShort:null)||this._defaults.dayNamesShort,f=3D(c?c.dayNa=
mes:null)||this._defaults.dayNames,g=3D(c?c.monthNamesShort:null)||this._=
defaults.monthNamesShort,h=3D(c?c.monthNames:null)||this._defaults.monthN=
ames,i=3D-1,j=3D-1,k=3D-1,l=3D-1,m=3D!1,n=3Dfunction(b){var =
c=3Ds+1<a.length&&a.charAt(s+1)=3D=3Db;c&&s++;return =
c},o=3Dfunction(a){var =
c=3Dn(a),d=3Da=3D=3D"@"?14:a=3D=3D"!"?20:a=3D=3D"y"&&c?4:a=3D=3D"o"?3:2,e=
=3Dnew =
RegExp("^\\d{1,"+d+"}"),f=3Db.substring(r).match(e);if(!f){throw"Missing =
number at position "+r}r+=3Df[0].length;return =
parseInt(f[0],10)},p=3Dfunction(a,c,d){var =
e=3D$.map(n(a)?d:c,function(a,b){return[[b,a]]}).sort(function(a,b){retur=
n -(a[1].length-b[1].length)}),f=3D-1;$.each(e,function(a,c){var =
d=3Dc[1];if(b.substr(r,d.length).toLowerCase()=3D=3Dd.toLowerCase()){f=3D=
c[0],r+=3Dd.length;return !1}});if(f!=3D-1){return f+1}throw"Unknown =
name at position =
"+r},q=3Dfunction(){if(b.charAt(r)!=3Da.charAt(s)){throw"Unexpected =
literal at position "+r}r++},r=3D0;for(var =
s=3D0;s<a.length;s++){if(m){a.charAt(s)=3D=3D"'"&&!n("'")?m=3D!1:q()}else=
{switch(a.charAt(s)){case"d":k=3Do("d");break;case"D":p("D",e,f);break;ca=
se"o":l=3Do("o");break;case"m":j=3Do("m");break;case"M":j=3Dp("M",g,h);br=
eak;case"y":i=3Do("y");break;case"@":var t=3Dnew =
Date(o("@"));i=3Dt.getFullYear(),j=3Dt.getMonth()+1,k=3Dt.getDate();break=
;case"!":var t=3Dnew =
Date((o("!")-this._ticksTo1970)/10000);i=3Dt.getFullYear(),j=3Dt.getMonth=
()+1,k=3Dt.getDate();break;case"'":n("'")?q():m=3D!0;break;default:q()}}}=
if(r<b.length){throw"Extra/unparsed characters found in date: =
"+b.substring(r)}i=3D=3D-1?i=3D(new =
Date).getFullYear():i<100&&(i+=3D(new Date).getFullYear()-(new =
Date).getFullYear()%100+(i<=3Dd?0:-100));if(l>-1){j=3D1,k=3Dl;for(;;){var=
 u=3Dthis._getDaysInMonth(i,j-1);if(k<=3Du){break}j++,k-=3Du}}var =
t=3Dthis._daylightSavingAdjust(new =
Date(i,j-1,k));if(t.getFullYear()!=3Di||t.getMonth()+1!=3Dj||t.getDate()!=
=3Dk){throw"Invalid date"}return t},ATOM:"yy-mm-dd",COOKIE:"D, dd M =
yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, =
dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M =
yy",RSS:"D, d M =
y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:(718685+Math.floor=
(492.5)-Math.floor(19.7)+Math.floor(4.925))*24*60*60*10000000,formatDate:=
function(a,b,c){if(!b){return""}var =
d=3D(c?c.dayNamesShort:null)||this._defaults.dayNamesShort,e=3D(c?c.dayNa=
mes:null)||this._defaults.dayNames,f=3D(c?c.monthNamesShort:null)||this._=
defaults.monthNamesShort,g=3D(c?c.monthNames:null)||this._defaults.monthN=
ames,h=3Dfunction(b){var =
c=3Dm+1<a.length&&a.charAt(m+1)=3D=3Db;c&&m++;return =
c},i=3Dfunction(a,b,c){var =
d=3D""+b;if(h(a)){while(d.length<c){d=3D"0"+d}}return =
d},j=3Dfunction(a,b,c,d){return =
h(a)?d[b]:c[b]},k=3D"",l=3D!1;if(b){for(var =
m=3D0;m<a.length;m++){if(l){a.charAt(m)=3D=3D"'"&&!h("'")?l=3D!1:k+=3Da.c=
harAt(m)}else{switch(a.charAt(m)){case"d":k+=3Di("d",b.getDate(),2);break=
;case"D":k+=3Dj("D",b.getDay(),d,e);break;case"o":k+=3Di("o",Math.round((=
(new Date(b.getFullYear(),b.getMonth(),b.getDate())).getTime()-(new =
Date(b.getFullYear(),0,0)).getTime())/86400000),3);break;case"m":k+=3Di("=
m",b.getMonth()+1,2);break;case"M":k+=3Dj("M",b.getMonth(),f,g);break;cas=
e"y":k+=3Dh("y")?b.getFullYear():(b.getYear()%100<10?"0":"")+b.getYear()%=
100;break;case"@":k+=3Db.getTime();break;case"!":k+=3Db.getTime()*10000+t=
his._ticksTo1970;break;case"'":h("'")?k+=3D"'":l=3D!0;break;default:k+=3D=
a.charAt(m)}}}}return k},_possibleChars:function(a){var =
b=3D"",c=3D!1,d=3Dfunction(b){var =
c=3De+1<a.length&&a.charAt(e+1)=3D=3Db;c&&e++;return c};for(var =
e=3D0;e<a.length;e++){if(c){a.charAt(e)=3D=3D"'"&&!d("'")?c=3D!1:b+=3Da.c=
harAt(e)}else{switch(a.charAt(e)){case"d":case"m":case"y":case"@":b+=3D"0=
123456789";break;case"D":case"M":return =
null;case"'":d("'")?b+=3D"'":c=3D!0;break;default:b+=3Da.charAt(e)}}}retu=
rn b},_get:function(a,b){return =
a.settings[b]!=3D=3Dundefined?a.settings[b]:this._defaults[b]},_setDateFr=
omField:function(a,b){if(a.input.val()!=3Da.lastVal){var =
c=3Dthis._get(a,"dateFormat"),d=3Da.lastVal=3Da.input?a.input.val():null,=
e,f;e=3Df=3Dthis._getDefaultDate(a);var =
g=3Dthis._getFormatConfig(a);try{e=3Dthis.parseDate(c,d,g)||f}catch(h){th=
is.log(h),d=3Db?"":d}a.selectedDay=3De.getDate(),a.drawMonth=3Da.selected=
Month=3De.getMonth(),a.drawYear=3Da.selectedYear=3De.getFullYear(),a.curr=
entDay=3Dd?e.getDate():0,a.currentMonth=3Dd?e.getMonth():0,a.currentYear=3D=
d?e.getFullYear():0,this._adjustInstDate(a)}},_getDefaultDate:function(a)=
{return =
this._restrictMinMax(a,this._determineDate(a,this._get(a,"defaultDate"),n=
ew Date))},_determineDate:function(a,b,c){var d=3Dfunction(a){var =
b=3Dnew Date;b.setDate(b.getDate()+a);return =
b},e=3Dfunction(b){try{return =
$.datepicker.parseDate($.datepicker._get(a,"dateFormat"),b,$.datepicker._=
getFormatConfig(a))}catch(c){}var =
d=3D(b.toLowerCase().match(/^c/)?$.datepicker._getDate(a):null)||new =
Date,e=3Dd.getFullYear(),f=3Dd.getMonth(),g=3Dd.getDate(),h=3D/([+-]?[0-9=
]+)\s*(d|D|w|W|m|M|y|Y)?/g,i=3Dh.exec(b);while(i){switch(i[2]||"d"){case"=
d":case"D":g+=3DparseInt(i[1],10);break;case"w":case"W":g+=3DparseInt(i[1=
],10)*7;break;case"m":case"M":f+=3DparseInt(i[1],10),g=3DMath.min(g,$.dat=
epicker._getDaysInMonth(e,f));break;case"y":case"Y":e+=3DparseInt(i[1],10=
),g=3DMath.min(g,$.datepicker._getDaysInMonth(e,f))}i=3Dh.exec(b)}return =
new Date(e,f,g)},f=3Db=3D=3Dnull||b=3D=3D=3D""?c:typeof =
b=3D=3D"string"?e(b):typeof b=3D=3D"number"?isNaN(b)?c:d(b):new =
Date(b.getTime());f=3Df&&f.toString()=3D=3D"Invalid =
Date"?c:f,f&&(f.setHours(0),f.setMinutes(0),f.setSeconds(0),f.setMillisec=
onds(0));return =
this._daylightSavingAdjust(f)},_daylightSavingAdjust:function(a){if(!a){r=
eturn null}a.setHours(a.getHours()>12?a.getHours()+2:0);return =
a},_setDate:function(a,b,c){var =
d=3D!b,e=3Da.selectedMonth,f=3Da.selectedYear,g=3Dthis._restrictMinMax(a,=
this._determineDate(a,b,new =
Date));a.selectedDay=3Da.currentDay=3Dg.getDate(),a.drawMonth=3Da.selecte=
dMonth=3Da.currentMonth=3Dg.getMonth(),a.drawYear=3Da.selectedYear=3Da.cu=
rrentYear=3Dg.getFullYear(),(e!=3Da.selectedMonth||f!=3Da.selectedYear)&&=
!c&&this._notifyChange(a),this._adjustInstDate(a),a.input&&a.input.val(d?=
"":this._formatDate(a))},_getDate:function(a){var =
b=3D!a.currentYear||a.input&&a.input.val()=3D=3D""?null:this._daylightSav=
ingAdjust(new Date(a.currentYear,a.currentMonth,a.currentDay));return =
b},_generateHTML:function(a){var b=3Dnew =
Date;b=3Dthis._daylightSavingAdjust(new =
Date(b.getFullYear(),b.getMonth(),b.getDate()));var =
c=3Dthis._get(a,"isRTL"),d=3Dthis._get(a,"showButtonPanel"),e=3Dthis._get=
(a,"hideIfNoPrevNext"),f=3Dthis._get(a,"navigationAsDateFormat"),g=3Dthis=
._getNumberOfMonths(a),h=3Dthis._get(a,"showCurrentAtPos"),i=3Dthis._get(=
a,"stepMonths"),j=3Dg[0]!=3D1||g[1]!=3D1,k=3Dthis._daylightSavingAdjust(a=
.currentDay?new Date(a.currentYear,a.currentMonth,a.currentDay):new =
Date(9999,9,9)),l=3Dthis._getMinMaxDate(a,"min"),m=3Dthis._getMinMaxDate(=
a,"max"),n=3Da.drawMonth-h,o=3Da.drawYear;n<0&&(n+=3D12,o--);if(m){var =
p=3Dthis._daylightSavingAdjust(new =
Date(m.getFullYear(),m.getMonth()-g[0]*g[1]+1,m.getDate()));p=3Dl&&p<l?l:=
p;while(this._daylightSavingAdjust(new =
Date(o,n,1))>p){n--,n<0&&(n=3D11,o--)}}a.drawMonth=3Dn,a.drawYear=3Do;var=
 =
q=3Dthis._get(a,"prevText");q=3Df?this.formatDate(q,this._daylightSavingA=
djust(new Date(o,n-i,1)),this._getFormatConfig(a)):q;var =
r=3Dthis._canAdjustMonth(a,-1,o,n)?'<a class=3D"ui-datepicker-prev =
ui-corner-all" =
onclick=3D"DP_jQuery_'+dpuuid+".datepicker._adjustDate('#"+a.id+"', =
-"+i+", 'M');\" title=3D\""+q+'"><span class=3D"ui-icon =
ui-icon-circle-triangle-'+(c?"e":"w")+'">'+q+"</span></a>":e?"":'<a =
class=3D"ui-datepicker-prev ui-corner-all ui-state-disabled" =
title=3D"'+q+'"><span class=3D"ui-icon =
ui-icon-circle-triangle-'+(c?"e":"w")+'">'+q+"</span></a>",s=3Dthis._get(=
a,"nextText");s=3Df?this.formatDate(s,this._daylightSavingAdjust(new =
Date(o,n+i,1)),this._getFormatConfig(a)):s;var =
t=3Dthis._canAdjustMonth(a,1,o,n)?'<a class=3D"ui-datepicker-next =
ui-corner-all" =
onclick=3D"DP_jQuery_'+dpuuid+".datepicker._adjustDate('#"+a.id+"', =
+"+i+", 'M');\" title=3D\""+s+'"><span class=3D"ui-icon =
ui-icon-circle-triangle-'+(c?"w":"e")+'">'+s+"</span></a>":e?"":'<a =
class=3D"ui-datepicker-next ui-corner-all ui-state-disabled" =
title=3D"'+s+'"><span class=3D"ui-icon =
ui-icon-circle-triangle-'+(c?"w":"e")+'">'+s+"</span></a>",u=3Dthis._get(=
a,"currentText"),v=3Dthis._get(a,"gotoCurrent")&&a.currentDay?k:b;u=3Df?t=
his.formatDate(u,v,this._getFormatConfig(a)):u;var =
w=3Da.inline?"":'<button type=3D"button" class=3D"ui-datepicker-close =
ui-state-default ui-priority-primary ui-corner-all" =
onclick=3D"DP_jQuery_'+dpuuid+'.datepicker._hideDatepicker();">'+this._ge=
t(a,"closeText")+"</button>",x=3Dd?'<div =
class=3D"ui-datepicker-buttonpane =
ui-widget-content">'+(c?w:"")+(this._isInRange(a,v)?'<button =
type=3D"button" class=3D"ui-datepicker-current ui-state-default =
ui-priority-secondary ui-corner-all" =
onclick=3D"DP_jQuery_'+dpuuid+".datepicker._gotoToday('#"+a.id+"');\">"+u=
+"</button>":"")+(c?"":w)+"</div>":"",y=3DparseInt(this._get(a,"firstDay"=
),10);y=3DisNaN(y)?0:y;var =
z=3Dthis._get(a,"showWeek"),A=3Dthis._get(a,"dayNames"),B=3Dthis._get(a,"=
dayNamesShort"),C=3Dthis._get(a,"dayNamesMin"),D=3Dthis._get(a,"monthName=
s"),E=3Dthis._get(a,"monthNamesShort"),F=3Dthis._get(a,"beforeShowDay"),G=
=3Dthis._get(a,"showOtherMonths"),H=3Dthis._get(a,"selectOtherMonths"),I=3D=
this._get(a,"calculateWeek")||this.iso8601Week,J=3Dthis._getDefaultDate(a=
),K=3D"";for(var L=3D0;L<g[0];L++){var M=3D"";this.maxRows=3D4;for(var =
N=3D0;N<g[1];N++){var O=3Dthis._daylightSavingAdjust(new =
Date(o,n,a.selectedDay)),P=3D" ui-corner-all",Q=3D"";if(j){Q+=3D'<div =
class=3D"ui-datepicker-group';if(g[1]>1){switch(N){case 0:Q+=3D" =
ui-datepicker-group-first",P=3D" =
ui-corner-"+(c?"right":"left");break;case g[1]-1:Q+=3D" =
ui-datepicker-group-last",P=3D" =
ui-corner-"+(c?"left":"right");break;default:Q+=3D" =
ui-datepicker-group-middle",P=3D""}}Q+=3D'">'}Q+=3D'<div =
class=3D"ui-datepicker-header ui-widget-header =
ui-helper-clearfix'+P+'">'+(/all|left/.test(P)&&L=3D=3D0?c?t:r:"")+(/all|=
right/.test(P)&&L=3D=3D0?c?r:t:"")+this._generateMonthYearHeader(a,n,o,l,=
m,L>0||N>0,D,E)+'</div><table =
class=3D"ui-datepicker-calendar"><thead><tr>';var R=3Dz?'<th =
class=3D"ui-datepicker-week-col">'+this._get(a,"weekHeader")+"</th>":"";f=
or(var S=3D0;S<7;S++){var T=3D(S+y)%7;R+=3D"<th"+((S+y+6)%7>=3D5?' =
class=3D"ui-datepicker-week-end"':"")+'><span =
title=3D"'+A[T]+'">'+C[T]+"</span></th>"}Q+=3DR+"</tr></thead><tbody>";va=
r =
U=3Dthis._getDaysInMonth(o,n);o=3D=3Da.selectedYear&&n=3D=3Da.selectedMon=
th&&(a.selectedDay=3DMath.min(a.selectedDay,U));var =
V=3D(this._getFirstDayOfMonth(o,n)-y+7)%7,W=3DMath.ceil((V+U)/7),X=3Dj?th=
is.maxRows>W?this.maxRows:W:W;this.maxRows=3DX;var =
Y=3Dthis._daylightSavingAdjust(new Date(o,n,1-V));for(var =
Z=3D0;Z<X;Z++){Q+=3D"<tr>";var _=3Dz?'<td =
class=3D"ui-datepicker-week-col">'+this._get(a,"calculateWeek")(Y)+"</td>=
":"";for(var S=3D0;S<7;S++){var =
ba=3DF?F.apply(a.input?a.input[0]:null,[Y]):[!0,""],bb=3DY.getMonth()!=3D=
n,bc=3Dbb&&!H||!ba[0]||l&&Y<l||m&&Y>m;_+=3D'<td =
class=3D"'+((S+y+6)%7>=3D5?" ui-datepicker-week-end":"")+(bb?" =
ui-datepicker-other-month":"")+(Y.getTime()=3D=3DO.getTime()&&n=3D=3Da.se=
lectedMonth&&a._keyEvent||J.getTime()=3D=3DY.getTime()&&J.getTime()=3D=3D=
O.getTime()?" "+this._dayOverClass:"")+(bc?" "+this._unselectableClass+" =
ui-state-disabled":"")+(bb&&!G?"":" =
"+ba[1]+(Y.getTime()=3D=3Dk.getTime()?" =
"+this._currentClass:"")+(Y.getTime()=3D=3Db.getTime()?" =
ui-datepicker-today":""))+'"'+((!bb||G)&&ba[2]?' =
title=3D"'+ba[2]+'"':"")+(bc?"":' =
onclick=3D"DP_jQuery_'+dpuuid+".datepicker._selectDay('#"+a.id+"',"+Y.get=
Month()+","+Y.getFullYear()+', this);return =
false;"')+">"+(bb&&!G?"&#xa0;":bc?'<span =
class=3D"ui-state-default">'+Y.getDate()+"</span>":'<a =
class=3D"ui-state-default'+(Y.getTime()=3D=3Db.getTime()?" =
ui-state-highlight":"")+(Y.getTime()=3D=3Dk.getTime()?" =
ui-state-active":"")+(bb?" ui-priority-secondary":"")+'" =
href=3D"#">'+Y.getDate()+"</a>")+"</td>",Y.setDate(Y.getDate()+1),Y=3Dthi=
s._daylightSavingAdjust(Y)}Q+=3D_+"</tr>"}n++,n>11&&(n=3D0,o++),Q+=3D"</t=
body></table>"+(j?"</div>"+(g[0]>0&&N=3D=3Dg[1]-1?'<div =
class=3D"ui-datepicker-row-break"></div>':""):""),M+=3DQ}K+=3DM}K+=3Dx+($=
.browser.msie&&parseInt($.browser.version,10)<7&&!a.inline?'<iframe =
src=3D"javascript:false;" class=3D"ui-datepicker-cover" =
frameborder=3D"0"></iframe>':""),a._keyEvent=3D!1;return =
K},_generateMonthYearHeader:function(a,b,c,d,e,f,g,h){var =
i=3Dthis._get(a,"changeMonth"),j=3Dthis._get(a,"changeYear"),k=3Dthis._ge=
t(a,"showMonthAfterYear"),l=3D'<div =
class=3D"ui-datepicker-title">',m=3D"";if(f||!i){m+=3D'<span =
class=3D"ui-datepicker-month">'+g[b]+"</span>"}else{var =
n=3Dd&&d.getFullYear()=3D=3Dc,o=3De&&e.getFullYear()=3D=3Dc;m+=3D'<select=
 class=3D"ui-datepicker-month" =
onchange=3D"DP_jQuery_'+dpuuid+".datepicker._selectMonthYear('#"+a.id+"',=
 this, 'M');\" >";for(var =
p=3D0;p<12;p++){(!n||p>=3Dd.getMonth())&&(!o||p<=3De.getMonth())&&(m+=3D'=
<option value=3D"'+p+'"'+(p=3D=3Db?' =
selected=3D"selected"':"")+">"+h[p]+"</option>")}m+=3D"</select>"}k||(l+=3D=
m+(f||!i||!j?"&#xa0;":""));if(!a.yearshtml){a.yearshtml=3D"";if(f||!j){l+=
=3D'<span class=3D"ui-datepicker-year">'+c+"</span>"}else{var =
q=3Dthis._get(a,"yearRange").split(":"),r=3D(new =
Date).getFullYear(),s=3Dfunction(a){var =
b=3Da.match(/c[+-].*/)?c+parseInt(a.substring(1),10):a.match(/[+-].*/)?r+=
parseInt(a,10):parseInt(a,10);return =
isNaN(b)?r:b},t=3Ds(q[0]),u=3DMath.max(t,s(q[1]||""));t=3Dd?Math.max(t,d.=
getFullYear()):t,u=3De?Math.min(u,e.getFullYear()):u,a.yearshtml+=3D'<sel=
ect class=3D"ui-datepicker-year" =
onchange=3D"DP_jQuery_'+dpuuid+".datepicker._selectMonthYear('#"+a.id+"',=
 this, 'Y');\" >";for(;t<=3Du;t++){a.yearshtml+=3D'<option =
value=3D"'+t+'"'+(t=3D=3Dc?' =
selected=3D"selected"':"")+">"+t+"</option>"}a.yearshtml+=3D"</select>",l=
+=3Da.yearshtml,a.yearshtml=3Dnull}}l+=3Dthis._get(a,"yearSuffix"),k&&(l+=
=3D(f||!i||!j?"&#xa0;":"")+m),l+=3D"</div>";return =
l},_adjustInstDate:function(a,b,c){var =
d=3Da.drawYear+(c=3D=3D"Y"?b:0),e=3Da.drawMonth+(c=3D=3D"M"?b:0),f=3DMath=
.min(a.selectedDay,this._getDaysInMonth(d,e))+(c=3D=3D"D"?b:0),g=3Dthis._=
restrictMinMax(a,this._daylightSavingAdjust(new =
Date(d,e,f)));a.selectedDay=3Dg.getDate(),a.drawMonth=3Da.selectedMonth=3D=
g.getMonth(),a.drawYear=3Da.selectedYear=3Dg.getFullYear(),(c=3D=3D"M"||c=
=3D=3D"Y")&&this._notifyChange(a)},_restrictMinMax:function(a,b){var =
c=3Dthis._getMinMaxDate(a,"min"),d=3Dthis._getMinMaxDate(a,"max"),e=3Dc&&=
b<c?c:b;e=3Dd&&e>d?d:e;return e},_notifyChange:function(a){var =
b=3Dthis._get(a,"onChangeMonthYear");b&&b.apply(a.input?a.input[0]:null,[=
a.selectedYear,a.selectedMonth+1,a])},_getNumberOfMonths:function(a){var =
b=3Dthis._get(a,"numberOfMonths");return b=3D=3Dnull?[1,1]:typeof =
b=3D=3D"number"?[1,b]:b},_getMinMaxDate:function(a,b){return =
this._determineDate(a,this._get(a,b+"Date"),null)},_getDaysInMonth:functi=
on(a,b){return 32-this._daylightSavingAdjust(new =
Date(a,b,32)).getDate()},_getFirstDayOfMonth:function(a,b){return(new =
Date(a,b,1)).getDay()},_canAdjustMonth:function(a,b,c,d){var =
e=3Dthis._getNumberOfMonths(a),f=3Dthis._daylightSavingAdjust(new =
Date(c,d+(b<0?b:e[0]*e[1]),1));b<0&&f.setDate(this._getDaysInMonth(f.getF=
ullYear(),f.getMonth()));return =
this._isInRange(a,f)},_isInRange:function(a,b){var =
c=3Dthis._getMinMaxDate(a,"min"),d=3Dthis._getMinMaxDate(a,"max");return(=
!c||b.getTime()>=3Dc.getTime())&&(!d||b.getTime()<=3Dd.getTime())},_getFo=
rmatConfig:function(a){var b=3Dthis._get(a,"shortYearCutoff");b=3Dtypeof =
b!=3D"string"?b:(new =
Date).getFullYear()%100+parseInt(b,10);return{shortYearCutoff:b,dayNamesS=
hort:this._get(a,"dayNamesShort"),dayNames:this._get(a,"dayNames"),monthN=
amesShort:this._get(a,"monthNamesShort"),monthNames:this._get(a,"monthNam=
es")}},_formatDate:function(a,b,c,d){b||(a.currentDay=3Da.selectedDay,a.c=
urrentMonth=3Da.selectedMonth,a.currentYear=3Da.selectedYear);var =
e=3Db?typeof b=3D=3D"object"?b:this._daylightSavingAdjust(new =
Date(d,c,b)):this._daylightSavingAdjust(new =
Date(a.currentYear,a.currentMonth,a.currentDay));return =
this.formatDate(this._get(a,"dateFormat"),e,this._getFormatConfig(a))}}),=
$.fn.datepicker=3Dfunction(a){if(!this.length){return =
this}$.datepicker.initialized||($(document).mousedown($.datepicker._check=
ExternalClick).find("body").append($.datepicker.dpDiv),$.datepicker.initi=
alized=3D!0);var b=3DArray.prototype.slice.call(arguments,1);if(typeof =
a=3D=3D"string"&&(a=3D=3D"isDisabled"||a=3D=3D"getDate"||a=3D=3D"widget")=
){return =
$.datepicker["_"+a+"Datepicker"].apply($.datepicker,[this[0]].concat(b))}=
if(a=3D=3D"option"&&arguments.length=3D=3D2&&typeof =
arguments[1]=3D=3D"string"){return =
$.datepicker["_"+a+"Datepicker"].apply($.datepicker,[this[0]].concat(b))}=
return this.each(function(){typeof =
a=3D=3D"string"?$.datepicker["_"+a+"Datepicker"].apply($.datepicker,[this=
].concat(b)):$.datepicker._attachDatepicker(this,a)})},$.datepicker=3Dnew=
 Datepicker,$.datepicker.initialized=3D!1,$.datepicker.uuid=3D(new =
Date).getTime(),$.datepicker.version=3D"1.8.18",window["DP_jQuery_"+dpuui=
d]=3D$})(jQuery);=0A=
/* http://mths.be/placeholder v2.0.4 by @mathias */=0A=
(function(r,p,n){var w=3D"placeholder" in =
p.createElement("input"),t=3D"placeholder" in =
p.createElement("textarea"),o=3Dn.fn,u=3Dn.valHooks,l,m;if(w&&t){m=3Do.pl=
aceholder=3Dfunction(){return =
this};m.input=3Dm.textarea=3Dtrue}else{m=3Do.placeholder=3Dfunction(){ret=
urn =
this.filter((w?"textarea":":input")+"[placeholder]").not(".placeholder").=
bind({"focus.placeholder":v,"blur.placeholder":s}).data("placeholder-enab=
led",true).trigger("blur.placeholder").end()};m.input=3Dw;m.textarea=3Dt;=
l=3D{get:function(a){var b=3Dn(a);return =
b.data("placeholder-enabled")&&b.hasClass("placeholder")?"":a.value},set:=
function(a,c){var b=3Dn(a);if(!b.data("placeholder-enabled")){return =
a.value=3Dc}if(c=3D=3D""){a.value=3Dc;if(a!=3Dp.activeElement){s.call(a)}=
}else{if(b.hasClass("placeholder")){v.call(a,true,c)||(a.value=3Dc)}else{=
a.value=3Dc}}return =
b}};w||(u.input=3Dl);t||(u.textarea=3Dl);n(function(){n(p).delegate("form=
","submit.placeholder",function(){var =
a=3Dn(".placeholder",this).each(v);setTimeout(function(){a.each(s)},10)})=
});n(r).bind("beforeunload.placeholder",function(){n(".placeholder").each=
(function(){this.value=3D""})})}function q(a){var =
b=3D{},c=3D/^jQuery\d+$/;n.each(a.attributes,function(d,e){if(e.specified=
&&!c.test(e.name)){b[e.name]=3De.value}});return b}function v(a,d){var =
b=3Dthis,c=3Dn(b);if(b.value=3D=3Dc.attr("placeholder")&&c.hasClass("plac=
eholder")){if(c.data("placeholder-password")){c=3Dc.hide().next().show().=
attr("id",c.removeAttr("id").data("placeholder-id"));if(a=3D=3D=3Dtrue){r=
eturn =
c[0].value=3Dd}c.focus()}else{b.value=3D"";c.removeClass("placeholder")}}=
}function s(){var =
c,b=3Dthis,d=3Dn(b),a=3Dd,e=3Dthis.id;if(b.value=3D=3D""){if(b.type=3D=3D=
"password"){if(!d.data("placeholder-textinput")){try{c=3Dd.clone().attr({=
type:"text"})}catch(f){c=3Dn("<input>").attr(n.extend(q(this),{type:"text=
"}))}c.removeAttr("name").data({"placeholder-password":true,"placeholder-=
id":e}).bind("focus.placeholder",v);d.data({"placeholder-textinput":c,"pl=
aceholder-id":e}).before(c)}d=3Dd.removeAttr("id").hide().prev().attr("id=
",e).show()}d.addClass("placeholder");d[0].value=3Dd.attr("placeholder")}=
else{d.removeClass("placeholder")}}}(this,document,jQuery));(function(a){=
a(function(){a("input.date").placeholder().datepicker({dateFormat:"yy-mm-=
dd",changeMonth:true,changeYear:true})})})(jQuery);var =
pardot=3D{};pardot.$=3DjQuery.noConflict(true);pardot.$(function(){if(win=
dow.self!=3Dwindow.parent){var d;function c(){var =
a=3Dpardot.$(document).height();if(a!=3Dd){window.parent.postMessage(a,"*=
");d=3Da}setTimeout(c,50)}if(window.postMessage){c()}}});if(typeof =
window.JSON=3D=3D=3D"undefined"){window.JSON=3Dnew =
Object}window.JSON.stringify=3Dwindow.JSON.stringify||function(e){var =
d=3Dtypeof =
e;if(d!=3D"object"||e=3D=3D=3Dnull){if(d=3D=3D"string"){e=3D'"'+e+'"'}ret=
urn String(e)}else{var f,b,c=3D[],a=3De&&e.constructor=3D=3DArray;for(f =
in e){b=3De[f];d=3Dtypeof =
b;if(d=3D=3D"string"){b=3D'"'+b.replace(/\\/g,"\\\\").replace(/"/g,'\\"')=
.replace(/'/g,"&#039;").replace(/\t/g," ").replace(/\n/g," =
").replace(/\r/g," =
")+'"'}else{if(d=3D=3D"object"&&b!=3D=3Dnull){b=3Dstringify(b)}else{if(d=3D=
=3D"function"){continue}}}c.push((a?"":'"'+f+'":')+String(b))}return(a?"[=
":"{")+String(c)+(a?"]":"}")}};var =
piAjax=3D{enabled:true,ajaxCall:function(b,e,c,d,f){if(this.enabled=3D=3D=
false){return false}var a=3Dthis.getHttpObject();if(typeof =
a=3D=3D"boolean"&&a=3D=3Dfalse){this.enabled=3Dfalse;return =
false}a.open(f,b+"?"+e,true);a.setRequestHeader("X_REQUESTED_WITH","XMLHt=
tpRequest");a.onreadystatechange=3Dfunction(){if(a.readyState=3D=3D4){if(=
typeof =
d=3D=3D"function"){d(a.responseText)}if(c){piUtils.evalScripts(a.response=
Text)}}};a.send(e);return true},auditEmailField:function(d,h,b,c){var =
f=3DpiUtils.getFormInputValue(d);var =
a=3D"/form/checkEmailAjax/account_id/"+h+"/form_field_id/"+b+"/tracker_id=
/"+c+"/field_id/"+d.id;var =
g=3D"param=3D"+encodeURIComponent(encodeURIComponent(f));var =
e=3Dfunction(j){var =
i=3Ddocument.getElementById("error_for_"+d.id);if(i){i.innerHTML=3Dj}};th=
is.postUrl(a,g,true,e)},checkForDependentField:function(){var =
c,d,a,b;c=3Dpardot.$;d=3Dc(this);b=3Dc(window.pardot.FormDependencyMap).f=
ilter(function(f,e){return =
e.master_field_html_id=3D=3Dd.attr("id")});c(b).each(function(g,f){var =
h=3Dc(window.pardot.FormDependencyMap).filter(function(i,j){return =
j.slave_field_html_id=3D=3Df.slave_field_html_id});var =
e=3Dc(h).is(function(j){var =
i,k;i=3Dc("#"+this.master_field_html_id);if(i.is("select")){k=3Di.find("o=
ption:selected").text().toLowerCase()}else{k=3Di.val().toLowerCase()}retu=
rn =
c.inArray(k,this.master_field_value.toLowerCase().split(";"))!=3D=3D-1});=
if(e){c("[id^=3D"+f.slave_field_html_id+"]").parents(".form-field-slave:h=
idden").fadeIn(200)}else{c("[id^=3D"+f.slave_field_html_id+"]").parents("=
.form-field-slave:visible").hide()}})},auditField:function(d,h,a,c){var =
f=3DpiUtils.getFormInputValue(d);var =
b=3D"/form/auditFieldAjax/account_id/"+h+"/form_field_id/"+a+"/tracker_id=
/"+c;var g=3D"param=3D"+encodeURIComponent(encodeURIComponent(f));var =
e=3Dnull;this.postUrl(b,g,false,e)},getHttpObject:function(){var =
a=3Dfalse;try{a=3Dnew =
ActiveXObject("Msxml2.XMLHTTP")}catch(c){try{a=3Dnew =
ActiveXObject("Microsoft.XMLHTTP")}catch(b){a=3Dfalse}}if(!a&&typeof =
XMLHttpRequest!=3D"undefined"){try{a=3Dnew =
XMLHttpRequest()}catch(c){a=3Dfalse}}return =
a},getUrl:function(a,d,b,c){return =
this.ajaxCall(a,d,b,c,"GET")},postUrl:function(a,d,b,c){return =
this.ajaxCall(a,d,b,c,"POST")}};var =
piUtils=3D{getFormInputValue:function(f){var =
e=3Df.type.toLowerCase();switch(e){case"select-one":var =
b=3Df.selectedIndex;return =
b>=3D0?f.options[b].value:null;case"select-multiple":var =
a,g=3Df.length;if(!g){return null}for(var d=3D0,a=3D[];d<g;d++){var =
c=3Df.options[d];if(c.selected){a.push(c.value)}}return =
a;case"checkbox":return =
f.checked?f.value:[f.value,"unselected"];case"radio":return =
f.checked?f.value:null;default:return =
f.value}},extractScripts:function(f){var =
h=3D"(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)";var d=3Dnew =
RegExp(h,"img");var b=3Dnew RegExp(h,"im");var c=3Df.match(d);var =
e=3Dnew Array();var g=3Dnew Array();for(var =
a=3D0;a<c.length;a++){g=3Dc[a].match(b);if(g.length>2){e.push(g[1])}}retu=
rn e},evalScripts:function(htmlStr){var =
scripts=3Dthis.extractScripts(htmlStr);for(var =
x=3D0;x<scripts.length;x++){eval(scripts[x])}}};pardot.$(function(){if(wi=
ndow.self!=3Dwindow.parent){var b;function a(){var =
c=3Dpardot.$(document).height();if(c!=3Db){window.parent.postMessage(c,"*=
");b=3Dc}setTimeout(a,100)}if(window.postMessage){a()}}});
------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: multipart/alternative;
	boundary="----=_NextPart_001_002F_01D126BB.F5717B90"


------=_NextPart_001_002F_01D126BB.F5717B90
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://hazelcast.org/mastering-hazelcast/

=EF=BB=BF<!DOCTYPE HTML>
<!DOCTYPE html PUBLIC "" ""><HTML lang=3D"en"><HEAD><META =
content=3D"IE=3D11.0000"=20
http-equiv=3D"X-UA-Compatible">
=20
<META charset=3D"UTF-8"> <!--[if IE]><meta =
http-equiv=3D"X-UA-Compatible" content=3D"IE=3Dedge"><![endif]-->=20
<META name=3D"viewport" content=3D"width=3Ddevice-width, =
initial-scale=3D1.0">=20
<META name=3D"GENERATOR" content=3D"MSHTML 11.00.9600.17496"> =
<TITLE>Mastering=20
Hazelcast</TITLE> <LINK =
href=3D"https://fonts.googleapis.com/css?family=3DOpen+Sans:300,300italic=
,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CD=
roid+Sans+Mono:400"=20
rel=3D"stylesheet">=20
<STYLE>=0A=
/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org =
*/=0A=
/* Remove the comments around the @import statement below when using =
this as a custom stylesheet */=0A=
/*@import =
"https://fonts.googleapis.com/css?family=3DOpen+Sans:300,300italic,400,40=
0italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sa=
ns+Mono:400";*/=0A=
article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,sec=
tion,summary{display:block}=0A=
audio,canvas,video{display:inline-block}=0A=
audio:not([controls]){display:none;height:0}=0A=
[hidden],template{display:none}=0A=
script{display:none!important}=0A=
html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-a=
djust:100%}=0A=
body{margin:0}=0A=
a{background:transparent}=0A=
a:focus{outline:thin dotted}=0A=
a:active,a:hover{outline:0}=0A=
h1{font-size:2em;margin:.67em 0}=0A=
abbr[title]{border-bottom:1px dotted}=0A=
b,strong{font-weight:bold}=0A=
dfn{font-style:italic}=0A=
hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}=0A=
mark{background:#ff0;color:#000}=0A=
code,kbd,pre,samp{font-family:monospace;font-size:1em}=0A=
pre{white-space:pre-wrap}=0A=
q{quotes:"\201C" "\201D" "\2018" "\2019"}=0A=
small{font-size:80%}=0A=
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:base=
line}=0A=
sup{top:-.5em}=0A=
sub{bottom:-.25em}=0A=
img{border:0}=0A=
svg:not(:root){overflow:hidden}=0A=
figure{margin:0}=0A=
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}=0A=
legend{border:0;padding:0}=0A=
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}=0A=
button,input{line-height:normal}=0A=
button,select{text-transform:none}=0A=
button,html =
input[type=3D"button"],input[type=3D"reset"],input[type=3D"submit"]{-webk=
it-appearance:button;cursor:pointer}=0A=
button[disabled],html input[disabled]{cursor:default}=0A=
input[type=3D"checkbox"],input[type=3D"radio"]{box-sizing:border-box;padd=
ing:0}=0A=
input[type=3D"search"]{-webkit-appearance:textfield;-moz-box-sizing:conte=
nt-box;-webkit-box-sizing:content-box;box-sizing:content-box}=0A=
input[type=3D"search"]::-webkit-search-cancel-button,input[type=3D"search=
"]::-webkit-search-decoration{-webkit-appearance:none}=0A=
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}=0A=
textarea{overflow:auto;vertical-align:top}=0A=
table{border-collapse:collapse;border-spacing:0}=0A=
*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-b=
ox;box-sizing:border-box}=0A=
html,body{font-size:100%}=0A=
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:=
"Noto Serif","DejaVu =
Serif",serif;font-weight:400;font-style:normal;line-height:1;position:rel=
ative;cursor:auto}=0A=
a:hover{cursor:pointer}=0A=
img,object,embed{max-width:100%;height:auto}=0A=
object,embed{height:100%}=0A=
img{-ms-interpolation-mode:bicubic}=0A=
#map_canvas img,#map_canvas embed,#map_canvas object,.map_canvas =
img,.map_canvas embed,.map_canvas object{max-width:none!important}=0A=
.left{float:left!important}=0A=
.right{float:right!important}=0A=
.text-left{text-align:left!important}=0A=
.text-right{text-align:right!important}=0A=
.text-center{text-align:center!important}=0A=
.text-justify{text-align:justify!important}=0A=
.hide{display:none}=0A=
.antialiased,body{-webkit-font-smoothing:antialiased}=0A=
img{display:inline-block;vertical-align:middle}=0A=
textarea{height:auto;min-height:50px}=0A=
select{width:100%}=0A=
p.lead,.paragraph.lead>p,#preamble>.sectionbody>.paragraph:first-of-type =
p{font-size:1.21875em;line-height:1.6}=0A=
.subheader,.admonitionblock =
td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.ti=
tle,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openbloc=
k>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.ve=
rseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.ti=
tle,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weig=
ht:400;margin-top:0;margin-bottom:.25em}=0A=
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4=
,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}=0A=
a{color:#2156a5;text-decoration:underline;line-height:inherit}=0A=
a:hover,a:focus{color:#1d4b8f}=0A=
a img{border:none}=0A=
p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margi=
n-bottom:1.25em;text-rendering:optimizeLegibility}=0A=
p aside{font-size:.875em;line-height:1.35;font-style:italic}=0A=
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Op=
en Sans","DejaVu =
Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-ren=
dering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1=
.0125em}=0A=
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title =
small,h4 small,h5 small,h6 =
small{font-size:60%;color:#e99b8f;line-height:0}=0A=
h1{font-size:2.125em}=0A=
h2{font-size:1.6875em}=0A=
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}=0A=
h4,h5{font-size:1.125em}=0A=
h6{font-size:1em}=0A=
hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 =
1.1875em;height:0}=0A=
em,i{font-style:italic;line-height:inherit}=0A=
strong,b{font-weight:bold;line-height:inherit}=0A=
small{font-size:60%;line-height:inherit}=0A=
code{font-family:"Droid Sans Mono","DejaVu Sans =
Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}=0A=
ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-po=
sition:outside;font-family:inherit}=0A=
ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}=0A=
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}=0A=
ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}=0A=
ul.square{list-style-type:square}=0A=
ul.circle{list-style-type:circle}=0A=
ul.disc{list-style-type:disc}=0A=
ul.no-bullet{list-style:none}=0A=
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}=0A=
dl dt{margin-bottom:.3125em;font-weight:bold}=0A=
dl dd{margin-bottom:1.25em}=0A=
abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);=
border-bottom:1px dotted #ddd;cursor:help}=0A=
abbr{text-transform:none}=0A=
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 =
1.1875em;border-left:1px solid #ddd}=0A=
blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}=0A=
blockquote cite:before{content:"\2014 \0020"}=0A=
blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}=0A=
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}=0A=
@media only screen and =
(min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,=
h6{line-height:1.2}=0A=
h1{font-size:2.75em}=0A=
h2{font-size:2.3125em}=0A=
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}=0A=
h4{font-size:1.4375em}}table{background:#fff;margin-bottom:1.25em;border:=
solid 1px #dedede}=0A=
table thead,table tfoot{background:#f7f8f7;font-weight:bold}=0A=
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr =
td{padding:.5em .625em =
.625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}=0A=
table tr th,table tr td{padding:.5625em =
.625em;font-size:inherit;color:rgba(0,0,0,.8)}=0A=
table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}=0A=
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table =
tfoot tr td{display:table-cell;line-height:1.6}=0A=
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2=
;word-spacing:-.05em}=0A=
h1 strong,h2 strong,h3 strong,#toctitle =
strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 =
strong{font-weight:400}=0A=
.clearfix:before,.clearfix:after,.float-group:before,.float-group:after{c=
ontent:" ";display:table}=0A=
.clearfix:after,.float-group:after{clear:both}=0A=
*:not(pre)>code{font-size:.9375em;font-style:normal!important;letter-spac=
ing:0;padding:.1em =
.5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4=
px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}=0A=
pre,pre>code{line-height:1.45;color:rgba(0,0,0,.9);font-family:"Droid =
Sans Mono","DejaVu Sans =
Mono",monospace;font-weight:400;text-rendering:optimizeSpeed}=0A=
.keyseq{color:rgba(51,51,51,.8)}=0A=
kbd{display:inline-block;color:rgba(0,0,0,.8);font-size:.75em;line-height=
:1.4;background-color:#f7f7f7;border:1px solid =
#ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 =
1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 =
rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:-.15em .15em 0 =
.15em;padding:.2em .6em .2em =
.5em;vertical-align:middle;white-space:nowrap}=0A=
.keyseq kbd:first-child{margin-left:0}=0A=
.keyseq kbd:last-child{margin-right:0}=0A=
.menuseq,.menu{color:rgba(0,0,0,.8)}=0A=
b.button:before,b.button:after{position:relative;top:-1px;font-weight:400=
}=0A=
b.button:before{content:"[";padding:0 3px 0 2px}=0A=
b.button:after{content:"]";padding:0 2px 0 3px}=0A=
p a>code:hover{color:rgba(0,0,0,.9)}=0A=
#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-ri=
ght:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:r=
elative;padding-left:.9375em;padding-right:.9375em}=0A=
#header:before,#header:after,#content:before,#content:after,#footnotes:be=
fore,#footnotes:after,#footer:before,#footer:after{content:" =
";display:table}=0A=
#header:after,#content:after,#footnotes:after,#footer:after{clear:both}=0A=
#content{margin-top:1.25em}=0A=
#content:before{content:none}=0A=
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bo=
ttom:0}=0A=
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}=0A=
#header>h1:only-child,body.toc2 =
#header>h1:nth-last-child(2){border-bottom:1px solid =
#ddddd8;padding-bottom:8px}=0A=
#header .details{border-bottom:1px solid =
#ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-l=
eft:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;d=
isplay:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row =
wrap;flex-flow:row wrap}=0A=
#header .details span:first-child{margin-left:-.125em}=0A=
#header .details span.email a{color:rgba(0,0,0,.85)}=0A=
#header .details br{display:none}=0A=
#header .details br+span:before{content:"\00a0\2013\00a0"}=0A=
#header .details =
br+span.author:before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}=0A=
#header .details br+span#revremark:before{content:"\00a0|\00a0"}=0A=
#header #revnumber{text-transform:capitalize}=0A=
#header #revnumber:after{content:"\00a0"}=0A=
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:=
1px solid =
#ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.=
25rem}=0A=
#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}=0A=
#toc>ul{margin-left:.125em}=0A=
#toc ul.sectlevel0>li>a{font-style:italic}=0A=
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}=0A=
#toc ul{font-family:"Open Sans","DejaVu =
Sans",sans-serif;list-style-type:none}=0A=
#toc a{text-decoration:none}=0A=
#toc a:active{text-decoration:underline}=0A=
#toctitle{color:#7a2518;font-size:1.2em}=0A=
@media only screen and (min-width:768px){#toctitle{font-size:1.375em}=0A=
body.toc2{padding-left:15em;padding-right:0}=0A=
#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;=
width:15em;left:0;top:0;border-right:1px solid =
#efefed;border-top-width:0!important;border-bottom-width:0!important;z-in=
dex:1000;padding:1.25em 1em;height:100%;overflow:auto}=0A=
#toc.toc2 #toctitle{margin-top:0;font-size:1.2em}=0A=
#toc.toc2>ul{font-size:.9em;margin-bottom:0}=0A=
#toc.toc2 ul ul{margin-left:0;padding-left:1em}=0A=
#toc.toc2 ul.sectlevel0 =
ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}=0A=
body.toc2.toc-right{padding-left:0;padding-right:15em}=0A=
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid =
#efefed;left:auto;right:0}}@media only screen and =
(min-width:1280px){body.toc2{padding-left:20em;padding-right:0}=0A=
#toc.toc2{width:20em}=0A=
#toc.toc2 #toctitle{font-size:1.375em}=0A=
#toc.toc2>ul{font-size:.95em}=0A=
#toc.toc2 ul ul{padding-left:1.25em}=0A=
body.toc2.toc-right{padding-left:0;padding-right:20em}}#content =
#toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bott=
om:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;bor=
der-radius:4px}=0A=
#content #toc>:first-child{margin-top:0}=0A=
#content #toc>:last-child{margin-bottom:0}=0A=
#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}=0A=
#footer-text{color:rgba(255,255,255,.8);line-height:1.44}=0A=
.sect1{padding-bottom:.625em}=0A=
@media only screen and =
(min-width:768px){.sect1{padding-bottom:1.25em}}.sect1+.sect1{border-top:=
1px solid #efefed}=0A=
#content =
h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.con=
tent>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolut=
e;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decorati=
on:none!important;visibility:hidden;text-align:center;font-weight:400}=0A=
#content =
h1>a.anchor:before,h2>a.anchor:before,h3>a.anchor:before,#toctitle>a.anch=
or:before,.sidebarblock>.content>.title>a.anchor:before,h4>a.anchor:befor=
e,h5>a.anchor:before,h6>a.anchor:before{content:"\00A7";font-size:.85em;d=
isplay:block;padding-top:.1em}=0A=
#content h1:hover>a.anchor,#content =
h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#=
toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a=
.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.an=
chor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anc=
hor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}=0A=
#content =
h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.ti=
tle>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:no=
ne}=0A=
#content =
h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.s=
idebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,=
h6>a.link:hover{color:#a53221}=0A=
.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videobloc=
k{margin-bottom:1.25em}=0A=
.admonitionblock =
td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.ti=
tle,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openbloc=
k>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.ve=
rseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.ti=
tle,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-a=
lign:left;font-family:"Noto Serif","DejaVu =
Serif",serif;font-size:1rem;font-style:italic}=0A=
table.tableblock>caption.title{white-space:nowrap;overflow:visible;max-wi=
dth:0}=0A=
.paragraph.lead>p,#preamble>.sectionbody>.paragraph:first-of-type =
p{color:rgba(0,0,0,.85)}=0A=
table.tableblock #preamble>.sectionbody>.paragraph:first-of-type =
p{font-size:inherit}=0A=
.admonitionblock>table{border-collapse:separate;border:0;background:none;=
width:100%}=0A=
.admonitionblock>table td.icon{text-align:center;width:80px}=0A=
.admonitionblock>table td.icon img{max-width:none}=0A=
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open =
Sans","DejaVu Sans",sans-serif;text-transform:uppercase}=0A=
.admonitionblock>table =
td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px =
solid #ddddd8;color:rgba(0,0,0,.6)}=0A=
.admonitionblock>table =
td.content>:last-child>:last-child{margin-bottom:0}=0A=
.exampleblock>.content{border-style:solid;border-width:1px;border-color:#=
e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border=
-radius:4px;border-radius:4px}=0A=
.exampleblock>.content>:first-child{margin-top:0}=0A=
.exampleblock>.content>:last-child{margin-bottom:0}=0A=
.sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;ma=
rgin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radiu=
s:4px;border-radius:4px}=0A=
.sidebarblock>:first-child{margin-top:0}=0A=
.sidebarblock>:last-child{margin-bottom:0}=0A=
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:cente=
r}=0A=
.exampleblock>.content>:last-child>:last-child,.exampleblock>.content =
.olist>ol>li:last-child>:last-child,.exampleblock>.content =
.ulist>ul>li:last-child>:last-child,.exampleblock>.content =
.qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child>:l=
ast-child,.sidebarblock>.content =
.olist>ol>li:last-child>:last-child,.sidebarblock>.content =
.ulist>ul>li:last-child>:last-child,.sidebarblock>.content =
.qlist>ol>li:last-child>:last-child{margin-bottom:0}=0A=
.literalblock pre,.listingblock pre:not(.highlight),.listingblock =
pre[class=3D"highlight"],.listingblock pre[class^=3D"highlight =
"],.listingblock pre.CodeRay,.listingblock =
pre.prettyprint{background:#f7f7f8}=0A=
.sidebarblock .literalblock pre,.sidebarblock .listingblock =
pre:not(.highlight),.sidebarblock .listingblock =
pre[class=3D"highlight"],.sidebarblock .listingblock =
pre[class^=3D"highlight "],.sidebarblock .listingblock =
pre.CodeRay,.sidebarblock .listingblock =
pre.prettyprint{background:#f2f1f1}=0A=
.literalblock pre,.literalblock pre[class],.listingblock =
pre,.listingblock =
pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-wo=
rd;padding:1em;font-size:.8125em}=0A=
.literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock =
pre.nowrap,.listingblock =
pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}=0A=
@media only screen and (min-width:768px){.literalblock pre,.literalblock =
pre[class],.listingblock pre,.listingblock =
pre[class]{font-size:.90625em}}@media only screen and =
(min-width:1280px){.literalblock pre,.literalblock =
pre[class],.listingblock pre,.listingblock =
pre[class]{font-size:1em}}.literalblock.output =
pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}=0A=
.listingblock pre.highlightjs{padding:0}=0A=
.listingblock =
pre.highlightjs>code{padding:1em;-webkit-border-radius:4px;border-radius:=
4px}=0A=
.listingblock pre.prettyprint{border-width:0}=0A=
.listingblock>.content{position:relative}=0A=
.listingblock =
code[data-lang]:before{display:none;content:attr(data-lang);position:abso=
lute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform=
:uppercase;color:#999}=0A=
.listingblock:hover code[data-lang]:before{display:block}=0A=
.listingblock.terminal pre =
.command:before{content:attr(data-prompt);padding-right:.5em;color:#999}=0A=
.listingblock.terminal pre =
.command:not([data-prompt]):before{content:"$"}=0A=
table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;backgro=
und:none}=0A=
table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0}=0A=
table.pyhltable td.code{padding-left:.75em;padding-right:0}=0A=
pre.pygments .lineno,table.pyhltable =
td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1=
px solid #ddddd8}=0A=
pre.pygments .lineno{display:inline-block;margin-right:.25em}=0A=
table.pyhltable =
.linenodiv{background:none!important;padding-right:0!important}=0A=
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}=0A=
.quoteblock>.title{margin-left:-1.5em;margin-bottom:.75em}=0A=
.quoteblock blockquote,.quoteblock blockquote =
p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.=
1em;letter-spacing:0;font-style:italic;text-align:justify}=0A=
.quoteblock blockquote{margin:0;padding:0;border:0}=0A=
.quoteblock =
blockquote:before{content:"\201c";float:left;font-size:2.75em;font-weight=
:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px =
2px rgba(0,0,0,.1)}=0A=
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}=0A=
.quoteblock =
.attribution{margin-top:.5em;margin-right:.5ex;text-align:right}=0A=
.quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em =
0;border-left:3px solid rgba(0,0,0,.6)}=0A=
.quoteblock .quoteblock blockquote{padding:0 0 0 .75em}=0A=
.quoteblock .quoteblock blockquote:before{display:none}=0A=
.verseblock{margin:0 1em 1.25em 1em}=0A=
.verseblock pre{font-family:"Open Sans","DejaVu =
Sans",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-r=
endering:optimizeLegibility}=0A=
.verseblock pre strong{font-weight:400}=0A=
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}=0A=
.quoteblock .attribution,.verseblock =
.attribution{font-size:.9375em;line-height:1.45;font-style:italic}=0A=
.quoteblock .attribution br,.verseblock .attribution br{display:none}=0A=
.quoteblock .attribution cite,.verseblock .attribution =
cite{display:block;letter-spacing:-.05em;color:rgba(0,0,0,.6)}=0A=
.quoteblock.abstract{margin:0 0 1.25em 0;display:block}=0A=
.quoteblock.abstract blockquote,.quoteblock.abstract blockquote =
p{text-align:left;word-spacing:0}=0A=
.quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote =
p:first-of-type:before{display:none}=0A=
table.tableblock{max-width:100%;border-collapse:separate}=0A=
table.tableblock td>.paragraph:last-child =
p>p:last-child,table.tableblock th>p:last-child,table.tableblock =
td>p:last-child{margin-bottom:0}=0A=
table.spread{width:100%}=0A=
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}=0A=
table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 =
1px 1px 0}=0A=
table.grid-all tfoot>tr>th.tableblock,table.grid-all =
tfoot>tr>td.tableblock{border-width:1px 1px 0 0}=0A=
table.grid-cols th.tableblock,table.grid-cols =
td.tableblock{border-width:0 1px 0 0}=0A=
table.grid-all *>tr>.tableblock:last-child,table.grid-cols =
*>tr>.tableblock:last-child{border-right-width:0}=0A=
table.grid-rows th.tableblock,table.grid-rows =
td.tableblock{border-width:0 0 1px 0}=0A=
table.grid-all tbody>tr:last-child>th.tableblock,table.grid-all =
tbody>tr:last-child>td.tableblock,table.grid-all =
thead:last-child>tr>th.tableblock,table.grid-rows =
tbody>tr:last-child>th.tableblock,table.grid-rows =
tbody>tr:last-child>td.tableblock,table.grid-rows =
thead:last-child>tr>th.tableblock{border-bottom-width:0}=0A=
table.grid-rows tfoot>tr>th.tableblock,table.grid-rows =
tfoot>tr>td.tableblock{border-width:1px 0 0 0}=0A=
table.frame-all{border-width:1px}=0A=
table.frame-sides{border-width:0 1px}=0A=
table.frame-topbot{border-width:1px 0}=0A=
th.halign-left,td.halign-left{text-align:left}=0A=
th.halign-right,td.halign-right{text-align:right}=0A=
th.halign-center,td.halign-center{text-align:center}=0A=
th.valign-top,td.valign-top{vertical-align:top}=0A=
th.valign-bottom,td.valign-bottom{vertical-align:bottom}=0A=
th.valign-middle,td.valign-middle{vertical-align:middle}=0A=
table thead th,table tfoot th{font-weight:bold}=0A=
tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}=0A=
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th =
p{color:rgba(0,0,0,.8);font-weight:bold}=0A=
p.tableblock>code:only-child{background:none;padding:0}=0A=
p.tableblock{font-size:1em}=0A=
td>div.verse{white-space:pre}=0A=
ol{margin-left:1.75em}=0A=
ul li ol{margin-left:1.5em}=0A=
dl dd{margin-left:1.125em}=0A=
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}=0A=
ol>li p,ul>li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist =
.olist,.olist .ulist{margin-bottom:.625em}=0A=
ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}=0A=
ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}=0A=
ul.checklist li>p:first-child>.fa-square-o:first-child,ul.checklist =
li>p:first-child>.fa-check-square-o:first-child{width:1em;font-size:.85em=
}=0A=
ul.checklist =
li>p:first-child>input[type=3D"checkbox"]:first-child{width:1em;position:=
relative;top:1px}=0A=
ul.inline{margin:0 auto .625em =
auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overfl=
ow:hidden}=0A=
ul.inline>li{list-style:none;float:left;margin-left:1.375em;display:block=
}=0A=
ul.inline>li>*{display:block}=0A=
.unstyled dl dt{font-weight:400;font-style:normal}=0A=
ol.arabic{list-style-type:decimal}=0A=
ol.decimal{list-style-type:decimal-leading-zero}=0A=
ol.loweralpha{list-style-type:lower-alpha}=0A=
ol.upperalpha{list-style-type:upper-alpha}=0A=
ol.lowerroman{list-style-type:lower-roman}=0A=
ol.upperroman{list-style-type:upper-roman}=0A=
ol.lowergreek{list-style-type:lower-greek}=0A=
.hdlist>table,.colist>table{border:0;background:none}=0A=
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}=0A=
td.hdlist1{padding-right:.75em;font-weight:bold}=0A=
td.hdlist1,td.hdlist2{vertical-align:top}=0A=
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}=0A=
.colist>table tr>td:first-of-type{padding:0 .75em;line-height:1}=0A=
.colist>table tr>td:last-of-type{padding:.25em 0}=0A=
.thumb,.th{line-height:0;display:inline-block;border:solid 4px =
#fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}=0A=
.imageblock.left,.imageblock[style*=3D"float: left"]{margin:.25em .625em =
1.25em 0}=0A=
.imageblock.right,.imageblock[style*=3D"float: right"]{margin:.25em 0 =
1.25em .625em}=0A=
.imageblock>.title{margin-bottom:0}=0A=
.imageblock.thumb,.imageblock.th{border-width:6px}=0A=
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}=0A=
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inl=
ine-block;line-height:0}=0A=
.image.left{margin-right:.625em}=0A=
.image.right{margin-left:.625em}=0A=
a.image{text-decoration:none}=0A=
span.footnote,span.footnoteref{vertical-align:super;font-size:.875em}=0A=
span.footnote a,span.footnoteref a{text-decoration:none}=0A=
span.footnote a:active,span.footnoteref =
a:active{text-decoration:underline}=0A=
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}=0A=
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em =
0;border-width:1px 0 0 0}=0A=
#footnotes .footnote{padding:0 =
.375em;line-height:1.3;font-size:.875em;margin-left:1.2em;text-indent:-1.=
2em;margin-bottom:.2em}=0A=
#footnotes .footnote =
a:first-of-type{font-weight:bold;text-decoration:none}=0A=
#footnotes .footnote:last-of-type{margin-bottom:0}=0A=
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}=0A=
.gist =
.file-data>table{border:0;background:#fff;width:100%;margin-bottom:0}=0A=
.gist .file-data>table td.line-data{width:99%}=0A=
div.unbreakable{page-break-inside:avoid}=0A=
.big{font-size:larger}=0A=
.small{font-size:smaller}=0A=
.underline{text-decoration:underline}=0A=
.overline{text-decoration:overline}=0A=
.line-through{text-decoration:line-through}=0A=
.aqua{color:#00bfbf}=0A=
.aqua-background{background-color:#00fafa}=0A=
.black{color:#000}=0A=
.black-background{background-color:#000}=0A=
.blue{color:#0000bf}=0A=
.blue-background{background-color:#0000fa}=0A=
.fuchsia{color:#bf00bf}=0A=
.fuchsia-background{background-color:#fa00fa}=0A=
.gray{color:#606060}=0A=
.gray-background{background-color:#7d7d7d}=0A=
.green{color:#006000}=0A=
.green-background{background-color:#007d00}=0A=
.lime{color:#00bf00}=0A=
.lime-background{background-color:#00fa00}=0A=
.maroon{color:#600000}=0A=
.maroon-background{background-color:#7d0000}=0A=
.navy{color:#000060}=0A=
.navy-background{background-color:#00007d}=0A=
.olive{color:#606000}=0A=
.olive-background{background-color:#7d7d00}=0A=
.purple{color:#600060}=0A=
.purple-background{background-color:#7d007d}=0A=
.red{color:#bf0000}=0A=
.red-background{background-color:#fa0000}=0A=
.silver{color:#909090}=0A=
.silver-background{background-color:#bcbcbc}=0A=
.teal{color:#006060}=0A=
.teal-background{background-color:#007d7d}=0A=
.white{color:#bfbfbf}=0A=
.white-background{background-color:#fafafa}=0A=
.yellow{color:#bfbf00}=0A=
.yellow-background{background-color:#fafa00}=0A=
span.icon>.fa{cursor:default}=0A=
.admonitionblock td.icon [class^=3D"fa =
icon-"]{font-size:2.5em;text-shadow:1px 1px 2px =
rgba(0,0,0,.5);cursor:default}=0A=
.admonitionblock td.icon .icon-note:before{content:"\f05a";color:#19407c}=0A=
.admonitionblock td.icon =
.icon-tip:before{content:"\f0eb";text-shadow:1px 1px 2px =
rgba(155,155,0,.8);color:#111}=0A=
.admonitionblock td.icon =
.icon-warning:before{content:"\f071";color:#bf6900}=0A=
.admonitionblock td.icon =
.icon-caution:before{content:"\f06d";color:#bf3400}=0A=
.admonitionblock td.icon =
.icon-important:before{content:"\f06a";color:#bf0000}=0A=
.conum[data-value]{display:inline-block;color:#fff!important;background-c=
olor:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-=
align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67e=
m;font-family:"Open Sans","DejaVu =
Sans",sans-serif;font-style:normal;font-weight:bold}=0A=
.conum[data-value] *{color:#fff!important}=0A=
.conum[data-value]+b{display:none}=0A=
.conum[data-value]:after{content:attr(data-value)}=0A=
pre .conum[data-value]{position:relative;top:-.125em}=0A=
b.conum *{color:inherit!important}=0A=
.conum:not([data-value]):empty{display:none}=0A=
h1,h2{letter-spacing:-.01em}=0A=
dt,th.tableblock,td.content{text-rendering:optimizeLegibility}=0A=
p,td.content{letter-spacing:-.01em}=0A=
p strong,td.content strong{letter-spacing:-.005em}=0A=
p,blockquote,dt,td.content{font-size:1.0625rem}=0A=
p{margin-bottom:1.25rem}=0A=
.sidebarblock p,.sidebarblock dt,.sidebarblock =
td.content,p.tableblock{font-size:1em}=0A=
.exampleblock>.content{background-color:#fffef7;border-color:#e0e0dc;-web=
kit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}=0A=
.print-only{display:none!important}=0A=
@media print{@page{margin:1.25cm .75cm}=0A=
*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow=
:none!important}=0A=
a{color:inherit!important;text-decoration:underline!important}=0A=
a.bare,a[href^=3D"#"],a[href^=3D"mailto:"]{text-decoration:none!important=
}=0A=
a[href^=3D"http:"]:not(.bare):after,a[href^=3D"https:"]:not(.bare):after{=
content:"(" attr(href) =
")";display:inline-block;font-size:.875em;padding-left:.25em}=0A=
abbr[title]:after{content:" (" attr(title) ")"}=0A=
pre,blockquote,tr,img{page-break-inside:avoid}=0A=
thead{display:table-header-group}=0A=
img{max-width:100%!important}=0A=
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}=0A=
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}=0A=
#toc,.sidebarblock,.exampleblock>.content{background:none!important}=0A=
#toc{border-bottom:1px solid =
#ddddd8!important;padding-bottom:0!important}=0A=
.sect1{padding-bottom:0!important}=0A=
.sect1+.sect1{border:0!important}=0A=
#header>h1:first-child{margin-top:1.25rem}=0A=
body.book #header{text-align:center}=0A=
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em 0}=0A=
body.book #header =
.details{border:0!important;display:block;padding:0!important}=0A=
body.book #header .details span:first-child{margin-left:0!important}=0A=
body.book #header .details br{display:block}=0A=
body.book #header .details br+span:before{content:none!important}=0A=
body.book =
#toc{border:0!important;text-align:left!important;padding:0!important;mar=
gin:0!important}=0A=
body.book #toc,body.book #preamble,body.book h1.sect0,body.book =
.sect1>h2{page-break-before:always}=0A=
.listingblock code[data-lang]:before{display:block}=0A=
#footer{background:none!important;padding:0 .9375em}=0A=
#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}=0A=
.hide-on-print{display:none!important}=0A=
.print-only{display:block!important}=0A=
.hide-for-print{display:none!important}=0A=
.show-for-print{display:inherit!important}}=0A=
</STYLE>
 <LINK =
href=3D"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/fon=
t-awesome.min.css"=20
rel=3D"stylesheet">=20
<STYLE>=0A=
/* Stylesheet for CodeRay to match GitHub theme | MIT License | =
http://foundation.zurb.com */=0A=
/*pre.CodeRay {background-color:#f7f7f8;}*/=0A=
.CodeRay .line-numbers{border-right:1px solid #d8d8d8;padding:0 0.5em 0 =
.25em}=0A=
.CodeRay =
span.line-numbers{display:inline-block;margin-right:.5em;color:rgba(0,0,0=
,.3)}=0A=
.CodeRay .line-numbers strong{font-weight: normal}=0A=
table.CodeRay{border-collapse:separate;border-spacing:0;margin-bottom:0;b=
order:0;background:none}=0A=
table.CodeRay td{vertical-align: top}=0A=
table.CodeRay td.line-numbers{text-align:right}=0A=
table.CodeRay td.line-numbers>pre{padding:0;color:rgba(0,0,0,.3)}=0A=
table.CodeRay td.code{padding:0 0 0 .5em}=0A=
table.CodeRay td.code>pre{padding:0}=0A=
.CodeRay .debug{color:#fff !important;background:#000080 !important}=0A=
.CodeRay .annotation{color:#007}=0A=
.CodeRay .attribute-name{color:#000080}=0A=
.CodeRay .attribute-value{color:#700}=0A=
.CodeRay .binary{color:#509}=0A=
.CodeRay .comment{color:#998;font-style:italic}=0A=
.CodeRay .char{color:#04d}=0A=
.CodeRay .char .content{color:#04d}=0A=
.CodeRay .char .delimiter{color:#039}=0A=
.CodeRay .class{color:#458;font-weight:bold}=0A=
.CodeRay .complex{color:#a08}=0A=
.CodeRay .constant,.CodeRay .predefined-constant{color:#008080}=0A=
.CodeRay .color{color:#099}=0A=
.CodeRay .class-variable{color:#369}=0A=
.CodeRay .decorator{color:#b0b}=0A=
.CodeRay .definition{color:#099}=0A=
.CodeRay .delimiter{color:#000}=0A=
.CodeRay .doc{color:#970}=0A=
.CodeRay .doctype{color:#34b}=0A=
.CodeRay .doc-string{color:#d42}=0A=
.CodeRay .escape{color:#666}=0A=
.CodeRay .entity{color:#800}=0A=
.CodeRay .error{color:#808}=0A=
.CodeRay .exception{color:inherit}=0A=
.CodeRay .filename{color:#099}=0A=
.CodeRay .function{color:#900;font-weight:bold}=0A=
.CodeRay .global-variable{color:#008080}=0A=
.CodeRay .hex{color:#058}=0A=
.CodeRay .integer,.CodeRay .float{color:#099}=0A=
.CodeRay .include{color:#555}=0A=
.CodeRay .inline{color:#00}=0A=
.CodeRay .inline .inline{background:#ccc}=0A=
.CodeRay .inline .inline .inline{background:#bbb}=0A=
.CodeRay .inline .inline-delimiter{color:#d14}=0A=
.CodeRay .inline-delimiter{color:#d14}=0A=
.CodeRay .important{color:#555;font-weight:bold}=0A=
.CodeRay .interpreted{color:#b2b}=0A=
.CodeRay .instance-variable{color:#008080}=0A=
.CodeRay .label{color:#970}=0A=
.CodeRay .local-variable{color:#963}=0A=
.CodeRay .octal{color:#40e}=0A=
.CodeRay .predefined{color:#369}=0A=
.CodeRay .preprocessor{color:#579}=0A=
.CodeRay .pseudo-class{color:#555}=0A=
.CodeRay .directive{font-weight:bold}=0A=
.CodeRay .type{font-weight:bold}=0A=
.CodeRay .predefined-type{color:inherit}=0A=
.CodeRay .reserved,.CodeRay .keyword {color:#000;font-weight:bold}=0A=
.CodeRay .key{color:#808}=0A=
.CodeRay .key .delimiter{color:#606}=0A=
.CodeRay .key .char{color:#80f}=0A=
.CodeRay .value{color:#088}=0A=
.CodeRay .regexp .delimiter{color:#808}=0A=
.CodeRay .regexp .content{color:#808}=0A=
.CodeRay .regexp .modifier{color:#808}=0A=
.CodeRay .regexp .char{color:#d14}=0A=
.CodeRay .regexp .function{color:#404;font-weight:bold}=0A=
.CodeRay .string{color:#d20}=0A=
.CodeRay .string .string .string{background:#ffd0d0}=0A=
.CodeRay .string .content{color:#d14}=0A=
.CodeRay .string .char{color:#d14}=0A=
.CodeRay .string .delimiter{color:#d14}=0A=
.CodeRay .shell{color:#d14}=0A=
.CodeRay .shell .delimiter{color:#d14}=0A=
.CodeRay .symbol{color:#990073}=0A=
.CodeRay .symbol .content{color:#a60}=0A=
.CodeRay .symbol .delimiter{color:#630}=0A=
.CodeRay .tag{color:#008080}=0A=
.CodeRay .tag-special{color:#d70}=0A=
.CodeRay .variable{color:#036}=0A=
.CodeRay .insert{background:#afa}=0A=
.CodeRay .delete{background:#faa}=0A=
.CodeRay .change{color:#aaf;background:#007}=0A=
.CodeRay .head{color:#f8f;background:#505}=0A=
.CodeRay .insert .insert{color:#080}=0A=
.CodeRay .delete .delete{color:#800}=0A=
.CodeRay .change .change{color:#66f}=0A=
.CodeRay .head .head{color:#f4f}=0A=
</STYLE>
 <!-- Added to asciidoc generated doc -->=20
<SCRIPT =
src=3D"http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js" =
type=3D"text/javascript"></SCRIPT>
=09
<SCRIPT src=3D"http://hazelcast.org/book/js/tocSearch_r2.js" =
type=3D"text/javascript"></SCRIPT>
=20
<STYLE>=0A=
=0A=
body a {=0A=
	color: #ff5f00;=0A=
}=0A=
=0A=
body a:hover {=0A=
	color: #ca4326;=0A=
}=0A=
=0A=
body .sectlevel1 > li > a {=0A=
	font-weight: bold;=0A=
}=0A=
	=0A=
.header {=0A=
  margin: 0;=0A=
  padding: 12px 15px;=0A=
  position: fixed;=0A=
  bottom: 0;=0A=
  left: 0;=0A=
  width: 100%;=0A=
  z-index: 9999;=0A=
  background: #0d2a35;=0A=
  overflow: hidden;=0A=
}=0A=
=0A=
.header h1 {=0A=
	font-weight: bold;=0A=
	font-size: 20px;=0A=
	margin: 0;=0A=
	padding: 0;=0A=
	float: left;=0A=
}=0A=
=0A=
.header a {=0A=
	color: #fff;=0A=
	text-decoration: none;=0A=
	font-family: "Open Sans","DejaVu Sans",sans-serif;=0A=
}=0A=
=0A=
.header a:hover {=0A=
	color: #fff;=0A=
}=0A=
=0A=
.header img {=0A=
  width: 25px;=0A=
  display: inline-block;=0A=
  margin-right: 7px;=0A=
  vertical-align: top;=0A=
}=0A=
=0A=
.header a.return {=0A=
	float: right;=0A=
	display: block;=0A=
    margin-top: 4px;=0A=
}=0A=
=0A=
.sectlevel1 {=0A=
	padding-top: 10px;=0A=
}=0A=
=0A=
fieldset {=0A=
	border: none !important;=0A=
	padding: 0 !important;=0A=
}=0A=
=0A=
div#tocsearch input {=0A=
	font-family: "Open Sans","DejaVu Sans",sans-serif;=0A=
	padding: 5px 8px;=0A=
	width: 100%;=0A=
}=0A=
=0A=
#toc.toc2 {=0A=
	padding-bottom: 70px !important;=0A=
}=0A=
=0A=
div#footer {=0A=
	padding-bottom: 70px !important;=0A=
}=0A=
=0A=
@media only screen and (min-width:768px) {=0A=
	div#tocholder {=0A=
		background: #f8f8f7;=0A=
		position: fixed;=0A=
		margin-top:-1.25em;=0A=
		width: 205px;=0A=
		padding: 15px 0;=0A=
		border-bottom: 1px solid #ddd;=0A=
	}=0A=
	=0A=
	div#tocsearch input {=0A=
		width: 205px;=0A=
	} =0A=
	.sectlevel1 {=0A=
		padding-top: 90px;=0A=
	}=0A=
}=0A=
=0A=
@media only screen and (min-width:1280px) {=0A=
	div#tocholder {=0A=
		width: 285px;=0A=
		padding: 15px 0;=0A=
	}=0A=
	=0A=
	div#tocsearch input {=0A=
		width: 285px;=0A=
	} =0A=
}=0A=
=0A=
</STYLE>
 <!-- END Added to asciidoc generated doc --> </HEAD> <!-- Added to =
asciidoc generated doc -->=20
<BODY class=3D"book toc2 toc-right">
<DIV class=3D"header">
<H1><IMG alt=3D"" =
src=3D"http://hazelcast.org/book/images/HazelcastIcon_White_100px.png"><A=
=20
href=3D"http://hazelcast.org/mastering-hazelcast/">Mastering Hazelcast =
Online=20
Book</A></H1><A class=3D"return" href=3D"http://www.hazelcast.org/"><I =
class=3D"fa fa-share"></I>=20
Return to hazelcast.org</A></DIV><!-- END Added to asciidoc generated =
doc --> <!-- Added to asciidoc generated doc -->=09
<SCRIPT =
src=3D"http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js" =
type=3D"text/javascript"></SCRIPT>
	<LINK href=3D"http://hazelcast.org/book/css/gate.css" =
rel=3D"stylesheet">=20
<DIV class=3D"gate hide">
<DIV class=3D"holder group">
<DIV class=3D"form">
<H3>Please fill out the form below to gain full access to Mastering=20
Hazelcast</H3><IFRAME =
src=3D"http://www2.hazelcast.com/l/30822/2014-05-09/3ccj9"=20
frameborder=3D"0">&lt;p&gt;Loading...&lt;/p&gt;</IFRAME>		 </DIV><!-- =
END form -->
			 </DIV><!-- END holder -->	</DIV>
<SCRIPT src=3D"http://hazelcast.org/book/js/gate_r2.js" =
type=3D"text/javascript"></SCRIPT>
	<!-- END Added to asciidoc generated doc -->	=20
<DIV id=3D"header">
<H1>Mastering Hazelcast</H1>
<DIV class=3D"toc2" id=3D"toc"><!-- Added to asciidoc generated doc -->	 =

<DIV id=3D"tocholder">
<DIV id=3D"toctitle">Table of Contents</DIV>
<DIV id=3D"tocsearch">
<FORM class=3D"styled" id=3D"live-search" action=3D"" method=3D"post">
<FIELDSET><INPUT class=3D"text-input" id=3D"filter" type=3D"text" =
placeholder=3D"Filter Table of Contents" value=3D"">
				 </FIELDSET></FORM></DIV></DIV><!-- END Added to asciidoc generated =
doc -->	=20
<UL class=3D"sectlevel1">
  <LI><A=20
  =
href=3D"http://hazelcast.org/mastering-hazelcast/#acknowledgments">Acknow=
ledgments</A></LI>
  <LI><A=20
  =
href=3D"http://hazelcast.org/mastering-hazelcast/#foreword">Foreword</A><=
/LI>
  <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#preface">Preface</A>=20
  <UL class=3D"sectlevel2">
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-is-hazelcast">What=
 is=20
    Hazelcast?</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#who-should-read-this-bo=
ok">Who=20
    should read this book</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-is-in-this-book">W=
hat=20
    is in this book</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#online-book-resources">=
Online=20
    Book Resources</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#online-hazelcast-resour=
ces">Online=20
    Hazelcast Resources</A></LI></UL></LI>
  <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#getting-started">1.=20
  Getting Started</A>=20
  <UL class=3D"sectlevel2">
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#installing-hazelcast">1=
.1.=20
    Installing Hazelcast</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#hazelcast-and-maven">1.=
2.=20
    Hazelcast with Maven or Gradle</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#download-examples">1.3.=
=20
    Download Examples</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#building-hazelcast">1.4=
.=20
    Building Hazelcast</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-is-next">1.5.=20
    What is next</A></LI></UL></LI>
  <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#learning-the-basics">2.=
=20
  Learning The Basics</A>=20
  <UL class=3D"sectlevel2">
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#configuring-hazelcast">=
2.1.=20
    Configuring Hazelcast</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#configuring-hazelcast-x=
ml">2.1.1.=20
      Configuring Hazelcast using XML</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#configuring-hazelcast-m=
ulticast">2.1.2.=20
      Configuring for Multicast</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#resolving-hazelcast-con=
figuration">2.1.3.=20
      Resolving Hazelcast Configuration Files</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#loading-hazelcast-xml-c=
onfig-from-java">2.1.4.=20
      Loading Hazelcast XML Configuration from Java</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#loading-configation-pro=
grammatically">2.1.5.=20
      Loading Configuration Programmatically</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#fluent-interface">2.1.6=
.=20
      Fluent Interface</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#no-static-default">2.1.=
7.=20
      No Static Default HazelcastInstance</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#same-configuration">2.1=
.8.=20
      Same Configuration</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#wildcard-configuration"=
>2.1.9.=20
      Wildcard Configuration</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#avoiding-ambiguous-conf=
iguration">2.1.10.=20
      Avoiding Ambiguous Configuration</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#properties">2.1.11.=20
      Properties</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#logging">2.1.12.=20
      Logging</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#variables">2.1.13.=20
      Variables</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#composing-declarative-c=
onfiguration">2.1.14.=20
      Composing Declarative Configuration</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#multiple-hazelcast-inst=
ances">2.2.=20
    Multiple Hazelcast Instances</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#loading-a-distributedob=
ject">2.3.=20
    Loading a DistributedObject</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#unique-names-for-distri=
buted-objects">2.4.=20
    Unique Names for Distributed Objects</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#reloading-a-distributed=
object">2.5.=20
    Reloading a DistributedObject</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#destroying-a-distribute=
dobject">2.6.=20
    Destroying a DistributedObject</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#controlled-partitioning=
">2.7.=20
    Controlled Partitioning</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#distributedobject-names=
-partition-key">2.7.1.=20
      DistributedObject Names and Partition Key</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#accessing-partition-key=
s">2.7.2.=20
      Accessing DistributedObject Partition Keys</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#obtaining-partition-key=
s">2.7.3.=20
      Obtaining DistributedObject Partition Keys</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#using-at-in-name">2.7.4=
.=20
      Using @ in Partitioned DistributedObject Names</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know">2.8.=20
    Good to Know</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-is-next">2.9.=20
    What is next?</A></LI></UL></LI>
  <LI><A=20
  =
href=3D"http://hazelcast.org/mastering-hazelcast/#distributed-primitives"=
>3.=20
  Distributed Primitives</A>=20
  <UL class=3D"sectlevel2">
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#iatomiclong">3.1.=20
    IAtomicLong</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#functions">3.1.1.=20
      Functions</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know">3.1.2. =
Good=20
      to know</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#idgenerator">3.2.=20
    IdGenerator</A>=20
    <UL class=3D"sectlevel3">
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know-1">3.2.1. =

      Good to know</A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#iatomicreference">3.3. =

    IAtomicReference</A>=20
    <UL class=3D"sectlevel3">
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know-2">3.3.1. =

      Good to know</A></LI></UL></LI>
    <LI><A href=3D"http://hazelcast.org/mastering-hazelcast/#ilock">3.4. =

    ILock</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#icondition">3.5.=20
    ICondition</A>=20
    <UL class=3D"sectlevel3">
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know-3">3.5.1. =

      Good to know</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#isemaphore">3.6.=20
    ISemaphore</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#replication">3.6.1.=20
      Replication</A>=20
      <UL class=3D"sectlevel4">
        <LI><A=20
        =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know-4">Good =
to=20
        know</A></LI></UL></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#icountdownlatch">3.7.=20
    ICountDownLatch</A>=20
    <UL class=3D"sectlevel3">
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know-5">3.7.1. =

      Good to know</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-is-next">3.8.=20
    What is next?</A></LI></UL></LI>
  <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#distributed-collections=
">4.=20
  Distributed Collections</A>=20
  <UL class=3D"sectlevel2">
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#iqueue">4.1.=20
    IQueue</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#capacity">4.1.1.=20
      Capacity</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#backups">4.1.2.=20
      Backups</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#queuestore">4.1.3.=20
      QueueStore</A></LI></UL></LI>
    <LI><A href=3D"http://hazelcast.org/mastering-hazelcast/#ilist">4.2. =

    IList</A></LI>
    <LI><A href=3D"http://hazelcast.org/mastering-hazelcast/#iset">4.3.=20
    ISet</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#collection-itemlistener=
">4.4.=20
    Collection ItemListener</A>=20
    <UL class=3D"sectlevel3">
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know">4.4.1. =
Good=20
      to know</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-is-next">4.5.=20
    What is next?</A></LI></UL></LI>
  <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#distributed-map">5.=20
  Distributed Map</A>=20
  <UL class=3D"sectlevel2">
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#creating-a-map">5.1.=20
    Creating a Map</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#readingwriting">5.2.=20
    Reading/Writing</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#inmemoryformat">5.3.=20
    InMemoryFormat</A>=20
    <UL class=3D"sectlevel3">
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know">5.3.1. =
Good=20
      to know:</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-happened-to-cache-=
value">5.3.2.=20
      What Happened to Cache-value</A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#hashcode-and-equals">5.=
4.=20
    Hashcode and Equals</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#partition-control">5.5.=
=20
    Partition Control</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#high-availability">5.6.=
 High=20
    Availability</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#eviction">5.7.=20
    Eviction</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#near-cache">5.8. Near=20
    Cache</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#concurrency-control">5.=
9.=20
    Concurrency Control</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#pessimistic-locking">5.=
9.1.=20
      Pessimistic Locking</A>=20
      <UL class=3D"sectlevel4">
        <LI><A=20
        =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know-1">Good =
to=20
        know</A></LI></UL></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#optimistic-locking">5.9=
.2.=20
      Optimistic Locking</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#entryprocessor">5.10.=20
    EntryProcessor</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#process-return-value">5=
.10.1.=20
      Process Return Value</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#backup-processor">5.10.=
2.=20
      Backup Processor</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#threading">5.10.3.=20
      Threading</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know-2">5.10.4.=
=20
      Good to know</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#Maplistener">5.11.=20
    MapListener</A>=20
    <UL class=3D"sectlevel3">
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#threading-1">5.11.1.=20
      Threading</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know-3">5.11.2.=
=20
      Good to know</A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#continuous-query">5.12.=
=20
    Continuous Query</A>=20
    <UL class=3D"sectlevel3">
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know-4">5.12.1.=
=20
      Good to know</A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#distributed-queries">5.=
13.=20
    Distributed Queries</A>=20
    <UL class=3D"sectlevel3">
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#criteria-api">5.13.1.=20
      Criteria API</A>=20
      <UL class=3D"sectlevel4">
        <LI><A=20
        =
href=3D"http://hazelcast.org/mastering-hazelcast/#equal-operator">Equal=20
        Operator</A></LI>
        <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#and-or-and-not-operator=
s"><CODE>And</CODE>,=20
        <CODE>Or</CODE> and <CODE>Not</CODE> Operators</A></LI>
        <LI><A=20
        =
href=3D"http://hazelcast.org/mastering-hazelcast/#other-operators">Other =

        Operators</A></LI>
        <LI><A=20
        =
href=3D"http://hazelcast.org/mastering-hazelcast/#predicatebuilder">Predi=
cateBuilder</A></LI></UL></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#distributed-sql-query">=
5.13.2.=20
      Distributed SQL Query</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know-5">5.13.3.=
=20
      Good to know</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#indexes">5.14.=20
    Indexes</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#persistence">5.15.=20
    Persistence</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#pre-populating-the-map"=
>5.15.1.=20
      Pre-Populating the Map</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#write-through-vs-write-=
behind">5.15.2.=20
      Write Through vs Write Behind</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#maploaderlifecyclesuppo=
rt">5.15.3.=20
      MapLoaderLifecycleSupport</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know-6">5.15.4.=
=20
      Good to know</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#multimap">5.16.=20
    MultiMap</A>=20
    <UL class=3D"sectlevel3">
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#configuration">5.16.1. =

      Configuration</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know-7">5.16.2.=
=20
      Good to know:</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know-8">5.16.3.=
=20
      Good to know</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-is-next">5.17.=20
    What is next</A></LI></UL></LI>
  <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#distributed-executor-se=
rvice">6.=20
  Distributed Executor Service</A>=20
  <UL class=3D"sectlevel2">
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#scaling-up">6.1.=20
    Scaling Up</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#scaling-out">6.2.=20
    Scaling Out</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#routing">6.3.=20
    Routing</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#executing-on-a-specific=
-member">6.3.1.=20
      Executing on a Specific Member</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#executing-on-key-owner"=
>6.3.2.=20
      Executing on Key Owner</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#executing-on-all-or-sub=
set-of-members">6.3.3.=20
      Executing on All or Subset of Members</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#futures">6.3.4.=20
      Futures</A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#execution-callback">6.4=
.=20
    Execution Callback</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know">6.5.=20
    Good to know</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-is-next">6.6.=20
    What is next</A></LI></UL></LI>
  <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#distributed-topic">7.=20
  Distributed Topic</A>=20
  <UL class=3D"sectlevel2">
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#itopic">7.1.=20
    ITopic</A>=20
    <UL class=3D"sectlevel3">
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#message-ordering">7.1.1=
.=20
      Message Ordering</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#reliable-topic">7.2.=20
    Reliable Topic</A>=20
    <UL class=3D"sectlevel3">
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#message-ordering">7.2.1=
.=20
      Message Ordering</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#scaling-up-the-messagel=
istener">7.3.=20
    Scaling up the MessageListener</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know">7.4.=20
    Good to know</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-is-next">7.5.=20
    What is next</A></LI></UL></LI>
  <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#hazelcast-clients">8.=20
  Hazelcast Clients</A>=20
  <UL class=3D"sectlevel2">
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#reusing-the-client">8.1=
.=20
    Reusing the Client</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#configuration-options">=
8.2.=20
    Configuration Options</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#loadbalancing">8.3.=20
    LoadBalancing</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#failover">8.4.=20
    Failover</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#group-configuration">8.=
5.=20
    Group Configuration</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#sharing-classes">8.6.=20
    Sharing Classes</A></LI>
    <LI><A href=3D"http://hazelcast.org/mastering-hazelcast/#ssl">8.7.=20
SSL</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-happened-to-the-li=
te-member">8.8.=20
    What Happened to the Lite Member?</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know">8.9.=20
    Good to know</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-is-next">8.10.=20
    What is Next</A></LI></UL></LI>
  <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serialization-start">9.=
=20
  Serialization</A>=20
  <UL class=3D"sectlevel2">
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serializable">9.1.=20
    Serializable</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#externalizable">9.2.=20
    Externalizable</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#dataserializable">9.3. =

    DataSerializable</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#identifieddataserializa=
ble">9.3.1.=20
      IdentifiedDataSerializable</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#portable">9.4.=20
    Portable</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#dataserializable-vs-por=
table">9.4.1.=20
      DataSerializable vs. Portable</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#object-traversal">9.4.2=
.=20
      Object Traversal</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serialize-distributedob=
ject">9.4.3.=20
      Serialize DistributedObject</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serializing-raw-data">9=
.4.4.=20
      Serializing Raw Data</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#cycles">9.4.5.=20
      Cycles</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#subtyping">9.4.6.=20
      Subtyping</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#versioning">9.4.7.=20
      Versioning</A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#streamserializer">9.5. =

    StreamSerializer</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serialization-object-tr=
aversal">9.5.1.=20
      Object Traversal</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#collections">9.5.2.=20
      Collections</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#kryo-streamserializer">=
9.5.3.=20
      Kryo StreamSerializer</A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#bytearrayserializer">9.=
6.=20
    ByteArraySerializer</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#global-serializer">9.7.=
=20
    Global Serializer</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#hazelcastinstanceaware"=
>9.8.=20
    HazelcastInstanceAware</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serialization-userconte=
xt">9.8.1.=20
      UserContext</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#managedcontext">9.9.=20
    ManagedContext</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know">9.10.=20
    Good to know</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-is-next">9.11.=20
    What is Next</A></LI></UL></LI>
  <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#transactions">10.=20
  Transactions</A>=20
  <UL class=3D"sectlevel2">
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#configuring-the-transac=
tionalmap">10.1.=20
    Configuring the TransactionalMap</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#transactionoptions">10.=
2.=20
    TransactionOptions</A>=20
    <UL class=3D"sectlevel3">
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#transactiontype">10.2.1=
.=20
      TransactionType</A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#transactionaltask">10.3=
.=20
    TransactionalTask</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#partial-commit-failure"=
>10.4.=20
    Partial Commit Failure</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#transaction-isolation">=
10.5.=20
    Transaction Isolation</A>=20
    <UL class=3D"sectlevel3">
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#no-dirty-reads">10.5.1.=
 No=20
      Dirty Reads</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#non-repeatable-reads">1=
0.5.2.=20
      Non-repeatable Reads</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#read-your-writes">10.5.=
3.=20
      Read Your Writes</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#no-serialized-isolation=
-level">10.5.4.=20
      No Serialized Isolation Level</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#non-transactional-data-=
structures">10.5.5.=20
      Non-transactional Data Structures</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#locking">10.6.=20
    Locking</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#caching-and-session">10=
.7.=20
    Caching and Session</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#xa-transactions">10.8. =
XA=20
    Transactions</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#j2ee-integration">10.9.=
 J2EE=20
    Integration</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#resource-adapter-config=
uration">10.9.1.=20
      Resource Adapter Configuration</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#performance">10.10.=20
    Performance</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know">10.11.=20
    Good to know</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-is-next">10.12.=20
    What is next</A></LI></UL></LI>
  <LI><A=20
  =
href=3D"http://hazelcast.org/mastering-hazelcast/#network-configuration">=
11.=20
  Network Configuration</A>=20
  <UL class=3D"sectlevel2">
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#public-address">11.1.=20
    Public Address</A></LI>
    <LI><A href=3D"http://hazelcast.org/mastering-hazelcast/#port">11.2. =

    Port</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#outbound-ports">11.3.=20
    Outbound Ports</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#reuse-address">11.4.=20
    Reuse Address</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#join-mechanism">11.5.=20
    Join Mechanism</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#multicast">11.5.1.=20
      Multicast</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#trusted-interfaces">11.=
5.2.=20
      Trusted Interfaces</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#debugging-multicast">11=
.5.3.=20
      Debugging Multicast</A></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#tcpip-cluster">11.5.4. =

      TCP/IP Cluster</A>=20
      <UL class=3D"sectlevel4">
        <LI><A=20
        =
href=3D"http://hazelcast.org/mastering-hazelcast/#required-member">Requir=
ed=20
        Member</A></LI></UL></LI>
      <LI><A=20
      =
href=3D"http://hazelcast.org/mastering-hazelcast/#ec2-auto-discovery">11.=
5.5.=20
      EC2 Auto Discovery</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#partition-group-configu=
ration">11.6.=20
    Partition Group Configuration</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#cluster-groups">11.7.=20
    Cluster Groups</A></LI>
    <LI><A href=3D"http://hazelcast.org/mastering-hazelcast/#ssl">11.8.=20
    SSL</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#encryption">11.9.=20
    Encryption</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#specifying-network-inte=
rfaces">11.10.=20
    Specifying Network Interfaces</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#firewall">11.11.=20
    Firewall</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#iptables">11.11.1.=20
      iptables</A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#connectivity-test">11.1=
2.=20
    Connectivity Test</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know">11.13.=20
    Good to know</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-is-next">11.14.=20
    What is next</A></LI></UL></LI>
  <LI><A href=3D"http://hazelcast.org/mastering-hazelcast/#spi">12. =
SPI</A>=20
  <UL class=3D"sectlevel2">
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#getting-started">12.1. =

    Getting Started</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#proxy">12.2.=20
    Proxy</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#container">12.3.=20
    Container</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#partition-migration">12=
.4.=20
    Partition Migration</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#backups">12.5.=20
    Backups</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#good-to-know">12.6.=20
    Good to know</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#what-is-next">12.7.=20
    What is next</A></LI></UL></LI>
  <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#threading-model">13.=20
  Threading Model</A>=20
  <UL class=3D"sectlevel2">
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#io-threading">13.1.=20
    I/O Threading</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#event-threading">13.2. =
Event=20
    Threading</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#iexecutor-threading">13=
.3.=20
    IExecutor Threading</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#operation-threading">13=
.4.=20
    Operation Threading</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#partition-aware-operati=
ons">13.4.1.=20
      Partition-aware Operations</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#non-partition-aware-ope=
rations">13.4.2.=20
      Non-Partition-Aware Operations</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#priority-operations">13=
.4.3.=20
      Priority Operations</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#operation-response-and-=
invocation-future">13.5.=20
    Operation-response and Invocation-future</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#local-calls">13.6.=20
    Local Calls</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#queries">13.7.=20
    Queries</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#map-loader">13.8. Map=20
    Loader</A></LI></UL></LI>
  <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#performance-tips">14.=20
  Performance Tips</A>=20
  <UL class=3D"sectlevel2">
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#cluster-design">14.1.=20
    Cluster Design</A></LI>
    <LI><A=20
    =
href=3D"http://hazelcast.org/mastering-hazelcast/#map-performance-tips">1=
4.2.=20
    Map Performance Tips</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#local-stats">14.3.=20
    Local stats</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#jmx-monitoring">14.4.=20
    JMX Monitoring</A></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#slow-operation-detector=
">14.5.=20
    Slow Operation Detector</A>=20
    <UL class=3D"sectlevel3">
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#logging-of-slow-operati=
ons">14.5.1.=20
      Logging of Slow Operations</A></LI>
      <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#purging-of-slow-operati=
on-logs">14.5.2.=20
      Purging of Slow Operation Logs</A></LI></UL></LI>
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#other">14.6.=20
    Other</A></LI></UL></LI>
  <LI><A href=3D"http://hazelcast.org/mastering-hazelcast/#appendix">15. =

  Appendix</A>=20
  <UL class=3D"sectlevel2">
    <LI><A =
href=3D"http://hazelcast.org/mastering-hazelcast/#hazelcast-on-ec2-tutori=
al">15.1.=20
    Hazelcast on EC2 Tutorial</A></LI></UL></LI></UL></DIV></DIV>
<DIV id=3D"content">
<DIV class=3D"sect1">
<H2 id=3D"acknowledgments">Acknowledgments</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>Special thanks go to the Hazelcast guys: Talip Ozturk, Fuad Malikov =
and Enes=20
Akar who are technically responsible for Hazelcast and helped to answer =
my=20
questions. But I really want to thank Mehmet Dogan, architect at =
Hazelcast,=20
since he was my main source of information and put up with the zillion =
questions=20
I have asked.</P></DIV>
<DIV class=3D"paragraph">
<P>Also thanks to all committers and mailing list members for =
contributing to=20
making Hazelcast such a great product.</P></DIV>
<DIV class=3D"paragraph">
<P>Finally, I=E2=80=99m very grateful for my girlfriend, Ralitsa =
Spasova, for being a=20
positive influence around me and making me a better =
person.</P></DIV><!-- toc disabled -->=20
</DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"foreword">Foreword</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>Peter Veentjer leads the QuSP (=E2=80=9CQuality, Stability and =
Performance=E2=80=9D) team at=20
Hazelcast. In that role, he roves over the whole code base with an eagle =
eye and=20
has built up deep expertise on Hazelcast. Peter is also a great =
communicator,=20
wishing to spread his knowledge of and enthusiasm for Hazelcast to our =
user=20
base. So it was natural for Peter to create Mastering =
Hazelcast.</P></DIV>
<DIV class=3D"paragraph">
<P>In Mastering Hazelcast, Peter takes an in-depth look at fundamental =
Hazelcast=20
topics. This book should be seen as a companion to the Reference Manual. =
The=20
reference manual covers all Hazelcast features. Mastering Hazelcast =
gives deeper=20
coverage over the most important topics. Each chapter has a <STRONG>Good =
to=20
Know</STRONG> section, which highlights important concerns.</P></DIV>
<DIV class=3D"paragraph">
<P>This book includes many code examples. These and more can be accessed =
from <A=20
class=3D"bare"=20
href=3D"https://github.com/hazelcast/hazelcast-code-samples">https://gith=
ub.com/hazelcast/hazelcast-code-samples</A>.=20
A great way to learn Hazelcast is to download the examples and work with =
them as=20
you read the chapters.</P></DIV>
<DIV class=3D"paragraph">
<P>Like much of Hazelcast, this book is open source. Feel free to submit =
pull=20
requests to add to and improve it. It is a living document that gets =
updated as=20
we update Hazelcast.</P></DIV>
<DIV class=3D"paragraph">
<P>Greg Luck<BR>CEO Hazelcast<BR></P></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"preface">Preface</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>Writing concurrent systems has long been a passion of mine, so it is =
a=20
logical step to go from concurrency control within a single JVM to =
concurrency=20
control over multiple JVMs. A lot of the knowledge that is applicable to =

concurrency control in a single JVM also applies to concurrency over =
multiple=20
JVMs. However, there is a whole new dimension of problems that make =
distributed=20
systems even more interesting to deal with.</P></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-is-hazelcast">What is Hazelcast?</H3>
<DIV class=3D"paragraph">
<P>When you professionally write applications for the JVM, you will =
likely write=20
server-side applications. Although Java has support for writing desktop=20
applications, the server-side is where Java really shines.</P></DIV>
<DIV class=3D"paragraph">
<P>Today, in the era of cloud computing, it is important that =
server-side=20
systems are:</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>Scalable: just add and remove machines to match the required=20
  capacity.</P></LI>
  <LI>
  <P>Highly available: if one or more machines has failed, the system =
should=20
  continue as if nothing happened.</P></LI>
  <LI>
  <P>Highly performant: performance should be fast, and cost=20
  effective.<BR></P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>Hazelcast is an <EM>In-Memory Data Grid</EM> that is:</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P><STRONG>highly available</STRONG>.</P>
  <DIV class=3D"paragraph">
  <P>It does not lose data after a JVM crash because it automatically =
replicates=20
  partition data to other cluster members. In the case of a member going =
down,=20
  the system will automatically failover by restoring the backup. =
Hazelcast has=20
  no master member that can form a single point of failure; each member =
has=20
  equal responsibilities.</P></DIV></LI>
  <LI>
  <P><STRONG>lightning-fast</STRONG>.</P>
  <DIV class=3D"paragraph">
  <P>Each Hazelcast member can do thousands of operations per=20
  second.<BR></P></DIV></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>Hazelcast on its own is elastic, but not automatically elastic; it =
will not=20
automatically spawn additional JVMs to become members in the cluster =
when the=20
load exceeds a certain upper threshold. Also, Hazelcast will not =
shutdown JVMs=20
when the load drops below a specific threshold. You can achieve this by =
adding a=20
glue code between Hazelcast and your cloud environment.</P></DIV>
<DIV class=3D"paragraph">
<P>One of the things I like most about Hazelcast is that it is =
unobtrusive; as a=20
developer/architect, you are in control of how much Hazelcast you get in =
your=20
system. You are not forced to mutilate objects so they can be =
distributed, use=20
specific application servers, complex APIs, or install software; just =
add the=20
<CODE>hazelcast.jar</CODE> to your classpath and you are done.</P></DIV>
<DIV class=3D"paragraph">
<P>This freedom, combined with very well thought out APIs, makes =
Hazelcast a joy=20
to use. In many cases, you simply use interfaces from=20
<CODE>java.util.concurrent</CODE>, such as <CODE>Executor</CODE>,=20
<CODE>BlockingQueue</CODE> or <CODE>Map</CODE>. In little time and with =
simple=20
and elegant code, you can write a highly available, scalable and =
high-performing=20
system.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"who-should-read-this-book">Who should read this book</H3>
<DIV class=3D"paragraph">
<P>This book aims at developers and architects who build applications on =
top of=20
the JVM and want to get a better understanding of how to write =
distributed=20
applications using Hazelcast. It doesn=E2=80=99t matter if you are using =
Java or one of=20
the JVM-based languages like Scala, Groovy or Clojure. Hazelcast also =
provides=20
an almost identical API for .NET and C++.</P></DIV>
<DIV class=3D"paragraph">
<P>If you are a developer that has no prior experience with Hazelcast, =
then this=20
book will help you learn the basics to get up and running quickly. If =
you=20
already have some experience, it will round out your knowledge. If you =
are a=20
heavy Hazelcast user, it will give you insights into advanced techniques =
and=20
things to consider.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-is-in-this-book">What is in this book</H3>
<DIV class=3D"paragraph">
<P>This book shows you how to make use of Hazelcast by going through =
Hazelcast=E2=80=99s=20
most important features. Its focus is now on Hazelcast 3.5 but it is a =
living=20
document and will be revised as new releases come out. Some of the =
improvements=20
introduced with 3.5 are minor changes, although those changes can have a =
huge=20
impact on your system. Other improvements are very big, such as the SPI =
(came=20
out with 3.0) which lets you  write your own distributed data structures =
if you=20
are not happy with  the ones provided by Hazelcast.</P></DIV>
<DIV class=3D"paragraph">
<P>In <STRONG>Chapter 1: Getting Started</STRONG>, you will learn how to =

download and set up Hazelcast and how to create a basic project. You =
will also=20
learn about some of the general Hazelcast concepts.</P></DIV>
<DIV class=3D"paragraph">
<P>In <STRONG>Chapter 2: Learning the Basics</STRONG>, you will learn =
the basic=20
steps to start Hazelcast instances, load and configure =
DistributedObjects,=20
configure logging, and the other fundamentals of Hazelcast.</P></DIV>
<DIV class=3D"paragraph">
<P>In <STRONG>Chapter 3: Distributed Primitives</STRONG>, you will learn =
how to=20
use basic concurrency primitives like ILock, IAtomicLong, IdGenerator,=20
ISemaphore and ICountDownLatch, and about their advanced =
settings.</P></DIV>
<DIV class=3D"paragraph">
<P>In <STRONG>Chapter 4: Distributed Collections</STRONG>, you will =
learn how to=20
make use of distributed collections like the IQueue, IList and =
ISet.</P></DIV>
<DIV class=3D"paragraph">
<P>In <STRONG>Chapter 5: Distributed Map</STRONG>, you will learn about =
the IMap=20
functionality. Since IMap functionality is very extensive, there is a =
whole=20
topic about dealing with its configuration options, such as high =
availability,=20
scalability, etc. You will also learn how to use Hazelcast as a cache =
and=20
persist its values.</P></DIV>
<DIV class=3D"paragraph">
<P>In <STRONG>Chapter 6: Distributed Executor</STRONG>, you will learn =
about=20
executing tasks using the Distributed Executor. By using the executor, =
you turn=20
Hazelcast into a computing grid.</P></DIV>
<DIV class=3D"paragraph">
<P>In <STRONG>Chapter 7: Distributed Topic</STRONG>, you will learn =
about=20
creating a publish/subscribe solution using the Distributed Topic and=20
ReliableTopic functionality.</P></DIV>
<DIV class=3D"paragraph">
<P>In <STRONG>Chapter 8: Hazelcast Clients</STRONG>, you will learn =
about=20
setting up Hazelcast clients.</P></DIV>
<DIV class=3D"paragraph">
<P>In <STRONG>Chapter 9: Serialization</STRONG>, you will learn more =
about the=20
different serialization technologies that are supported by Hazelcast. =
Java=20
<CODE>Serializable</CODE> and <CODE>Externalizable</CODE> interfaces, =
and also=20
the native Hazelcast serialization techniques like =
<CODE>DataSerializable</CODE>=20
and the new <CODE>Portable</CODE> functionality will be =
explained.</P></DIV>
<DIV class=3D"paragraph">
<P>In <STRONG>Chapter 10: Transactions</STRONG>, you will learn about=20
Hazelcast=E2=80=99s transaction support, which prevents transactional =
data-structures=20
from being left in an inconsistent state.</P></DIV>
<DIV class=3D"paragraph">
<P>In <STRONG>Chapter 11: Network Configuration</STRONG>, you will learn =
about=20
Hazelcast=E2=80=99s network configuration. Different member discovery =
mechanisms like=20
multicast, Amazon EC2, and security will be explained.</P></DIV>
<DIV class=3D"paragraph">
<P>In <STRONG>Chapter 12: SPI</STRONG>, you will learn about using the =
Hazelcast=20
SPI to make first class distributed services. This functionality is  =
perhaps the=20
most important new feature introduced with Hazelcast 3.0.</P></DIV>
<DIV class=3D"paragraph">
<P>In <STRONG>Chapter 13: Threading Model</STRONG>, you will learn about =
using=20
the Hazelcast  threading model. This helps you write an efficient system =
without=20
causing cluster stability issues.</P></DIV>
<DIV class=3D"paragraph">
<P>In <STRONG>Chapter 14: Performance Tips</STRONG>, you will learn some =
tips to=20
improve Hazelcast performance.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"online-book-resources">Online Book Resources</H3>
<DIV class=3D"paragraph">
<P>You can find the online version of this book at <A class=3D"bare" =
href=3D"http://www.hazelcast.org/mastering-hazelcast/">http://www.hazelca=
st.org/mastering-hazelcast/</A>.</P></DIV>
<DIV class=3D"paragraph">
<P>Code examples that are structured chapter by chapter in a convenient =
Maven=20
project can be cloned using GitHub at <A class=3D"bare" =
href=3D"https://github.com/hazelcast/hazelcast-code-samples">https://gith=
ub.com/hazelcast/hazelcast-code-samples</A>.
 I recommend you run the examples as you read the book.</P></DIV>
<DIV class=3D"paragraph">
<P>Please feel free to submit any errata as an issue to this repository, =
or send=20
them directly to <A=20
href=3D"mailto:masteringhazelcast@hazelcast.com">masteringhazelcast@hazel=
cast.com</A>.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"online-hazelcast-resources">Online Hazelcast Resources</H3>
<DIV class=3D"paragraph">
<P>The Hazelcast website and various other useful sites can be found=20
here:</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>Hazelcast Project Website: <A class=3D"bare"=20
  href=3D"http://hazelcast.org/">http://hazelcast.org/</A></P></LI>
  <LI>
  <P>Hazelcast Company Website: <A class=3D"bare"=20
  href=3D"http://hazelcast.com/">http://hazelcast.com/</A></P></LI>
  <LI>
  <P>Hazelcast Documentation: <A class=3D"bare" =
href=3D"http://hazelcast.org/documentation">http://hazelcast.org/document=
ation</A></P></LI>
  <LI>
  <P>Hazelcast Usergroup: <A class=3D"bare" =
href=3D"http://groups.google.com/group/hazelcast">http://groups.google.co=
m/group/hazelcast</A></P></LI>
  <LI>
  <P>Hazelcast Source Code: <A class=3D"bare" =
href=3D"https://github.com/hazelcast/hazelcast/">https://github.com/hazel=
cast/hazelcast/</A></P></LI>
  <LI>
  <P>Hazelcast Code Examples: <A class=3D"bare" =
href=3D"https://github.com/hazelcast/hazelcast-code-samples">https://gith=
ub.com/hazelcast/hazelcast-code-samples</A></P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>Building distributed systems on Hazelcast is really a joy to do. I =
hope I can=20
make you as enthusiastic about it as I am. So let=E2=80=99s get started =
with building=20
distributed applications that you can be proud =
of.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"getting-started">1. Getting Started</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>In this chapter, you will learn the basic steps for getting started =
with=20
Hazelcast, including</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>downloading Hazelcast,</P></LI>
  <LI>
  <P>configuring Hazelcast in the Maven and Gradle projects, =
and</P></LI>
  <LI>
  <P>checking out the Hazelcast sources to build a project=20
yourself.</P></LI></UL></DIV>
<DIV class=3D"sect2">
<H3 id=3D"installing-hazelcast">1.1. Installing Hazelcast</H3>
<DIV class=3D"paragraph">
<P>Hazelcast relies on Java 6 or higher. If you want to compile the =
Hazelcast=20
examples, make sure you have Java 6 or higher installed. If not =
installed, you=20
can download it from the Oracle site: <A class=3D"bare" =
href=3D"http://java.com/en/download/index.jsp">http://java.com/en/downloa=
d/index.jsp</A>.</P></DIV>
<DIV class=3D"paragraph">
<P>For this book, we rely on the community edition of Hazelcast 3.5 =
which you=20
can download from <A class=3D"bare"=20
href=3D"http://www.hazelcast.org/download/">http://www.hazelcast.org/down=
load/</A>.
 If your project uses Maven, there is no need to install Hazelcast at =
all, see=20
<A class=3D"bare"=20
href=3D"http://www.hazelcast.org/download/#maven">http://www.hazelcast.or=
g/download/#maven</A>.
 Otherwise, you should make sure that the Hazelcast JAR is added to your =

classpath. Apart from this JAR, there is no other installation process =
of=20
Hazelcast. This simple steps save quite a lot of time that can use to =
solve real=20
problems.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"hazelcast-and-maven">1.2. Hazelcast with Maven or Gradle</H3>
<DIV class=3D"paragraph">
<P>Hazelcast is very easy to include in your Maven 3 project without =
going=20
through a complex installation process. Hazelcast can be found in the =
standard=20
Maven repositories, so you do not need to add additional repositories to =
the=20
<CODE>pom</CODE>. To include Hazelcast in your project, just add the =
following=20
to your <CODE>pom</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;dependencies&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;dependency&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;groupId&gt;</SPAN>com.hazelcast<SPAN =
class=3D"tag">&lt;/groupId&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;artifactId&gt;</SPAN>hazelcast<SPAN =
class=3D"tag">&lt;/artifactId&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;version&gt;</SPAN>3.5<SPAN =
class=3D"tag">&lt;/version&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/dependency&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/dependencies&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>That is it. Make sure that you check the Hazelcast website to have=20
<CODE>&lt;version&gt;</CODE> use the most recent version number. After =
this=20
dependency is added, Maven will automatically download the dependencies=20
needed.</P></DIV>
<DIV class=3D"paragraph">
<P>To do same with Gradle, include the following to the dependencies =
section of=20
your <CODE>build.gradle</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"groovy">dependencies =
{=0A=
    compile <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">com.hazelcast:hazelcast:3.5</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The latest snapshot is even more recent because it is updated as soon =
as a=20
change is merged in the Git repository.</P></DIV>
<DIV class=3D"paragraph">
<P>If you want to use the latest snapshot, you need to add the snapshot=20
repository to your <CODE>pom</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;repositories&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;repository&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;id&gt;</SPAN>snapshot-repository<SPAN =
class=3D"tag">&lt;/id&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;name&gt;</SPAN>Maven2 Snapshot =
Repository<SPAN class=3D"tag">&lt;/name&gt;</SPAN>=0A=
      <SPAN =
class=3D"tag">&lt;url&gt;</SPAN>https://oss.sonatype.org/content/reposito=
ries/snapshots<SPAN class=3D"tag">&lt;/url&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/repository&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/repositories&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Or, to your <CODE>build.gradle</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"groovy">repositories =
{=0A=
    maven {=0A=
        url <SPAN class=3D"string"><SPAN =
class=3D"delimiter">'</SPAN><SPAN =
class=3D"content">https://oss.sonatype.org/content/repositories/snapshots=
</SPAN><SPAN class=3D"delimiter">'</SPAN></SPAN>=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"admonitionblock warning">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"icon"><I title=3D"Warning" class=3D"fa =
icon-warning"></I> </TD>
    <TD class=3D"content">Using a snapshot can be useful if you need to =
work=20
      with the latest and greatest. However, the snapshot versions might =
contain=20
      some bugs. </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"download-examples">1.3. Download Examples</H3>
<DIV class=3D"paragraph">
<P>You can access the examples used in the book at the following =
website: <A=20
class=3D"bare"=20
href=3D"https://github.com/hazelcast/hazelcast-code-samples">https://gith=
ub.com/hazelcast/hazelcast-code-samples</A>.</P></DIV>
<DIV class=3D"paragraph">
<P>If you want to clone the Git repository, just execute the following=20
command:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"sh">git clone =
https://github.com/hazelcast/hazelcast-code-samples.git</CODE></PRE></DIV=
></DIV>
<DIV class=3D"paragraph">
<P>The examples are very useful to get started and see how Hazelcast =
features=20
work. These examples are modules within a Maven project and you can =
build them=20
using the following command:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>mvn clean install</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Each example has one or more bash scripts to run it. Some users =
prefer to run=20
them in their IDE.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"building-hazelcast">1.4. Building Hazelcast</H3>
<DIV class=3D"paragraph">
<P>If you want to build Hazelcast by yourself to provide a bug fix, =
debug, see=20
how things work, add new features, etc., you can clone the Git =
repository=20
(download the sources) by using the following command:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>git clone =
https://github.com/hazelcast/hazelcast.git</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The master branch contains the latest code.</P></DIV>
<DIV class=3D"paragraph">
<P>To build the Hazelcast project, execute the following =
command:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>mvn clean install -Pparallel-test</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The above command builds all the JARs and runs all the tests. That =
can take=20
some time. If you do not want to execute all the tests, use the =
following=20
command:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>mvn clean install -DskipTests</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you want to create patches for Hazelcast, you need to</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>fork the Hazelcast Git repository:</P>
  <DIV class=3D"imageblock">
  <DIV class=3D"content"><IMG alt=3D"image" =
src=3D"http://hazelcast.org/book/images/ch_1_1.png">=20
  </DIV>
  <DIV class=3D"title">Figure 1. Fork official Hazelcast repository on=20
  Github</DIV></DIV></LI>
  <LI>
  <P>add the official Hazelcast repository as an upstream =
repository:</P>
  <DIV class=3D"listingblock">
  <DIV class=3D"content">
<PRE>git remote add upstream =
https://github.com/hazelcast/hazelcast.git</PRE></DIV></DIV></LI></UL></D=
IV>
<DIV class=3D"paragraph">
<P>If you have a change that you want to offer to the Hazelcast team, =
you commit=20
and push your change to your own forked repository and you create a pull =
request=20
that will be reviewed by the Hazelcast team. Once your pull request is =
verified,=20
it will be merged and a new snapshot will automatically appear in the =
Hazelcast=20
snapshot repository.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-is-next">1.5. What is next</H3>
<DIV class=3D"paragraph">
<P>Now that we have checked out the sources and have installed the right =
tools, =20
we can start to build the amazing Hazelcast applications.</P></DIV><!-- =
toc disabled -->=20
</DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"learning-the-basics">2. Learning The Basics</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>In this chapter, you will learn the basics of a Hazelcast=20
functionality:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>How to create Hazelcast instances.</P></LI>
  <LI>
  <P>How to load and configure distributed objects.</P></LI>
  <LI>
  <P>How to configure logging.</P></LI></UL></DIV>
<DIV class=3D"sect2">
<H3 id=3D"configuring-hazelcast">2.1. Configuring Hazelcast</H3>
<DIV class=3D"paragraph">
<P>Hazelcast can be configured in three different ways:</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>XML configuration.</P></LI>
  <LI>
  <P>Programmatic configuration.</P></LI>
  <LI>
  <P>Spring configuration.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>The programmatic configuration is the most important one; other =
mechanisms=20
are built on top of it. Throughout this book, we use the XML =
configuration file=20
since that is the option most often used in production.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"configuring-hazelcast-xml">2.1.1. Configuring Hazelcast using =
XML</H4>
<DIV class=3D"paragraph">
<P>When you are running a Maven project, just create a folder named=20
<CODE>resources</CODE> under <CODE>src/main/</CODE> and create a file =
called=20
<CODE>hazelcast.xml</CODE>. The following shows an empty=20
<CODE>hazelcast.xml</CODE> configuration file:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"title">Minimal hazelcast XML config file</DIV>
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast</SPAN>=0A=
   <SPAN class=3D"attribute-name">xsi:schemaLocation</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">http://www.hazelcast.com/schema/config =
http://www.hazelcast.com/schema/config/hazelcast-config-3.5.xsd</SPAN><SP=
AN class=3D"delimiter">"</SPAN></SPAN>=0A=
   <SPAN class=3D"attribute-name">xmlns</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">http://www.hazelcast.com/schema/config</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>=0A=
   <SPAN class=3D"attribute-name">xmlns:xsi</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">http://www.w3.org/2001/XMLSchema-instance</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/hazelcast&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This configuration file example imports an XML schema (XSD) for =
validation.
 If you are using a modern IDE (like IntelliJ IDEA), you get code =
completion for=20
XML tags. To reduce the size of the examples in the book, only the =
elements=20
inside the <CODE>&lt;hazelcast&gt;</CODE> tags are listed. In the =
example code=20
for this book, you can find the full XML configuration.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"configuring-hazelcast-multicast">2.1.2. Configuring for =
Multicast</H4>
<DIV class=3D"paragraph">
<P>In most of our examples, we will rely on <CODE>multicast</CODE> for =
member=20
discovery so that the members will join the cluster:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"title">Configuration of multicast joiner</DIV>
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;join&gt;</SPAN><SPAN =
class=3D"tag">&lt;multicast</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN><SPAN =
class=3D"tag">&lt;/join&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>See <A=20
href=3D"http://hazelcast.org/mastering-hazelcast/#multicast">Multicast</A=
> if=20
<CODE>multicast</CODE> does not work or you want to know more about it. =
If you=20
are using the programmatic configuration, then <CODE>multicast</CODE> is =
enabled=20
by default.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"resolving-hazelcast-configuration">2.1.3. Resolving Hazelcast=20
Configuration Files</H4>
<DIV class=3D"paragraph">
<P>In this book, the following approach is used to create a new =
Hazelcast=20
instance:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"title">Create Hazelcast instance with default =
configuration</DIV>
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Main</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args){=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Behind the scenes the following approaches are used to resolve the=20
configuration, in the given order:</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>Hazelcast checks if the <CODE>hazelcast.config</CODE> system =
property is=20
  set. If it is, then its value is used as the path to the configuration =
file.
   This is useful if you  want the application to choose the Hazelcast=20
  configuration file at the time of startup. The config option can be =
set by=20
  adding the following to the java command:</P>
  <DIV class=3D"paragraph">
  <P><CODE>-Dhazelcast.config=3D&lt;path to the=20
hazelcast.xml&gt;</CODE>.</P></DIV>
  <DIV class=3D"paragraph">
  <P>The value can be a normal file path, or it can be a classpath =
reference if=20
  it is prefixed with <CODE>classpath:</CODE>.</P></DIV></LI>
  <LI>
  <P>Hazelcast checks if there is a <CODE>hazelcast.xml</CODE> in the =
working=20
  directory.</P></LI>
  <LI>
  <P>Hazelcast checks if there is a <CODE>hazelcast.xml</CODE> on the=20
  classpath.</P></LI>
  <LI>
  <P>If all of the above options fail to provide a Hazelcast config to =
the=20
  application, the default Hazelcast configuration is loaded from the =
Hazelcast=20
  JAR.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>One of the changes since Hazelcast 3.2 is that when a=20
<CODE>hazelcast.xml</CODE> file contains errors, an exception will be =
thrown and=20
no <CODE>HazelcastInstance</CODE> is created. Prior to the 3.2 release, =
no=20
exception was thrown and a Hazelcast instance with the=20
<CODE>hazelcast-default.xml</CODE> configuration was created. The =
problem with=20
that approach was that you ended up with a =
<CODE>HazelcastInstance</CODE> with a=20
different configuration than you expect.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"loading-hazelcast-xml-config-from-java">2.1.4. Loading =
Hazelcast XML=20
Configuration from Java</H4>
<DIV class=3D"paragraph">
<P>If you need more flexibility to load a Hazelcast <CODE>config</CODE> =
object=20
from XML, you should have a look at the following:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>ClasspathXmlConfig</CODE> class loads the <CODE>config</CODE> =
from a=20
  classpath resource containing the XML configuration.</P>
  <DIV class=3D"listingblock">
  <DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">Config config =
=3D <SPAN class=3D"keyword">new</SPAN> ClasspathXmlConfig(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">hazelcast.xml</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
HazelcastInstance hz =3D =
Hazelcast.newHazelcastInstance(config);</CODE></PRE></DIV></DIV></LI>
  <LI>
  <P><CODE>FileSystemXmlConfig</CODE> class loads the =
<CODE>config</CODE> from a=20
  file:</P>
  <DIV class=3D"listingblock">
  <DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">Config config =
=3D <SPAN class=3D"keyword">new</SPAN> FileSystemXmlConfig(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">hazelcast.xml</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
HazelcastInstance hz =3D =
Hazelcast.newHazelcastInstance(config);</CODE></PRE></DIV></DIV></LI>
  <LI>
  <P><CODE>InMemoryXmlConfig</CODE> class loads the <CODE>config</CODE> =
from an=20
  in-memory string containing the XML configuration.</P>
  <DIV class=3D"listingblock">
  <DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"predefined-type">String</SPAN> s =3D <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">&lt;hazelcast&gt;....&lt;/hazelcast&gt;</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>=0A=
Config config =3D <SPAN class=3D"keyword">new</SPAN> =
InMemoryXmlConfig(s);=0A=
HazelcastInstance hz =3D =
Hazelcast.newHazelcastInstance(config);</CODE></PRE></DIV></DIV></LI>
  <LI>
  <P><CODE>UrlXmlConfig</CODE> class loads the <CODE>config</CODE> from =
a URL=20
  pointing to a XML file.</P>
  <DIV class=3D"listingblock">
  <DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">Config config =
=3D <SPAN class=3D"keyword">new</SPAN> UrlXmlConfig(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">http://foo/hazelcast.xml</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
HazelcastInstance hz =3D =
Hazelcast.newHazelcastInstance(config);</CODE></PRE></DIV></DIV></LI></UL=
></DIV>
<DIV class=3D"paragraph">
<P>All these <CODE>Config</CODE> subclasses rely on the=20
<CODE>XmlConfigBuilder</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">Config config =
=3D <SPAN class=3D"keyword">new</SPAN> XmlConfigBuilder().build();=0A=
HazelcastInstance hz =3D =
Hazelcast.newHazelcastInstance(config);</CODE></PRE></DIV></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"loading-configation-programmatically">2.1.5. Loading =
Configuration=20
Programmatically</H4>
<DIV class=3D"paragraph">
<P>Another option to load a <CODE>HazelcastInstance</CODE> is via =
programmatic=20
configuration:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Main</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args){=0A=
      ExecutorConfig executorConfig =3D <SPAN =
class=3D"keyword">new</SPAN> ExecutorConfig()=0A=
        .setName(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">someExecutor</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>)=0A=
        .setPoolSize(<SPAN class=3D"integer">10</SPAN>);=0A=
      Config config =3D <SPAN class=3D"keyword">new</SPAN> =
Config().addExecutorConfig(executorConfig);     <I class=3D"conum" =
data-value=3D"1"></I><B>(1)</B>=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance(config);   =
   <I class=3D"conum" data-value=3D"2"></I><B>(2)</B>=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"colist arabic">
<TABLE>
  <TBODY>
  <TR>
    <TD><I class=3D"conum" data-value=3D"1"></I><B>1</B></TD>
    <TD>Creating configuration with API</TD></TR>
  <TR>
    <TD><I class=3D"conum" data-value=3D"2"></I><B>2</B></TD>
    <TD>Passing configuration to the <CODE>newHazelcastInstance</CODE> =
factory=20
      method. Hazelcast instance will be created with custom=20
  config.</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"fluent-interface">2.1.6. Fluent Interface</H4>
<DIV class=3D"paragraph">
<P>The Hazelcast <CODE>Config</CODE> object has a fluent interface: the=20
<CODE>Config</CODE> instance is returned when a <CODE>config</CODE> =
method on=20
this instance is called. This makes chaining method calls very easy. The =

programmatic configuration is very useful for testing and it is a =
solution for=20
the static nature of the XML configuration. You can easily create =
content for=20
the programmatic configuration on the fly: for example, based on the =
database=20
content. You could even decide to move the <CODE>static</CODE> =
configuration to=20
the <CODE>hazelcast.xml</CODE>, load it and then modify the dynamic =
parts: for=20
example, the network configuration.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"no-static-default">2.1.7. No Static Default =
HazelcastInstance</H4>
<DIV class=3D"paragraph">
<P>In Hazelcast releases prior to 3.0, there was a functionality for a =
static=20
default <CODE>HazelcastInstance</CODE>, so you could say <CODE>Queue q =
=3D=20
Hazelcast.getQueue("foo")</CODE>. This functionality has been removed =
because it=20
led to confusion when explicitly created Hazelcast instances were =
combined with=20
calls to the implicit default <CODE>HazelcastInstance</CODE>. You =
probably want=20
to keep a handle to the Hazelcast instance somewhere for future=20
usage.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"same-configuration">2.1.8. Same Configuration</H4>
<DIV class=3D"paragraph">
<P>Hazelcast will not copy configuration from one member to another. =
Therefore,=20
whether they are XML based or programmatic, the configurations on all =
members in=20
the cluster are exactly the same.</P></DIV>
<DIV class=3D"admonitionblock warning">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"icon"><I title=3D"Warning" class=3D"fa =
icon-warning"></I> </TD>
    <TD class=3D"content">Differences between configurations can lead to =

      problems. Either Hazelcast will detect the differences or the =
distributed=20
      objects will be created with different configurations based on how =
the=20
      members are configured. </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"wildcard-configuration">2.1.9. Wildcard Configuration</H4>
<DIV class=3D"paragraph">
<P>The Hazelcast XML configuration can contain configuration elements =
for all=20
kinds of distributed data structures, i.e. <CODE>sets</CODE>,=20
<CODE>executors</CODE>, <CODE>maps</CODE>, etc. See the following=20
example:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">testmap</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;time-to-live-seconds&gt;</SPAN>10<SPAN =
class=3D"tag">&lt;/time-to-live-seconds&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>But, what if we want to create multiple map instances using the same=20
configuration? Do we need to configure them individually? This is =
impossible to=20
do if you have a dynamic number of distributed data structures and you =
do not=20
know up front how many need to be created. The solution to this problem =
is=20
wildcard configuration, which is available for all data structures. =
Wildcard=20
configuration makes it possible to use the same configuration for =
multiple=20
instances. For example, we could configure the previous =
<CODE>testmap</CODE>=20
example with a value of 10 for <CODE>time-to-live-seconds</CODE> using a =

wildcard configuration like this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">testmap*</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;time-to-live-seconds&gt;</SPAN>10<SPAN =
class=3D"tag">&lt;/time-to-live-seconds&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>By using a single asterisk (<CODE>*</CODE>) character any place in =
the name,=20
the same configuration can be shared by different data structures. The =
wildcard=20
configuration can be used like this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">   <SPAN =
class=3D"predefined-type">Map</SPAN> map1 =3D hz.getMap(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">testmap1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
   <SPAN class=3D"predefined-type">Map</SPAN> map2 =3D hz.getMap(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">testmap2</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The maps <CODE>testmap1</CODE> and <CODE>testmap2</CODE> both match=20
<CODE>testmap*</CODE> so they will use the same configuration. If you =
have a=20
Spring background, you could consider the wildcard configuration to be a =

prototype bean definition. The difference is that in Hazelcast, multiple =
gets of=20
a data structure with the same ID will still result in the same =
instance,=20
whereas with prototype beans, new instances are =
returned.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"avoiding-ambiguous-configuration">2.1.10. Avoiding Ambiguous=20
Configuration</H4>
<DIV class=3D"paragraph">
<P>It is important that you watch out for ambiguous configuration, as in =
the=20
following example:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">m*</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;time-to-live-seconds&gt;</SPAN>10<SPAN =
class=3D"tag">&lt;/time-to-live-seconds&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">ma*</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;time-to-live-seconds&gt;</SPAN>10<SPAN =
class=3D"tag">&lt;/time-to-live-seconds&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If a map is loaded using <CODE>hz.getMap("map")</CODE> then Hazelcast =
will=20
not throw an error or log a warning; instead, Hazelcast selects one of =
the maps.
 The selection does not depend on the definition order in the =
configuration file=20
and it is not based on the best-fitting match. You should make sure that =
your=20
wildcard configurations are very specific. One of the ways to achieve =
this is to=20
include the package name as shown below.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">com.foo.testmap*</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;time-to-live-seconds&gt;</SPAN>10<SPAN =
class=3D"tag">&lt;/time-to-live-seconds&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>A map can be loaded by calling <CODE>Map map =3D=20
hi.getMap("com.foo.testmap1")</CODE>.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"properties">2.1.11. Properties</H4>
<DIV class=3D"paragraph">
<P>Hazelcast provides an option to configure certain properties which =
are not=20
part of an explicit configuration section, such as the Map. This can be =
done=20
using the <CODE>properties</CODE> section.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;properties&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;property</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">hazelcast.icmp.enabled</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>true<SPAN class=3D"tag">&lt;/property&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/properties&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>For a full listing of available properties, see the System Properties =
section=20
in the Hazelcast Reference Manual or have a look at the=20
<CODE>GroupProperties</CODE> class.</P></DIV>
<DIV class=3D"paragraph">
<P>Apart from properties in the <CODE>hazelcast.xml</CODE>, you can also =
pass=20
properties using the command line <CODE>java=20
-Dproperty-name=3Dproperty-value</CODE>. One thing to watch out for is =
that you=20
cannot override properties in the <CODE>hazelcast.xml</CODE> or the =
programmatic=20
configuration from the command line because the command line has a lower =

priority.</P></DIV>
<DIV class=3D"paragraph">
<P>Properties are not shared between members, so you cannot put =
properties in=20
one member and read them from another. You need to use a distributed map =
for=20
that.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"logging">2.1.12. Logging</H4>
<DIV class=3D"paragraph">
<P>Hazelcast supports various logging mechanisms; <CODE>jdk</CODE>,=20
<CODE>log4</CODE>, <CODE>sl4j</CODE> or <CODE>none</CODE> if you do not =
want to=20
have any logging. The default is <CODE>jdk</CODE>, the logging library =
that is=20
part of the JRE, so no additional dependencies are needed. You can set =
logging=20
by adding a property in the <CODE>hazelcast.xml</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;properties&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;property</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">hazelcast.logging.type</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>log4j<SPAN =
class=3D"tag">&lt;/property&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/properties&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Or, you can set with the programmatic configuration as shown =
below.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">  Config cfg =
=3D <SPAN class=3D"keyword">new</SPAN> Config() ;=0A=
  cfg.setProperty(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">hazelcast.logging.type</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">log4j</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>You can also configure it from the command line using <CODE>java=20
-Dhazelcast.logging.type=3Dlog4j</CODE>. If you are going to use=20
<CODE>log4j</CODE> or <CODE>slf4j</CODE>, make sure that the correct=20
dependencies are included in the  classpath. See the example sources for =
more=20
information.</P></DIV>
<DIV class=3D"paragraph">
<P>If you are not satisfied with the provided logging implementations, =
you can=20
always implement your own logging by using the <CODE>LogListener</CODE>=20
interface. See the Logging Configuration section in the Hazelcast =
Reference=20
Manual for more information.</P></DIV>
<DIV class=3D"admonitionblock warning">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"icon"><I title=3D"Warning" class=3D"fa =
icon-warning"></I> </TD>
    <TD class=3D"content">If you are not making use of configuring =
logging from=20
      the command line,  be very careful about touching Hazelcast =
classes. It=20
      could be that they default  to the <CODE>jdk</CODE> logging before =
the=20
      actual configured logging is read. Once the logging mechanism is =
selected,=20
      it will not change. Some users make use of the command line =
version=20
      instead of the properties section for logging to avoid confusion.=20
  </TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"paragraph">
<P>If you are making use of <CODE>jdk</CODE> logging and you are annoyed =
that=20
your log entry is spread over two lines, have a look at the=20
<CODE>SimpleLogFormatter</CODE> as shown below.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE =
data-lang=3D"property">java.util.logging.SimpleFormatter.format=3D'%4$s: =
%5$s%6$s%n'</CODE></PRE></DIV></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"variables">2.1.13. Variables</H4>
<DIV class=3D"paragraph">
<P>One of the new features of Hazelcast 3 is the ability to specify =
variables in=20
the Hazelcast XML configuration file. This makes it a lot easier to =
share the=20
same Hazelcast configuration between different environments and it also =
makes it=20
easier to tune settings.</P></DIV>
<DIV class=3D"paragraph">
<P>Variables can be used as shown below.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;executor-service</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">exec</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;pool-size&gt;</SPAN>${pool.size}<SPAN =
class=3D"tag">&lt;/pool-size&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/executor-service&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In this example, the <CODE>pool-size</CODE> is configurable using the =

<CODE>pool.size</CODE> variable. In a production environment, you might =
want to=20
increase the pool size since you have beefier machines there. In a =
development=20
environment, you might want to set it to a low value.</P></DIV>
<DIV class=3D"paragraph">
<P>By default, Hazelcast uses the system properties to replace variables =
with=20
their actual value. To pass this system property, you could add the =
following on=20
the command line: <CODE>-Dpool.size=3D1</CODE>. If a variable is not =
found, a log=20
warning will be displayed but the value will not be replaced.</P></DIV>
<DIV class=3D"paragraph">
<P>You can use a different mechanism than the system properties, such as =
a=20
property file or a database. You can do this by explicitly setting the=20
<CODE>Properties</CODE> object on the <CODE>XmlConfigBuilder</CODE> as =
shown=20
below.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">  <SPAN =
class=3D"predefined-type">Properties</SPAN> properties =3D <SPAN =
class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">Properties</SPAN>();=0A=
  properties.setProperty(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">pool.size</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>,<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">10</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
  Config config =3D <SPAN class=3D"keyword">new</SPAN> XmlConfigBuilder()=0A=
      .setProperties(properties)=0A=
          .build();=0A=
  HazelcastInstance hz =3D =
Hazelcast.newHazelcastInstance(config);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>Config</CODE> subclasses, like =
<CODE>FileSystemXmlConfig</CODE>,=20
accept <CODE>Properties</CODE> in their constructors.</P></DIV>
<DIV class=3D"paragraph">
<P>Although variables will give you a lot more flexibility, they have=20
limitations: you can parametrize but you cannot add new XML sections. If =
your=20
needs go beyond what the variables provide, you might consider using =
some kind=20
of template engine like Velocity to generate your =
<CODE>hazelcast.xml</CODE>=20
file. Another option is using programmatic configuration, either by =
creating a=20
completely new <CODE>Config</CODE> instance or loading a =
<CODE>template</CODE>=20
from XML and enhancing where needed.</P></DIV>
<DIV class=3D"admonitionblock note">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"icon"><I title=3D"Note" class=3D"fa icon-note"></I> =
</TD>
    <TD class=3D"content">As of version 3.5, Hazelcast supports =
replacing=20
      variables with system properties in the declarative configuration =
of=20
      <EM>Hazelcast client</EM>. </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"composing-declarative-configuration">2.1.14. Composing =
Declarative=20
Configuration</H4>
<DIV class=3D"paragraph">
<P>In Hazelcast 3.4 configuration import for member configuration was=20
introduced. This feature enables composition of the Hazelcast =
declarative=20
configuration file out of smaller configuration snippets. In Hazelcast =
3.5, a=20
similar feature was added to compose the Hazelcast client declarative=20
configuration.</P></DIV>
<DIV class=3D"paragraph">
<P>You can compose the declarative configuration of your Hazelcast or =
Hazelcast=20
Client from multiple declarative configuration snippets. In order to =
compose a=20
declarative configuration, you can use the <CODE>&lt;import/&gt;</CODE> =
element=20
to load different declarative configuration files.</P></DIV>
<DIV class=3D"paragraph">
<P>Let=E2=80=99s say you want to compose the declarative configuration =
for Hazelcast out=20
of two configurations: <CODE>development-group-config.xml</CODE> and=20
<CODE>development-network-config.xml</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"title">development-group-config.xml</DIV>
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast&gt;</SPAN>=0A=
  <SPAN class=3D"tag">&lt;group&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;name&gt;</SPAN>dev<SPAN =
class=3D"tag">&lt;/name&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;password&gt;</SPAN>dev-pass<SPAN =
class=3D"tag">&lt;/password&gt;</SPAN>=0A=
  <SPAN class=3D"tag">&lt;/group&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/hazelcast&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"title">development-network-config.xml</DIV>
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast&gt;</SPAN>=0A=
  <SPAN class=3D"tag">&lt;network&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;port</SPAN> <SPAN =
class=3D"attribute-name">auto-increment</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">true</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN> =
<SPAN class=3D"attribute-name">port-count</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">100</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>5701<SPAN class=3D"tag">&lt;/port&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;join&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;multicast</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
            <SPAN =
class=3D"tag">&lt;multicast-group&gt;</SPAN>224.2.2.3<SPAN =
class=3D"tag">&lt;/multicast-group&gt;</SPAN>=0A=
            <SPAN class=3D"tag">&lt;multicast-port&gt;</SPAN>54327<SPAN =
class=3D"tag">&lt;/multicast-port&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;/multicast&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;/join&gt;</SPAN>=0A=
  <SPAN class=3D"tag">&lt;/network&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/hazelcast&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>To get your example Hazelcast declarative configuration out of the =
above two,=20
use the <CODE>&lt;import/&gt;</CODE> element as shown below.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast&gt;</SPAN>=0A=
  <SPAN class=3D"tag">&lt;import</SPAN> <SPAN =
class=3D"attribute-name">resource</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">development-group-config.xml</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN>=0A=
  <SPAN class=3D"tag">&lt;import</SPAN> <SPAN =
class=3D"attribute-name">resource</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">development-network-config.xml</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/hazelcast&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This feature also applies to the declarative configuration of =
Hazelcast=20
Client.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"title">client-group-config.xml</DIV>
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast-client&gt;</SPAN>=0A=
  <SPAN class=3D"tag">&lt;group&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;name&gt;</SPAN>dev<SPAN =
class=3D"tag">&lt;/name&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;password&gt;</SPAN>dev-pass<SPAN =
class=3D"tag">&lt;/password&gt;</SPAN>=0A=
  <SPAN class=3D"tag">&lt;/group&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/hazelcast-client&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"title">client-network-config.xml</DIV>
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast-client&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;network&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;cluster-members&gt;</SPAN>=0A=
            <SPAN =
class=3D"tag">&lt;address&gt;</SPAN>127.0.0.1:7000<SPAN =
class=3D"tag">&lt;/address&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;/cluster-members&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;/network&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/hazelcast-client&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>To get a Hazelcast Client declarative configuration from the above =
two=20
examples, use the <CODE>&lt;import/&gt;</CODE> element as shown =
below.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast-client&gt;</SPAN>=0A=
  <SPAN class=3D"tag">&lt;import</SPAN> <SPAN =
class=3D"attribute-name">resource</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">client-group-config.xml</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN>=0A=
  <SPAN class=3D"tag">&lt;import</SPAN> <SPAN =
class=3D"attribute-name">resource</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">client-network-config.xml</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/hazelcast-client&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"admonitionblock note">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"icon"><I title=3D"Note" class=3D"fa icon-note"></I> =
</TD>
    <TD class=3D"content">You need to use the =
<CODE>&lt;import/&gt;</CODE>=20
      element on the top level of the XML hierarchy. =
</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"paragraph">
<P>XML resources can be loaded from classpath and filesystem.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast&gt;</SPAN>=0A=
  <SPAN class=3D"tag">&lt;import</SPAN> <SPAN =
class=3D"attribute-name">resource</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">file:///etc/hazelcast/development-group-config.xml</SPA=
N><SPAN class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">/&gt;</SPAN> <SPAN class=3D"comment">&lt;!-- loaded from =
filesystem --&gt;</SPAN>=0A=
  <SPAN class=3D"tag">&lt;import</SPAN> <SPAN =
class=3D"attribute-name">resource</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">classpath:development-network-config.xml</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN>  =
<SPAN class=3D"comment">&lt;!-- loaded from classpath --&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/hazelcast&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>You can use property placeholders in the <CODE>&lt;import/&gt;</CODE> =

elements.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast&gt;</SPAN>=0A=
  <SPAN class=3D"tag">&lt;import</SPAN> <SPAN =
class=3D"attribute-name">resource</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">${environment}-group-config.xml</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN>=0A=
  <SPAN class=3D"tag">&lt;import</SPAN> <SPAN =
class=3D"attribute-name">resource</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">${environment}-network-config.xml</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/hazelcast&gt;</SPAN></CODE></PRE></DIV></DIV></DIV></D=
IV>
<DIV class=3D"sect2">
<H3 id=3D"multiple-hazelcast-instances">2.2. Multiple Hazelcast =
Instances</H3>
<DIV class=3D"paragraph">
<P>In most cases, you will have a single Hazelcast instance per JVM. =
However,=20
multiple Hazelcast instances can also run in a single JVM. This is =
useful for=20
testing and is also needed for more complex setups: for example, =
application=20
servers running multiple independent applications using Hazelcast. You =
can start=20
multiple Hazelcast instances as shown below.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"title">Creating multiple HazelcastInstances</DIV>
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">MultipleMembers</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args){=0A=
      HazelcastInstance hz1 =3D Hazelcast.newHazelcastInstance();=0A=
      HazelcastInstance hz2 =3D Hazelcast.newHazelcastInstance();=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When you start the above <CODE>MultipleMembers</CODE>, you see an =
output=20
similar to the following in one member.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Members [2] {=0A=
    Member [192.168.1.100]:5701 this=0A=
    Member [192.168.1.100]:5702=0A=
}</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>And an output similar to the following in the other member.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Members [2] {=0A=
    Member [192.168.1.100]:5701=0A=
    Member [192.168.1.100]:5702 this=0A=
}</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>As you can see in the above outputs, the created cluster has 2=20
members.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"loading-a-distributedobject">2.3. Loading a =
DistributedObject</H3>
<DIV class=3D"paragraph">
<P>In the previous sections, we saw how a <CODE>HazelcastInstance</CODE> =
can be=20
created. In most cases, you want to load a =
<CODE>DistributedObject</CODE>, such=20
as a queue, from this <CODE>HazelcastInstance</CODE>. So let=E2=80=99s =
define a queue in=20
the <CODE>hazelcast.xml</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;queue</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">q</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">/&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>And the queue can be loaded as shown below.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN>{=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      IQueue&lt;<SPAN class=3D"predefined-type">String</SPAN>&gt; q =3D =
hz.getQueue(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">q</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>For most of the DistributedObjects, you can find a get method on the=20
HazelcastInstance. In case you are writing custom distributed objects =
using the=20
<A href=3D"http://hazelcast.org/mastering-hazelcast/#spi">SPI</A>, you =
can use the=20
<CODE>HazelcastInstance.getDistributedObject</CODE>. One thing worth =
mentioning=20
is that most of the distributed objects defined in the configuration are =
created=20
lazily. They are only created on the first operation that accesses=20
them.</P></DIV>
<DIV class=3D"paragraph">
<P>If there is no explicit configuration available for a=20
<CODE>DistributedObject</CODE>, Hazelcast will use the default settings =
from the=20
file <CODE>hazelcast-default.xml</CODE>. This means that you can safely =
load a=20
<CODE>DistributedObject</CODE> from the <CODE>HazelcastInstance</CODE> =
without=20
it being explicitly configured.</P></DIV>
<DIV class=3D"paragraph">
<P>To learn more about the queue and its configuration, see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#iqueue">Distributed=20
Collections: IQueue</A>.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"unique-names-for-distributed-objects">2.4. Unique Names for =
Distributed=20
Objects</H3>
<DIV class=3D"paragraph">
<P>Some of the distributed objects will be static. They will be created =
and used=20
through the application and the IDs of these objects will be known up =
front.
 Other distributed objects are created on the fly, and one of the =
problems is=20
finding unique names when new data structures need to be created. One of =
the=20
solutions to this problem is to use the <CODE>IdGenerator</CODE>, which =
will=20
generate cluster wide unique IDs.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE =
data-lang=3D"java">HazelcastInstance hz =3D =
Hazelcast.newHazelcastInstance();=0A=
IdGenerator idGenerator =3D hz.getIdGenerator(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">idGenerator</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
IMap someMap =3D hz.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">somemap-</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+idGenerator.newId());</CODE></PRE></D=
IV></DIV>
<DIV class=3D"paragraph">
<P>This technique can be used with wildcard configuration to create =
similar=20
objects using a single definition. See <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#wildcard-configuration"=
>Wildcard=20
Configuration</A>.</P></DIV>
<DIV class=3D"paragraph">
<P>A distributed object created with a unique name often needs to be =
shared=20
between members. You can do this by passing the ID to the other members =
and you=20
can use one of the <CODE>HazelcastInstance.get</CODE> methods to =
retrieve the=20
<CODE>DistributedObject</CODE>. For more information, see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serialize-distributedob=
ject">Serialization:=20
DistributedObject</A>.</P></DIV>
<DIV class=3D"paragraph">
<P>In Hazelcast, the name and type of the <CODE>DistributedObject</CODE> =

uniquely identifies that object:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">IAtomicLong =
atomicLong =3D hz.getAtomicLong(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">a</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>); <I class=3D"conum" =
data-value=3D"1"></I><B>(1)</B>=0A=
IMap map =3D hz.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">a</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);                      <I =
class=3D"conum" data-value=3D"2"></I><B>(2)</B></CODE></PRE></DIV></DIV>
<DIV class=3D"colist arabic">
<TABLE>
  <TBODY>
  <TR>
    <TD><I class=3D"conum" data-value=3D"1"></I><B>1</B></TD>
    <TD>Retrieving <CODE>IAtomicLong</CODE> instance from Hazelcast=20
    instance.</TD></TR>
  <TR>
    <TD><I class=3D"conum" data-value=3D"2"></I><B>2</B></TD>
    <TD>Retrieving <CODE>IMap</CODE> instance from Hazelcast=20
  instance.</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"paragraph">
<P>In the above example, two different distributed objects are created =
with the=20
same name but different types. In normal applications, you want to =
prevent=20
different types of distributed objects from sharing the same name. You =
can add=20
the type to the name, such as <CODE>personMap</CODE> or=20
<CODE>failureCounter</CODE>, to make the names =
self-explanatory.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"reloading-a-distributedobject">2.5. Reloading a =
DistributedObject</H3>
<DIV class=3D"paragraph">
<P>In most cases, once you have loaded the =
<CODE>DistributedObject</CODE>, you=20
probably keep a reference to it and inject into all places where it is =
needed.
 However, you can safely reload the same <CODE>DistributedObject</CODE> =
from the=20
<CODE>HazelcastInstance</CODE> without additional instances being =
created if you=20
only have the name of the <CODE>DistributedObject</CODE>. In some cases, =
like=20
deserialization, when you need to get a reference to a Hazelcast=20
<CODE>DistributedObject</CODE>, this is the only solution. If you have a =
Spring=20
background, you could consider the configuration to be a singleton bean=20
definition.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"destroying-a-distributedobject">2.6. Destroying a =
DistributedObject</H3>
<DIV class=3D"paragraph">
<P>A <CODE>DistributedObject</CODE> can be destroyed using the=20
<CODE>DistributedObject.destroy()</CODE> method, which clears and =
releases all=20
resources for this object within the cluster. But, you should use this =
method=20
with care because once the <CODE>destroy</CODE> method is called and the =

resources are released, a subsequent load with the same ID from the=20
<CODE>HazelcastInstance</CODE> will result in a new data structure and =
will not=20
lead to an exception.</P></DIV>
<DIV class=3D"paragraph">
<P>A similar issue happens to references. If a reference to a=20
<CODE>DistributedObject</CODE> is used after the =
<CODE>DistributedObject</CODE>=20
is destroyed, new resources will be created. In the following case, we =
create a=20
cluster with two members and each member gets a reference to the queue=20
<CODE>q</CODE>. First, we place an item in the queue. When the queue is=20
destroyed by the first member (<CODE>q1</CODE>) and <CODE>q2</CODE> is =
accessed,=20
a new queue will be created.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      HazelcastInstance hz1 =3D Hazelcast.newHazelcastInstance();=0A=
      HazelcastInstance hz2 =3D Hazelcast.newHazelcastInstance();=0A=
      IQueue&lt;<SPAN class=3D"predefined-type">String</SPAN>&gt; q1 =3D =
hz1.getQueue(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">q</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      IQueue&lt;<SPAN class=3D"predefined-type">String</SPAN>&gt; q2 =3D =
hz2.getQueue(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">q</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      q1.add(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">foo</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">q1.size: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+q1.size()+ <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content"> q2.size:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+q2.size());=0A=
      q1.destroy();=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">q1.size: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+q1.size() + <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content"> q2.size:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+q2.size());=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When we start the above <CODE>Member</CODE>, the output will show the =

following:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>q1.size: 1 q2.size:1=0A=
q1.size: 0 q2.size:0</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The system will not report any error and will behave as if nothing =
has=20
happened. The only difference is the creation of the new queue resource. =
Again,=20
a lot of care needs to be taken when destroying distributed=20
objects.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"controlled-partitioning">2.7. Controlled Partitioning</H3>
<DIV class=3D"paragraph">
<P>Hazelcast has two types of distributed objects.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>One type is the truly partitioned data structure, like the=20
  <CODE>IMap</CODE>, where each partition will store a section of the=20
  Map.</P></LI>
  <LI>
  <P>The other type is a non-partitioned data structure, like the=20
  <CODE>IAtomicLong</CODE> or the <CODE>ISemaphore</CODE>, where only a =
single=20
  partition is responsible for storing the main instance. For this type, =
you=20
  sometimes want to control that partition.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>Normally, Hazelcast will not only use the name of a=20
<CODE>DistributedObject</CODE> for identification, but it will also use =
the name=20
to determine the partition. The problem is that you sometimes want to =
control=20
the partition without depending on the name. Assume that you have the =
following=20
two semaphores.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">ISemaphore s1 =
=3D hz.getSemaphore(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">s1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
ISemaphore s2 =3D hz.getSemaphore(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">s2</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>They would end up in different partitions because they have different =
names.
 Luckily, Hazelcast provides a solution for that using the =
<CODE>@</CODE>=20
symbol, as in the following example.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">ISemaphore s1 =
=3D hz.getSemaphore(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">s1@foo</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
ISemaphore s2 =3D hz.getSemaphore(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">s2@foo</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Now, <CODE>s1</CODE> and <CODE>s2</CODE> will end up in the same =
partition=20
because they share the same partition key: <CODE>foo</CODE>. This =
partition key=20
can be used to control the partition of distributed objects and can also =
be used=20
to send a Runnable to the correct member using the=20
<CODE>IExecutor.executeOnKeyOwner</CODE> method, as in <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#executing-on-key-owner"=
>Distributed=20
Executor Service: Executing on Key Owner</A>, and  to control in which =
partition=20
a map entry is stored, as in (see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#partition-control">Map:=
=20
Partition Control</A>).</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"distributedobject-names-partition-key">2.7.1. =
DistributedObject Names=20
and Partition Key</H4>
<DIV class=3D"paragraph">
<P>If a <CODE>DistributedObject</CODE> name includes a partition key, =
then=20
Hazelcast will use the base-name without the partition key to match with =
the=20
configuration. For example, semaphore <CODE>s1</CODE> could be =
configured as=20
shown below.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;semaphore</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">s1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;initial-permits&gt;</SPAN>3<SPAN =
class=3D"tag">&lt;/initial-permits&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/semaphore&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This means that you can safely combine explicit partition keys with =
normal=20
configuration. It is important to understand that the name of the=20
<CODE>DistributedObject</CODE> will contain the =
<CODE>@partition-key</CODE>=20
section. Therefore, the following two semaphores are =
different.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">  ISemaphore =
s1 =3D hz.getSemaphore(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">s1@foo</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
  ISemaphore s2 =3D hz.getSemaphore(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">s1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);</CODE></PRE></DIV></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"accessing-partition-keys">2.7.2. Accessing DistributedObject =
Partition=20
Keys</H4>
<DIV class=3D"paragraph">
<P>To access the partition key of a <CODE>DistributedObject</CODE>, you =
can call=20
the <CODE>DistributedObject.getPartitionKey</CODE> method.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">  <SPAN =
class=3D"predefined-type">String</SPAN> parKey =3D s1.getPartitionKey();=0A=
  ISemaphore s3 =3D hz.getSemaphore(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">s3@</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+parKey);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This method is useful if you need to create a =
<CODE>DistributedObject</CODE>=20
in the same partition of an existing <CODE>DistributedObject</CODE>, but =
you do=20
not have the partition key available. If you only have the name of the =
partition=20
key available, you can have a look at the <CODE>PartitionKeys</CODE> =
class,=20
which exposes methods to retrieve the base-name or the partition=20
key.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"obtaining-partition-keys">2.7.3. Obtaining DistributedObject =
Partition=20
Keys</H4>
<DIV class=3D"paragraph">
<P>In the previous examples, the <CODE>foo</CODE> partition key was =
used. In=20
many cases, you do not care what the partition key is, as long as the =
same=20
partition key is shared between structures. Hazelcast provides an easy =
solution=20
to obtain a random partition key.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">  <SPAN =
class=3D"predefined-type">String</SPAN> parKey =3D =
hz.getPartitionService().randomPartitionKey();=0A=
  ISemaphore s1 =3D hz.getSemaphore(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">s1@</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+parKey);=0A=
  ISemaphore s2 =3D hz.getSemaphore(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">s2@</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+parKey);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>You are completely free to come up with a partition key yourself. You =
can=20
have a look at the UUID, although due to its length, it will cause some=20
overhead. Another option is to look at the <CODE>Random</CODE> class. =
The only=20
thing you need to watch out for is to have the partition keys evenly =
distributed=20
among the partitions.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"using-at-in-name">2.7.4. Using @ in Partitioned =
DistributedObject=20
Names</H4>
<DIV class=3D"paragraph">
<P>If <CODE>@</CODE> is used in the name of a partitioned=20
<CODE>DistributedObject</CODE>, such as the <CODE>IMap</CODE> or=20
<CODE>IExecutorService</CODE>, then Hazelcast keeps using the full =
String as the=20
name of the <CODE>DistributedObject</CODE>, but ignores the partition =
key. This=20
is because for these types, a partition key does not have any =
meaning.</P></DIV>
<DIV class=3D"paragraph">
<P>For more information about why you want to control partitioning, see =
<A =
href=3D"http://hazelcast.org/mastering-hazelcast/#partitioning-schema">Pe=
rformance=20
Tips: Partitioning Schema</A>.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"good-to-know">2.8. Good to Know</H3>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>Hazelcast config is not updatable:</EM> Once a=20
<CODE>HazelcastInstance</CODE> is created, the <CODE>Config</CODE> that =
was used=20
to create that <CODE>HazelcastInstance</CODE> should not be updated. A =
lot of=20
the internal configuration objects are not thread-safe and there is no =
guarantee=20
that a property is going to be read after it has been read for the first =

time.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>HazelcastInstance.shutdown():</EM> If you are not using your=20
<CODE>HazelcastInstance</CODE> anymore, make sure to shut it down by =
calling the=20
<CODE>shutdown()</CODE> method on the <CODE>HazelcastInstance</CODE>. =
This will=20
release all its resources and end network communication.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Hazelcast.shutdownAll():</EM> This method is very practical for =
testing=20
purposes if you do not have control over the creation of Hazelcast =
instances,=20
but you want to make sure that all instances are being =
destroyed.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>What happened to the Hazelcast.getDefaultInstance:</EM> If you =
have been=20
using Hazelcast 2.x, you might wonder what happened to the static =
methods like=20
<CODE>Hazelcast.getDefaultInstance</CODE> and=20
<CODE>Hazelcast.getSomeStructure</CODE>. These methods have been dropped =
because=20
they relied on a singleton <CODE>HazelcastInstance</CODE> and when that =
was=20
combined with explicit HazelcastInstances, it caused confusion. In =
Hazelcast 3,=20
it is only possible to work with an explicit=20
<CODE>HazelcastInstance</CODE>.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-is-next">2.9. What is next?</H3>
<DIV class=3D"paragraph">
<P>In this chapter, you saw how you can create a =
<CODE>HazelcastInstance</CODE>,=20
how you can configure it and how you can create a=20
<CODE>DistributedObject</CODE>. In the following chapters, you will =
learn about=20
the different distributed objects like the <CODE>ILock</CODE>,=20
<CODE>IMap</CODE>, etc. and their configuration=20
details.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"distributed-primitives">3. Distributed Primitives</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>If you have programmed applications in Java, you have probably worked =
with=20
concurrency primitives like the synchronized statement (the intrinsic =
lock) or=20
the concurrency library that was introduced in Java 5 under=20
<CODE>java.util.concurrent</CODE>, such as <CODE>Executor</CODE>,=20
<CODE>Lock</CODE> and <CODE>AtomicReference</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>This concurrency functionality is useful if you want to write a Java=20
application that uses multiple threads, but the focus here is to provide =

synchronization in a single JVM and not distributed synchronization over
 multiple JVMs. Luckily, Hazelcast provides support for various =
distributed=20
synchronization primitives, such as the <CODE>ILock</CODE>,=20
<CODE>IAtomicLong</CODE>, etc. Apart from making synchronization between =

different JVMs possible, these primitives also support high =
availability: if one=20
machine fails, the primitive remains usable for other JVMs.</P></DIV>
<DIV class=3D"sect2">
<H3 id=3D"iatomiclong">3.1. IAtomicLong</H3>
<DIV class=3D"paragraph">
<P>The <CODE>IAtomicLong</CODE>, formally known as the=20
<CODE>AtomicNumber</CODE>, is the distributed version of the=20
<CODE>java.util.concurrent.atomic.AtomicLong</CODE>, so if you have used =
that=20
before, working with the <CODE>IAtomicLong</CODE> should feel very =
similar. The=20
<CODE>IAtomicLong</CODE> exposes most of the operations the=20
<CODE>AtomicLong</CODE> provides, such as <CODE>get</CODE>, =
<CODE>set</CODE>,=20
<CODE>getAndSet</CODE>, <CODE>compareAndSet</CODE> and=20
<CODE>incrementAndGet</CODE>. There is a big difference in performance =
since=20
remote calls are involved.</P></DIV>
<DIV class=3D"paragraph">
<P>This example demonstrates the <CODE>IAtomicLong</CODE> by creating an =

instance and incrementing it one million times:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      IAtomicLong counter =3D hz.getAtomicLong(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">counter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
<SPAN class=3D"integer">1000</SPAN> * <SPAN =
class=3D"integer">1000</SPAN>; k++) {=0A=
         <SPAN class=3D"keyword">if</SPAN> (k % <SPAN =
class=3D"integer">500000</SPAN> =3D=3D <SPAN class=3D"integer">0</SPAN>){=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">At: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+k);=0A=
         }=0A=
         counter.incrementAndGet();=0A=
      }=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.printf(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Count is %s</SPAN><SPAN class=3D"char">\n</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, counter.get());=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you start <CODE>Member</CODE>, you will see this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>At: 0=0A=
At: 500000=0A=
Count is 1000000</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you run multiple instances of this member, then the total count =
should be=20
equal to one million times the number of members you have =
started.</P></DIV>
<DIV class=3D"paragraph">
<P>If the <CODE>IAtomicLong</CODE> becomes a contention point in your =
system,=20
you have a few ways to deal with it depending on your requirements. You =
can=20
create a stripe (essentially an array) of <CODE>IAtomicLong</CODE> =
instances to=20
reduce pressure. Or you can keep changes local and only publish them to =
the=20
<CODE>IAtomicLong</CODE> once a while. There are a few downsides; you =
could lose=20
information if a member goes down and the newest value is not always =
immediately=20
visible to the outside world.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"functions">3.1.1. Functions</H4>
<DIV class=3D"paragraph">
<P>Since Hazelcast 3.2, it is possible to send a function to an=20
<CODE>IAtomicLong</CODE>. The <CODE>Function</CODE> class is a single =
method=20
interface: it is a part of the Hazelcast codebase since we can=E2=80=99t =
yet have a=20
dependency on Java 8. An example of a function implementation is the =
following=20
function which adds 2 to the original value:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Add2Function</SPAN> <SPAN =
class=3D"directive">implements</SPAN> Function&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>,<SPAN =
class=3D"predefined-type">Long</SPAN>&gt; {=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Long</SPAN> apply(<SPAN =
class=3D"predefined-type">Long</SPAN> input) {=0A=
        <SPAN class=3D"keyword">return</SPAN> input+<SPAN =
class=3D"integer">2</SPAN>;=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The function can be executed on an <CODE>IAtomicLong</CODE> using one =
of the
 following methods:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>apply</CODE>: Applies the function to the value in the=20
  <CODE>IAtomicLong</CODE> without changing the actual value and returns =
the=20
  result.</P></LI>
  <LI>
  <P><CODE>alterAndGet</CODE>: Alters the value stored in the=20
  <CODE>IAtomicLong</CODE> by applying the function, storing the result =
in the=20
  <CODE>IAtomicLong</CODE> and returning the result.</P></LI>
  <LI>
  <P><CODE>getAndAlter</CODE>: Alters the value stored in the=20
  <CODE>IAtomicLong</CODE> by applying the function and returning the =
original=20
  value.</P></LI>
  <LI>
  <P><CODE>alter</CODE>: Alters the value stored in the =
<CODE>IAtomicLong</CODE>=20
  by applying the function. This method will not send back a=20
result.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>In the following code example, you can see these methods in =
action:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        IAtomicLong atomicLong =3D hz.getAtomicLong(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">counter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
        atomicLong.set(<SPAN class=3D"integer">1</SPAN>);=0A=
        <SPAN class=3D"type">long</SPAN> result =3D =
atomicLong.apply(<SPAN class=3D"keyword">new</SPAN> Add2Function());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">apply.result:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + result);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">apply.value:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + atomicLong.get());=0A=
=0A=
        atomicLong.set(<SPAN class=3D"integer">1</SPAN>);=0A=
        atomicLong.alter(<SPAN class=3D"keyword">new</SPAN> =
Add2Function());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">alter.value:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+atomicLong.get());=0A=
=0A=
        atomicLong.set(<SPAN class=3D"integer">1</SPAN>);=0A=
        result =3D atomicLong.alterAndGet(<SPAN =
class=3D"keyword">new</SPAN> Add2Function());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">alterAndGet.result:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + result);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">alterAndGet.value:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+atomicLong.get());=0A=
=0A=
        atomicLong.set(<SPAN class=3D"integer">1</SPAN>);=0A=
        result =3D atomicLong.getAndAlter(<SPAN =
class=3D"keyword">new</SPAN> Add2Function());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">getAndAlter.result:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+result);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">getAndAlter.value:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+atomicLong.get());=0A=
=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When we execute this program, we=E2=80=99ll see the following =
output:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>apply.result:3=0A=
apply.value:1=0A=
alter.value:3=0A=
alterAndGet.result:3=0A=
alterAndGet.value:3=0A=
getAndAlter.result:1=0A=
getAndAlter.value:3</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>You might ask yourself, why not do the following approach to double =
an=20
<CODE>IAtomicLong</CODE>?</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE =
data-lang=3D"java">atomicLong.set(atomicLong.get()+<SPAN =
class=3D"integer">2</SPAN>));</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This requires a lot less code. The biggest problem here is that this =
code has=20
a race problem; the read and the write of the <CODE>IAtomicLong</CODE> =
are not=20
atomic, so they could be interleaved with other operations. If you have=20
experience with the <CODE>AtomicLong</CODE> from Java, then you probably =
have=20
some experience with the <CODE>compareAndSet</CODE> method where you can =
create=20
an atomic read and write:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"keyword">for</SPAN>(;;){=0A=
    <SPAN class=3D"type">long</SPAN> oldValue =3D atomicLong.get();=0A=
    <SPAN class=3D"type">long</SPAN> newValue =3D oldValue+<SPAN =
class=3D"integer">2</SPAN>;=0A=
    <SPAN =
class=3D"keyword">if</SPAN>(atomicLong.compareAndSet(oldValue,newValue)){=0A=
        <SPAN class=3D"keyword">break</SPAN>;=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The problem here is that the <CODE>AtomicLong</CODE> could be on a =
remote=20
machine and therefore <CODE>get</CODE> and <CODE>compareAndSet</CODE> =
are remote=20
operations. With the function approach, you send the code to the data =
instead of=20
pulling the data to the code, making this a lot more =
scalable.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"good-to-know">3.1.2. Good to know</H4>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>Replication</EM>: the <CODE>IAtomicLong</CODE> has 1 synchronous =
backup=20
and zero asynchronous backups and is not=20
configurable.</P></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"idgenerator">3.2. IdGenerator</H3>
<DIV class=3D"paragraph">
<P>In the previous section, the <CODE>IAtomicLong</CODE> was introduced. =

<CODE>IAtomicLong</CODE> can be used to generate unique IDs within a =
cluster.=20
Although that will work, it probably isn=E2=80=99t the most scalable =
solution since all=20
members will content on incrementing the value. If you are only =
interested in=20
unique IDs, you can have a look at the=20
<CODE>com.hazelcast.core.IdGenerator</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>The way the <CODE>IdGenerator</CODE> works is that each member claims =
a=20
segment of 1 million IDs to generate. This is done behind the scenes by =
using an=20
<CODE>IAtomicLong</CODE>. A segment is claimed by incrementing that=20
<CODE>IAtomicLong</CODE> by 10000. After claiming the segment, the=20
<CODE>IdGenerator</CODE> can increment a local counter. Once all IDs in =
the
 segment are used, it will claim a new segment. The consequence of this =
approach
 is that only 1 in 10000 times is network traffic needed; 9999 out of =
10000, the
 ID generation can be done in memory and therefore is extremely fast. =
Another=20
consequence is that this approach scales a lot better than an=20
<CODE>IAtomicLong</CODE> because there is a lot less contention: 1 out =
of 10000
 instead of 1 out of 1.</P></DIV>
<DIV class=3D"paragraph">
<P>Let=E2=80=99s see the <CODE>IdGenerator</CODE> in action:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">IdGeneratorMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN>{=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      IdGenerator idGenerator =3D hz.getIdGenerator(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">id</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
<SPAN class=3D"integer">1000</SPAN>; k++){=0A=
         <SPAN class=3D"predefined-type">Thread</SPAN>.sleep(<SPAN =
class=3D"integer">1000</SPAN>);=0A=
         <SPAN class=3D"predefined-type">System</SPAN>.out.printf(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Id : %s</SPAN><SPAN class=3D"char">\n</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, idGenerator.newId());=0A=
      }=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you start this multiple times, you will see in the console that =
there will=20
not be any duplicate IDs. If you do see duplicates, it could be that the =

IdGeneratorMembers didn=E2=80=99t form a cluster; see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#multicast">Network=20
Configuration: Multicast</A>.</P></DIV>
<DIV class=3D"paragraph">
<P>There are some issues you need to be aware of.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>IDs generated by different members will be out of order.</P></LI>
  <LI>
  <P>If a member goes down without fully using its segment, there might =
be=20
  gaps.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>For ID generation, in most cases, this isn=E2=80=99t relevant. There =
are alternative=20
solutions for creating cluster wide unique IDs like the=20
<CODE>java.util.UUID</CODE>. Although it will take up more space than a =
long, it
 doesn=E2=80=99t rely on access to a Hazelcast cluster.</P></DIV>
<DIV class=3D"paragraph">
<P>Another important issue you need to know is that if the cluster =
restarts,
 then the <CODE>IdGenerator</CODE> is reset and starts from 0 because =
the=20
<CODE>IdGenerator</CODE> doesn=E2=80=99t persist its state using, for =
example, a=20
database. If you need this, you could create your own =
<CODE>IdGenerator</CODE>=20
based on the same implementation mechanism the <CODE>IdGenerator</CODE> =
uses,=20
but you persist the updates to the <CODE>IAtomicLong</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>By default, the ID generation will start at 0, but in some cases you =
want to
 start with a higher value. This can be changed using the=20
<CODE>IdGenerator.init(long value)</CODE> method. It returns true if the =

initialization was a success, so if no other thread called the =
<CODE>init</CODE>=20
method, no IDs have been generated and the desired starting value is =
bigger than=20
0.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"good-to-know-1">3.2.1. Good to know</H4>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>Replication</EM>: the <CODE>IdGenerator</CODE> has 1 synchronous =
backup=20
and zero asynchronous backups and is not=20
configurable.</P></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"iatomicreference">3.3. IAtomicReference</H3>
<DIV class=3D"paragraph">
<P>In the first section of this chapter, the <CODE>IAtomicLong</CODE> =
was=20
introduced. The <CODE>IAtomicLong</CODE> is very useful if you need to =
deal with=20
a long, but in some cases you need to deal with a reference. That is why =

Hazelcast also supports the <CODE>IAtomicReference</CODE>, which is the=20
distributed version of the=20
<CODE>java.util.concurrent.atomic.AtomicReference</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>Let=E2=80=99s see the <CODE>IAtomicReference</CODE> in =
action:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
=0A=
        IAtomicReference&lt;<SPAN =
class=3D"predefined-type">String</SPAN>&gt; ref =3D =
hz.getAtomicReference(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">reference</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        ref.set(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">foo</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(ref.get());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you execute this code, you will see:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>foo</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Just like the <CODE>IAtomicLong</CODE>, the =
<CODE>IAtomicReference</CODE> has=20
methods that accept a function as argument, such as <CODE>alter</CODE>,=20
<CODE>alterAndGet</CODE>, <CODE>getAndAlter</CODE> and =
<CODE>apply</CODE>. There=20
are big advantages for using these methods.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"good-to-know-2">3.3.1. Good to know</H4>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>From a performance point of view, it is better to send the function =
to the=20
  data then the data to the function. Often the function is a lot =
smaller than=20
  the value and therefore the function is cheaper to send over the line. =
Also,
   the function only needs to be transferred once to the target machine, =
while=20
  the value needs to be transferred twice.</P></LI>
  <LI>
  <P>You don=E2=80=99t need to deal with concurrency control. If you =
would do a load,=20
  transform, and store, you could run into a data race since another =
thread=20
  might have updated the value you are about to overwrite.</P></LI>
  <LI>
  <P>When a function is executed on the <CODE>AtomicReference</CODE>, =
make sure=20
  that the function doesn=E2=80=99t run too long. As long as that =
function is running,
   the whole partition is not able to execute other requests. =
Don=E2=80=99t hog the=20
  operation thread.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>Some issues you need to be aware of:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>The <CODE>IAtomicReference</CODE> works based on byte-content, not =
on
   object-reference. Therefore, if you are using the =
<CODE>compareAndSet</CODE>=20
  method, it is important that you do not change to the original value =
because=20
  its serialized content will then be different. It is also important to =
know=20
  that if you rely on Java serialization, sometimes (especially with =
hashmaps)=20
  the same object can result in different binary content.</P></LI>
  <LI>
  <P>The <CODE>IAtomicReference</CODE> will always have 1 synchronous=20
  backup.</P></LI>
  <LI>
  <P>All methods returning an object will return a private copy. You can =
modify=20
  it, but the rest of the world will be shielded from your changes. If =
you want=20
  these changes to be visible to the rest of the world, you need to =
write the=20
  change back to the <CODE>IAtomicReference</CODE>; but be careful with=20
  introducing a data race.</P></LI>
  <LI>
  <P>The in-memory format of an <CODE>IAtomicReference</CODE> is binary. =
So the
   receiving side doesn=E2=80=99t need to have the class definition =
available, unless it=20
  needs to be deserialized on the other side (for example, because a =
method like=20
  <CODE>alter</CODE> is executed). This deserialization is done for =
every call=20
  that needs to have the object instead of the binary content, so be =
careful=20
  with expensive object graphs that need to be deserialized.</P></LI>
  <LI>
  <P>If you have an object graph or an object with many fields, and you =
only=20
  need to calculate some information or you only need a subset of =
fields, you
   can use the <CODE>apply</CODE> method. This way, the whole object =
doesn=E2=80=99t
   need to be sent over the line, only the information that is=20
relevant.</P></LI></UL></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"ilock">3.4. ILock</H3>
<DIV class=3D"paragraph">
<P>A lock is a synchronization primitive that makes it possible for only =
a
 single thread to access a critical section of code; if multiple threads =
at the=20
same moment were accessing that critical section, you would get race=20
problems.</P></DIV>
<DIV class=3D"paragraph">
<P>Hazelcast provides a distributed lock implementation and makes it =
possible to=20
create a critical section within a cluster of JVMs, so only a single =
thread from=20
one of the JVMs in the cluster is allowed to acquire that lock. Other =
threads,=20
no matter if they are on the same JVMs or not, will not be able to =
acquire the=20
lock; depending on the locking method they called, they either block or =
fail.=20
The <CODE>com.hazelcast.core.ILock</CODE> extends the=20
<CODE>java.util.concurrent.locks.Lock</CODE> interface, so using the =
lock is=20
quite simple.</P></DIV>
<DIV class=3D"paragraph">
<P>The following example shows how a lock can be used to solve a race
 problem:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">RaceFreeMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      IAtomicLong number1 =3D hz.getAtomicLong(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">number1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      IAtomicLong number2 =3D hz.getAtomicLong(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">number2</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      ILock lock =3D hz.getLock(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">lock</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Started</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
<SPAN class=3D"integer">10000</SPAN>; k++) {=0A=
         <SPAN class=3D"keyword">if</SPAN> (k % <SPAN =
class=3D"integer">100</SPAN> =3D=3D <SPAN class=3D"integer">0</SPAN>)=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">at: </SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN> + =
k);=0A=
         lock.lock();=0A=
         <SPAN class=3D"keyword">try</SPAN> {=0A=
            <SPAN class=3D"keyword">if</SPAN> (k % <SPAN =
class=3D"integer">2</SPAN> =3D=3D <SPAN class=3D"integer">0</SPAN>) {=0A=
               <SPAN class=3D"type">long</SPAN> n1 =3D number1.get();=0A=
               <SPAN class=3D"predefined-type">Thread</SPAN>.sleep(<SPAN =
class=3D"integer">10</SPAN>);=0A=
               <SPAN class=3D"type">long</SPAN> n2 =3D number2.get();=0A=
               <SPAN class=3D"keyword">if</SPAN> (n1 - n2 !=3D <SPAN =
class=3D"integer">0</SPAN>)=0A=
                  <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Datarace detected!</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
               } <SPAN class=3D"keyword">else</SPAN> {=0A=
                    number1.incrementAndGet();=0A=
                    number2.incrementAndGet();=0A=
               }=0A=
         } <SPAN class=3D"keyword">finally</SPAN> {=0A=
           lock.unlock();=0A=
         }=0A=
      }=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Finished</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When this code is executed, you will not see <CODE>"Data race=20
detected!"</CODE>. This is because the lock provides a critical section =
around=20
writing and reading of the numbers. In the example code, you will also =
find the
 version with a data race.</P></DIV>
<DIV class=3D"paragraph">
<P>The following idiom is recommended when you use a lock (it =
doesn=E2=80=99t matter if
 it is a Hazelcast lock or a lock provided by the JRE):</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">lock.lock();=0A=
<SPAN class=3D"keyword">try</SPAN>{=0A=
    ...do your stuff.=0A=
}<SPAN class=3D"keyword">finally</SPAN>{=0A=
    lock.unlock();=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>It is important that the lock is acquired before the =
<CODE>try/finally</CODE>=20
block is entered. So, the following example is not good.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"keyword">try</SPAN>{=0A=
    lock.lock();=0A=
    ...do your stuff.=0A=
}<SPAN class=3D"keyword">finally</SPAN>{=0A=
    lock.unlock();=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In case of Hazelcast, it can happen that the lock is not granted =
because the=20
<CODE>lock</CODE> method has a timeout of 5 minutes. If this happens, an
 exception is thrown, the <CODE>finally</CODE> block is executed, and =
the=20
<CODE>lock.unlock</CODE> is called. Hazelcast will see that the lock is =
not=20
acquired and an <CODE>IllegalMonitorStateException</CODE> with the =
message=20
<CODE>"Current thread is not owner of the lock!"</CODE> is thrown. In =
case of a=20
<CODE>tryLock</CODE> with a timeout, the following idiom is=20
recommended:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"keyword">if</SPAN>(!lock.tryLock(timeout, timeunit)){=0A=
   <SPAN class=3D"keyword">throw</SPAN> <SPAN =
class=3D"keyword">new</SPAN> <SPAN =
class=3D"exception">RuntimeException</SPAN>();=0A=
}=0A=
<SPAN class=3D"keyword">try</SPAN>{=0A=
    ...do your stuff.=0A=
}<SPAN class=3D"keyword">finally</SPAN>{=0A=
    lock.unlock();=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>tryLock</CODE> is acquired outside of the =
<CODE>try/finally</CODE>=20
block. In this case, an exception is thrown if the lock can=E2=80=99t be =
acquired within=20
the given timeout, but another flow that prevents entering the=20
<CODE>try/finally</CODE> block also is valid.</P></DIV>
<DIV class=3D"paragraph">
<P>Here are more general issues worth knowing about the Hazelcast=20
lock.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>Hazelcast lock is reentrant, so you can acquire it multiple times =
in a=20
  single thread without causing a deadlock. Of course, you need to =
release it as
   many times as you have acquired it to make it available to other
   threads.</P></LI>
  <LI>
  <P>As with the other Lock implementations, Hazelcast lock should =
always be
   acquired outside of a <CODE>try/finally</CODE> block. Otherwise, the =
lock=20
  acquire can fail, but an unlock is still executed.</P></LI>
  <LI>
  <P>Keep locks as short as possible. If locks are kept too long, it can =
lead to=20
  performance problems, or worse, deadlock.</P></LI>
  <LI>
  <P>With locks it is easy to run into deadlocks. Having code you =
don=E2=80=99t control
   or understand running inside your locks is asking for problems. Make =
sure you
   understand exactly the scope of the lock.</P></LI>
  <LI>
  <P>To reduce the chance of a deadlock, you can use the=20
  <CODE>Lock.tryLock</CODE> method to control the waiting period. The=20
  <CODE>lock.lock()</CODE> method will not block indefinitely, but will =
timeout=20
  with an <CODE>OperationTimeoutException</CODE> after 300 =
seconds.</P></LI>
  <LI>
  <P>Locks are automatically released when a member has acquired a lock =
and that=20
  member goes down. This prevents threads that are waiting for a lock =
from=20
  waiting indefinitely. This is also needed for failover to work in a
   distributed system. The downside is that if a member goes down that =
acquired=20
  the lock and started to make changes, other members could start to see =
partial=20
  changes. In these cases, either the system could do some self repair =
or a=20
  transaction might solve the problem.</P></LI>
  <LI>
  <P>A lock must always be released by the same thread that acquired it,
   otherwise look at the <CODE>ISemaphore</CODE>.</P></LI>
  <LI>
  <P>Locks are fair, so they will be granted in the order they are
   requested.</P></LI>
  <LI>
  <P>There are no configuration options available for the lock.</P></LI>
  <LI>
  <P>A lock can be checked if it is locked using the =
<CODE>ILock.isLocked</CODE>
   method, although the value could be stale as soon as it is =
returned.</P></LI>
  <LI>
  <P>A lock can be forced to unlock using the =
<CODE>ILock.forceUnlock()</CODE>=20
  method. It should be used with extreme care since it could break a =
critical
   section.</P></LI>
  <LI>
  <P>The <CODE>Hazelcast.getLock</CODE> doesn=E2=80=99t work on a name =
of type=20
  <CODE>String</CODE>, but can be a key of any type. This key will be =
serialized=20
  and the byte array content determines the actual lock to acquire. So, =
if you=20
  are passing in an object as key, it isn=E2=80=99t the monitor lock of =
that object that=20
  is being acquired.</P></LI>
  <LI>
  <P>Replication: the <CODE>ILock</CODE> has one synchronous backup and =
zero=20
  asynchronous backups and is not configurable.</P></LI>
  <LI>
  <P>A lock is not automatically garbage collected. So if you create new =
locks=20
  over time, make sure to destroy them. If you don=E2=80=99t, you can =
run into an=20
  <CODE>OutOfMemoryError</CODE>.</P></LI></UL></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"icondition">3.5. ICondition</H3>
<DIV class=3D"paragraph">
<P>With a Condition, it is possible to wait for certain conditions to =
happen:=20
for example, wait for an item to be placed on a queue. Each lock can =
have=20
multiple conditions, such as if an item is available in the queue and if =
room is=20
available in the queue. In Hazelcast 3, the <CODE>ICondition</CODE>, =
which=20
extends the <CODE>java.util.concurrent.locks.Condition</CODE>, has been=20
added.</P></DIV>
<DIV class=3D"paragraph">
<P>There is one difference: with the normal Java version, you create a =
condition=20
using the <CODE>Lock.newCondition()</CODE> method. Unfortunately, this =
doesn=E2=80=99t=20
work in a distributed environment since Hazelcast has no way of knowing =
if=20
Conditions created on different members are the same Condition or not. =
You don=E2=80=99t=20
want to rely on the order of their creation, so in Hazelcast, a =
Condition needs=20
to be created using the <CODE>ILock.newCondition(String name)</CODE>=20
method.</P></DIV>
<DIV class=3D"paragraph">
<P>In the following example, we are going to create one member that =
waits for a=20
counter to have a certain value. Another member will set the value on =
that=20
counter. Let=E2=80=99s get started with the waiting member:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">WaitingMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">InterruptedException</SPAN> {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      IAtomicLong counter =3D hz.getAtomicLong(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">counter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      ILock lock =3D hz.getLock(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">lock</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      ICondition isOneCondition =3D lock.newCondition(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">one</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      lock.lock();=0A=
      <SPAN class=3D"keyword">try</SPAN> {=0A=
         <SPAN class=3D"keyword">while</SPAN> (counter.get() !=3D <SPAN =
class=3D"integer">1</SPAN>) {=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Waiting</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
            isOneCondition.await();=0A=
         }=0A=
      } <SPAN class=3D"keyword">finally</SPAN> {=0A=
         lock.unlock();=0A=
      }=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Wait finished, counter: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+counter.get());=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>First, the lock is acquired (<CODE>getLock</CODE>). Then, the counter =
is=20
checked within a loop. As long as the counter is not 1, the waiter will =
wait on=20
the <CODE>isOneCondition</CODE>. Once the =
<CODE>isOneCondition.await()</CODE>=20
method is called, Hazelcast will automatically release the lock so that =
a
 different thread can acquire it and the calling thread will block. Once =
the=20
<CODE>isOneCondition</CODE> is signaled, the thread will unblock and it =
will
 automatically reacquire the lock. This is exactly the same behavior as =
the=20
ReentrantLock/Condition, or with a normal intrinsic lock and waitset. If =
the=20
<CODE>WaitingMember</CODE> is started, it will output:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Waiting</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The next part will be the <CODE>NotifyMember</CODE>. Here, the Lock =
is=20
acquired, the value is set to 1, and the <CODE>isOneCondition</CODE> =
will be=20
signaled:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">NotifyMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">InterruptedException</SPAN> {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      IAtomicLong counter =3D hz.getAtomicLong(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">counter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      ILock lock =3D hz.getLock(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">lock</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      ICondition isOneCondition =3D lock.newCondition(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">isOne</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      lock.lock();=0A=
      <SPAN class=3D"keyword">try</SPAN> {=0A=
         counter.set(<SPAN class=3D"integer">1</SPAN>);=0A=
         isOneCondition.signalAll();=0A=
      } <SPAN class=3D"keyword">finally</SPAN> {=0A=
         lock.unlock();=0A=
      }=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>After the <CODE>NotifyMember</CODE> is started, the=20
<CODE>WaitingMember</CODE> will display:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Waiting=0A=
Wait finished, counter: 1</PRE></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"good-to-know-3">3.5.1. Good to know</H4>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P>A few things worth knowing about the =
<CODE>ICondition</CODE>:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>Just as with the normal Condition, the <CODE>ICondition</CODE> can =
suffer=20
  from spurious wakeups. That is why the condition always needs to be =
checked
   inside a loop, instead of an if statement.</P></LI>
  <LI>
  <P>You can choose to signal only a single thread instead of all =
threads by=20
  calling the <CODE>ICondition.signal()</CODE> method instead of the=20
  <CODE>ICondition.signalAll()</CODE> method.</P></LI>
  <LI>
  <P>In the example, the waiting thread waits indefinitely because it =
calls=20
  <CODE>await()</CODE>. In practice, this can be undesirable since a =
member that
   is supposed to signal the condition can fail. When this happens, the =
threads=20
  that are waiting for the signal wait indefinitely. That is why it is =
often a=20
  good practice to wait with a timeout using the <CODE>await(long time, =
TimeUnit=20
  unit)</CODE> or <CODE>awaitNanos(long nanosTimeout)</CODE> =
method.</P></LI>
  <LI>
  <P>Waiting threads are signaled in FIFO order.</P></LI>
  <LI>
  <P><EM>Replication</EM>: the <CODE>ICondition</CODE> has 1 synchronous =
backup=20
  and zero asynchronous backups and is not=20
configurable.</P></LI></UL></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"isemaphore">3.6. ISemaphore</H3>
<DIV class=3D"paragraph">
<P>The semaphore is a classic synchronization aid that can be used to =
control=20
the number of threads doing a certain activity concurrently, such as =
using a=20
resource. Each semaphore has a number of permits, where each permit =
represents a=20
single thread allowed to execute that activity concurrently. As soon as =
a thread=20
wants to start with the activity, it takes a permit (or waits until one =
becomes=20
available) and once finished with the activity, the permit is=20
returned.</P></DIV>
<DIV class=3D"paragraph">
<P>If you initialize the semaphore with a single permit, it will look a =
lot like=20
a lock. A big difference is that the semaphore has no concept of =
ownership. With=20
a lock, the thread that acquired the lock must release it, but with a =
semaphore,=20
any thread can release an acquired permit. Another difference is that an =

exclusive lock only has 1 permit, while a semaphore can have more than=20
1.</P></DIV>
<DIV class=3D"paragraph">
<P>Hazelcast provides a distributed version of the=20
<CODE>java.util.concurrent.Semaphore</CODE> named as=20
<CODE>com.hazelcast.core.ISemaphore</CODE>. When a permit is acquired on =
the=20
<CODE>ISemaphore</CODE>, the following can happen:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>If a permit is available, the number of permits in the semaphore is =

  decreased by one and the calling thread can continue.</P></LI>
  <LI>
  <P>If no permit is available, the calling thread will block until a =
permit=20
  becomes available, a timeout happens, the thread is interrupted, or =
when the
   semaphore is destroyed and an <CODE>InstanceDestroyedException</CODE> =
is=20
  thrown.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>The following example explains the semaphore. To simulate a shared =
resource,
 we have an <CODE>IAtomicLong</CODE> initialized with the value 0. This =
resource
 is going to be used 1000 times. When a thread starts to use that =
resource, the=20
resource will be incremented, and when finished it will be=20
decremented.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">SemaphoreMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args)<SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN>{=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      ISemaphore semaphore =3D hz.getSemaphore(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">semaphore</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      IAtomicLong resource =3D hz.getAtomicLong(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">resource</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"keyword">for</SPAN>(<SPAN class=3D"type">int</SPAN> =
k=3D<SPAN class=3D"integer">0</SPAN>;k&lt;<SPAN =
class=3D"integer">1000</SPAN>;k++){=0A=
         <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">At iteration: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+k +=0A=
            <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">, Active Threads: =
</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN> + resource.get());=0A=
         semaphore.acquire();=0A=
         <SPAN class=3D"keyword">try</SPAN>{=0A=
            resource.incrementAndGet();=0A=
            <SPAN class=3D"predefined-type">Thread</SPAN>.sleep(<SPAN =
class=3D"integer">1000</SPAN>);=0A=
            resource.decrementAndGet();=0A=
         }<SPAN class=3D"keyword">finally</SPAN>{=0A=
            semaphore.release();=0A=
         }=0A=
      }=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Finished</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>We want to limit the concurrent access to the resource by allowing =
for at=20
most 3 threads. We can do this by configuring the =
<CODE>initial-permits</CODE>=20
for the semaphore in the Hazelcast configuration file:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;semaphore</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">semaphore</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;initial-permits&gt;</SPAN>3<SPAN =
class=3D"tag">&lt;/initial-permits&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/semaphore&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When you start the <CODE>SemaphoreMember</CODE> 5 times, you will see =
the
 output like this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>At iteration: 0, Active Threads: 1=0A=
At iteration: 1, Active Threads: 2=0A=
At iteration: 2, Active Threads: 3=0A=
At iteration: 3, Active Threads: 3=0A=
At iteration: 4, Active Threads: 3</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The maximum number of concurrent threads using that resource is =
always equal=20
to or smaller than 3. As an experiment, you can remove the semaphore=20
acquire/release statements and see for yourself in the output that there =
is no
 longer control on the number of concurrent usages of the =
resources.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"replication">3.6.1. Replication</H4>
<DIV class=3D"paragraph">
<P>Hazelcast provides replication support for the =
<CODE>ISemaphore</CODE>: if a=20
member goes and replication is enabled (by default it is), then another =
member
 takes over the semaphore without permit information getting lost. This =
can be=20
done by synchronous and asynchronous replication, which can be =
configured using=20
the <CODE>backup-count</CODE> and <CODE>async-backup-count</CODE>=20
properties:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>backup-count</CODE>: Number of synchronous replicas and =
defaults to=20
  1.</P></LI>
  <LI>
  <P><CODE>async-backup-count</CODE>: Number of asynchronous replicas =
and
   defaults to 0.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>If high performance is more important than permit information getting =
lost,=20
you might consider setting <CODE>backup-count</CODE> to 0.</P></DIV>
<DIV class=3D"sect4">
<H5 id=3D"good-to-know-4">Good to know</H5>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P>A few things worth knowing about the =
<CODE>ISemaphore</CODE>:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>Fairness. The <CODE>ISemaphore</CODE> acquire methods are fair and =
this is=20
  not configurable. So under contention, the longest waiting thread for =
a permit=20
  will acquire it before all other threads. This is done to prevent =
starvation,=20
  at the expense of reduced throughput.</P></LI>
  <LI>
  <P>Automatic permit release. One of the features of the=20
  <CODE>ISemaphore</CODE> to make it more reliable in a distributed =
environment=20
  is the automatic release of a permit when the member fails (similar to =
the=20
  Hazelcast Lock). If the permit would not be released, the system could =
run in=20
  a deadlock.</P></LI>
  <LI>
  <P>The <CODE>acquire()</CODE> method doesn=E2=80=99t timeout, unlike =
the Hazelcast=20
  <CODE>Lock.lock()</CODE> method. To prevent running into a deadlock, =
you can=20
  use one of timed acquire methods, like <CODE>ISemaphore.tryAcquire(int =

  permits, long timeout, TimeUnit unit)</CODE>.</P></LI>
  <LI>
  <P>The <CODE>initial-permits</CODE> is allowed to be negative, =
indicating that=20
  there is a shortage of permits when the semaphore is=20
created.</P></LI></UL></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"icountdownlatch">3.7. ICountDownLatch</H3>
<DIV class=3D"paragraph">
<P>The <CODE>java.util.concurrent.CountDownLatch</CODE> was introduced =
in Java=20
1.5 and is a synchronization aid that makes it possible for threads to =
wait=20
until a set of operations that are being performed by one or more =
threads are=20
completed. A <CODE>CountDownLatch</CODE> can be seen as a gate =
containing a=20
counter. Behind this gate, threads can wait till the counter reaches 0.=20
CountDownLatches often are used when you have some kind of processing =
operation,=20
and one or more threads need to wait till this operation completes so =
they can=20
execute their logic. Hazelcast also contains a =
<CODE>CountDownLatch</CODE>: the=20
<CODE>com.hazelcast.core.ICountDownLatch</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>To explain the <CODE>ICountDownLatch</CODE>, imagine that there is a =
leader=20
process that is executing some action that will eventually complete. =
Also=20
imagine that there are one or more follower processes that need to do =
something
 after the leader has completed. We can implement the behavior of the=20
<CODE>Leader</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Leader</SPAN>{=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args)<SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN>{=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      ICountDownLatch latch =3D hz.getCountDownLatch(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">latch</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Starting</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      latch.trySetCount(<SPAN class=3D"integer">1</SPAN>);=0A=
      <SPAN class=3D"predefined-type">Thread</SPAN>.sleep(<SPAN =
class=3D"integer">5000</SPAN>);=0A=
      latch.countDown();=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Leader finished</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      latch.destroy();=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>Leader</CODE> retrieves the <CODE>CountDownLatch</CODE>, =
calls=20
<CODE>ICountDownLatch.trySetCount</CODE> on it (which makes the=20
<CODE>Leader</CODE> owner of that latch), does some waiting, and then =
calls=20
countdown which notifies the listeners for that latch. In this example, =
we=20
ignore the boolean return value of <CODE>trySetCount</CODE> since there =
will be=20
only a single <CODE>Leader</CODE>, but in practice you probably want to =
deal=20
with the return value. Although there will only be a single owner of the =
Latch,=20
the <CODE>countDown</CODE> method can be called by other=20
threads/processes.</P></DIV>
<DIV class=3D"paragraph">
<P>The next part is the <CODE>Follower</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Follower</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      ICountDownLatch latch =3D hz.getCountDownLatch(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">latch</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Waiting</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"type">boolean</SPAN> success =3D latch.await(<SPAN =
class=3D"integer">10</SPAN>, <SPAN =
class=3D"predefined-type">TimeUnit</SPAN>.SECONDS);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Complete:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+success);=0A=
  }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>We retrieve the <CODE>ICountDownLatch</CODE> and then call =
<CODE>await</CODE>
 on it so the thread listens for when the <CODE>ICountDownLatch</CODE> =
reaches=20
0. In practice, a process that should have decremented the counter by =
calling=20
the <CODE>ICountDownLatch.countDown</CODE> method can fail, and =
therefore the=20
<CODE>ICountDownLatch</CODE> will never reach 0. To force you to deal =
with this=20
situation, the await methods have timeouts to prevent waiting=20
indefinitely.</P></DIV>
<DIV class=3D"paragraph">
<P>If we first start a leader and then start one or more followers, the=20
followers will wait till the leader completes. It is important that the =
leader=20
is started first, else the followers will immediately complete since the =
latch=20
already is 0. The example shows an <CODE>ICountDownLatch</CODE> with =
only a
 single step. If a process has n steps, you should initialize the=20
<CODE>ICountdownLatch</CODE> with n instead of 1, and for each completed =
step,=20
you should call the <CODE>countDown</CODE> method.</P></DIV>
<DIV class=3D"paragraph">
<P>One thing to watch out for is that an <CODE>ICountDownLatch</CODE> =
waiter can=20
be notified prematurely. In a distributed environment, the leader could =
go down=20
before it reaches zero and this would result in the waiters waiting till =
the end=20
of time. Because this behavior is undesirable, Hazelcast will =
automatically=20
notify all listeners if the owner gets disconnected, and therefore =
listeners=20
could be notified before all steps of a certain process are completed. =
To deal=20
with this situation, the current state of the process needs to be =
verified and=20
appropriate actions need to be taken: for example, restart all =
operations,=20
continue with the first failed operation, or throw an =
exception.</P></DIV>
<DIV class=3D"paragraph">
<P>Although the <CODE>ICountDownLatch</CODE> is a very useful =
synchronization=20
aid, it probably isn=E2=80=99t the one you will use on a daily basis. =
Unlike Java=E2=80=99s
 implementation, Hazelcast=E2=80=99s <CODE>ICountDownLatch</CODE> count =
can be reset=20
after a countdown has finished, but it cannot be reset during an active=20
count.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Replication</EM>: the <CODE>ICountDownLatch</CODE> has 1 =
synchronous=20
backup and zero asynchronous backups and is not configurable.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"good-to-know-5">3.7.1. Good to know</H4>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>Cluster Singleton Service:</EM> In some cases you need a thread =
that will
 only run on a limited number of members. Often only a single thread is =
needed.=20
But if the member running this thread fails, another machine needs to =
take over.=20
Hazelcast doesn=E2=80=99t have direct support for this, but it is very =
easy to implement=20
using an <CODE>ILock</CODE> (for a single thread) or using an=20
<CODE>ISemaphore</CODE> (for multiple threads).</P></DIV>
<DIV class=3D"paragraph">
<P>On each cluster member you start this service thread, the first thing =
this=20
service needs to do is to acquire the lock or a license and on success, =
the=20
thread can start with its logic. All other threads will block till the =
lock is=20
released or a license is returned.</P></DIV>
<DIV class=3D"paragraph">
<P>The nice thing about the <CODE>ILock</CODE> and the =
<CODE>ISemaphore</CODE>=20
is when a member exits the cluster (due to a crash, network disconnect, =
etc.),=20
the lock is automatically released and the license is returned. Then, =
other=20
cluster members that are waiting to acquire the lock/license can now =
have their=20
turn.</P></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-is-next">3.8. What is next?</H3>
<DIV class=3D"paragraph">
<P>In this chapter, we looked at various synchronization primitives that =
are
 supported by Hazelcast. If you need a different one, you can try to =
build it on=20
top of existing ones or you can create a custom one using the Hazelcast =
SPI. One=20
thing that would be nice to add is the ability to control the partition =
the=20
primitive is living on, since this would improve locality of=20
reference.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"distributed-collections">4. Distributed Collections</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>Hazelcast provides a set of collections that implement interfaces =
from the=20
Java collection framework, making it easy to integrate distributed =
collections=20
into your system without making too many code changes. A distributed =
collection=20
can be called concurrently from the same JVM, and can be called =
concurrently by=20
different JVMs. Another advantage is that the distributed collections =
provide=20
high availability, so if a member hosting the collection fails, another =
member=20
will take over.</P></DIV>
<DIV class=3D"sect2">
<H3 id=3D"iqueue">4.1. IQueue</H3>
<DIV class=3D"paragraph">
<P>A <CODE>BlockingQueue</CODE> is one of the work horses for concurrent =
system=20
because it allows producers and consumers of messages (which can be =
POJOs) to=20
work at different speeds. The Hazelcast =
<CODE>com.hazelcast.core.IQueue</CODE>,=20
which extends the <CODE>java.util.concurrent.BlockingQueue</CODE>, =
allows=20
threads from the same JVM to interact with that queue. Since the queue =
is=20
distributed, it also allows different JVMs to interact with it. You can =
add=20
items in one JVM and remove them in another.</P></DIV>
<DIV class=3D"paragraph">
<P>As an example, we=E2=80=99ll create a producer/consumer =
implementation that is=20
connected by a distributed queue. The producer is going to put a total =
of 100=20
Integers on the queue with a rate of 1 message/second.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">ProducerMember</SPAN> {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        IQueue&lt;<SPAN class=3D"predefined-type">Integer</SPAN>&gt; =
queue =3D hz.getQueue(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">queue</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">1</SPAN>; k &lt; =
<SPAN class=3D"integer">100</SPAN>; k++) {=0A=
            queue.put(k);=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Producing: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + k);=0A=
            <SPAN class=3D"predefined-type">Thread</SPAN>.sleep(<SPAN =
class=3D"integer">1000</SPAN>);=0A=
        }=0A=
        queue.put(-<SPAN class=3D"integer">1</SPAN>);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Producer Finished!</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>To make sure that the consumers will terminate when the producer is =
finished,=20
the producer will put a -1 on the queue to indicate that it is=20
finished.</P></DIV>
<DIV class=3D"paragraph">
<P>The consumer will take the message from the queue, print it, and wait =
for 5=20
seconds. Then, it will consume the next message and stop when it =
receives the=20
-1. This behavior is called a <EM>poison pill</EM>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">ConsumerMember</SPAN> {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        IQueue&lt;<SPAN class=3D"predefined-type">Integer</SPAN>&gt; =
queue =3D hz.getQueue(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">queue</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"keyword">while</SPAN> (<SPAN =
class=3D"predefined-constant">true</SPAN>){=0A=
            <SPAN class=3D"type">int</SPAN> item =3D queue.take();=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Consumed: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + item);=0A=
            <SPAN class=3D"keyword">if</SPAN>(item =3D=3D -<SPAN =
class=3D"integer">1</SPAN>){=0A=
                queue.put(-<SPAN class=3D"integer">1</SPAN>);=0A=
                <SPAN class=3D"keyword">break</SPAN>;=0A=
            }=0A=
            <SPAN class=3D"predefined-type">Thread</SPAN>.sleep(<SPAN =
class=3D"integer">5000</SPAN>);=0A=
        }=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Consumer Finished!</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you take a closer look at the consumer, you see that when the =
consumer=20
receives the poison pill, it puts the poison pill back on the queue =
before it=20
ends the loop. This is done to make sure that all consumers will receive =
the=20
poison pill, not just the one that received it first.</P></DIV>
<DIV class=3D"paragraph">
<P>When you start a single producer, you will see the following=20
output:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Produced 1=0A=
Produced 2=0A=
....</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When you start a single consumer, you will see the following=20
output:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Consumed 1=0A=
Consumed 2=0A=
....</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>As you can see, the items produced on the queue by the producer are =
being=20
consumed from that same queue by the consumer.</P></DIV>
<DIV class=3D"paragraph">
<P>Because messages are produced 5 times faster than they are consumed, =
the=20
queue will keep growing with a single consumer. To improve throughput, =
you can=20
start more consumers. If we start another one, we=E2=80=99ll see each =
consumer takes=20
care of half the messages.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"title">Consumer 1:</DIV>
<DIV class=3D"content">
<PRE>Consumed 20=0A=
Consumed 22=0A=
....</PRE></DIV></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"title">Consumer 2:</DIV>
<DIV class=3D"content">
<PRE>Consumed 21=0A=
Consumed 23=0A=
....</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When you kill one of the consumers, the remaining consumer will =
process all=20
the elements again:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Consumed 40=0A=
Consumed 42=0A=
....</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If there are many producers/consumers interacting with the queue, =
there will=20
be a lot of contention and eventually the queue will become a =
bottleneck. One=20
way you can solve this is to introduce a stripe (essentially a list) of =
queues.
 But if you do, the ordering of messages sent to different queues will =
no longer=20
be guaranteed. In many cases, a strict ordering isn=E2=80=99t required =
and a stripe can=20
be a simple solution to improve scalability.</P></DIV>
<DIV class=3D"admonitionblock important">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"icon"><I title=3D"Important" class=3D"fa =
icon-important"></I> </TD>
    <TD class=3D"content">Although the Hazelcast distributed queue =
preserves=20
      ordering of the messages (the messages are taken from the queue in =
the=20
      same order they were put on the queue), if there are multiple =
consumers,=20
      the processing order is not guaranteed because the queue will not =
provide=20
      any ordering guarantees on the messages after they are taken from =
the=20
      queue. </TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"sect3">
<H4 id=3D"capacity">4.1.1. Capacity</H4>
<DIV class=3D"paragraph">
<P>In the previous example, we showed a basic producer/consumer solution =
based=20
on a distributed queue. Because the production of messages is separated =
from the=20
consumption of messages, the speed of production is not influenced by =
the speed=20
of consumption. If producing messages goes quicker than the consumption, =
then=20
the queue will increase in size. If there is no bound on the capacity of =
the=20
queue, then machines can run out of memory and you will get an=20
<CODE>OutOfMemoryError</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>With the traditional <CODE>BlockingQueue</CODE> implementation, such =
as the=20
<CODE>LinkedBlockingQueue</CODE>, you can set a capacity. When this is =
set and=20
the maximum capacity is reached, placement of new items either fails or =
blocks,=20
depending on the type of the <CODE>put</CODE> operation. This prevents =
the queue=20
from growing beyond a healthy capacity and the JVM from failing. It is =
important=20
to understand that the <CODE>IQueue</CODE> is not a partitioned data =
structure=20
like the <CODE>IMap</CODE>, so the content of the <CODE>IQueue</CODE> =
will not=20
be spread over the members in the cluster. A single member in the =
cluster will=20
be responsible for keeping the complete content of the =
<CODE>IQueue</CODE> in=20
memory. Depending on the configuration, there will also be a backup =
which keeps=20
the whole queue in the memory.</P></DIV>
<DIV class=3D"paragraph">
<P>The Hazelcast queue also provides capacity control, but instead of =
having a=20
fixed capacity for the whole cluster, Hazelcast provides a scalable =
capacity by=20
setting the queue capacity using the queue property=20
<CODE>max-size</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;join&gt;</SPAN><SPAN =
class=3D"tag">&lt;multicast</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN><SPAN =
class=3D"tag">&lt;/join&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;queue</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">queue</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;max-size&gt;</SPAN>10<SPAN =
class=3D"tag">&lt;/max-size&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/queue&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When we start a single producer, we=E2=80=99ll see that 10 items are =
put on the queue=20
and then the producer blocks. If we then start a single consumer, =
we=E2=80=99ll see that=20
the messages are being consumed and the producer will produce=20
again.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"backups">4.1.2. Backups</H4>
<DIV class=3D"paragraph">
<P>By default, Hazelcast will make sure that there is one synchronous =
backup for=20
the queue. If the member hosting that queue fails, the backups on =
another member=20
will be used so no entries are lost.</P></DIV>
<DIV class=3D"paragraph">
<P>Backups can be controlled using the following properties.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>backup-count</CODE>: Number of synchronous backups, defaults =
to 1. So=20
  by default, no entries will be lost if a member fails.</P></LI>
  <LI>
  <P><CODE>async-backup-count</CODE>: Number of asynchronous backups, =
defaults=20
  to 0.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>If you want increased high availability, you can either increase the=20
<CODE>backup-count</CODE> or the <CODE>async-backup-count</CODE>. If you =
want to=20
have improved performance, you can set the <CODE>backup-count</CODE> to =
0, but=20
at the cost of potentially losing entries on failure.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"queuestore">4.1.3. QueueStore</H4>
<DIV class=3D"paragraph">
<P>By default, Hazelcast data structures like the <CODE>IQueue</CODE> =
are not=20
persistent.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>If the cluster starts, the queues will not be populated by=20
  themselves.</P></LI>
  <LI>
  <P>Changes in the queue will not be made persistent, so if the cluster =
fails,=20
  then entries will be lost.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>In some cases, this behavior is not desirable. Luckily, Hazelcast =
provides a=20
mechanism for queue durability using the <CODE>QueueStore</CODE>, which =
can=20
connect to a more durable storage mechanism, such as a database. In =
Hazelcast 2,=20
the Queue was implemented on top of the Hazelcast Map, so in theory you =
could=20
make the queue persistent by configuring the MapStore of the backing =
map. In=20
Hazelcast 3, the Queue is not implemented on top of a map; instead, it =
exposes a=20
<CODE>QueueStore</CODE> directly.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"ilist">4.2. IList</H3>
<DIV class=3D"paragraph">
<P>A List is a collection where every element only occurs once and where =
the=20
order of the elements does matter. The Hazelcast=20
<CODE>com.hazelcast.core.IList</CODE> implements the=20
<CODE>java.util.List</CODE>. We=E2=80=99ll demonstrate the =
<CODE>IList</CODE> by adding=20
items to a list on one member and printing the element of that list on =
another=20
member:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">WriteMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      IList&lt;<SPAN class=3D"predefined-type">String</SPAN>&gt; list =
=3D hz.getList(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">list</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      list.add(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Tokyo</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      list.add(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Paris</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      list.add(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">New York</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Putting finished!</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
   }=0A=
}=0A=
<SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">class</SPAN> <SPAN class=3D"class">ReadMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      IList&lt;<SPAN class=3D"predefined-type">String</SPAN>&gt; list =
=3D hz.getList(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">list</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"predefined-type">String</SPAN> s : list)=0A=
         <SPAN class=3D"predefined-type">System</SPAN>.out.println(s);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Reading finished!</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you first run the <CODE>WriteMember</CODE> and after it has =
completed, you=20
start the <CODE>ReadMember</CODE>, then the <CODE>ReadMember</CODE> will =
output=20
the following:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Tokyo=0A=
Paris=0A=
New York=0A=
Reading finished!</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The data that the <CODE>WriteMember</CODE> writes to the List is =
visible in=20
the <CODE>ReadMember</CODE> and the order is maintained. The List =
interface has=20
various methods (like the sublist) that returns collections, but it is =
important=20
to understand that the returned collections are snapshots and are not =
backed up=20
by the list. See <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#iterator-stability">Ite=
rator=20
Stability</A> for a discussion of weak consistency.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"iset">4.3. ISet</H3>
<DIV class=3D"paragraph">
<P>A Set is a collection where every element only occurs once and where =
the=20
order of the elements doesn=E2=80=99t matter. The Hazelcast=20
<CODE>com.hazelcast.core.ISet</CODE> implements the =
<CODE>java.util.Set</CODE>.
 We=E2=80=99ll demonstrate the <CODE>Set</CODE> by adding items in a Set =
on one member,=20
and printing all the  elements from that Set on another =
member:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">WriteMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      ISet&lt;<SPAN class=3D"predefined-type">String</SPAN>&gt; set =3D =
hz.getSet(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">set</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      set.add(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Tokyo</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      set.add(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Paris</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      set.add(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">New York</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Putting finished</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
   }=0A=
}=0A=
=0A=
<SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">class</SPAN> <SPAN class=3D"class">ReadMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      ISet&lt;<SPAN class=3D"predefined-type">String</SPAN>&gt; set =3D =
hz.getSet(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">set</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"keyword">for</SPAN>(<SPAN =
class=3D"predefined-type">String</SPAN> s: set)=0A=
         <SPAN class=3D"predefined-type">System</SPAN>.out.println(s);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Reading finished!</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you first start the <CODE>WriteMember</CODE> and waiting for =
completion,=20
you start the <CODE>ReadMember</CODE>. It will output the =
following:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Paris=0A=
Tokyo=0A=
New York=0A=
Reading finished!</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>As you can see, the data added by the <CODE>WriteMember</CODE> is =
visible in=20
the <CODE>ReadMember</CODE>. As you also can see, the order is not =
maintained=20
since order is not defined by the Set.</P></DIV>
<DIV class=3D"paragraph">
<P>Just as with normal HashSet, the <CODE>hashcode()</CODE> and=20
<CODE>equals()</CODE> methods of the object are used and not the =
equals/hash of=20
the byte array version of that object. This is a different behavior =
compared to=20
the map; see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#hashcode-and-equals">Ma=
p:=20
Hashcode and Equals</A>.</P></DIV>
<DIV class=3D"paragraph">
<P>In Hazelcast, the <CODE>ISet</CODE> (and the <CODE>IList</CODE>) is=20
implemented as a collection within the MultiMap, where the ID of the Set =
is the=20
key in the MultiMap and the value is the collection. This means that the =

<CODE>ISet</CODE> is not partitioned, so you can=E2=80=99t scale beyond =
the capacity of=20
a single machine and you cannot control the partition where data from a =
Set is=20
going to be stored. If you want to have a distributed Set that behaves =
more like=20
the distributed Map, you can implement a Set based on a Map where the =
value is=20
some bogus value. It is not possible to rely on the =
<CODE>Map.keySet</CODE> for=20
returning a usable distributed Set, since it will return a =
non-distributed=20
snapshot of the keys.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"collection-itemlistener">4.4. Collection ItemListener</H3>
<DIV class=3D"paragraph">
<P>The <CODE>IList</CODE>, <CODE>ISet</CODE> and <CODE>IQueue</CODE> =
interfaces=20
extend the <CODE>com.hazelcast.core.ICollection</CODE> interface. =
Hazelcast=20
enriches the existing collections API with the ability to listen to =
changes in=20
the collections using the <CODE>com.hazelcast.core.ItemListener</CODE>. =
The=20
<CODE>ItemListener</CODE> receives the <CODE>ItemEvent</CODE> which =
potentially=20
contains the item, the member where the change is happened, and the type =
of=20
event (add or remove).</P></DIV>
<DIV class=3D"paragraph">
<P>The following example shows an <CODE>ItemListener</CODE> that listens =
to all=20
changes made in an <CODE>IQueue</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">ItemListenerMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      ICollection&lt;<SPAN class=3D"predefined-type">String</SPAN>&gt; q =
=3D hz.getQueue(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">queue</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      q.addItemListener(<SPAN class=3D"keyword">new</SPAN> =
ItemListenerImpl&lt;<SPAN class=3D"predefined-type">String</SPAN>&gt;(), =
<SPAN class=3D"predefined-constant">true</SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">ItemListener started</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
   }=0A=
=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">ItemListenerImpl</SPAN>&lt;E&gt;=0A=
          <SPAN class=3D"directive">implements</SPAN> <SPAN =
class=3D"predefined-type">ItemListener</SPAN>&lt;E&gt; {=0A=
=0A=
      <SPAN class=3D"annotation">@Override</SPAN>=0A=
      <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> itemAdded(<SPAN =
class=3D"predefined-type">ItemEvent</SPAN>&lt;E&gt; e) {=0A=
         <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Item added:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + e.getItem());=0A=
      }=0A=
=0A=
      <SPAN class=3D"annotation">@Override</SPAN>=0A=
      <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> itemRemoved(<SPAN =
class=3D"predefined-type">ItemEvent</SPAN>&lt;E&gt; e) {=0A=
         <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Item removed:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + e.getItem());=0A=
      }=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>We registered the <CODE>ItemListenerImpl</CODE> with the=20
<CODE>addItemListener</CODE> method using the value <CODE>true</CODE>. =
This is=20
done to make sure that our <CODE>ItemListenerImpl</CODE> will get the =
value that=20
has been added/removed. The reason for this configuration option is that =
in some=20
cases, you only want to be notified when a change is happened, but =
you=E2=80=99re not=20
interested in the actual change and don=E2=80=99t want to pay for =
sending the value over=20
the line.</P></DIV>
<DIV class=3D"paragraph">
<P>To see that the <CODE>ItemListener</CODE> is really working, =
we=E2=80=99ll create a=20
member that makes a change in the queue:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">CollectionChangeMember</SPAN>{=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      <SPAN class=3D"predefined-type">BlockingQueue</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>&gt; q =3D hz.getQueue(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">queue</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      q.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">foo</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      q.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">bar</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      q.take();=0A=
      q.take();=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you start up the <CODE>ItemListenerMember</CODE> and wait till it =
displays=20
<CODE>"ItemListener started"</CODE>, and then you start the =20
<CODE>CollectionChangeMember</CODE>, you will see the following output =
in the=20
<CODE>ItemListenerMember</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>item added:foo=0A=
item added:bar=0A=
item removed:foo=0A=
item removed:bar</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>ItemListeners are useful if you need to react upon changes in =
collections.
 But realize that listeners are executed asynchronously, so it could be =
that at=20
the time your listener runs, the collection has changed again.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Ordering:</EM> All events are ordered: listeners will receive and =
process=20
the events in the order they actually occurred.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"good-to-know">4.4.1. Good to know</H4>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph" id=3D"iterator-stability">
<P><EM>Iterator Stability:</EM> Iterators on collections are weakly =
consistent:
 when a collection changes while creating the iterator, you could =
encounter=20
duplicates or miss an element. Changes on that iterator will not result =
in=20
changes on the collection. An iterator does not need to reflect the =
actual state=20
and will not throw a =
<CODE>ConcurrentModifcationException</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Not Durable:</EM> In Hazelcast 2, the =
<CODE>IQueue/IList/ISet</CODE> were=20
built on top of the Hazelcast Distributed Map. By accessing that Map, =
you could=20
influence the collections behavior, including storage. This is not =
possible in=20
Hazelcast 3: the <CODE>IQueue</CODE> has its own QueueStore mechanism, =
but the=20
List/Set does not.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Replication:</EM> The replication for <CODE>IList</CODE> and=20
<CODE>ISet</CODE> cannot be configured and will automatically have 1 =
synchronous=20
backup and 0 asynchronous backups. Perhaps in the future this will be=20
configurable.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Destruction:</EM> <CODE>IQueue/ISet/IList</CODE> instances are=20
immediately destroyed when they are empty and will not take up space. =
Listeners=20
will remain registered unless that collection is destroyed explicitly. =
Once an=20
item is added to the implicit destroyed collection, the collection will=20
automatically be recreated.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>No merge policy for the Queue:</EM> If a cluster containing a =
queue is=20
split, then each subcluster will still able to access their own view of =
that=20
queue. If these subclusters merge, the queue cannot be merged and one of =
them is=20
deleted.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Not partitioned:</EM> The <CODE>IList/ISet/IQueue</CODE> are not=20
partitioned, so the maximum size of the collection doesn=E2=80=99t rely =
on the size of=20
the cluster, but on the capacity of a single member since the whole =
queue will=20
be kept in the memory of a single JVM.</P></DIV>
<DIV class=3D"paragraph">
<P>This is a big difference compared to Hazelcast 2.x, where they were=20
partitioned. The Hazelcast team decided to drop this behavior since the =
2.x=20
implementation was not truly partitioned due to reliance on a single =
member=20
where a lot of metadata for the collection was stored. This limitation =
needs to=20
be taken into consideration when you are designing a distributed system. =
You can=20
solve this issue by using a stripe of collections or by building your =
collection=20
on top of the <CODE>IMap</CODE>. Another more flexible but probably more =
time=20
consuming alternative is to write the collection on top of the new SPI=20
functionality; see <A=20
href=3D"http://hazelcast.org/mastering-hazelcast/#spi">SPI</A>.</P></DIV>=

<DIV class=3D"paragraph">
<P>A potential solution for the <CODE>IQueue</CODE> is to make a stripe =
of=20
queues instead of a single queue. Since each collection in that stripe =
is likely=20
to be assigned to a different partition than its neighbors, the queues =
will end=20
up in different members. If ordering of items is not important, the item =
can be=20
placed on an arbitrary queue. Otherwise, the right queue could be =
selected based=20
on some property of the item so that all items having the same property =
end up=20
in the same queue.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Uncontrollable partition</EM>: It is currently not possible to =
control=20
the partition the collection is going to be placed on, so more remoting =
is=20
required than is strictly needed. In the future, it will be possible for =
you to=20
say:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"predefined-type">String</SPAN> partitionKey =3D <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">foobar</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>;=0A=
IQueue q1 =3D hz.getQueue(partitionKey,<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">q1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
IQueue q2 =3D hz.getQueue(partitionKey,<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">q2</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In this case, <CODE>q1</CODE> and <CODE>q2</CODE> are going to be =
stored in=20
the same partition.</P></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-is-next">4.5. What is next?</H3>
<DIV class=3D"paragraph">
<P>In this chapter we have seen various collections in action and we =
have seen=20
how they can be configured.  In the following chapter, you will learn =
about=20
Hazelcast Distributed Map.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"distributed-map">5. Distributed Map</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>In this chapter, you=E2=80=99ll learn how to use one of the most =
versatile data
 structures in Hazelcast: the <CODE>com.hazelcast.core.IMap</CODE>. The=20
<CODE>IMap</CODE> extends the Java <CODE>ConcurrentMap</CODE>, and =
therefore it=20
also extends <CODE>java.util.Map</CODE>. Unlike a normal Map =
implementation like=20
the HashMap, the Hazelcast <CODE>IMap</CODE> implementation is a =
distributed
 data structure.</P></DIV>
<DIV class=3D"paragraph">
<P>Internally, Hazelcast divides the map into partitions and it =
distributes the
 partitions evenly among the members in the cluster. The partition of a =
map
 entry is based on the key of that entry: each key belongs to a single
 partition. By default, Hazelcast uses 271 partitions for all =
partitioned data=20
structures. This value can be changed with the=20
<CODE>hazelcast.map.partition.count</CODE> property.</P></DIV>
<DIV class=3D"paragraph">
<P>When a new member is added, the oldest member in the cluster decides =
which=20
partitions are going to be moved to that new member. Once the partitions =
are=20
moved, this member will take its share in the load. So to scale up a =
cluster,=20
just add new members to the cluster.</P></DIV>
<DIV class=3D"paragraph">
<P>When a member is removed, all the partitions that member owned are =
moved to=20
other members. So scaling down a cluster is simple, just remove members =
from the=20
cluster. Apart from a =E2=80=99soft=E2=80=99 removal of the member, =
there can be a =E2=80=99hard=E2=80=99=20
removal: for example, the member crashes or it gets disconnected from =
the=20
cluster due to network issues. Luckily, Hazelcast provides various =
degrees of=20
failover to deal with this situation. By default, there will be one =
synchronous=20
backup, so the failure of a single member will not lead to loss of data =
because=20
a replica of that data is available on another member.</P></DIV>
<DIV class=3D"paragraph">
<P>There is a demo on YouTube: <A class=3D"bare" =
href=3D"http://www.youtube.com/watch?v=3DTOhbhKqJpvw">http://www.youtube.=
com/watch?v=3DTOhbhKqJpvw</A>.
 4 Terabytes of data from 1 billion entries is stored on 100 Amazon EC2=20
instances, supporting to 1.3 million of operations/second.</P></DIV>
<DIV class=3D"sect2">
<H3 id=3D"creating-a-map">5.1. Creating a Map</H3>
<DIV class=3D"paragraph">
<P>Creating a distributed Map is very simple as the following example
 shows:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">FillMapMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hzInstance =3D =
Hazelcast.newHazelcastInstance();=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; map =3D =
hzInstance.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">cities</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In this example, we create a basic <CODE>cities</CODE> map which we =
will use=20
in the following sections.</P></DIV>
<DIV class=3D"paragraph">
<P>You do not need to configure anything in the =
<CODE>hazelcast.xml</CODE> file;
 Hazelcast will use the default Map configuration from the=20
<CODE>hazelcast-default.xml</CODE> to configure that map. If you want to
 configure the map, you can use the following example as a minimal map
 configuration in the <CODE>hazelcast.xml</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">cities</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">/&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P><EM>Lazy creation:</EM> The Map is not created when the =
<CODE>getMap</CODE>=20
method is called. Only when the Map instance is accessed, it will be =
created.=20
This is useful to know if you use the =
<CODE>DistributedObjectListener</CODE> and=20
fail to receive creation events.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"readingwriting">5.2. Reading/Writing</H3>
<DIV class=3D"paragraph">
<P>The Hazelcast Map implements the <CODE>ConcurrentMap</CODE> =
interface, so
 reading/writing key/values is simple since you can use familiar methods =
like=20
<CODE>get</CODE> and <CODE>put</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>To demonstrate this basic behavior, the following Member creates a =
Map and=20
writes some entries into that map:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">FillMapMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hzInstance =3D =
Hazelcast.newHazelcastInstance();=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; map =3D =
hzInstance.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">map</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Tokyo</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">2</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Paris</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">3</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">New York</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>As you can see, the Map is retrieved using the=20
<CODE>hzInstance.getMap(mapName)</CODE> and after that some entries are =
stored=20
in that Map. Reading the entries from that Map is simple:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">PrintAllMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hzInstance =3D =
Hazelcast.newHazelcastInstance();=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; map =3D =
hzInstance.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">map</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"keyword">for</SPAN>(<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry&lt;<SPAN =
class=3D"predefined-type">String</SPAN>,<SPAN =
class=3D"predefined-type">String</SPAN>&gt; entry : map.entrySet())=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(entry.getKey()+<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content"> </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+entry.getValue());=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If we first run the <CODE>FillMapMember</CODE> and then run the=20
<CODE>PrintAllMember</CODE>, we get the following output:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>3 New York=0A=
1 Tokyo=0A=
2 Paris</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The map updates from the <CODE>FillMapMember</CODE> are visible in =
the=20
<CODE>PrintAllMember</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>Internally, Hazelcast will serialize the key/values (see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serialization-start">Se=
rialization</A>)=20
to byte arrays and store them in the underlying storage mechanism. This =
means=20
changes made to a key/value after they are stored in the Map will not be =

reflected on the stored state. Therefore, the following code is=20
broken:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">Employee e  =
=3D employees.get(<SPAN class=3D"integer">123</SPAN>);=0A=
e.setFired(<SPAN =
class=3D"predefined-constant">true</SPAN>);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you want this change to be stored in the Map, you need to put the =
updated=20
value back:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">Employee e  =
=3D employees.get(<SPAN class=3D"integer">123</SPAN>);=0A=
e.setFired(<SPAN class=3D"predefined-constant">true</SPAN>);=0A=
employees.put(<SPAN =
class=3D"integer">123</SPAN>,e);</CODE></PRE></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"inmemoryformat">5.3. InMemoryFormat</H3>
<DIV class=3D"paragraph">
<P>The <CODE>IMap</CODE> is a distributed data structure, so a key/value =
can be
 read/written on a different machine than where the actual content is =
stored. To=20
make this possible, Hazelcast serializes the key/value to byte arrays =
when they=20
are stored, and Hazelcast deserializes the key/value when they are =
loaded. A=20
serialized representation of an object is called the binary format. For =
more=20
information about serialization of keys/values, see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serialization-start">Se=
rialization</A>.</P></DIV>
<DIV class=3D"paragraph">
<P>Serializing and deserializing an object too frequently on one node =
can have a=20
huge impact on performance. A typical use case would be Queries =
(predicate) and=20
Entry Processors reading the same value multiple times. To eliminate =
this impact=20
on performance, the objects should be stored in object format, not in =
binary=20
format; this means that the value returned is the instance and not a =
byte=20
array.</P></DIV>
<DIV class=3D"paragraph">
<P>That is why the <CODE>IMap</CODE> provides control on the format of =
the=20
stored value using the <CODE>in-memory-format</CODE> setting. This =
option is=20
only available for values; keys will always be stored in binary format. =
You=20
should understand the available in-memory formats:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>BINARY</CODE>: the value is stored in binary format. Every =
time the=20
  value is needed, it will be deserialized.</P></LI>
  <LI>
  <P><CODE>OBJECT</CODE>: the value is stored in object format. If a =
value is=20
  needed in a query/entry-processor, this value is used and no =
deserialization=20
  is needed.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>The default <CODE>in-memory-format</CODE> is =
<CODE>BINARY</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>The big question is which one to use. You should consider using the=20
<CODE>OBJECT</CODE> in-memory format if the majority of your Hazelcast =
usage is=20
composed of queries/entry processors. The reason is that no =
deserialization is=20
needed when a value is used in a query/entry processor because the =
object=20
already is available in object format. With the <CODE>BINARY</CODE> =
in-memory=20
format, a deserialization is needed since the object is only available =
in binary=20
format.</P></DIV>
<DIV class=3D"paragraph">
<P>If the majority of your operations are regular Map operations like=20
<CODE>put</CODE> or <CODE>get</CODE>, you should consider the=20
<CODE>BINARY</CODE> in-memory format. This sounds counterintuitive =
because=20
normal operations, such as <CODE>get</CODE>, rely on the object =
instance, and=20
with a binary format no instance is available. But when the =
<CODE>OBJECT</CODE>=20
in-memory format is used, the Map never returns the stored instance but =
creates=20
a clone instead. This involves a serialization on the owning node =
followed by a=20
deserialization on the caller node. With the <CODE>BINARY</CODE> format, =
only a=20
deserialization is needed and therefore the process is faster. For =
similar=20
reasons, a put with the <CODE>BINARY</CODE> in-memory format will be =
faster than=20
the <CODE>OBJECT</CODE> in-memory format. When the <CODE>OBJECT</CODE> =
in-memory=20
format is used, the Map will not store the actual instance, but will =
make a=20
clone; this involves a serialization followed by a deserialization. When =
the=20
<CODE>BINARY</CODE> in-memory format is used, only a deserialization is=20
needed.</P></DIV>
<DIV class=3D"paragraph">
<P>In the following example, you can see a Map configured with the=20
<CODE>OBJECT</CODE> in-memory format.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">cities</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;in-memory-format&gt;</SPAN>OBJECT<SPAN =
class=3D"tag">&lt;/in-memory-format&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If a value is stored in <CODE>OBJECT</CODE> in-memory format, a =
change on a=20
returned value does not affect the stored instance because a clone of =
the stored=20
value is returned, not the actual instance. Therefore, changes made on =
an object=20
after it is returned will not be reflected on the actual stored data. =
Also, when=20
a value is written to a Map, if the value is stored in =
<CODE>OBJECT</CODE>=20
format, it will be a copy of the put value, not the original. Therefore, =
changes=20
made on the object after it is stored will not be reflected on the =
actual stored=20
data.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"good-to-know">5.3.1. Good to know:</H4>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>Unsafe to use with <CODE>EntryProcessor</CODE> in combination =
with=20
queries:</EM> If the <CODE>OBJECT</CODE> in-memory format is used, then =
the=20
actual object instance is stored. When the <CODE>EntryProcessor</CODE> =
is used=20
in combination with <CODE>OBJECT</CODE> in-memory format, then an=20
<CODE>EntryProcessor</CODE> will have access to that object instance. A =
query=20
also will have access to the actual object instance. However, queries =
are not=20
executed on partition threads. Therefore, at any given moment, an=20
<CODE>EntryProcessor</CODE> and an arbitrary number of query threads =
could=20
access the same object instance. This can lead to data races and Java =
memory=20
model violation.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Unsafe to use with MapReduce:</EM> If the <CODE>OBJECT</CODE> =
in-memory=20
format is used in combination with MapReduce, you can run into the same =
data=20
races and Java Memory Model violations as with the =
<CODE>EntryProcessor</CODE>=20
in combination with queries.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"what-happened-to-cache-value">5.3.2. What Happened to =
Cache-value</H4>
<DIV class=3D"paragraph">
<P>The <CODE>cache-value</CODE> property in Hazelcast 2.x has been =
dropped in=20
Hazelcast 3. Just as with the <CODE>in-memory-format</CODE>, the=20
<CODE>cache-value</CODE> makes it possible to prevent unwanted =
deserialization.=20
When the <CODE>cache-value</CODE> was enabled, it was possible to get =
the same=20
instance on subsequent calls like <CODE>Map.get</CODE>. This problem =
does not=20
happen with the <CODE>in-memory-format</CODE>. The reason to drop=20
<CODE>cache-value</CODE> is that returning the same instance leads to =
unexpected
 sharing of an object instance. With an immutable object like a=20
<CODE>String</CODE>, this won=E2=80=99t cause any problems, but with an =
mutable object=20
this can lead to problems such as concurrency control=20
issues.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"hashcode-and-equals">5.4. Hashcode and Equals</H3>
<DIV class=3D"paragraph">
<P>In most cases, you probably will make use of basic types for a key, =
such as a=20
<CODE>Long</CODE>, <CODE>Integer</CODE>, or <CODE>String</CODE>. But in =
some=20
cases, you will need to create custom keys. To do it correctly in =
Hazelcast, you=20
need to understand how hashcode and equals are implemented in Hazelcast, =
because=20
it works differently compared to traditional Map implementations. =
Traditional=20
users make their own implementation: for example, based on =
firstname/lastname
 for a person object. However, Hazelcast uses the binary representation =
of your=20
object to determine the equals and hash. When you store a key/value in a =

Hazelcast Map, instead of storing the object, the object is serialized =
and=20
stored to byte arrays. To use the hash/equals in Hazelcast, you need to =
know the=20
following rules:</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>For keys, the hash/equals is determined based on the content of the =
byte=20
  array, so equal keys need to result in equal byte arrays. See <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serializable">Serializa=
tion:=20
  Serializable</A>.</P></LI>
  <LI>
  <P>For values, the hash/equals is determined based on the=20
  <CODE>in-memory-format</CODE>; for <CODE>BINARY</CODE>, the binary =
format is=20
  used. For <CODE>OBJECT</CODE> the equals of the object is=20
used.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>The difference is subtle, but it is crucial to understand.</P></DIV>
<DIV class=3D"paragraph">
<P>Below is an example of a problematic <CODE>Pair</CODE> =
class:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"directive">final</SPAN> =
<SPAN class=3D"type">class</SPAN> <SPAN class=3D"class">Pair</SPAN> =
<SPAN class=3D"directive">implements</SPAN> <SPAN =
class=3D"predefined-type">Serializable</SPAN> {=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> significant;=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> insignificant;=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> Pair(<SPAN =
class=3D"predefined-type">String</SPAN> significant, <SPAN =
class=3D"predefined-type">String</SPAN> insignificant) {=0A=
        <SPAN class=3D"local-variable">this</SPAN>.significant =3D =
significant;=0A=
        <SPAN class=3D"local-variable">this</SPAN>.insignificant =3D =
insignificant;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">boolean</SPAN> equals(<SPAN =
class=3D"predefined-type">Object</SPAN> thatObj) {=0A=
        <SPAN class=3D"keyword">if</SPAN> (<SPAN =
class=3D"local-variable">this</SPAN> =3D=3D thatObj) {=0A=
            <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-constant">true</SPAN>;=0A=
        }=0A=
        <SPAN class=3D"keyword">if</SPAN> (thatObj =3D=3D <SPAN =
class=3D"predefined-constant">null</SPAN> || getClass() !=3D =
thatObj.getClass()) {=0A=
            <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-constant">false</SPAN>;=0A=
        }=0A=
        Pair that =3D (Pair) thatObj;=0A=
        <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"local-variable">this</SPAN>.significant.equals(that.significant)=
;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> hashCode() {=0A=
       <SPAN class=3D"keyword">return</SPAN> significant.hashCode();=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This <CODE>Pair</CODE> has 2 fields. The significant field is used in =
the
 hash/equals implementation and the insignificant field is not. If we =
make 2=20
keys,</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">Pair key1 =3D =
<SPAN class=3D"keyword">new</SPAN> Pair(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">a</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>,<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
Pair key2 =3D <SPAN class=3D"keyword">new</SPAN> Pair(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">a</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>,<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">2</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>then <CODE>key1.equals(key2)</CODE> and=20
<CODE>key1.hashCode()=3D=3Dkey2.hashCode()</CODE>. So if a value would =
be put in a=20
Map with <CODE>key1</CODE>, it should be retrieved using =
<CODE>key2</CODE>. But=20
because the binary format of <CODE>key1</CODE> (which contains =
<CODE>a</CODE>=20
and <CODE>1</CODE>) is different than the binary format of =
<CODE>key2</CODE>=20
(which contain <CODE>a</CODE> and <CODE>2</CODE>), the =
<CODE>hashCode</CODE> and=20
<CODE>equals</CODE> are different. This is demonstrated in the following =

program:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">BrokenKeyMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;Pair, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; normalMap =3D <SPAN =
class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">HashMap</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>,Pair&gt;();=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;Pair, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; hzMap =3D hz.getMap(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">map</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
        Pair key1 =3D <SPAN class=3D"keyword">new</SPAN> Pair(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">a</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>, =
<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">1</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
        Pair key2 =3D <SPAN class=3D"keyword">new</SPAN> Pair(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">a</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>, =
<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">2</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
        normalMap.put(key1, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">foo</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        hzMap.put(key1, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">foo</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">normalMap.get: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + normalMap.get(key2));=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">hzMap.get: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + hzMap.get(key2));=0A=
=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When this program is run, you will get the following =
output:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>normalMap.get: foo=0A=
hzMap.get: null</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>Pair</CODE> works fine for a <CODE>HashMap</CODE>, but =
doesn=E2=80=99t work=20
for a Hazelcast <CODE>IMap</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>For a key, it is very important that the binary format of equal =
objects are=20
the same. For values, this depends on the <CODE>in-memory-format</CODE> =
setting.=20
If we configure the following three maps in the=20
<CODE>hazelcast.xml</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">objectMap</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;in-memory-format&gt;</SPAN>OBJECT<SPAN =
class=3D"tag">&lt;/in-memory-format&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;/map&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">binaryMap</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;in-memory-format&gt;</SPAN>BINARY<SPAN =
class=3D"tag">&lt;/in-memory-format&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;/map&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/hazelcast&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In the following code, we define two values, <CODE>v1</CODE> and=20
<CODE>v2</CODE>, where the resulting byte array is different. The=20
<CODE>equals</CODE> method will indicate that they are the same. We put=20
<CODE>v1</CODE> in each map and check for its existence using=20
<CODE>map.contains(v2)</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">BrokenValueMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, Pair&gt; normalMap =3D <SPAN =
class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">HashMap</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>,Pair&gt;();=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, Pair&gt; binaryMap =3D =
hz.getMap(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">binaryMap</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, Pair&gt; objectMap =3D =
hz.getMap(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">objectMap</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
        Pair v1 =3D <SPAN class=3D"keyword">new</SPAN> Pair(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">a</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>, =
<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">1</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
        Pair v2 =3D <SPAN class=3D"keyword">new</SPAN> Pair(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">a</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>, =
<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">2</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
        normalMap.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">key</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, v1);=0A=
        binaryMap.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">key</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, v1);=0A=
        objectMap.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">key</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, v1);=0A=
=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">normalMap.contains:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> +=0A=
            normalMap.containsValue(v2));=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">binaryMap.contains:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> +=0A=
            binaryMap.containsValue(v2));=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">objectMap.contains:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> +=0A=
            objectMap.containsValue(v2));=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Then, we get the following output:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>normalMap.contains:true=0A=
binaryMap.contains:false=0A=
objectMap.contains:true</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P><CODE>v1</CODE> is found using <CODE>v2</CODE> in the =
<CODE>normalMap</CODE>=20
and the <CODE>objectMap</CODE>. This is because with these maps, the=20
<CODE>equals</CODE> is done based on the <CODE>equals</CODE> method of =
the=20
object itself. But with the <CODE>binaryMap</CODE>, the =
<CODE>equals</CODE> is=20
done based on the binary format. Since <CODE>v1</CODE> and =
<CODE>v2</CODE> have
 different binary formats, <CODE>v1</CODE> will not be found using=20
<CODE>v2</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>Even though the hashcode of a key/value is not used by Hazelcast to =
determine=20
the partition the key/value will be stored in, it will be used by =
methods like=20
<CODE>Map.values()</CODE> and <CODE>Map.keySet()</CODE> and therefore it =
is
 important that the hash and equals are implemented correctly. For more
 information, the book "Effective Java" mentions that you should obey =
the
 general contract when overriding equals; always override hashcode when =
you=20
override equals.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"partition-control">5.5. Partition Control</H3>
<DIV class=3D"paragraph">
<P>Hazelcast makes it very easy to create distributed Maps and access =
data in=20
these Maps. For example, you could have a Map with customers where the=20
<CODE>customerId</CODE> is the key, and you could have a Map with orders =
for a
 customer, where the <CODE>orderId</CODE> is the key. The problem is =
when you
 frequently use the customer in combination with their orders, the =
orders may=20
probably be stored in different partitions than the customer, since the =
customer=20
partition is determined with the <CODE>customerId</CODE> and the order =
partition=20
is determined with the <CODE>orderId</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>Luckily, Hazelcast provides a solution to control the partition =
schema of
 your data so that all data can be stored in the same partition. If the =
data is=20
partitioned correctly, your system will exhibit a strong locality of =
reference=20
and this will reduce latency, increase throughput and improve =
scalability since=20
fewer network hops and traffic are required.</P></DIV>
<DIV class=3D"paragraph">
<P>To demonstrate this behavior, the code below implements a custom =
partitioning=20
schema for a customer and his orders.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Customer</SPAN> <SPAN =
class=3D"directive">implements</SPAN> <SPAN =
class=3D"predefined-type">Serializable</SPAN> {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN class=3D"type">long</SPAN> id;=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> Customer(<SPAN =
class=3D"type">long</SPAN> id) {=0A=
        <SPAN class=3D"local-variable">this</SPAN>.id =3D id;=0A=
    }=0A=
}=0A=
=0A=
<SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN class=3D"type">class</SPAN> <SPAN =
class=3D"class">Order</SPAN> <SPAN class=3D"directive">implements</SPAN> =
<SPAN class=3D"predefined-type">Serializable</SPAN> {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN class=3D"type">long</SPAN> =
orderId, customerId, articleId;=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> Order(<SPAN =
class=3D"type">long</SPAN> orderId, <SPAN class=3D"type">long</SPAN> =
customerId, <SPAN class=3D"type">long</SPAN> articleId) {=0A=
        <SPAN class=3D"local-variable">this</SPAN>.orderId =3D orderId;=0A=
        <SPAN class=3D"local-variable">this</SPAN>.customerId =3D =
customerId;=0A=
        <SPAN class=3D"local-variable">this</SPAN>.articleId =3D =
articleId;=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>To control the partition of the order, the <CODE>OrderKey</CODE> =
implements=20
<CODE>PartitionAware</CODE>. If a key implements this interface, instead =
of=20
using the binary format of the key to determine the correct partition, =
the=20
binary format of the result of <CODE>getPartitionKey</CODE> method call =
is used.=20
Because we want the partition of the <CODE>customerId</CODE>, the=20
<CODE>getPartitionKey</CODE> method will use the=20
<CODE>customerId</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"directive">final</SPAN> =
<SPAN class=3D"type">class</SPAN> <SPAN class=3D"class">OrderKey</SPAN> =
<SPAN class=3D"directive">implements</SPAN> PartitionAware, <SPAN =
class=3D"predefined-type">Serializable</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN class=3D"type">long</SPAN> =
orderId, customerId;=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> OrderKey(<SPAN =
class=3D"type">long</SPAN> orderId, <SPAN class=3D"type">long</SPAN> =
customerId) {=0A=
        <SPAN class=3D"local-variable">this</SPAN>.orderId =3D orderId;=0A=
        <SPAN class=3D"local-variable">this</SPAN>.customerId =3D =
customerId;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Object</SPAN> getPartitionKey() {=0A=
        <SPAN class=3D"keyword">return</SPAN> customerId;=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The equals and hashcode are not used in this example since Hazelcast =
will=20
make use of the binary format of the key. In practice, you should =
implement=20
them. For more information, see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#hashcode-and-equals">Ha=
shcode=20
and Equals</A>.</P></DIV>
<DIV class=3D"paragraph">
<P>In the following example, an order is placed with an =
<CODE>OrderKey</CODE>.
 At the end of the example, the partition IDs for a customer, the=20
<CODE>orderKey</CODE>, and the <CODE>orderId</CODE> are =
printed.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">DataLocalityMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>, Customer&gt; customerMap =3D =
hz.getMap(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">customers</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;OrderKey, =
Order&gt; orderMap =3D hz.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">orders</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
        <SPAN class=3D"type">long</SPAN> customerId =3D <SPAN =
class=3D"integer">100</SPAN>;=0A=
        <SPAN class=3D"type">long</SPAN> orderId =3D <SPAN =
class=3D"integer">200</SPAN>;=0A=
        <SPAN class=3D"type">long</SPAN> articleId =3D <SPAN =
class=3D"integer">300</SPAN>;=0A=
        Customer customer =3D <SPAN class=3D"keyword">new</SPAN> =
Customer(customerId);=0A=
        customerMap.put(customer.id, customer);=0A=
        OrderKey orderKey =3D <SPAN class=3D"keyword">new</SPAN> =
OrderKey(orderId, customer.id);=0A=
        Order order =3D <SPAN class=3D"keyword">new</SPAN> =
Order(orderKey.orderId, customer.id, articleId);=0A=
        orderMap.put(orderKey, order);=0A=
=0A=
        PartitionService pService =3D hz.getPartitionService();=0A=
        Partition cPartition =3D pService.getPartition(customerId);=0A=
        Partition oPartition =3D pService.getPartition(orderKey);=0A=
        Partition wPartition =3D pService.getPartition(orderId);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.printf(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Partition for customer: %s</SPAN><SPAN =
class=3D"char">\n</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>,=0A=
            cPartition.getPartitionId());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.printf(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Partition for order with OrderKey: %s</SPAN><SPAN =
class=3D"char">\n</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>,=0A=
            oPartition.getPartitionId());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.printf(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Partition for order without OrderKey: %s</SPAN><SPAN =
class=3D"char">\n</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>,=0A=
            wPartition.getPartitionId());=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The output looks something like this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Partition for customer: 124=0A=
Partition for order with OrderKey: 124=0A=
Partition for order without OrderKey: 175</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The partition of the customer is the same as the partition of the =
order of=20
that customer. Also, the partition where an order would be stored using =
a naive=20
<CODE>orderId</CODE> is different than that of the customer. In this =
example, we=20
created the <CODE>OrderKey</CODE> that does the partitioning, but =
Hazelcast also=20
provides a default implementation that can be used: the=20
<CODE>PartitionAwareKey</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>Being able to control the partitioning schema of data is a very =
powerful
 feature and figuring out a good partitioning schema is an architectural =
choice=20
that you want to get right as soon as possible. Once this is done =
correctly, it=20
will be a lot easier to write a high performance and scalable system =
since the=20
number of remote calls is limited.</P></DIV>
<DIV class=3D"paragraph">
<P>Collocating data in a single partition often needs to be combined =
with
 sending the functionality to the partition that contains the collocated =
data.=20
For example, if an invoice needs to be created for the orders of a =
customer, a=20
Callable that creates the Invoice could be sent using the=20
<CODE>IExecutorService.executeOnKeyOwner(invoiceCallable, =
customerId)</CODE>=20
method. If you do not send the function to the correct partition, =
collocating=20
data is not useful since a remote call is done for every piece of data. =
For more=20
information about Executors and routing, see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#distributed-executor-se=
rvice">Distributed=20
Executor Service</A> and <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#routing">Distributed=20
Executor Service: Routing</A>.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"high-availability">5.6. High Availability</H3>
<DIV class=3D"paragraph">
<P>In a production environment, all kinds of things can go wrong. A =
machine
 could break down due to disk failure, the operating system could crash =
or it=20
could get disconnected from the network. To prevent that the failure of =
a single=20
member leads to failure of the cluster, by default Hazelcast =
synchronously backs=20
up all Map entries on another Member. So if a member fails, no data is =
lost=20
because the member containing the backup will take over.</P></DIV>
<DIV class=3D"paragraph">
<P>The backup count can be configured using the =
<CODE>backup-count</CODE>=20
property:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">persons</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;backup-count&gt;</SPAN>1<SPAN =
class=3D"tag">&lt;/backup-count&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>You can set <CODE>backup-count</CODE> to 0 if you favor performance =
over high
 availability. You can specify a higher value than 1 if you require =
increased=20
availability; but the maximum number of backups is 6. The default is 1, =
so in a=20
lot of cases you don=E2=80=99t need to specify it.</P></DIV>
<DIV class=3D"paragraph">
<P>By default, the backup operations are synchronous; you are guaranteed =
that=20
the backup(s) are updated before a method call like <CODE>map.put</CODE> =

completes. But this guarantee comes at the cost of blocking and =
therefore the=20
latency increases. In some cases, having a low latency is more important =
than=20
having perfect backup guarantees, as long as the window for failure is =
small.=20
That is why Hazelcast also supports asynchronous backups, where the =
backups are=20
made at some point in time. This can be configured through the=20
<CODE>async-backup-count</CODE> property:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">persons</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;backup-count&gt;</SPAN>0<SPAN =
class=3D"tag">&lt;/backup-count&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;async-backup-count&gt;</SPAN>1<SPAN =
class=3D"tag">&lt;async-backup-count&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>async-backup-count</CODE> defaults to 0. Unless you want to =
have=20
asynchronous backups, it doesn=E2=80=99t need to be =
configured.</P></DIV>
<DIV class=3D"paragraph">
<P>Although backups can improve high availability, it will increase =
memory usage=20
since the backups are also kept in memory. So for every backup, you will =
double=20
the original memory consumption.</P></DIV>
<DIV class=3D"paragraph">
<P>By default, Hazelcast provides sequential consistency: when a Map =
entry is
 read, the most recent written value is seen. This is done by routing =
the get
 request to the member that owns the key and therefore there will be no=20
out-of-sync copies. But sequential consistency comes at a price: if the =
value is=20
read on an arbitrary cluster member, then Hazelcast needs to do a remote =
call to=20
the member that owns the partition for that key. Hazelcast provides the =
option=20
to increase performance by reducing consistency. This is done by =
allowing reads=20
to potentially see stale data. This feature is available only when there =
is at=20
least 1 backup (synchronous or asynchronous). You can enable it by =
setting the=20
<CODE>read-backup-data</CODE> property:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">persons</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;backup-count&gt;</SPAN>0<SPAN =
class=3D"tag">&lt;/backup-count&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;async-backup-count&gt;</SPAN>1<SPAN =
class=3D"tag">&lt;/async-backup-count&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;read-backup-data&gt;</SPAN>true<SPAN =
class=3D"tag">&lt;/read-backup-data&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In this example, you can see a person Map with a single asynchronous =
backup=20
and reading of backup data is enabled (the <CODE>read-backup-data</CODE>
 property defaults to false). Reading from the backup can improve =
performance a=20
bit; if you have a 10 node cluster and <CODE>read-backup-data</CODE> is =
false,=20
there is a 1 in 10 chance that the read will find the data locally. When =
there=20
is a single backup and <CODE>read-backup-data</CODE> is false, that adds =
another=20
1 in 10 chance that read will find the backup data locally. This totals =
to a 1=20
in 5 chance that the data is found locally.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"eviction">5.7. Eviction</H3>
<DIV class=3D"paragraph">
<P>By default, all the Map entries that are put in the Map will remain =
in that=20
Map. You can delete them manually, but you can also rely on an eviction =
policy=20
that deletes items automatically. This feature enables Hazelcast to be =
used as a=20
distributed cache since hot data is kept in memory and cold data is=20
evicted.</P></DIV>
<DIV class=3D"paragraph">
<P>The eviction configuration can be done using the following=20
parameters:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>max-size</CODE>: Maximum size of the map. When maximum size =
is=20
  reached, the Map is evicted based on the policy defined. The value is =
an=20
  integer between 0 and Integer.MAX VALUE. 0 means Integer.MAX_VALUE and =
the=20
  default is 0. A policy attribute (<CODE>eviction-policy</CODE> seen =
below)=20
  determines how the <CODE>max-size</CODE> will be interpreted.</P>
  <DIV class=3D"ulist">
  <UL>
    <LI>
    <P><CODE>PER_NODE</CODE>: Maximum number of map entries in the JVM. =
This is=20
    the default policy.</P></LI>
    <LI>
    <P><CODE>PER_PARTITION</CODE>: Maximum number of map entries within =
a single
     partition. This is probably not a policy you will use often, =
because the=20
    storage size depends on the number of partitions that a member is =
hosting.=20
    If the cluster is small, it will host more partitions and therefore =
more map=20
    entries than with a larger cluster.</P></LI>
    <LI>
    <P><CODE>USED_HEAP_SIZE</CODE>: Maximum used heap size in MB =
(mega-bytes)=20
    per JVM.</P></LI>
    <LI>
    <P><CODE>USED_HEAP_PERCENTAGE</CODE>: Maximum used heap size as a =
percentage=20
    of the JVM heap size. If the JVM is configured with 1000 MB and the=20
    <CODE>max-size</CODE> is 10, this policy allows the map to be 100 MB =
before
     map entries are evicted.</P></LI></UL></DIV></LI>
  <LI>
  <P><CODE>eviction-policy</CODE>: Policy for evicting map entries.</P>
  <DIV class=3D"ulist">
  <UL>
    <LI>
    <P><CODE>NONE</CODE>: No items will be evicted, so the =
<CODE>max-size</CODE>=20
    is ignored. This is the default policy. If you want =
<CODE>max-size</CODE> to=20
    work, then you need to set an <CODE>eviction-policy</CODE> other =
than NONE.=20
    Of course, you still can combine it with =
<CODE>time-to-live-seconds</CODE>=20
    and <CODE>max-idle-seconds</CODE>.</P></LI>
    <LI>
    <P><CODE>LRU</CODE>: Least Recently Used.</P></LI>
    <LI>
    <P><CODE>LFU</CODE>: Least Frequently Used.</P></LI></UL></DIV></LI>
  <LI>
  <P><CODE>time-to-live-seconds</CODE>: Maximum number of seconds for =
each entry=20
  to stay in the map. Entries that are older than=20
  <CODE>time-to-live-seconds</CODE> and are not updated for this =
duration will=20
  get automatically evicted from the map. The value can be any integer =
between 0=20
  and Integer.MAX_VALUE. 0 means infinite, and 0 is the =
default.</P></LI>
  <LI>
  <P><CODE>max-idle-seconds</CODE>: Maximum number of seconds for each =
entry to=20
  stay idle in the map. Entries that are idle (not touched) for more =
than=20
  <CODE>max-idle-seconds</CODE> will get automatically evicted from the =
map.=20
  Entry is touched if <CODE>get</CODE>, <CODE>put</CODE>, or=20
  <CODE>containsKey</CODE> method is called. The value can be any =
integer=20
  between 0 and Integer.MAX_VALUE. 0 means infinite, and 0 is the=20
  default.</P></LI>
  <LI>
  <P><CODE>eviction-percentage</CODE>: When the maximum size is reached, =
the=20
  specified percentage of the map will be evicted. The default value is =
25=20
  percent. If the value is set to a value that is too small, then only =
that=20
  small amount of map entries are evicted, which can lead to a lot of =
overhead=20
  if map entries are frequently inserted.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>Here is an example configuration.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">articles</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;max-size</SPAN> <SPAN =
class=3D"attribute-name">policy</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">PER_NODE</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>10000<SPAN =
class=3D"tag">&lt;/max-size&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;eviction-policy&gt;</SPAN>LRU<SPAN =
class=3D"tag">&lt;/eviction-policy&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;max-idle-seconds&gt;</SPAN>60<SPAN =
class=3D"tag">&lt;/max-idle-seconds&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This configures an articles map that will start to evict map entries =
from a=20
member, as soon as the map size within that member exceeds 10000. It =
will then=20
start to remove map entries that are least recently used. Also, when map =
entries=20
are not used for more than 60 seconds, they will be evicted as =
well.</P></DIV>
<DIV class=3D"paragraph">
<P>You can evict a key manually by calling the =
<CODE>IMap.evict(key)</CODE>=20
method. You might wonder what the difference is between this method and =
the=20
<CODE>IMap.delete(key)</CODE>. If no <CODE>MapStore</CODE> is defined, =
there is=20
no difference. If a <CODE>MapStore</CODE> is defined, an=20
<CODE>IMap.delete</CODE> will call a delete on the <CODE>MapStore</CODE> =
and=20
potentially delete the map entry from the database. However, the evict =
method=20
removes the map entry only from the map.</P></DIV>
<DIV class=3D"paragraph">
<P><CODE>MapStore.delete(Object key)</CODE> is not called when a=20
<CODE>MapStore</CODE> is used and a map entry is evicted. So if the=20
<CODE>MapStore</CODE> is connected to a database, no record entries are =
removed=20
due to map entries being evicted.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"near-cache">5.8. Near Cache</H3>
<DIV class=3D"paragraph">
<P>All the map entries within a given partition are owned by a single =
member. If=20
a map entry is read, the member that owns the partition of the key is =
asked to=20
read the value. But in some cases, data needs to be read very frequently =
by=20
members that don=E2=80=99t own the key and therefore most requests will =
require=20
remoting. This reduces performance and scalability. Normally, it is best =
to=20
partition the data, so that all relevant data is stored in the same =
partition=20
and you just send the operation to the machine owning the partition. But =
this is=20
not always an option.</P></DIV>
<DIV class=3D"paragraph">
<P>Luckily, Hazelcast has a feature called the <STRONG>near =
cache</STRONG>. Near=20
cache makes map entries locally available by adding a local cache =
attached to=20
the map. Imagine a web shop where articles can be ordered and where =
these
 articles are stored in a Hazelcast map. To enable local caching of =
frequently=20
used articles, the near cache is configured like this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">articles</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;near-cache</SPAN><SPAN =
class=3D"tag">/&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>You can configure the following properties on the near =
cache:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>max-size</CODE>: Maximum number of cache entries per local =
cache. As
   soon as the maximum size has been reached, the cache will start to =
evict
   entries based on the eviction policy. <CODE>max-size</CODE> should be =
between=20
  0 and Integer.MAX_SIZE, where 0 will be interpreted as =
Integer.MAX_SIZE. The
   default is Integer.MAX_SIZE, but it is better to either explicitly =
configure=20
  <CODE>max-size</CODE> in combination with an =
<CODE>eviction-policy</CODE>, or=20
  set <CODE>time-to-live-seconds</CODE>/<CODE>max-idle-seconds</CODE> to =
prevent=20
  OutOfMemoryErrors. The <CODE>max-size</CODE> of the near cache is =
independent=20
  of that of the map itself.</P></LI>
  <LI>
  <P><CODE>eviction-policy</CODE>: Policy used to evict members from the =
cache
   when the near cache is full. The following options are available:</P>
  <DIV class=3D"ulist">
  <UL>
    <LI>
    <P><CODE>NONE</CODE>: No items will be evicted, so the =
<CODE>max-size</CODE>=20
    is ignored. If you want <CODE>max-size</CODE> to work, you need to =
set an=20
    <CODE>eviction-policy</CODE> other than NONE. You can combine NONE =
with=20
    <CODE>time-to-live-seconds</CODE> and=20
<CODE>max-idle-seconds</CODE>.</P></LI>
    <LI>
    <P><CODE>LRU</CODE>: Least Recently Used. This is the default=20
    policy.</P></LI>
    <LI>
    <P><CODE>LFU</CODE>: Least Frequently Used.</P></LI></UL></DIV></LI>
  <LI>
  <P><CODE>time-to-live-seconds:</CODE> Number of seconds a map entry is =
allowed
   to remain in the cache. Valid values are 0 to Integer.MAX_SIZE, and 0 =
will be=20
  interpreted as infinite. The default is 0.</P></LI>
  <LI>
  <P><CODE>max-idle-seconds</CODE>: Maximum number of seconds a map =
entry is
   allowed to stay in the cache without being read.=20
  <CODE>max-idle-seconds</CODE> should be between 0 and =
Integer.MAX_SIZE, where=20
  0 will be interpreted as Integer.MAX_SIZE. The default is 0.</P></LI>
  <LI>
  <P><CODE>invalidate-on-change</CODE>: If true, all the members listen =
for=20
  change in their cached entries and evict the entry when it is updated =
or=20
  deleted. Valid values are true/false and the default is true.</P></LI>
  <LI>
  <P><CODE>in-memory-format</CODE>: In-memory format of the cache. =
Defaults to=20
  <CODE>BINARY</CODE>. For more information, see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#inmemoryformat">InMemor=
yFormat</A>.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>Here is an example configuration.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">articles</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;near-cache</SPAN><SPAN =
class=3D"tag">/&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;max-size&gt;</SPAN>10000<SPAN =
class=3D"tag">&lt;/max-size&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;eviction-policy&gt;</SPAN>LRU<SPAN =
class=3D"tag">&lt;/eviction-policy&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;max-idle-seconds&gt;</SPAN>60<SPAN =
class=3D"tag">&lt;/max-idle-seconds&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;/near-cache&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This configures an articles map with a <CODE>near-cache</CODE>. It =
will evict=20
near-cache entries from a member as soon as the <CODE>near-cache</CODE> =
size
 within that member exceeds 10000. It will then remove =
<CODE>near-cache</CODE>=20
entries that are least recently used. When near cache entries are not =
used for=20
more than 60 seconds, they will be evicted as well.</P></DIV>
<DIV class=3D"paragraph">
<P>The previous <A=20
href=3D"http://hazelcast.org/mastering-hazelcast/#eviction">Eviction</A> =
section=20
discussed evicting items from the map, but it is important to understand =
that=20
near cache and map eviction are two different things. The near cache is =
a local=20
map that contains frequently accessed map entries from any member, while =
the=20
local map will only contain map entries it owns. You can even combine =
the=20
eviction and the near cache, although their settings are =
independent.</P></DIV>
<DIV class=3D"paragraph">
<P>Some things worth considering when using a near cache:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>It increases memory usage since the near cache items need to be =
stored in=20
  the memory of the member.</P></LI>
  <LI>
  <P>It reduces consistency, especially when =
<CODE>invalidate-on-change</CODE>=20
  is false: it could be that a cache entry is never refreshed.</P></LI>
  <LI>
  <P>It is best used for read only data, especially when=20
  <CODE>invalidate-on-change</CODE> is enabled. There is a lot of =
remoting=20
  involved to invalidate the cache entry when a map entry is =
updated.</P></LI>
  <LI>
  <P>It can also be enabled on the client. See <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#hazelcast-clients">Haze=
lcast=20
  Clients</A>.</P></LI>
  <LI>
  <P>There is no functionality currently available to heat up the=20
cache.</P></LI></UL></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"concurrency-control">5.9. Concurrency Control</H3>
<DIV class=3D"paragraph">
<P>The Hazelcast map itself is thread-safe, just like the=20
<CODE>ConcurrentHashMap</CODE> or the =
<CODE>Collections.synchronizedMap</CODE>.=20
In some cases, your thread safety requirements are bigger than what =
Hazelcast=20
provides out of the box. Luckily, Hazelcast provides multiple =
concurrency=20
control solutions; it can either be pessimistic using locks, or =
optimistic using=20
compare and swap operations. You can also use the =
<CODE>executeOnKey</CODE> API,=20
such as the <CODE>IMap.executeOnKey</CODE> method. Instead of dealing =
with=20
pessimistic locking, such as <CODE>IMap.lock(key)</CODE>, or dealing =
with=20
optimistic locking, such as <CODE>IMap.replace(key, oldvalue, =
newvalue)</CODE>,
 the <CODE>executeOnKey</CODE> takes care of concurrency control for you =
with=20
very low overhead.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">RacyUpdateMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
        HazelcastInstance hzInstance =3D =
Hazelcast.newHazelcastInstance();=0A=
        IMap&lt;<SPAN class=3D"predefined-type">String</SPAN>, Value&gt; =
map =3D hzInstance.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">map</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">String</SPAN> key =3D <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">1</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>;=0A=
        map.put(key, <SPAN class=3D"keyword">new</SPAN> Value());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Starting</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
<SPAN class=3D"integer">1000</SPAN>; k++) {=0A=
            <SPAN class=3D"keyword">if</SPAN>(k%<SPAN =
class=3D"integer">100</SPAN> =3D=3D <SPAN class=3D"integer">0</SPAN>) =
<SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">At: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+k);=0A=
            Value value =3D map.get(key);=0A=
            <SPAN class=3D"predefined-type">Thread</SPAN>.sleep(<SPAN =
class=3D"integer">10</SPAN>);=0A=
            value.field++;=0A=
            map.put(key, value);=0A=
        }=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Finished! Result =3D </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + map.get(key).field);=0A=
    }=0A=
=0A=
    <SPAN class=3D"directive">static</SPAN> <SPAN =
class=3D"type">class</SPAN> <SPAN class=3D"class">Value</SPAN> <SPAN =
class=3D"directive">implements</SPAN> <SPAN =
class=3D"predefined-type">Serializable</SPAN> {=0A=
        <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> field;=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"pessimistic-locking">5.9.1. Pessimistic Locking</H4>
<DIV class=3D"paragraph">
<P>The classic way to solve the race problem is to use a lock. In =
Hazelcast
 there are various ways to lock, but for this example we=E2=80=99ll use =
the locking=20
functionality provided by the map: the <CODE>map.lock</CODE> and=20
<CODE>map.unlock</CODE> methods.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">PessimisticUpdateMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
        HazelcastInstance hzInstance =3D =
Hazelcast.newHazelcastInstance();=0A=
        IMap&lt;<SPAN class=3D"predefined-type">String</SPAN>, Value&gt; =
map =3D hzInstance.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">map</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">String</SPAN> key =3D <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">1</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>;=0A=
        map.put(key, <SPAN class=3D"keyword">new</SPAN> Value());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Starting</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
<SPAN class=3D"integer">1000</SPAN>; k++) {=0A=
            map.lock(key);=0A=
            <SPAN class=3D"keyword">try</SPAN> {=0A=
                Value value =3D map.get(key);=0A=
                <SPAN =
class=3D"predefined-type">Thread</SPAN>.sleep(<SPAN =
class=3D"integer">10</SPAN>);=0A=
                value.field++;=0A=
                map.put(key, value);=0A=
            } <SPAN class=3D"keyword">finally</SPAN> {=0A=
                map.unlock(key);=0A=
            }=0A=
        }=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Finished! Result =3D </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + map.get(key).field);=0A=
    }=0A=
=0A=
    <SPAN class=3D"directive">static</SPAN> <SPAN =
class=3D"type">class</SPAN> <SPAN class=3D"class">Value</SPAN> <SPAN =
class=3D"directive">implements</SPAN> <SPAN =
class=3D"predefined-type">Serializable</SPAN> {=0A=
        <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> field;=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Another way to lock is to acquire some predictable Lock object from=20
Hazelcast. You could give every value its own lock, but you could also =
create a=20
stripe of locks. Although it can potentially increase contention, it =
will reduce=20
space.</P></DIV>
<DIV class=3D"sect4">
<H5 id=3D"good-to-know-1">Good to know</H5>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>When the record is deleted, the lock associated to that record is =
deleted=20
  as well.</P></LI>
  <LI>
  <P>When a map is deleted, all the locks associated to the records are
   deleted.</P></LI>
  <LI>
  <P>A map lock doesn=E2=80=99t support fairness, just like the regular=20
  <CODE>ILock</CODE>.</P></LI>
  <LI>
  <P>The map lock is reentrant.</P></LI>
  <LI>
  <P>Although it has the same infrastructure as an <CODE>ILock</CODE>, a =
map=20
  lock can=E2=80=99t be explicitly retrieved using=20
  <CODE>HazelcastInstance.getLock</CODE>.</P></LI>
  <LI>
  <P>You can lock a map entry of a non-existing key.</P></LI>
  <LI>
  <P>When you unlock the map entry of a non-existing key, the map entry =
will=20
  automatically be deleted.</P></LI></UL></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"optimistic-locking">5.9.2. Optimistic Locking</H4>
<DIV class=3D"paragraph">
<P>It is important to implement object equals on the value, because that =
is used
 to determine if two objects are equal. With the =
<CODE>ConcurrentHashMap</CODE>,=20
it is based on object reference. On the keys, the byte array equals is =
used, but=20
on the <CODE>replace(key,oldValue,newValue)</CODE> the object equals is =
used. If=20
you fail to use the correct equals, your code will not work!</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">OptimisticMember</SPAN> {     <I class=3D"conum" =
data-value=3D"1"></I><B>(1)</B>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
        HazelcastInstance hzInstance =3D =
Hazelcast.newHazelcastInstance();=0A=
        IMap&lt;<SPAN class=3D"predefined-type">String</SPAN>, Value&gt; =
map =3D hzInstance.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">map</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">String</SPAN> key =3D <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">1</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>;=0A=
        map.put(key, <SPAN class=3D"keyword">new</SPAN> Value());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Starting</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
<SPAN class=3D"integer">1000</SPAN>; k++) {=0A=
            <SPAN class=3D"keyword">if</SPAN>(k%<SPAN =
class=3D"integer">10</SPAN>=3D=3D<SPAN class=3D"integer">0</SPAN>) <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">At: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+k);=0A=
            <SPAN class=3D"keyword">for</SPAN> (; ; ) {=0A=
                Value oldValue =3D map.get(key);=0A=
                Value newValue =3D <SPAN class=3D"keyword">new</SPAN> =
Value(oldValue);=0A=
                <SPAN class=3D"comment">//   Thread.sleep(10);</SPAN>=0A=
                newValue.field++;=0A=
                <SPAN class=3D"keyword">if</SPAN>(map.replace(key, =
oldValue, newValue))=0A=
                    <SPAN class=3D"keyword">break</SPAN>;=0A=
            }=0A=
        }=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Finished! Result =3D </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + map.get(key).field);=0A=
    }=0A=
    <SPAN class=3D"directive">static</SPAN> <SPAN =
class=3D"type">class</SPAN> <SPAN class=3D"class">Value</SPAN> <SPAN =
class=3D"directive">implements</SPAN> <SPAN =
class=3D"predefined-type">Serializable</SPAN> {=0A=
        <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> field;=0A=
        <SPAN class=3D"directive">public</SPAN> Value(){}=0A=
        <SPAN class=3D"directive">public</SPAN> Value(Value that) {=0A=
            <SPAN class=3D"local-variable">this</SPAN>.field =3D =
that.field;=0A=
        }=0A=
        <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">boolean</SPAN> equals(<SPAN =
class=3D"predefined-type">Object</SPAN> o){=0A=
            <SPAN class=3D"keyword">if</SPAN>(o =3D=3D <SPAN =
class=3D"local-variable">this</SPAN>)<SPAN =
class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-constant">true</SPAN>;=0A=
            <SPAN class=3D"keyword">if</SPAN>(!(o <SPAN =
class=3D"keyword">instanceof</SPAN> Value))<SPAN =
class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-constant">false</SPAN>;=0A=
            Value that  =3D (Value)o;=0A=
            <SPAN class=3D"keyword">return</SPAN> that.field =3D=3D =
<SPAN class=3D"local-variable">this</SPAN>.field;=0A=
        }=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This code is broken on purpose. The problem can be solved by adding a =

<CODE>version</CODE> field; although all the other fields will be equal, =
the=20
<CODE>version</CODE> field will prevent objects from being seen as=20
equal.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"entryprocessor">5.10. EntryProcessor</H3>
<DIV class=3D"paragraph">
<P>One of the new features of Hazelcast 3 is the =
<CODE>EntryProcessor</CODE>. It=20
allows to send a function, the <CODE>EntryProcessor</CODE>, to a =
particular key=20
or to all keys in an <CODE>IMap</CODE>. Once the =
<CODE>EntryProcessor</CODE> is=20
completed, it is discarded, so it is not a durable mechanism like the=20
<CODE>EntryListener</CODE> or the <CODE>MapInterceptor</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>Imagine that you have a map of employees, and you want to give every =
employee=20
a bonus. In the example below, you see a very naive implementation of =
this=20
functionality:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Employee</SPAN> <SPAN =
class=3D"directive">implements</SPAN> <SPAN =
class=3D"predefined-type">Serializable</SPAN> {=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"type">int</SPAN> salary;=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> Employee(<SPAN =
class=3D"type">int</SPAN> salary) {=0A=
        <SPAN class=3D"local-variable">this</SPAN>.salary =3D salary;=0A=
    }=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getSalary() {=0A=
        <SPAN class=3D"keyword">return</SPAN> salary;=0A=
    }=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> incSalary(<SPAN class=3D"type">int</SPAN> =
delta){=0A=
        salary+=3Ddelta;=0A=
    }=0A=
}=0A=
=0A=
<SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">class</SPAN> <SPAN =
class=3D"class">NaiveProcessingMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        IMap&lt;<SPAN =
class=3D"predefined-type">String</SPAN>,Employee&gt; employees =3D =
hz.getMap(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">employees</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        employees.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">John</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"keyword">new</SPAN> =
Employee(<SPAN class=3D"integer">1000</SPAN>));=0A=
        employees.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Mark</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"keyword">new</SPAN> =
Employee(<SPAN class=3D"integer">1000</SPAN>));=0A=
        employees.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Spencer</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"keyword">new</SPAN> =
Employee(<SPAN class=3D"integer">1000</SPAN>));=0A=
=0A=
        <SPAN class=3D"keyword">for</SPAN>(<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry&lt;<SPAN =
class=3D"predefined-type">String</SPAN>,Employee&gt; entry: =
employees.entrySet()){=0A=
            <SPAN class=3D"predefined-type">String</SPAN> id =3D =
entry.getKey();=0A=
            Employee employee =3D employees.get(id);=0A=
            employee.incSalary(<SPAN class=3D"integer">10</SPAN>);=0A=
            employees.put(entry.getKey(),employee);=0A=
        }=0A=
=0A=
        <SPAN class=3D"keyword">for</SPAN>(<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry&lt;<SPAN =
class=3D"predefined-type">String</SPAN>,Employee&gt; entry: =
employees.entrySet()){=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(entry.getKey()+=0A=
                <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content"> salary: =
</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+entry.getValue().getSalary());=0A=
        }=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The first reason this example is naive is that this functionality =
isn=E2=80=99t very=20
scalable; a single machine will need to pull all the employees to =
itself,=20
transform it, and write it back. If your number of employees doubles, it =
will=20
probably take twice as much time. Another problem is that the current=20
implementation is subject to race problems; imagine that a different =
process=20
currently gives an employee a raise of 10. The read and write of the =
employee is=20
not atomic since there is no lock, so it could be that one of the raises =
is
 overwritten and the employee only gets a single raise instead of a =
double=20
raise.</P></DIV>
<DIV class=3D"paragraph">
<P>That is why the <CODE>EntryProcessor</CODE> was added to Hazelcast. =
The=20
<CODE>EntryProcessor</CODE> captures the logic that should be executed =
on a map=20
entry. Hazelcast will send the <CODE>EntryProcessor</CODE> to each =
member in the
 cluster, and then each member will, in parallel, apply the=20
<CODE>EntryProcessor</CODE> to all map entries. This means that the=20
<CODE>EntryProcessor</CODE> is scalable; the more machines you add, the =
faster=20
the processing will be completed. Another important feature of the=20
<CODE>EntryProcessor</CODE> is that it will deal with race problems by =
acquiring=20
exclusive access to the map entry when it is processing.</P></DIV>
<DIV class=3D"paragraph">
<P>In the following example, the raise functionality is implemented =
using a=20
<CODE>EntryProcessor</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">EntryProcessorMember</SPAN>{=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        IMap&lt;<SPAN =
class=3D"predefined-type">String</SPAN>,Employee&gt; employees =3D =
hz.getMap(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">employees</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        employees.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">John</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"keyword">new</SPAN> =
Employee(<SPAN class=3D"integer">1000</SPAN>));=0A=
        employees.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Mark</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"keyword">new</SPAN> =
Employee(<SPAN class=3D"integer">1000</SPAN>));=0A=
        employees.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Spencer</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"keyword">new</SPAN> =
Employee(<SPAN class=3D"integer">1000</SPAN>));=0A=
=0A=
        employees.executeOnEntries(<SPAN class=3D"keyword">new</SPAN> =
EmployeeRaiseEntryProcessor());=0A=
=0A=
        <SPAN class=3D"keyword">for</SPAN>(<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry&lt;<SPAN =
class=3D"predefined-type">String</SPAN>,Employee&gt; entry: =
employees.entrySet()){=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(entry.getKey()+=0A=
                <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content"> salary: =
</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+entry.getValue().getSalary());=0A=
        }=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
=0A=
    <SPAN class=3D"directive">static</SPAN> <SPAN =
class=3D"type">class</SPAN> <SPAN =
class=3D"class">EmployeeRaiseEntryProcessor</SPAN>=0A=
            <SPAN class=3D"directive">extends</SPAN> =
AbstractEntryProcessor&lt;<SPAN class=3D"predefined-type">String</SPAN>, =
Employee&gt; {=0A=
=0A=
        <SPAN class=3D"annotation">@Override</SPAN>=0A=
        <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Object</SPAN> process(<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry&lt; <SPAN =
class=3D"predefined-type">String</SPAN>, Employee&gt; entry) {=0A=
            Employee employee =3D entry.getValue();=0A=
            employee.incSalary(<SPAN class=3D"integer">10</SPAN>);=0A=
            entry.setValue(employee);=0A=
            <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-constant">null</SPAN>;=0A=
        }=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If we run this program, we=E2=80=99ll get the following =
output:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Mark salary: 1010=0A=
John salary: 1010=0A=
Spencer salary: 1010</PRE></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"process-return-value">5.10.1. Process Return Value</H4>
<DIV class=3D"paragraph">
<P>In the example, the process method modifies the <CODE>employee</CODE> =

instance and returns null. The <CODE>EntryProcessor</CODE> can also =
return a=20
value for every map entry. If we wanted to calculate the sum of all =
salaries,=20
the following <CODE>EntryProcessor</CODE> will return the salary of an=20
<CODE>employee</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">GetSalaryEntryProcessor</SPAN>=0A=
        <SPAN class=3D"directive">extends</SPAN> =
AbstractEntryProcessor&lt;<SPAN class=3D"predefined-type">String</SPAN>, =
Employee&gt; {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> GetSalaryEntryProcessor(){=0A=
           <SPAN class=3D"local-variable">super</SPAN>(<SPAN =
class=3D"predefined-constant">false</SPAN>);=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Object</SPAN> process(<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry&lt; <SPAN =
class=3D"predefined-type">String</SPAN>, Employee&gt; entry) {=0A=
        <SPAN class=3D"keyword">return</SPAN> =
entry.getValue().getSalary();=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>And it can be used like this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>,<SPAN =
class=3D"predefined-type">Object</SPAN>&gt; salaries =3D =
employees.executeOnEntries(=0A=
    <SPAN class=3D"keyword">new</SPAN> GetSalaryEntryProcessor());=0A=
<SPAN class=3D"type">int</SPAN> total=3D<SPAN class=3D"integer">0</SPAN>;=0A=
<SPAN class=3D"keyword">for</SPAN>(<SPAN =
class=3D"predefined-type">Object</SPAN> salary : salaries.values()){=0A=
    total+=3D(<SPAN class=3D"predefined-type">Integer</SPAN>)salary;=0A=
}=0A=
<SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Total salary of all employees:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+x);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>You need to be careful using this technique since the =
<CODE>salaries</CODE>=20
map will be kept in memory and this can lead to an=20
<CODE>OutOfMemoryError</CODE>. If you don=E2=80=99t care about a =
returned map, it is=20
best to let the process method return null. This will prevent the result =
for a
 single process invocation to be stored in the map.</P></DIV>
<DIV class=3D"paragraph">
<P>If you are wondering why the <CODE>GetSalaryEntryProcessor</CODE> =
constructor=20
calls the super with false, check the next section.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"backup-processor">5.10.2. Backup Processor</H4>
<DIV class=3D"paragraph">
<P>When the <CODE>EntryProcessor</CODE> is applied on a map, it will not =
only=20
process all primary map entries, it will also process all backups. This =
is
 needed to prevent the primary map entries from containing different =
data than=20
the backups. In the current examples, we made use of the=20
<CODE>AbstractEntryProcessor</CODE> class instead of the=20
<CODE>EntryProcessor</CODE> interface, which applies the same logic to =
primary=20
and backups. But if you want, you can apply different logic on the =
primary than=20
on the backup.</P></DIV>
<DIV class=3D"paragraph">
<P>This can be useful if the value doesn=E2=80=99t need to be changed, =
but you want to=20
do a certain action, such as log or retrieve information. The previous =
example,=20
where the total salary of all employees is calculated, is such a =
situation. That=20
is why the <CODE>GetSalaryEntryProcessor</CODE> constructor calls the =
super with=20
false; this signals the <CODE>AbstractEntryProcessor</CODE> not to apply =
any=20
logic to the backup, only to the primary. To fully understand how=20
<CODE>EntryProcessor</CODE> works, let=E2=80=99s have a look at the =
implementation of=20
the <CODE>AbstractEntryProcessor</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">abstract</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">AbstractEntryProcessor</SPAN>&lt;K, V&gt;=0A=
        <SPAN class=3D"directive">implements</SPAN> EntryProcessor&lt;K, =
V&gt; {=0A=
=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">final</SPAN> EntryBackupProcessor&lt;K,V&gt; =
entryBackupProcessor;=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> AbstractEntryProcessor(){=0A=
        <SPAN class=3D"local-variable">this</SPAN>(<SPAN =
class=3D"predefined-constant">true</SPAN>);=0A=
    }=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> AbstractEntryProcessor(<SPAN =
class=3D"type">boolean</SPAN> applyOnBackup){=0A=
       <SPAN class=3D"keyword">if</SPAN>(applyOnBackup){=0A=
          entryBackupProcessor =3D <SPAN class=3D"keyword">new</SPAN> =
EntryBackupProcessorImpl();=0A=
       }<SPAN class=3D"keyword">else</SPAN>{=0A=
          entryBackupProcessor =3D <SPAN =
class=3D"predefined-constant">null</SPAN>;=0A=
       }=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">abstract</SPAN> <SPAN =
class=3D"predefined-type">Object</SPAN> process(<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry&lt;K, V&gt; entry);=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">final</SPAN> EntryBackupProcessor&lt;K, V&gt; =
getBackupProcessor() {=0A=
         <SPAN class=3D"keyword">return</SPAN> entryBackupProcessor;=0A=
    }=0A=
=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"type">class</SPAN> <SPAN =
class=3D"class">EntryBackupProcessorImpl</SPAN>=0A=
            <SPAN class=3D"directive">implements</SPAN> =
EntryBackupProcessor&lt;K,V&gt;{=0A=
=0A=
        <SPAN class=3D"annotation">@Override</SPAN>=0A=
        <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> processBackup(<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry&lt;K, V&gt; entry) {=0A=
            process(entry);=0A=
        }=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The important method here is the <CODE>getBackupProcessor</CODE>. If =
we don=E2=80=99t=20
want to apply any logic in the backups, we can return <CODE>null</CODE>. =
This=20
signals to Hazelcast that only the primary map entries need to be =
processed. If=20
we want to apply logic on the backups, we need to return an=20
<CODE>EntryBackupProcessor</CODE> instance. In this case the=20
<CODE>EntryBackupProcessor.processBackup</CODE> method will make use of =
the=20
process method, but if you provide a custom <CODE>EntryProcessor</CODE>=20
implementation, you have complete freedom on how it should be=20
implemented.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"threading">5.10.3. Threading</H4>
<DIV class=3D"paragraph">
<P>To understand how the <CODE>EntryProcessor</CODE> works, you need to=20
understand how the threading works. Hazelcast will only allow a single =
thread=20
=E2=80=94the partition thread=E2=80=94 to be active in a partition. This =
means that by design it=20
isn=E2=80=99t possible that operations like <CODE>IMap.put</CODE> are =
interleaved with
 other map operations, or with system operations like migration of a =
partition.=20
The <CODE>EntryProcessor</CODE> will also be executed on the partition =
thread;=20
therefore, while the <CODE>EntryProcessor</CODE> is running, no other =
operations=20
on that map entry can happen.</P></DIV>
<DIV class=3D"paragraph">
<P>It is important to understand that an <CODE>EntryProcessor</CODE> =
should run=20
quickly because it is running on the partition thread. This means that =
other
 operations on the same partition will be blocked, and that other =
operations
 that use a different partition but are mapped to the same operation =
thread will=20
also be blocked. Also, system operations such as partition migration =
will be=20
blocked by a long running <CODE>EntryProcessor</CODE>. The same applies =
when an=20
<CODE>EntryProcessor</CODE> is executed on a large number of entries; =
all=20
entries are executed in a single run and will not be interleaved with =
other
 operations.</P></DIV>
<DIV class=3D"paragraph">
<P>You need to take care to store mutable states in your=20
<CODE>EntryProcessor</CODE>. For example, if a member contains partition =
1 and 2=20
and they are mapped to partition threads 1 and 2, and if you are =
executing the=20
entry processor on map entries in partition 1 and 2, then the same=20
<CODE>EntryProcessor</CODE> will be used by different threads in =
parallel. It=20
isn=E2=80=99t a problem when you use <CODE>IMap.executeOnKey</CODE>, but =
it can be a=20
problem with the other <CODE>IMap.execute</CODE> =
methods.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"good-to-know-2">5.10.4. Good to know</H4>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>InMemoryFormat:</EM> If you are often using the=20
<CODE>EntryProcessor</CODE> or queries, it might be a good idea to use =
the=20
<CODE>InMemoryFormat.OBJECT</CODE>. The <CODE>OBJECT</CODE> in-memory =
format in=20
Hazelcast will not serialize/deserialize the entry, so you are able to =
apply the=20
<CODE>EntryProcessor</CODE> without serialization cost. The value =
instance that=20
is stored is passed to the <CODE>EntryProcessor</CODE>, and that =
instance will=20
also be stored in the map entry (unless you create a new instance). For =
more=20
information, see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#inmemoryformat">InMemor=
yFormat</A>.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Process single key:</EM> If you want to execute the=20
<CODE>EntryProcessor</CODE> on a single key, you can use the=20
<CODE>IMap.executeOnKey</CODE> method. You could do the same with an=20
<CODE>IExecutorService.executeOnKeyOwner</CODE>, but you would need to =
lock and=20
potentially deal with more serialization.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Not Threadsafe:</EM> If state is stored in the=20
<CODE>EntryProcessor</CODE> between process invocations, you need to =
understand=20
that this state can be touched by different threads. This is because the =
same=20
<CODE>EntryProcessor</CODE> instance can be used between different =
partitions=20
that run on different threads. One potential solution is to put the =
state in a=20
thread local.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Process using predicate:</EM> <EM>Deletion:</EM> You can delete =
items=20
with the <CODE>EntryProcessor</CODE> by setting the map entry value to =
null. In=20
the following example, you can see that all bad employees are being =
deleted
 using this approach:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"type">class</SPAN> <SPAN =
class=3D"class">DeleteBadEmployeeEntryProcessor</SPAN>=0A=
           <SPAN class=3D"directive">extends</SPAN> =
AbstractEntryProcessor&lt;<SPAN class=3D"predefined-type">String</SPAN>, =
Employee&gt; {=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Object</SPAN> process(<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry&lt; <SPAN =
class=3D"predefined-type">String</SPAN>, Employee&gt; entry) {=0A=
        <SPAN class=3D"keyword">if</SPAN>(entry.getValue().isBad()){=0A=
            entry.setValue(<SPAN =
class=3D"predefined-constant">null</SPAN>);=0A=
        }=0A=
        <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-constant">null</SPAN>;=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P><EM>HazelcastInstanceAware:</EM> Because the =
<CODE>EntryProcessor</CODE>=20
needs to be serialized to be sent to another machine, you can=E2=80=99t =
pass it complex
 dependencies like the <CODE>HazelcastInstance</CODE>. When the=20
<CODE>HazelcastInstanceAware</CODE> interface is implemented, the =
dependencies=20
can be injected. For more information, see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#hazelcastinstanceaware"=
>Serialization:=20
HazelcastInstanceAware</A>.</P></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"Maplistener">5.11. MapListener</H3>
<DIV class=3D"paragraph">
<P>Using one of the <CODE>MapListener</CODE> sub-interfaces you can =
listen for=20
map entry events providing a predicate, and so the events will be fired =
for each=20
entry validated by your query. Rather than have one large interface to =
handle=20
all callback types you can just implement specific interfaces for the =
callback=20
you are interested in.</P></DIV>
<DIV class=3D"paragraph">
<P>For example, if you just wish to intercept events for =
<CODE>IMap.put</CODE>=20
you could create a listener that implements=20
<CODE>EntryAddedListener&lt;K,V&gt;</CODE> and=20
<CODE>EntryUpdatedListener&lt;K,V&gt;</CODE></P></DIV>
<DIV class=3D"paragraph">
<P><CODE>IMap</CODE> has a single method for applying a listener,=20
<CODE>IMap.addEntryListener</CODE>. If registering the callback inside =
cluster=20
members this will cause it to fire on every member for any event. If you =
wish a=20
callback to fire only when the event is local to that member you should =
register=20
using <CODE>IMap.addLocalEntryListener</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">ListeningMember</SPAN> {=0A=
=0A=
  <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> main( =
<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args ) {=0A=
    HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
    IMap&lt;<SPAN class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; map =3D hz.getMap( <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">somemap</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> );=0A=
    map.addEntryListener( <SPAN class=3D"keyword">new</SPAN> =
MyEntryListener(), <SPAN class=3D"predefined-constant">true</SPAN> );=0A=
    <SPAN class=3D"predefined-type">System</SPAN>.out.println( <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">EntryListener registered</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> );=0A=
  }=0A=
=0A=
  <SPAN class=3D"directive">static</SPAN> <SPAN =
class=3D"type">class</SPAN> <SPAN class=3D"class">MyEntryListener</SPAN> =
<SPAN class=3D"directive">implements</SPAN> EntryAddedListener&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt;,=0A=
                                          EntryRemovedListener&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt;,=0A=
                                          EntryUpdatedListener&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; {=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> entryAdded( EntryEvent&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; event ) {=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println( <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">entryAdded:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + event );=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> entryRemoved( EntryEvent&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; event ) {=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println( <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">entryRemoved:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + event );=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> entryUpdated( EntryEvent&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; event ) {=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println( <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">entryUpdated:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + event );=0A=
    }=0A=
  }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">ModifyMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        IMap&lt;<SPAN class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; map =3D hz.getMap(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">somemap</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">String</SPAN> key =3D <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + <SPAN =
class=3D"predefined-type">System</SPAN>.nanoTime();=0A=
        <SPAN class=3D"predefined-type">String</SPAN> value =3D <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">1</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>;=0A=
        map.put(key, value);=0A=
        map.put(key, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">2</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        map.delete(key);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When you start the <CODE>ListeningMember</CODE> and then start the=20
<CODE>ModifyMember</CODE>, the <CODE>ListeningMember</CODE> will output=20
something like this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>entryAdded:EntryEvent {Address[192.168.1.100]:5702} =
key=3D251359212222282,=0A=
oldValue=3Dnull, value=3D1, event=3DADDED, by Member [192.168.1.100]:5702=0A=
entryUpdated:EntryEvent {Address[192.168.1.100]:5702} =
key=3D251359212222282,=0A=
oldValue=3D1, value=3D2, event=3DUPDATED, by Member [192.168.1.100]:5702=0A=
entryRemoved:EntryEvent {Address[192.168.1.100]:5702} =
key=3D251359212222282,=0A=
oldValue=3D2, value=3D2, event=3DREMOVED, by Member =
[192.168.1.100]:5702</PRE></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"threading-1">5.11.1. Threading</H4>
<DIV class=3D"paragraph">
<P>To correctly use the <CODE>MapListener</CODE>, you must understand =
the=20
threading model. Unlike the <CODE>EntryProcessor</CODE>, the=20
<CODE>MapListener</CODE> doesn=E2=80=99t run on the partition threads. =
It runs on an=20
event thread, the same threads that are used by other collection =
listeners and=20
by <CODE>ITopic</CODE> message listeners. The <CODE>MapListener</CODE> =
is=20
allowed to access other partitions. Just like other logic that runs on =
an event=20
thread, you need to watch out for long running tasks because it could =
lead to
 starvation of other event listeners since they don=E2=80=99t get a =
thread. But it can=20
also lead to OOME because of events being queued quicker than they are =
being=20
processed.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"good-to-know-3">5.11.2. Good to know</H4>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>No events:</EM> When no EntryListeners are registered, no events =
will be
 sent, so you will not pay the price for something you don=E2=80=99t =
use.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>HazelcastInstanceAware:</EM> When an <CODE>EntryListener</CODE> =
is sent=20
to a different machine, it will be serialized and then deserialized. =
This can be
 problematic if you need to access dependencies which can=E2=80=99t be =
serialized. To=20
deal with this problem, if the <CODE>EntryListener</CODE> implements=20
<CODE>HazelcastInstanceAware</CODE>, you can inject the=20
<CODE>HazelcastInstance</CODE>. For more information see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#hazelcastinstanceaware"=
>Serialization:=20
HazelcastInstanceAware</A>.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>EntryListener:</EM> Prior to 3.5 Hazelcast had one interface for =
all Map=20
Event callbacks, called the <CODE>EntryListener</CODE>. =20
<CODE>EntryListener</CODE> has been retained for backward compatibility, =
for new=20
code please use the <CODE>MapListener</CODE> sub=20
interfaces.</P></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"continuous-query">5.12. Continuous Query</H3>
<DIV class=3D"paragraph">
<P>In the previous section, we talked about the =
<CODE>MapListener</CODE>, which=20
can be used to listen to changes in a map. One of the new additions to =
Hazelcast=20
3 is the Continuous Predicate: a <CODE>MapListener</CODE> that is =
registered=20
using a predicate. This makes it possible to listen to the changes made =
to=20
specific map entries.</P></DIV>
<DIV class=3D"paragraph">
<P>To demonstrate the continuous query, we are going to listen to the =
changes=20
made to a person with a specific name. So let=E2=80=99s create the =
<CODE>Person</CODE>
 class first:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Person</SPAN> <SPAN =
class=3D"directive">implements</SPAN> <SPAN =
class=3D"predefined-type">Serializable</SPAN>{=0A=
=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> name;=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> Person(<SPAN =
class=3D"predefined-type">String</SPAN> name) {=0A=
        <SPAN class=3D"local-variable">this</SPAN>.name =3D name;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> toString() {=0A=
        <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Person{</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> +=0A=
                <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">name=3D'</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + name + <SPAN =
class=3D"string"><SPAN class=3D"delimiter">'</SPAN><SPAN =
class=3D"char">\'</SPAN><SPAN class=3D"delimiter">'</SPAN></SPAN> +=0A=
                <SPAN class=3D"string"><SPAN =
class=3D"delimiter">'</SPAN><SPAN class=3D"content">}</SPAN><SPAN =
class=3D"delimiter">'</SPAN></SPAN>;=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The following step is to register a <CODE>EntryAddedListener</CODE> =
using a=20
predicate so that the continuous query is created:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">ContinuousQueryMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        IMap&lt;<SPAN class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; map =3D hz.getMap(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">map</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
        map.addEntryListener(<SPAN class=3D"keyword">new</SPAN> =
MyEntryListener(),=0A=
                <SPAN class=3D"keyword">new</SPAN> SqlPredicate(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">name=3Dpeter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>), <SPAN =
class=3D"predefined-constant">true</SPAN>);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">EntryListener registered</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
    }=0A=
=0A=
    <SPAN class=3D"directive">static</SPAN> <SPAN =
class=3D"type">class</SPAN> <SPAN class=3D"class">MyEntryListener</SPAN> =
<SPAN class=3D"directive">implements</SPAN> EntryAddedListener&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; {=0A=
        <SPAN class=3D"annotation">@Override</SPAN>=0A=
        <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> entryAdded( EntryEvent&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; event ) {=0A=
          <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">entryAdded:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + event);=0A=
        }=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>As you can see, the query is created using the SqlPredicate=20
<CODE>name=3Dpeter</CODE>. The listener will be notified as soon as a =
person with=20
the name <CODE>peter</CODE> is modified. To demonstrate this, start the=20
<CODE>ContinuousQueryMember</CODE> and then start the following=20
member:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">ModifyMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        IMap&lt;<SPAN class=3D"predefined-type">String</SPAN>, =
Person&gt; map =3D hz.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">map</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
        map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"keyword">new</SPAN> =
Person(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">peter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>));=0A=
        map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">2</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"keyword">new</SPAN> =
Person(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">talip</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>));=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">done</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When <CODE>ModifyMember</CODE> is done, the=20
<CODE>ContinuousQueryMember</CODE> will show the following =
output:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>entryAdded:EntryEvent {Address[192.168.178.10]:5702} key=3D1,=0A=
oldValue=3Dnull, value=3DPerson{name=3D'peter'}, event=3DADDED, by =
Member [192.168.178.10]:5702</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>As you can see, the listener is only notified for <CODE>peter</CODE>, =
and not=20
for <CODE>talip</CODE>.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"good-to-know-4">5.12.1. Good to know</H4>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>Filtered at the source:</EM> The predicate of the continuous =
query is
 registered at the source: it is registered on each member that =
generates an=20
event for a given partition. This means that if a predicate filters out =
an=20
event, the event will not be sent over the line to the=20
listener.</P></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"distributed-queries">5.13. Distributed Queries</H3>
<DIV class=3D"paragraph">
<P>Imagine that we have a Hazelcast <CODE>IMap</CODE> where the key is =
some ID,=20
the value is a <CODE>Person</CODE> object, and we want to retrieve all =
persons=20
with a given name using the following (and naive) =
implementation:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">   <SPAN =
class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Set</SPAN>&lt;Person&gt; =
getWithNameNaive(<SPAN class=3D"predefined-type">String</SPAN> name){=0A=
        <SPAN class=3D"predefined-type">Set</SPAN>&lt;Person&gt; result =
=3D <SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">HashSet</SPAN>&lt;Person&gt;();=0A=
        <SPAN class=3D"keyword">for</SPAN>(Person person: =
personMap.values()){=0A=
            <SPAN class=3D"keyword">if</SPAN>(person.name.equals(name)){=0A=
                result.add(person);=0A=
            }=0A=
        }=0A=
        <SPAN class=3D"keyword">return</SPAN> result;=0A=
    }</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This is what you probably would write if the map would be an ordinary =
map.=20
But when the map is a distributed map, there are some performance and=20
scalability problems with this approach.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>It is not parallelizable. One member will iterate over all persons =
instead=20
  of spreading the load over multiple members. Because the search =
isn=E2=80=99t=20
  parallelizable, the system can=E2=80=99t scale; you can=E2=80=99t add =
more members to the=20
  cluster to increase performance.</P></LI>
  <LI>
  <P>It is inefficient because all persons need to be pulled over the =
line=20
  before being deserialized into the memory of the executing member. So =
there is=20
  unnecessary network traffic.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>Luckily, Hazelcast solves these problems by supporting predicates =
that are=20
executed on top of a fork/join mechanism:</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>When the predicate is requested to be evaluated by the caller, it =
is forked=20
  to each member in the cluster.</P></LI>
  <LI>
  <P>Each member will filter all local map entries using the predicate. =
Before a=20
  predicate evaluates a map entry, the key/value of that entry are =
deserialized=20
  and passed to the predicate.</P></LI>
  <LI>
  <P>The caller joins on the completion of all members and merges the =
results=20
  into a single set.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>The fork/join approach is highly scalable because it is =
parallelizable. By
 adding new cluster members, the number of partitions per member is =
reduced.=20
Therefore, the time a member needs to iterate over all of its data is =
reduced as=20
well. Also, the local filtering is parallelizable because a pool of =
partition=20
threads will evaluate segments of elements concurrently. And the amount =
of=20
network traffic is reduced drastically, since only filtered data is sent =
instead=20
of all data.</P></DIV>
<DIV class=3D"paragraph">
<P>Hazelcast provides two APIs for distributed queries.</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>Criteria API</P></LI>
  <LI>
  <P>Distributed SQL Query</P></LI></OL></DIV>
<DIV class=3D"sect3">
<H4 id=3D"criteria-api">5.13.1. Criteria API</H4>
<DIV class=3D"paragraph">
<P>To implement the <CODE>Person</CODE> search using the JPA-like =
criteria API,=20
you could do the following:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"> <SPAN =
class=3D"keyword">import</SPAN> <SPAN class=3D"include">static</SPAN> =
<SPAN class=3D"include">com.hazelcast.query.Predicates</SPAN>.*;=0A=
=0A=
    ...=0A=
=0A=
    public <SPAN class=3D"predefined-type">Set</SPAN>&lt;Person&gt; =
getWithName(<SPAN class=3D"predefined-type">String</SPAN> name) {=0A=
        <SPAN class=3D"predefined-type">Predicate</SPAN> namePredicate =
=3D equal(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">name</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>, =
name);=0A=
        <SPAN class=3D"keyword">return</SPAN> (<SPAN =
class=3D"predefined-type">Set</SPAN>&lt;Person&gt;) =
personMap.values(namePredicate);=0A=
    }</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>namePredicate</CODE> verifies that the <CODE>name</CODE> =
field has=20
a certain value using the equal operator. After we have created the =
predicate,=20
we apply it to the <CODE>personMap</CODE> by calling the=20
<CODE>IMap.values(Predicate)</CODE> method which takes care of sending =
it to all=20
members in the cluster, evaluating it, and merging the result. Because =
the=20
predicate is sent over the line, it needs to be serializable. See <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serialization-start">Se=
rialization</A>=20
for more information.</P></DIV>
<DIV class=3D"paragraph">
<P>The Predicate is not limited to values only. It can also be applied =
to the=20
<CODE>keySet</CODE>, the <CODE>entrySet</CODE>, and the =
<CODE>localKeySet</CODE>=20
of the <CODE>IMap</CODE>.</P></DIV>
<DIV class=3D"sect4">
<H5 id=3D"equal-operator">Equal Operator</H5>
<DIV class=3D"paragraph">
<P>In the previous example, we saw the equal operator in action where it =
gets=20
the name of the person object. When it is evaluated, it first tries to =
look up=20
an accessor method, so in case of <CODE>name</CODE>, the accessor =
methods that=20
it will try are <CODE>isName()</CODE> and <CODE>getName()</CODE>. If one =
is
 found, it is called and the comparison is done. An accessor method =
doesn=E2=80=99t need=20
to return a field, it could also be a synthetic accessor where some =
value is=20
created on the fly. If no accessor is found, a field with the given name =
is=20
looked up. If that exists, it is returned; otherwise, a RuntimeException =
is=20
thrown. Hazelcast doesn=E2=80=99t care about the accessibility of a =
field or an accessor=20
method, so you are not forced to make them public.</P></DIV>
<DIV class=3D"paragraph">
<P>In some cases you need to traverse over an object structure: for =
example, you
 want the street of the address where the person lives. With the equal =
operator,=20
you can do it like this: <CODE>address.street</CODE>. This expression is =

evaluated from left to right and there is no limit on the number of =
steps=20
involved. Accessor methods can also be used here. Another important =
thing is how=20
the equal operator deals with null, especially with object traversal: as =
soon as=20
null is found, it is used in the comparison.</P></DIV></DIV>
<DIV class=3D"sect4">
<H5 id=3D"and-or-and-not-operators"><CODE>And</CODE>, <CODE>Or</CODE> =
and=20
<CODE>Not</CODE> Operators</H5>
<DIV class=3D"paragraph">
<P>Predicates can be joined using the <CODE>and</CODE> and =
<CODE>or</CODE>=20
operators:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"keyword">import</SPAN> <SPAN class=3D"include">static</SPAN> =
<SPAN class=3D"include">com.hazelcast.query.Predicates</SPAN>.*;=0A=
=0A=
    ...=0A=
=0A=
    public <SPAN class=3D"predefined-type">Set</SPAN>&lt;Person&gt; =
getWithNameAndAge(<SPAN class=3D"predefined-type">String</SPAN> name, =
<SPAN class=3D"type">int</SPAN> age) {=0A=
        <SPAN class=3D"predefined-type">Predicate</SPAN> namePredicate =
=3D equal(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">name</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>, =
name);=0A=
        <SPAN class=3D"predefined-type">Predicate</SPAN> agePredicate =
=3D equal(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">name</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>, =
age);=0A=
        <SPAN class=3D"predefined-type">Predicate</SPAN> predicate =3D =
and(namePredicate, agePredicate);=0A=
        <SPAN class=3D"keyword">return</SPAN> (<SPAN =
class=3D"predefined-type">Set</SPAN>&lt;Person&gt;) =
personMap.values(predicate);=0A=
    }=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Set</SPAN>&lt;Person&gt; =
getWithNameOrAge(<SPAN class=3D"predefined-type">String</SPAN> name, =
<SPAN class=3D"type">int</SPAN> age) {=0A=
        <SPAN class=3D"predefined-type">Predicate</SPAN> namePredicate =
=3D equal(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">name</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>, =
name);=0A=
        <SPAN class=3D"predefined-type">Predicate</SPAN> agePredicate =
=3D equal(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">age</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>, =
age);=0A=
        <SPAN class=3D"predefined-type">Predicate</SPAN> predicate =3D =
or(namePredicate, agePredicate);=0A=
        <SPAN class=3D"keyword">return</SPAN> (<SPAN =
class=3D"predefined-type">Set</SPAN>&lt;Person&gt;) =
personMap.values(predicate);=0A=
    }</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>And here is the <CODE>not</CODE> predicate:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">    <SPAN =
class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Set</SPAN>&lt;Person&gt; getNotWithName(<SPAN =
class=3D"predefined-type">String</SPAN> name) {=0A=
        <SPAN class=3D"predefined-type">Predicate</SPAN> namePredicate =
=3D equal(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">name</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>, =
name);=0A=
        <SPAN class=3D"predefined-type">Predicate</SPAN> predicate =3D =
not(namePredicate);=0A=
        <SPAN class=3D"keyword">return</SPAN> (<SPAN =
class=3D"predefined-type">Set</SPAN>&lt;Person&gt;) =
personMap.values(predicate);=0A=
    }</CODE></PRE></DIV></DIV></DIV>
<DIV class=3D"sect4">
<H5 id=3D"other-operators">Other Operators</H5>
<DIV class=3D"paragraph">
<P>In the <CODE>Predicates</CODE> class you can find a whole collection =
of=20
useful operators.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>notEqual</CODE>: Checks if the result of an expression is not =
equal=20
  to a certain value.</P></LI>
  <LI>
  <P><CODE>instanceOf</CODE>: Checks if the result of an expression has =
a=20
  certain type.</P></LI>
  <LI>
  <P><CODE>like</CODE>: Checks if the result of an expression matches =
some=20
  string pattern. % (percentage sign) is a placeholder for many =
characters, _
   (underscore) is a placeholder for only one character.</P></LI>
  <LI>
  <P><CODE>greaterThan</CODE>: Checks if the result of an expression is =
greater=20
  than a certain value.</P></LI>
  <LI>
  <P><CODE>greaterEqual</CODE>: Checks if the result of an expression is =
greater=20
  than or equal to a certain value.</P></LI>
  <LI>
  <P><CODE>lessThan</CODE>: Checks if the result of an expression is =
less than a
   certain value.</P></LI>
  <LI>
  <P><CODE>lessEqual</CODE>: Checks if the result of an expression is =
less than=20
  or equal to a certain value.</P></LI>
  <LI>
  <P><CODE>between</CODE>: Checks if the result of an expression is =
between two=20
  values (this is inclusive).</P></LI>
  <LI>
  <P><CODE>in</CODE>: Checks if the result of an expression is an =
element of a=20
  certain collection.</P></LI>
  <LI>
  <P><CODE>isNot</CODE>: Checks if the result of an expression is=20
false.</P></LI>
  <LI>
  <P><CODE>regex</CODE>: Checks if the result of an expression matches =
some=20
  regular expression.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>If the predicates provided by Hazelcast are not enough, you can =
always write=20
your own predicate by implementing the <CODE>Predicate</CODE>=20
interface:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">interface</SPAN> =
<SPAN class=3D"class">Predicate</SPAN>&lt;K, V&gt; <SPAN =
class=3D"directive">extends</SPAN> <SPAN =
class=3D"predefined-type">Serializable</SPAN> {=0A=
    <SPAN class=3D"type">boolean</SPAN> apply(<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry&lt;K, V&gt; mapEntry);=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The map entry not only contains the key/value, but also contains all =
kinds of=20
metadata like the time it was created/expires/last accessed,=20
etc.</P></DIV></DIV>
<DIV class=3D"sect4">
<H5 id=3D"predicatebuilder">PredicateBuilder</H5>
<DIV class=3D"paragraph">
<P>The syntax we have used so far to create Predicates is clear. That =
syntax can=20
be simplified more by making use of the <CODE>PredicateBuilder</CODE>.=20
<CODE>PredicateBuilder</CODE> provides a fluent interface that can make =
building=20
predicates simpler. But underneath, the same functionality is being =
used. Here=20
is an example where a predicate is built that selects all persons with a =
certain=20
name and age using <CODE>PredicateBuilder</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">    <SPAN =
class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Set</SPAN>&lt;Person&gt; =
getWithNameAndAgeSimplified(<SPAN =
class=3D"predefined-type">String</SPAN> name, <SPAN =
class=3D"type">int</SPAN> age) {=0A=
        EntryObject e =3D <SPAN class=3D"keyword">new</SPAN> =
PredicateBuilder().getEntryObject();=0A=
        <SPAN class=3D"predefined-type">Predicate</SPAN> predicate =3D =
e.get(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">name</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>).equal(name).and(e.get(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">age</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>).equal(age));=0A=
        <SPAN class=3D"keyword">return</SPAN> (<SPAN =
class=3D"predefined-type">Set</SPAN>&lt;Person&gt;) =
personMap.values(predicate);=0A=
    }</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>As you can see, <CODE>PredicateBuilder</CODE> can simplify things, =
especially=20
if you have complex predicates. It is a matter of taste which approach =
you=20
prefer.</P></DIV>
<DIV class=3D"paragraph">
<P>With the <CODE>PredicateBuilder</CODE>, it is possible to access the =
key.=20
Imagine there is a key with field x and a value with field y. Then you =
could do
 the following to retrieve all entries with key.x =3D 10 and value.y =3D =

20:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">EntryObject e =
=3D <SPAN class=3D"keyword">new</SPAN> =
PredicateBuilder().getEntryObject();=0A=
<SPAN class=3D"predefined-type">Predicate</SPAN> predicate =3D =
e.key().get(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">x</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>).equal(<SPAN =
class=3D"integer">10</SPAN>).and(e.get(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">y</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>).equal(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">20</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>));</CODE></PRE></DIV></DIV></DIV></DI=
V>
<DIV class=3D"sect3">
<H4 id=3D"distributed-sql-query">5.13.2. Distributed SQL Query</H4>
<DIV class=3D"paragraph">
<P>In the previous section, the Criteria API was explained, where
 expression/predicate objects are manually created. This process can be=20
simplified a bit by making use of the <CODE>PredicateBuilder</CODE>, but =
it=20
still isn=E2=80=99t perfect. That is why a DSL (Distributed SQL Query) =
was added which=20
is based on an SQL-like language, and it uses the Criteria API=20
underneath.</P></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>getWithName</CODE> function that we already implemented =
using the=20
Criteria API can also be implemented using the Distributed SQL =
Query:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Set</SPAN>&lt;Person&gt; getWithName(<SPAN =
class=3D"predefined-type">String</SPAN> name){=0A=
    <SPAN class=3D"predefined-type">Predicate</SPAN> predicate =3D <SPAN =
class=3D"keyword">new</SPAN> SqlPredicate(<SPAN =
class=3D"predefined-type">String</SPAN>.format(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">name =3D %s</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>,name));=0A=
    <SPAN class=3D"keyword">return</SPAN> (<SPAN =
class=3D"predefined-type">Set</SPAN>&lt;Person&gt;) =
personMap.values(predicate);=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>As you can see, the <CODE>SqlPredicate</CODE> is a =
<CODE>Predicate</CODE> and=20
therefore it can be combined with the Criteria API. The language =
isn=E2=80=99t case
 sensitive, but "columns" used in the query are. Below, you can see an =
overview=20
of the DSL:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>logical operators</P>
  <DIV class=3D"listingblock">
  <DIV class=3D"content">
<PRE>man and age&gt;30=0A=
man=3Dfalse or age =3D 45 or name =3D 'Joe'=0A=
man and (age &gt;20 OR age &lt; 30)=0A=
not man</PRE></DIV></DIV></LI>
  <LI>
  <P>relational operators</P>
  <DIV class=3D"listingblock">
  <DIV class=3D"content">
<PRE>age &lt;=3D 30=0A=
name =3D"Joe"=0A=
age !=3D 30</PRE></DIV></DIV></LI>
  <LI>
  <P><CODE>between</CODE></P>
  <DIV class=3D"listingblock">
  <DIV class=3D"content">
<PRE>age between 20 and 33=0A=
age not between 30 and 40</PRE></DIV></DIV></LI>
  <LI>
  <P><CODE>like</CODE></P>
  <DIV class=3D"listingblock">
  <DIV class=3D"content">
<PRE>name like 'Jo%' (true for 'Joe', 'Josh', 'Joseph' etc.)=0A=
name like 'Jo_' (true for 'Joe'; false for 'Josh')=0A=
name not like 'Jo_' (true for 'Josh'; false for 'Joe')=0A=
name like 'J_s%' (true for 'Josh', 'Joseph'; false 'John', =
'Joe')</PRE></DIV></DIV></LI>
  <LI>
  <P><CODE>in</CODE></P>
  <DIV class=3D"listingblock">
  <DIV class=3D"content">
<PRE>age in (20, 30, 40)=0A=
age not in (60, 70)</PRE></DIV></DIV></LI></UL></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"good-to-know-5">5.13.3. Good to know</H4>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>No key access:</EM> With the SQL predicate, it isn=E2=80=99t =
possible to access=20
the key; use the <CODE>PredicateBuilder</CODE> for that.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Object traversal:</EM> With the SQL predicate, an object =
traversal can be
 done using <CODE>field.otherfield</CODE>. For example:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>husband.mother.father.name=3DJohn</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In this example, the name of the father of the mother of the husband =
should=20
be <CODE>John</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>No arg methods:</EM> No arg methods can be called within a SQL =
predicate.
 In some cases, this is useful if you dynamically need to calculate a =
value=20
based on some properties. The syntax is the same as for accessing a=20
field.</P></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"indexes">5.14. Indexes</H3>
<DIV class=3D"paragraph">
<P>To speed up queries, just like in databases, the Hazelcast map =
supports
 indexes. Using an index prevents iterating over all values. In database =
terms,=20
this is called a full table scan, but it directly jumps to the =
interesting ones.=20
There are two types of indexes:</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>Ordered: for example, a numeric field where you want to do range =
searches
   like "bigger than".</P></LI>
  <LI>
  <P>Unordered: for example, a name field.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>In the previous chapter, we talked about a <CODE>Person</CODE> that =
has a=20
name, age, etc. To speed up searching on these fields, we can place an =
unordered
 index on name and an ordered index on age:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">persons</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;indexes&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;index</SPAN> <SPAN =
class=3D"attribute-name">ordered</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">false</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>name<SPAN class=3D"tag">&lt;/index&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;index</SPAN> <SPAN =
class=3D"attribute-name">ordered</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>age<SPAN class=3D"tag">&lt;/index&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;/indexes&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The ordered attribute defaults to false.</P></DIV>
<DIV class=3D"paragraph">
<P>To retrieve the index field of an object, first an accessor method =
will be=20
tried. If that doesn=E2=80=99t exist, a direct field access is done. =
With the index=20
accessor method, you are not limited to returning a field, you can also =
create a=20
synthetic accessor method where a value is calculated on the fly. The =
index=20
field also supports object traversal, so you could create an index on =
the street=20
of the address of a person using <CODE>address.street</CODE>. There is =
no=20
limitation on the depth of the traversal. Hazelcast doesn=E2=80=99t care =
about the=20
accessibility of the index field or accessor method, so you are not =
forced to=20
make them public. An index field or an object containing a field (for =
the =E2=80=99x.y=E2=80=99=20
notation) is allowed to be null.</P></DIV>
<DIV class=3D"paragraph">
<P>Hazelcast 3 has a big difference from Hazelcast 2: in Hazelcast 3, =
indexes=20
can be created on the fly. Management Center even has an option to =
create an=20
index on an existing <CODE>IMap</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>The performance impact of using one or more indexes depends on =
several
 factors; among them are the size of the map and the chance of finding =
the
 element with a full table scan. Other factors are adding one or more =
indexes,
 making mutations to the map more expensive since the index needs to be =
updated=20
as well. So it could be that if you have more mutations than searches, =
that the=20
performance with an index is lower than without an index. It is =
recommended that=20
you test in a production-like environment, using a representative =
size/quality=20
of the dataset, to see which configuration is best for you. In the =
source code=20
of the book, you have very rudimentary index benchmarks, one for =
updating and=20
one for searching.</P></DIV>
<DIV class=3D"paragraph">
<P>In Hazelcast versions prior to 3.0, indexing for <CODE>String</CODE> =
fields=20
was done only for the first 4 characters. With Hazelcast version 3.0+, =
indexing=20
is done on the entire <CODE>String</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>In the example, the indexes are placed as attributes of basic data =
types like=20
<CODE>int</CODE> and <CODE>String</CODE>. But the <CODE>IMap</CODE> =
allows=20
indexes to be placed on an attribute of any type, as long as it =
implements=20
<CODE>Comparable</CODE>. So you can create indexes on custom data=20
types.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"persistence">5.15. Persistence</H3>
<DIV class=3D"paragraph">
<P>In the previous section, we talked about backups that protect against =
member=20
failure: if one member goes down, another member takes over. But it does =
not=20
protect you against cluster failure: for example, when a cluster is =
hosted in a=20
single datacenter, and it goes down. Luckily, Hazelcast provides a =
solution=20
loading and storing data externally, such as in a database. This can be =
done=20
using:</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P><CODE>com.hazelcast.core.MapLoader</CODE>: Useful for reading =
entries from=20
  an external datasource, but changes don=E2=80=99t need to be written =
back.</P></LI>
  <LI>
  <P><CODE>com.hazelcast.core.MapStore</CODE>: Useful for reading and =
writing=20
  map entries from and to an external datasource. The =
<CODE>MapStore</CODE>=20
  interface extends the <CODE>MapLoader</CODE> =
interface.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>One instance per Map per Node will be created.</P></DIV>
<DIV class=3D"paragraph">
<P>The following example shows an extremely basic HSQLDB implementation =
of the=20
<CODE>MapStore</CODE> where we load/store a simple <CODE>Person</CODE> =
object=20
with a name field:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">PersonMapStore</SPAN> <SPAN =
class=3D"directive">implements</SPAN> MapStore&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>, Person&gt; {=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">Connection</SPAN> con;=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> PersonMapStore() {=0A=
        <SPAN class=3D"keyword">try</SPAN> {=0A=
            con =3D <SPAN =
class=3D"predefined-type">DriverManager</SPAN>.getConnection(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">jdbc:hsqldb:mydatabase</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">SA</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
            con.createStatement().executeUpdate(=0A=
                    <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">create table if not =
exists person (id bigint, name varchar(45))</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        } <SPAN class=3D"keyword">catch</SPAN> (<SPAN =
class=3D"exception">SQLException</SPAN> e) {<SPAN =
class=3D"keyword">throw</SPAN> <SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"exception">RuntimeException</SPAN>(e);}=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">synchronized</SPAN> <SPAN class=3D"type">void</SPAN> =
delete(<SPAN class=3D"predefined-type">Long</SPAN> key) {=0A=
        <SPAN class=3D"keyword">try</SPAN> {=0A=
            con.createStatement().executeUpdate(=0A=
                    format(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">delete from person =
where id =3D %s</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>, key));=0A=
        } <SPAN class=3D"keyword">catch</SPAN> (<SPAN =
class=3D"exception">SQLException</SPAN> e) {<SPAN =
class=3D"keyword">throw</SPAN> <SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"exception">RuntimeException</SPAN>(e);}=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">synchronized</SPAN> <SPAN class=3D"type">void</SPAN> =
store(<SPAN class=3D"predefined-type">Long</SPAN> key, Person value) {=0A=
        <SPAN class=3D"keyword">try</SPAN> {=0A=
            con.createStatement().executeUpdate(=0A=
                    format(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">insert into person =
values(%s,'%s')</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>, key, =
value.name));=0A=
        } <SPAN class=3D"keyword">catch</SPAN> (<SPAN =
class=3D"exception">SQLException</SPAN> e) {<SPAN =
class=3D"keyword">throw</SPAN> <SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"exception">RuntimeException</SPAN>(e);}=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">synchronized</SPAN> <SPAN class=3D"type">void</SPAN> =
storeAll(<SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>, Person&gt; map) {=0A=
        <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>, Person&gt; entry : map.entrySet())=0A=
            store(entry.getKey(), entry.getValue());=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">synchronized</SPAN> <SPAN class=3D"type">void</SPAN> =
deleteAll(<SPAN class=3D"predefined-type">Collection</SPAN>&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>&gt; keys) {=0A=
       <SPAN class=3D"keyword">for</SPAN>(<SPAN =
class=3D"predefined-type">Long</SPAN> key: keys) delete(key);=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">synchronized</SPAN> Person load(<SPAN =
class=3D"predefined-type">Long</SPAN> key) {=0A=
        <SPAN class=3D"keyword">try</SPAN> {=0A=
            <SPAN class=3D"predefined-type">ResultSet</SPAN> resultSet =
=3D con.createStatement().executeQuery(=0A=
                    format(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">select name from =
person where id =3D%s</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>, =
key));=0A=
            <SPAN class=3D"keyword">try</SPAN> {=0A=
                <SPAN class=3D"keyword">if</SPAN> (!resultSet.next()) =
<SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-constant">null</SPAN>;=0A=
                <SPAN class=3D"predefined-type">String</SPAN> name =3D =
resultSet.getString(<SPAN class=3D"integer">1</SPAN>);=0A=
                <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"keyword">new</SPAN> Person(name);=0A=
            } <SPAN class=3D"keyword">finally</SPAN> {resultSet.close();}=0A=
        } <SPAN class=3D"keyword">catch</SPAN> (<SPAN =
class=3D"exception">SQLException</SPAN> e) {<SPAN =
class=3D"keyword">throw</SPAN> <SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"exception">RuntimeException</SPAN>(e);}=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">synchronized</SPAN> <SPAN =
class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>, Person&gt; loadAll(<SPAN =
class=3D"predefined-type">Collection</SPAN>&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>&gt; keys) {=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>, Person&gt; result =3D <SPAN =
class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">HashMap</SPAN>&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>, Person&gt;();=0A=
        <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"predefined-type">Long</SPAN> key : keys) result.put(key, =
load(key));=0A=
        <SPAN class=3D"keyword">return</SPAN> result;=0A=
    }=0A=
=0A=
    <SPAN class=3D"predefined-type">Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Iterator</SPAN>&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>&gt; loadAllKeys() {=0A=
         <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-constant">null</SPAN>;=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The implementation is simple and certainly can be improved, such as=20
transactions, prevention against SQL injection, etc. Because the=20
<CODE>MapStore/MapLoader</CODE> can be called by threads concurrently, =
this=20
implementation makes use of synchronization to deal with that correctly. =

Currently, it relies on a course grained locked, but you could perhaps =
apply=20
finer grained locking based on the key and a striped lock.</P></DIV>
<DIV class=3D"paragraph">
<P>To connect the <CODE>PersonMapStore</CODE> to the persons map, we can =

configure it using the <CODE>map-store</CODE> setting:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">persons</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;map-store</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;class-name&gt;</SPAN>PersonMapStore<SPAN =
class=3D"tag">&lt;/class-name&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;/map-store&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In the following code fragment, you can see a member that writes a =
person to=20
the map and then exits the JVM. Then, you can see a member that loads =
the person
 and prints it.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">WriteMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
        HazelcastInstance hzInstance =3D =
Hazelcast.newHazelcastInstance();=0A=
        IMap&lt;<SPAN class=3D"predefined-type">Long</SPAN>, Person&gt; =
personMap =3D hzInstance.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">personMap</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        personMap.put(<SPAN class=3D"integer">1L</SPAN>, <SPAN =
class=3D"keyword">new</SPAN> Person(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Peter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>));=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">ReadMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
        HazelcastInstance hzInstance =3D =
Hazelcast.newHazelcastInstance();=0A=
        IMap&lt;<SPAN class=3D"predefined-type">Long</SPAN>, Person&gt; =
personMap =3D hzInstance.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">personMap</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        Person p =3D personMap.get(<SPAN class=3D"integer">1L</SPAN>);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(p);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>With the <CODE>WriteMember</CODE>, the <CODE>System.exit(0)</CODE> is =
called=20
at the end. This is done to release the HSQLDB so that it can be opened =
by the=20
<CODE>ReadMember</CODE>. Calling <CODE>System.exit</CODE> is a safe way =
for=20
Hazelcast to leave the cluster due to a shutdown hook, and it waits for =
all=20
backup operations to complete.</P></DIV>
<DIV class=3D"paragraph">
<P>A word of caution: the <CODE>MapLoader/MapStore</CODE> should NOT =
call Map,=20
Queue, MultiMap, List, Set, etc. operations, otherwise you might run =
into
 deadlocks.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"pre-populating-the-map">5.15.1. Pre-Populating the Map</H4>
<DIV class=3D"paragraph">
<P>With the <CODE>MapLoader</CODE>, you can pre-populate the Map so that =
when it=20
is created, the important entries are loaded in memory. You can do this =
by=20
letting the <CODE>loadAllKeys</CODE> method return the set of all "hot" =
keys=20
that need to be loaded for the partitions owned by the member. This also =
makes=20
parallel loading possible, since each member can load its own keys. If =
the=20
<CODE>loadAll</CODE> method returns null, as it does in the example, =
then the=20
map will not be pre-populated. Map is created lazily by Hazelcast, so =
the map is=20
actually created and the <CODE>MapLoader</CODE> called only when one of =
the=20
members calls the <CODE>HazelcastInstance.getMap(name)</CODE>. If your=20
application returns the map up front without needing the content, you =
could wrap=20
the map in a lazy proxy that calls the <CODE>getMap</CODE> method only =
when it=20
is really needed.</P></DIV>
<DIV class=3D"paragraph">
<P>Prior to 3.5 the <CODE>loadAllKeys</CODE> method would execute on =
every=20
member of the cluster.  This had the potential to overload the back-end =
stores=20
that were being called.  Since 3.5 <CODE>loadAllKeys</CODE> is now run =
just=20
once, the member to execute the method is selected by hashing the map =
name and
 deriving a partition id.  The member owning the partition id is the one =
that=20
runs <CODE>loadAllKeys</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>Additionally the return type of <CODE>loadAllKeys</CODE> has changed, =
where=20
it previously returned a <CODE>Set&lt;K&gt;</CODE> it now returns an=20
<CODE>Iterator&lt;K&gt;</CODE>. The iterator streams results back to the =
members=20
that own the keys calling <CODE>loadAll</CODE> in batches.  The batch =
size is by=20
default set to 1000, but can be changed using the property=20
<CODE>hazelcast.map.load.chunk.size</CODE></P></DIV>
<DIV class=3D"paragraph">
<P>You need to be aware that the map only knows about map entries that =
are in=20
the memory; when a get is done for an explicit key, then the map entry =
is loaded=20
from the <CODE>MapStore</CODE>. This behavior is called "read through". =
So if=20
the <CODE>loadAll</CODE> returns a subset of the keys in the database, =
then the=20
<CODE>Map.size()</CODE> will show only the size of this subset, not the =
record=20
count in the database. The same goes for queries; these will only be =
executed on=20
the entries in memory, not on the records in the database.</P></DIV>
<DIV class=3D"paragraph">
<P>To make sure that you only keep hot entries in the memory, you can =
configure
 the <CODE>time-to-live-seconds</CODE> property on the map. When a map =
entry=20
isn=E2=80=99t used and the time to live expires, it will automatically =
be removed from
 the map without having to call =
<CODE>MapStore.delete</CODE>.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"write-through-vs-write-behind">5.15.2. Write Through vs Write=20
Behind</H4>
<DIV class=3D"paragraph">
<P>Although the <CODE>MapStore</CODE> makes durability possible, it also =
comes=20
at a cost: every time that a change is made in the map, a write through =
to your=20
persistence mechanism happens. Write through operations increase latency =
since=20
databases cause latency (for example, disk access). In Hazelcast, you =
can use a=20
write behind instead of a write through. When a change happens, the =
change is=20
synchronously written to the backup partition (if that is configured), =
but the=20
change to the database is done asynchronously. You can enable write =
behind by
 configuring the <CODE>write-delay-seconds</CODE> in the =
<CODE>map-store</CODE>=20
configuration section. <CODE>write-delay-seconds</CODE> defaults to 0, =
which=20
means a write through. A value higher than 0 indicates a write behind. =
Using=20
write behind is not completely without danger, it could happen that the =
cluster=20
fails before the write to the database has completed. In that case, =
information=20
could be lost.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"maploaderlifecyclesupport">5.15.3. =
MapLoaderLifecycleSupport</H4>
<DIV class=3D"paragraph">
<P>In some cases, your <CODE>MapLoader</CODE> needs to be notified of =
lifecycle=20
events. You can do this by having your <CODE>MapLoader</CODE> implement =
the=20
<CODE>com.hazelcast.core.MapLoaderLifecycleSupport</CODE> =
interface.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>init</CODE>: Useful if you want to initialize resources, such =
as=20
  opening database connections. One of the parameters the =
<CODE>init</CODE>=20
  method receives is a <CODE>Properties</CODE> object. This is useful if =
you=20
  want to pass properties from the outside to the <CODE>MapLoader</CODE> =

  implementation. If you make use of the XML configuration, in the=20
  <CODE>map-store</CODE> XML configuration, you can specify the =
properties that=20
  need to be passed to the <CODE>init</CODE> method.</P></LI>
  <LI>
  <P><CODE>destroy</CODE>: Useful if you need to cleanup resources, such =
as=20
  closing database connections.</P></LI></UL></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"good-to-know-6">5.15.4. Good to know</H4>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>Serialize before store:</EM> The value is serialized before the=20
<CODE>MapStore.store</CODE> is called. If you are retrieving the ID or =
you are=20
using optimistic locking in the database by adding a version field, this =
can
 cause problems because changes that are made on the entity are done =
after the
 value has been serialized. So the existing byte array will contain the =
old=20
ID/version no matter what the store method=20
updated.</P></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"multimap">5.16. MultiMap</H3>
<DIV class=3D"paragraph">
<P>In some cases you need to store multiple values for a single key. You =
could=20
use a normal collection as value and store the real values in this =
collection.=20
This works fine if everything is done in the memory, but in a =
distributed and=20
concurrent environment it isn=E2=80=99t that easy. One problem with this =
approach is=20
that the whole collection needs to be deserialized for an operation such =
as add.=20
Imagine a collection of 100 elements; then 100 elements need to be =
deserialized=20
when the value is read, and 101 items are serialized when the value is =
written,=20
for a total of 201 elements. This can cause a lot of overhead, CPU, =
memory,=20
network usage, etc. Another problem is that without additional =
concurrency=20
control, such as using a lock or a replace call, you could run into a =
lost
 update which can lead to issues like items not being deleted or getting =
lost.=20
To solve these problems, Hazelcast provides a <CODE>MultiMap</CODE> =
where=20
multiple values can be stored under a single key.</P></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>MultiMap</CODE> doesn=E2=80=99t implement the =
<CODE>java.util.Map</CODE>=20
interface since the signatures of the methods are different. The=20
<CODE>MultiMap</CODE> does have support for most of the =
<CODE>IMap</CODE>=20
functionality (locking, listeners, etc.), but it doesn=E2=80=99t support =
indexing,=20
predicates, and the <CODE>MapLoader/MapStore</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>To demonstrate the <CODE>MultiMap</CODE>, we are going to create two =
members.=20
The <CODE>PutMember</CODE> will put data into the=20
<CODE>MultiMap</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">PutMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        MultiMap&lt;<SPAN class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; map =3D hz.getMultiMap(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">map</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
        map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">a</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">a</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">2</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">b</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">3</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">PutMember:Done</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>And the <CODE>PrintMember</CODE> will print all entries in that=20
<CODE>MultiMap</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">PrintMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hzInstance =3D =
Hazelcast.newHazelcastInstance();=0A=
        MultiMap&lt;<SPAN class=3D"predefined-type">String</SPAN>,<SPAN =
class=3D"predefined-type">String</SPAN>&gt; map =3D =
hzInstance.getMultiMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">map</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"keyword">for</SPAN>(<SPAN =
class=3D"predefined-type">String</SPAN> key: map.keySet()){=0A=
            <SPAN class=3D"predefined-type">Collection</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>&gt; values =3D map.get(key);=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.printf(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">%s -&gt; %s</SPAN><SPAN class=3D"char">\n</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>,key,values);=0A=
        }=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If we first run <CODE>PutMember</CODE> and then run =
<CODE>PrintMember</CODE>,=20
then <CODE>PrintMember</CODE> will show:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>b -&gt; [3]=0A=
a -&gt; [2, 1]</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>As you can see, there is a single value for key <CODE>b</CODE> and 2 =
values=20
for key <CODE>a</CODE>.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"configuration">5.16.1. Configuration</H4>
<DIV class=3D"paragraph">
<P>The <CODE>MultiMap</CODE> is configured with the =
<CODE>MultiMapConfig</CODE>=20
using the following configuration options.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>valueCollectionType</CODE>: The collection type of the value. =
There=20
  are 2 options: SET and LIST. With a set, duplicate and null values are =
not
   allowed and ordering is irrelevant. With the list, duplicates and =
null values=20
  are allowed and ordering is relevant. Defaults to SET.</P></LI>
  <LI>
  <P><CODE>listenerConfigs</CODE>: The entry listeners for the=20
  <CODE>MultiMap</CODE>.</P></LI>
  <LI>
  <P><CODE>binary</CODE>: If the value is stored in binary format (true) =
or in=20
  object format (false). Defaults to true.</P></LI>
  <LI>
  <P><CODE>backupCount</CODE>: The number of synchronous backups. =
Defaults to=20
  1.</P></LI>
  <LI>
  <P><CODE>asyncBackupCount</CODE>: The number of asynchronous backups. =
Defaults=20
  to 0.</P></LI>
  <LI>
  <P><CODE>statisticsEnabled</CODE>: If true, the statistics have been=20
  enabled.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>The statistics can be accessed by calling the=20
<CODE>MultiMap.getLocalMultiMapStats()</CODE> method.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"good-to-know-7">5.16.2. Good to know:</H4>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>Value collection not partitioned:</EM> The collection used as =
value is=20
not partitioned and is stored on a single machine. So the maximum size =
of the
 value depends on the capacity of a single machine. You need to be =
careful how=20
much data is stored in the value collection.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Get returns copy</EM>: <CODE>map.get(key)</CODE> returns a copy =
of the=20
values at some moment in time. Changes to this collection will result in =
an=20
<CODE>UnsupportedOperationException</CODE>. If you want to change the =
values,=20
you need to do it through the <CODE>MultiMap</CODE> interface.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Removing items:</EM> You can remove items from the =
<CODE>MultiMap</CODE>.=20
If the collection for a specific key is empty, this collection will not
 automatically be removed, so you may need to clean up the =
<CODE>MultiMap</CODE>=20
to prevent memory leaks.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Collection copying:</EM> If a value for key K is stored on =
member1=20
because K is owned by member1, and member2 does a =
<CODE>map.get(K)</CODE>, then=20
the whole collection will be transported from member1 to member2. If =
that value=20
collection is big, it could lead to performance problems. A solution =
would be to=20
send the operation to member1: send the logic to the data instead of =
sending the=20
data to the logic.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Map of maps:</EM> The <CODE>MultiMap</CODE> can=E2=80=99t be used =
as a map of=20
maps where there are 2 keys to find the value. We have some plans to add =
this in=20
the near future, but if you can=E2=80=99t wait, you could either create =
a composite key
 or use dynamically created maps, where the name of map is determined by =
the=20
first key, and the second key is the key in that=20
map.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"good-to-know-8">5.16.3. Good to know</H4>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>Snapshot:</EM> When <CODE>Map.entrySet()</CODE>,=20
<CODE>Map.keySet()</CODE> or <CODE>Map.values()</CODE> is called, a =
snapshot of=20
the current state of the map is returned. Changes that are made in the =
map do=20
not reflect on changes in these sets and vice versa. Also, when changes =
are made=20
on these collections, an <CODE>UnsupportedOperationException</CODE> is=20
thrown.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Serialization:</EM> Although the <CODE>IMap</CODE> looks like an=20
in-memory data structure, like a <CODE>HashMap</CODE>, there are =
differences.=20
For example, (de)serialization needs to take place for a lot of =
operations. Also=20
remoting could be involved. This means that the <CODE>IMap</CODE> will =
not have=20
the same performance characteristics as an in-memory map. To minimize=20
serialization cost, make sure you correctly configure the=20
<CODE>in-memory-format</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Size:</EM> Method is a distributed operation; a request is sent =
to each
 member to return the number of map entries they contain. This means =
that=20
abusing the size method could lead to performance problems.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Memory Usage:</EM> A completely empty <CODE>IMap</CODE> instance =
consumes=20
&gt;200 KBs of memory in the cluster with a default configured number of =

partitions. So having a lot of small maps could lead to unexpected =
memory=20
problems. If you double the number of partitions, the memory usage will =
roughly
 double as well.</P></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-is-next">5.17. What is next</H3>
<DIV class=3D"paragraph">
<P>The Hazelcast <CODE>IMap</CODE> is a data structure that is rich in =
features=20
and by properly configuring, it will serve a lot of purposes as you saw =
in this=20
chapter. In the following chapter, you will learn about Hazelcast =
Distributed=20
Executor Service.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"distributed-executor-service">6. Distributed Executor =
Service</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>Java 5 was perhaps the most fundamental upgrade to Java since it was =
first=20
released. On a language level, we got generics, static imports, =
enumerations,
 varargs, and enhancements for loops and annotations. Although less =
known, Java=20
5 also got fundamental fixes for the Java Memory Model (JSR-133) and we =
got a=20
whole new concurrency library (JSR-166), found in=20
<CODE>java.util.concurrent</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>This library contains a lot of goodies; some parts you probably =
don=E2=80=99t use on=20
a regular basis, other parts you probably do. One of the added features =
is the=20
<CODE>java.util.concurrent.Executor</CODE>. The idea is that you wrap=20
functionality in a Runnable if you don=E2=80=99t need to return a value, =
or in a=20
Callable if you need to return a value, and then it is submitted to the=20
Executor. Here is a very basic example of the executor.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"type">class</SPAN> <SPAN class=3D"class">EchoService</SPAN>{=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">ExecutorService</SPAN> =3D=0A=
      <SPAN =
class=3D"predefined-type">Executors</SPAN>.newSingleThreadExecutor();=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> echoAsynchronously(<SPAN =
class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> msg){=0A=
      executor.execute(<SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">Runnable</SPAN>(){=0A=
         <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> run() {=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(msg);=0A=
         }=0A=
      });=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>So while a worker thread is processing the task, the thread that =
submitted=20
the task is free to work asynchronously. There is virtually no limit in =
what you=20
can do in a task: you can perform complex database operations, perform =
intensive=20
CPU or I/O operations, render images, etc.</P></DIV>
<DIV class=3D"paragraph">
<P>However, the problem in a distributed system is that the default
 implementation of the Executor, which is the ThreadPoolExecutor, is =
designed to
 run within a single JVM. In a distributed system, you want that a task
 submitted in one JVM can be processed in another JVM. Luckily, =
Hazelcast
 provides the <CODE>IExecutorService</CODE>, which extends the=20
<CODE>java.util.concurrent.ExecutorService</CODE>. It is designed to be =
used in=20
a distributed environment. The <CODE>IExecutorService</CODE> is new in =
Hazelcast=20
3.x.</P></DIV>
<DIV class=3D"paragraph">
<P>Let=E2=80=99s start with a simple example of =
<CODE>IExecutorService</CODE>, where a=20
task is executed that does some waiting and echoes a message.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">EchoTask</SPAN> <SPAN =
class=3D"directive">implements</SPAN> <SPAN =
class=3D"predefined-type">Runnable</SPAN>, <SPAN =
class=3D"predefined-type">Serializable</SPAN> {=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> msg;=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> EchoTask(<SPAN =
class=3D"predefined-type">String</SPAN> msg) {=0A=
      <SPAN class=3D"local-variable">this</SPAN>.msg =3D msg;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> run() {=0A=
      <SPAN class=3D"keyword">try</SPAN> {=0A=
         <SPAN class=3D"predefined-type">Thread</SPAN>.sleep(<SPAN =
class=3D"integer">5000</SPAN>);=0A=
      } <SPAN class=3D"keyword">catch</SPAN> (<SPAN =
class=3D"exception">InterruptedException</SPAN> e) {=0A=
      }=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">echo:</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN> =
+ msg);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This <CODE>EchoTask</CODE> implements the <CODE>Runnable</CODE> =
interface so=20
that it can be submitted to the Executor. It also implements the=20
<CODE>Serializable</CODE> interface because it could be sent to a =
different JVM=20
to be processed. Instead of making the class Serializable, you could =
also rely=20
on other serialization mechanisms; see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serialization-start">Se=
rialization</A>.</P></DIV>
<DIV class=3D"paragraph">
<P>The next part is the <CODE>MasterMember</CODE> that is responsible =
for=20
submitting (and executing) 1000 echo messages:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">MasterMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      IExecutorService executor =3D hz.getExecutorService(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">exec</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">1</SPAN>; k =
&lt;=3D <SPAN class=3D"integer">1000</SPAN>; k++) {=0A=
         <SPAN class=3D"predefined-type">Thread</SPAN>.sleep(<SPAN =
class=3D"integer">1000</SPAN>);=0A=
         <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Producing echo task: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + k);=0A=
         executor.execute(<SPAN class=3D"keyword">new</SPAN> =
EchoTask(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + k));=0A=
      }=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">EchoTaskMain finished!</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>First, we retrieve the executor from the =
<CODE>HazelcastInstance</CODE>. Then=20
we slowly submit 1000 echo tasks. One of the differences between =
Hazelcast 2.x=20
and Hazelcast 3.x is that the=20
<CODE>HazelcastInstance.getExecutorService()</CODE> method has =
disappeared; you=20
now always need to provide a name instead of relying on the default one. =
By=20
default, Hazelcast configures the executor with 8 threads in the pool. =
For our=20
example we only need one, so we configure it in the =
<CODE>hazelcast.xml</CODE>=20
file like this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;executor-service</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">exec</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;pool-size&gt;</SPAN>1<SPAN =
class=3D"tag">&lt;/pool-size&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/executor-service&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Another difference from Hazelcast 2.x is that the =
<CODE>core-pool-size</CODE>=20
and <CODE>keep-alive-seconds</CODE> properties have disappeared, so the =
pool=20
will have a fixed size.</P></DIV>
<DIV class=3D"paragraph">
<P>When the <CODE>MasterMember</CODE> is started, you will get output =
like=20
this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Producing echo task: 1=0A=
Producing echo task: 2=0A=
Producing echo task: 3=0A=
Producing echo task: 4=0A=
Producing echo task: 5=0A=
echo:1=0A=
....</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The production of messages is 1 per second and the processing is 0.2 =
per=20
second (the echo task sleeps 5 seconds). This means that we produce work =
5 times=20
faster than we are able to process it. Apart from making the EchoTask =
faster,=20
there are 2 dimensions for scaling:</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>Scale up</P></LI>
  <LI>
  <P>Scale out</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>Both are explained below. In practice, they are often =
combined.</P></DIV>
<DIV class=3D"sect2">
<H3 id=3D"scaling-up">6.1. Scaling Up</H3>
<DIV class=3D"paragraph">
<P>Scaling up, also called vertical scaling, is done by increasing the
 processing capacity on a single JVM. Since each thread in the example =
can=20
process 0.2 messages/second and we produce 1 message/second, if the =
Executor has
 5 threads it can process messages as fast as they are =
produced.</P></DIV>
<DIV class=3D"paragraph">
<P>When you scale up, you need to look carefully at the JVM to see if it =
can=20
handle the additional load. If not, you may need to increase its =
resources (CPU,=20
memory, disk, etc.). If you fail to do so, the performance could degrade =
instead=20
of improving.</P></DIV>
<DIV class=3D"paragraph">
<P>Scaling up the <CODE>ExecutorService</CODE> in Hazelcast is simple, =
just
 increment the maximum pool size. Since we know that 5 threads is going =
to give
 maximum performance, let=E2=80=99s set them to 5.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;executor-service</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">exec</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;pool-size&gt;</SPAN>5<SPAN =
class=3D"tag">&lt;/pool-size&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/executor-service&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When we run the <CODE>MasterNode</CODE> we=E2=80=99ll see something =
like=20
this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Producing echo task: 1=0A=
Producing echo task: 2=0A=
Producing echo task: 3=0A=
Producing echo task: 4=0A=
Producing echo task: 5=0A=
echo:1=0A=
Producing echo task: 6=0A=
echo:2=0A=
Producing echo task: 7=0A=
echo:3=0A=
Producing echo task: 8=0A=
echo:4=0A=
...</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>As you can see, the tasks are being processed as quickly as they are =
being=20
produced.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"scaling-out">6.2. Scaling Out</H3>
<DIV class=3D"paragraph">
<P>Scaling up was very simple since there were enough CPU and memory =
capacity.=20
But one or more of the resources can often be the limiting factor. In =
practice,=20
increasing the computing capacity within a single machine will reach a =
point=20
where it isn=E2=80=99t cost efficient since the expenses go up quicker =
than the capacity=20
improvements.</P></DIV>
<DIV class=3D"paragraph">
<P>Scaling out, also called horizontal scaling, is orthogonal to scaling =
up.=20
Instead of increasing the capacity of the system by increasing the =
capacity of a=20
single machine, we just add more machines. In our case, we can safely =
start=20
multiple Hazelcast members on the same machine since processing the task =
doesn=E2=80=99t=20
consume resources while the task waits. But in real systems, you =
probably want=20
to add more machines (physical or virtualized) to the cluster.</P></DIV>
<DIV class=3D"paragraph">
<P>To scale up our echo example, we can add the following very basic =
slave
 member:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"keyword">import</SPAN> <SPAN =
class=3D"include">com.hazelcast.core</SPAN>.*;=0A=
<SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">class</SPAN> <SPAN class=3D"class">SlaveMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
      Hazelcast.newHazelcastInstance();=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>We don=E2=80=99t need to do anything else. This member will =
automatically participate=20
in the executor that was started in the master node and start processing =

tasks.</P></DIV>
<DIV class=3D"paragraph">
<P>If one master and slave are started, you will see that the slave =
member is=20
processing tasks as well:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>echo:31=0A=
echo:33=0A=
echo:35</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>So in only a few lines of code, we are now able to scale out! If you =
want,=20
you can start more slave members, but with tasks being created at 1 task =
per=20
second, maximum performance is reached with 4 slaves.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"routing">6.3. Routing</H3>
<DIV class=3D"paragraph">
<P>Until now, we didn=E2=80=99t care which member did the actual =
processing of the task,=20
as long as a member picks it up. But in some cases you want to have that =

control. Luckily, the <CODE>IExecutorService</CODE> provides different =
ways to=20
route tasks.</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>Any member. This is the default configuration.</P></LI>
  <LI>
  <P>A specific member.</P></LI>
  <LI>
  <P>The member hosting a specific key.</P></LI>
  <LI>
  <P>All or subset of the members.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>In the previous section, we already covered the first way: routing to =
any=20
member. In the following sections, we=E2=80=99ll explain the last 3 =
routing strategies.=20
This is where a big difference is visible between Hazelcast 2.x and 3.x: =
while=20
2.x relied on the <CODE>DistributedTask</CODE>, 3.x relies on explicit =
routing
 methods on the <CODE>IExecutorService</CODE>.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"executing-on-a-specific-member">6.3.1. Executing on a Specific =

Member</H4>
<DIV class=3D"paragraph">
<P>In some cases, you may want to execute a task on a specific member. =
As an
 example, we will send an echo task to each member in the cluster. This =
is done=20
by retrieving all members using the Cluster object and iterating over =
the=20
cluster members. To each of the members, we send an echo message =
containing=20
their own address.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">MasterMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      IExecutorService executorService =3D hz.getExecutorService(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">ex</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"predefined-type">Member</SPAN> member : =
hz.getCluster().getMembers()) {=0A=
         EchoTask task =3D <SPAN class=3D"keyword">new</SPAN> =
EchoTask(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">echo</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN> +=0A=
            member.getInetSocketAddress());=0A=
         executorService.executeOnMember(task, member);=0A=
      }=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When we start a few slaves and a master, we=E2=80=99ll get output =
like:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Members [2] {=0A=
   Member [192.168.1.100]:5702 this=0A=
   Member [192.168.1.100]:5703=0A=
}=0A=
...=0A=
echo/192.168.1.100:5702</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>As you can see, the EchoTasks are executed on the correct=20
member.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"executing-on-key-owner">6.3.2. Executing on Key Owner</H4>
<DIV class=3D"paragraph">
<P>When an operation is executed in a distributed system, that operation =
often=20
needs to access distributed resources. If these resources are hosted on =
a=20
different member then where the task is running, scalability and =
performance may=20
suffer due to remoting overhead. Luckily, this problem can be solved by=20
improving locality of reference.</P></DIV>
<DIV class=3D"paragraph">
<P>In Hazelcast, this can be done by placing the resources for a task in =
a=20
partition and sending the task to the member that owns that partition. =
When you=20
design a distributed system, perhaps the most fundamental step is =
designing the=20
partitioning scheme.</P></DIV>
<DIV class=3D"paragraph">
<P>As an example, we will create a distributed system where there is =
dummy data=20
in a map. For every key in that map, we will execute a verify task. This =
task=20
will verify if it has been executed on the same member as where the =
partition=20
for that key resides.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">VerifyTask</SPAN> <SPAN =
class=3D"directive">implements</SPAN>=0A=
       <SPAN class=3D"predefined-type">Runnable</SPAN>, <SPAN =
class=3D"predefined-type">Serializable</SPAN>, HazelcastInstanceAware {=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> key;=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">transient</SPAN> HazelcastInstance hz;=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> VerifyTask(<SPAN =
class=3D"predefined-type">String</SPAN> key) {=0A=
      <SPAN class=3D"local-variable">this</SPAN>.key =3D key;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> setHazelcastInstance(HazelcastInstance hz) {=0A=
      <SPAN class=3D"local-variable">this</SPAN>.hz =3D hz;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> run() {=0A=
      IMap map =3D hz.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">map</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"type">boolean</SPAN> localKey =3D =
map.localKeySet().contains(key);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Key is local:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + localKey);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you look at the <CODE>run</CODE> method, you can see that it =
accesses the=20
map, retrieves all the keys that are owned by this member using the=20
<CODE>IMap.localKeySet()</CODE> method, checks if the key is contained =
in that=20
key set and prints the result. This task implements=20
<CODE>HazelcastInstanceAware</CODE>, signaling to Hazelcast that when =
this class=20
is deserialized for execution, it will inject the =
<CODE>HazelcastInstance</CODE>=20
executing that task. For more information, see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#hazelcastinstanceaware"=
>Serialization:=20
HazelcastInstanceAware</A>.</P></DIV>
<DIV class=3D"paragraph">
<P>The next step is the <CODE>MasterMember</CODE>. First, it creates a =
map with=20
some entries; we only care about the key so the value is bogus. Then, it
 iterates over the keys in the map and sends a <CODE>VerifyTask</CODE> =
for each=20
key.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">MasterMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">String</SPAN>&gt; map =3D hz.getMap(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">map</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
<SPAN class=3D"integer">10</SPAN>; k++)=0A=
         map.put(<SPAN =
class=3D"predefined-type">UUID</SPAN>.randomUUID().toString(), <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      IExecutorService executor =3D hz.getExecutorService(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">exec</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"predefined-type">String</SPAN> key : map.keySet())=0A=
         executor.executeOnKeyOwner(<SPAN class=3D"keyword">new</SPAN> =
VerifyTask(key), key);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>We are now relying on the <CODE>executeOnKeyOwner</CODE> to execute a =
task on=20
the member owning a specific key. To verify the routing, we first start =
a few=20
slaves and then we start a master. We=E2=80=99ll see output like =
this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>key is local:true=0A=
key is local:true=0A=
...</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The tasks are executed on the same member as where the data=20
resides.</P></DIV>
<DIV class=3D"paragraph">
<P>From Hazelcast 2.x, an alternative way of executing a request on a =
specific=20
member has been to let the task implement the=20
<CODE>HazelcastPartitionAware</CODE> interface and use the =
<CODE>execute</CODE>=20
or <CODE>submit</CODE> method on the <CODE>IExecutorService</CODE>. The=20
<CODE>HazelcastPartitionAware</CODE> exposes the =
<CODE>getPartitionKey</CODE>=20
method that the executor uses to figure out the key of the partition to =
route=20
to. If a null value is returned, any partition will do.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"executing-on-all-or-subset-of-members">6.3.3. Executing on All =
or Subset=20
of Members</H4>
<DIV class=3D"paragraph">
<P>In some cases, you may want to execute a task on multiple members, or =
even on=20
all members. Use this functionality wisely, since it will create a load =
on=20
multiple members, potentially all members, and therefore it can reduce=20
scalability.</P></DIV>
<DIV class=3D"paragraph">
<P>The following example has a set of members. On these members, there =
is a=20
distributed map containing some entries. Each entry has a UUID as key =
and 1 as=20
value. To demonstrate executing a task on all members, we will create a=20
distributed sum operation that sums all values in the map.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">SumTask</SPAN> <SPAN =
class=3D"directive">implements</SPAN>=0A=
       <SPAN class=3D"predefined-type">Callable</SPAN>&lt;<SPAN =
class=3D"predefined-type">Integer</SPAN>&gt;, <SPAN =
class=3D"predefined-type">Serializable</SPAN>, HazelcastInstanceAware {=0A=
=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">transient</SPAN> HazelcastInstance hz;=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> setHazelcastInstance(HazelcastInstance hz) {=0A=
      <SPAN class=3D"local-variable">this</SPAN>.hz =3D hz;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Integer</SPAN> call() <SPAN =
class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">Exception</SPAN> {=0A=
      IMap&lt;<SPAN class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; map =3D hz.getMap(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">map</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"type">int</SPAN> result =3D <SPAN =
class=3D"integer">0</SPAN>;=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"predefined-type">String</SPAN> key : map.localKeySet()) {=0A=
         <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Calculating for key: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + key);=0A=
         result +=3D map.get(key);=0A=
      }=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Local Result: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + result);=0A=
      <SPAN class=3D"keyword">return</SPAN> result;=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When this <CODE>SumTask</CODE> is called, it retrieves the map and =
then=20
iterates over all local keys, sums the values, and returns the =
result.</P></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>MasterMember</CODE> will first create the map with some =
entries.=20
Then it will submit the <CODE>SumTask</CODE> to each member. The result =
will be=20
a map of <CODE>Future</CODE> instances. And finally we=E2=80=99ll join =
all the futures,=20
sum the result, and print it:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">MasterMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>,<SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; map =3D hz.getMap(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">map</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
<SPAN class=3D"integer">5</SPAN>; k++)=0A=
         map.put(<SPAN =
class=3D"predefined-type">UUID</SPAN>.randomUUID().toString(), <SPAN =
class=3D"integer">1</SPAN>);=0A=
      IExecutorService executor =3D hz.getExecutorService(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">exec</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">Member</SPAN>,<SPAN =
class=3D"predefined-type">Future</SPAN>&lt;<SPAN =
class=3D"predefined-type">Integer</SPAN>&gt;&gt; result =3D=0A=
         executor.submitToAllMembers (<SPAN class=3D"keyword">new</SPAN> =
SumTask());=0A=
      <SPAN class=3D"type">int</SPAN> sum =3D <SPAN =
class=3D"integer">0</SPAN>;=0A=
      <SPAN class=3D"keyword">for</SPAN>(<SPAN =
class=3D"predefined-type">Future</SPAN>&lt;<SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; future: result.values())=0A=
         sum+=3Dfuture.get();=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Result: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + sum);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When we start one slave and then a master member, we=E2=80=99ll see =
something like
 this for the slave:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Calculating for key: 6ed5fe89-b2f4-4644-95a3-19dffcc71a25=0A=
Calculating for key: 5c870a8c-e8d7-4a26-b17b-d94c71164f3f=0A=
Calculating for key: 024b1c5a-21d4-4f46-988b-67a567ae80c9=0A=
Local Result: 3</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>And for the master member:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Calculating for key: 516bd5d3-8e47-48fb-8f87-bb647d7f3d1f=0A=
Calculating for key: 868b2f1e-e03d-4f1a-b5a8-47fb317f5a39=0A=
Local Result: 2=0A=
Result: 5</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In this example, we execute a task on all members. If you only want =
to=20
execute a task on a subset of members, you can call the=20
<CODE>submitToMembers</CODE> method and pass the subset of =
members.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Not possible to send Runnable to every partition:</EM> There is =
no direct
 support to send a runnable to every partition. If this is an issue, the =
SPI=20
could be a solution since Operations can be routed to specific =
partitions. You=20
could build such an executor on top of the SPI.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"futures">6.3.4. Futures</H4>
<DIV class=3D"paragraph">
<P>The <CODE>Executor</CODE> interface only exposes a single <CODE>void=20
execute(Runnable)</CODE> method that can be called to have a=20
<CODE>Runnable</CODE> asynchronously executed. But in some cases, you =
need to=20
synchronize on results: for example, when you use a =
<CODE>Callable</CODE> or you=20
just want to wait till a task completes. You can do this by using the=20
<CODE>java.util.concurrent.Future</CODE> in combination with one of the =
submit=20
methods of the <CODE>IExecutorService</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>To demonstrate the <CODE>Future</CODE>, we will calculate a Fibonacci =
number
 by wrapping the calculation in a callable and synchronizing on the
 result.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">FibonacciCallable</SPAN>=0A=
       <SPAN class=3D"directive">implements</SPAN> <SPAN =
class=3D"predefined-type">Callable</SPAN>&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>&gt;, <SPAN =
class=3D"predefined-type">Serializable</SPAN> {=0A=
=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN class=3D"type">int</SPAN> input;=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> FibonacciCallable(<SPAN =
class=3D"type">int</SPAN> input) {=0A=
      <SPAN class=3D"local-variable">this</SPAN>.input =3D input;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Long</SPAN> call() {=0A=
      <SPAN class=3D"keyword">return</SPAN> calculate(input);=0A=
   }=0A=
=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"type">long</SPAN> calculate(<SPAN class=3D"type">int</SPAN> n) {=0A=
      <SPAN class=3D"keyword">if</SPAN> (n &lt;=3D <SPAN =
class=3D"integer">1</SPAN>) <SPAN class=3D"keyword">return</SPAN> n;=0A=
      <SPAN class=3D"keyword">else</SPAN> <SPAN =
class=3D"keyword">return</SPAN> calculate(n - <SPAN =
class=3D"integer">1</SPAN>) + calculate(n - <SPAN =
class=3D"integer">2</SPAN>);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The next step is to submit the task and use a <CODE>Future</CODE> to=20
synchronize on results.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">MasterMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      IExecutorService executor =3D hz.getExecutorService(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">exec</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"type">int</SPAN> n =3D <SPAN =
class=3D"predefined-type">Integer</SPAN>.parseInt(args[<SPAN =
class=3D"integer">0</SPAN>]);=0A=
      <SPAN class=3D"predefined-type">Future</SPAN>&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>&gt; future =3D=0A=
         executor.submit(<SPAN class=3D"keyword">new</SPAN> =
FibonacciCallable(n));=0A=
      <SPAN class=3D"keyword">try</SPAN> {=0A=
         <SPAN class=3D"type">long</SPAN> result =3D future.get(<SPAN =
class=3D"integer">10</SPAN>, <SPAN =
class=3D"predefined-type">TimeUnit</SPAN>.SECONDS);=0A=
         <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Result: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+result);=0A=
      } <SPAN class=3D"keyword">catch</SPAN> (<SPAN =
class=3D"exception">TimeoutException</SPAN> ex) {=0A=
         <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">A timeout happened</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      }=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When we call the <CODE>executorService.submit(Callable)</CODE> =
method, we get=20
back a <CODE>Future</CODE> as result. This <CODE>Future</CODE> allows us =
to=20
synchronize on completion or cancel the computation.</P></DIV>
<DIV class=3D"paragraph">
<P>When we run this application with 5 as the argument, the output will=20
be:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Result: 5</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When you run this application with 500 as argument, it will probably =
take=20
more than 10 seconds to complete and therefore the =
<CODE>future.get</CODE> will
 timeout. When the timeout happens, a TimeoutException is thrown. If it =
doesn=E2=80=99t=20
timeout on your machine, it could be that your machine is very quick and =
you=20
need to use a smaller timeout. Unlike Hazelcast 2.x, in Hazelcast 3.0 it =
isn=E2=80=99t=20
possible to cancel a future. One possible solution is to let the task=20
periodically check if a certain key in a distributed map exists. A task =
can then=20
be cancelled by writing some value for that key. You need to take care =
removing=20
keys to prevent this map from growing; you can do this by using the time =
to live
 setting.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"execution-callback">6.4. Execution Callback</H3>
<DIV class=3D"paragraph">
<P>With a future, it is possible to synchronize on task completion. In =
some
 cases, you want to synchronize on the completion of the task before =
executing=20
some logic, and in the same thread that submitted the task. In other =
cases, you=20
want this post-completion logic to be executed asynchronously so that =
the=20
submitting thread doesn=E2=80=99t block. Hazelcast provides a solution =
for this using=20
the <CODE>ExecutionCallback</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>In the <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#futures">Futures=20
section</A>, an example was shown where a Fibonacci number is =
calculated.=20
Waiting for the completion of that operation is done using a Future. In =
the=20
following example, we calculate a Fibonacci number, but instead of =
waiting for=20
that task to complete, we register an <CODE>ExecutionCallback</CODE> =
where we=20
print the result asynchronously.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">MasterMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args){=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      IExecutorService executor =3D hz.getExecutorService(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">exec</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      ExecutionCallback&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>&gt; callback =3D=0A=
           <SPAN class=3D"keyword">new</SPAN> ExecutionCallback&lt;<SPAN =
class=3D"predefined-type">Long</SPAN>&gt;() {=0A=
         <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> onFailure(<SPAN =
class=3D"predefined-type">Throwable</SPAN> t) {=0A=
            t.printStackTrace();}=0A=
         <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> onResponse(<SPAN =
class=3D"predefined-type">Long</SPAN> response) {=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Result: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + response);}=0A=
      };=0A=
      executor.submit(<SPAN class=3D"keyword">new</SPAN> =
FibonacciCallable(<SPAN class=3D"integer">10</SPAN>), callback);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Fibonacci task submitted</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>ExecutionCallback</CODE> has 2 methods. One method is =
called on a=20
valid response and prints it. The other method is called on failure and =
it=20
prints the stacktrace.</P></DIV>
<DIV class=3D"paragraph">
<P>If you run this example you will see the following output:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Fibonacci task submitted=0A=
Result: 55</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The thread that submitted the tasks to be executed was not blocked.=20
Eventually, the result of the Fibonacci calculation will be=20
printed.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"good-to-know">6.5. Good to know</H3>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>Work-queue has no high availability:</EM> Each member creates one =
or more=20
local ThreadPoolExecutors with ordinary work queues that do the real =
work. When=20
a task is submitted, it is put on the work queue of that=20
<CODE>ThreadPoolExecutor</CODE> and is not backed up by Hazelcast. If =
something=20
happens with that member, all unprocessed work will be lost.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Work-queue is not partitioned:</EM> Each member specific executor =
will=20
have its own private work queue. Once an item is placed on that queue, =
it will=20
not be taken by a different member. So it could be that one member has a =
lot of=20
unprocessed work, and another is idle.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Work-queue by default has unbound capacity:</EM> This can lead to
 OutOfMemoryErrors because the number of queued tasks can grow without =
being=20
limited. You can solve this by setting the =
<CODE>&lt;queue-capacity&gt;</CODE>
 property on the executor service. If a new task is submitted while the =
queue is=20
full, the call will not block, but it immediately throws a=20
<CODE>RejectedExecutionException</CODE> that needs to be dealt with. =
Perhaps in
 the future, blocking with configurable timeout will be made=20
available.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>No Load Balancing:</EM> This is currently available for tasks =
that can=20
run on any member. In the future, there will probably be a customizable =
load=20
balancer interface where load balancing could be done on the number of=20
unprocessed tasks, CPU load, memory load, etc. If load balancing is =
needed, you=20
can create an <CODE>IExecutorService</CODE> proxy that wraps the one =
returned by=20
Hazelcast. Using the members from the ClusterService or member =
information from
 SPI:MembershipAwareService, it could route free tasks to a specific =
member=20
based on load.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Destroying Executors:</EM> You need to be careful when shutting =
down an=20
<CODE>IExecutorService</CODE> because it will shutdown all corresponding =

executors in every member, and therefore subsequent calls to proxy will =
result=20
in a <CODE>RejectedExecutionException</CODE>. When the executor is =
destroyed and=20
later a <CODE>HazelcastInstance.getExecutorService</CODE> is done with =
the ID of=20
the destroyed executor, then a new executor will be created as if the =
old one
 never existed.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Executors doesn=E2=80=99t log exceptions:</EM> When a task fails =
with an=20
exception or an error, this exception will not be logged by Hazelcast. =
This is
 in line with the <CODE>ThreadPoolExecutorService</CODE> from Java, but =
it can=20
be annoying when you are spending a lot of time trying to find out why =
something
 doesn=E2=80=99t work. This can easily be fixed. You can add a try/catch =
in your
 runnable and log the exception. You can also wrap the runnable/callable =
in a=20
proxy that does the logging; the last option will keep your code a bit
 cleaner.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>HazelcastInstanceAware:</EM> When a task is deserialized, in a =
lot of=20
cases you need to access the <CODE>HazelcastInstance</CODE>. This can be =
done by
 letting the task implement <CODE>HazelcastInstanceAware</CODE>. For =
more=20
information, see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#hazelcastinstanceaware"=
>Serialization:=20
HazelcastInstanceAware</A>.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-is-next">6.6. What is next</H3>
<DIV class=3D"paragraph">
<P>In this chapter, we explored the distributed execution of tasks using =
the
 Hazelcast ExecutorService.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"distributed-topic">7. Distributed Topic</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>In the <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#distributed-collections=
">Distributed=20
Collections</A> chapter, we talked about the <CODE>IQueue</CODE>, which =
you can=20
use to create point-to-point message solutions. In such solutions, there =
can be=20
multiple publishers, but each message will be consumed by a single =
consumer. An=20
alternative approach is the publish/subscribe mechanism, where a single =
message=20
can be consumed by multiple subscribers.</P></DIV>
<DIV class=3D"sect2">
<H3 id=3D"itopic">7.1. ITopic</H3>
<DIV class=3D"paragraph">
<P>Hazelcast provides a publish/subscribe mechanism:=20
<CODE>com.hazelcast.core.ITopic</CODE> is a distributed solution for =
publishing
 messages to multiple subscribers. Any number of members can publish =
messages to=20
a topic, and any number of members can receive messages for the topics =
they have=20
subscribed to. The message can be an ordinary POJO, although it must be =
able to=20
serialize (see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serialization-start">Se=
rialization</A>)=20
since it needs to go over the wire.</P></DIV>
<DIV class=3D"paragraph">
<P>We=E2=80=99ll show you how the distributed topic works based on a =
simple example=20
where a single topic is shared between a publisher and a subscriber. The =

publisher publishes the current date on the topic.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">PublisherMember</SPAN> {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args){=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        ITopic&lt;<SPAN class=3D"predefined-type">Date</SPAN>&gt; topic =
=3D hz.getTopic(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">topic</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        topic.publish(<SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">Date</SPAN>());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Published</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The subscriber acquires the same topic and adds a=20
<CODE>MessageListener</CODE> to subscribe itself to the topic.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">SubscribedMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args){=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        ITopic&lt;<SPAN class=3D"predefined-type">Date</SPAN>&gt; topic =
=3D hz.getTopic(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">topic</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        topic.addMessageListener(<SPAN class=3D"keyword">new</SPAN> =
MessageListenerImpl());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Subscribed</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
    }=0A=
=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">MessageListenerImpl</SPAN>=0A=
                   <SPAN class=3D"directive">implements</SPAN> =
MessageListener&lt;<SPAN class=3D"predefined-type">Date</SPAN>&gt; {=0A=
=0A=
        <SPAN class=3D"annotation">@Override</SPAN>=0A=
        <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> onMessage(Message&lt;<SPAN =
class=3D"predefined-type">Date</SPAN>&gt; m) {=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Received: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+m.getMessageObject());=0A=
        }=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When we start up the subscriber, we=E2=80=99ll see "Subscribed" in =
the console. Then=20
we start the publisher, and after it publishes the message "Published", =
the=20
subscriber will output something like:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Received: Sat Feb 15 13:05:24 EEST 2013</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>To make it more interesting, you can start multiple subscribers. If =
you run=20
the publisher again, all subscribers will receiving the same published=20
message.</P></DIV>
<DIV class=3D"paragraph">
<P>In the <CODE>SubscribedMember</CODE> example, we dynamically =
subscribe to a=20
topic. If you prefer a more static approach, you can also subscribe to a =
topic=20
through the configuration file.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;topic</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">topic</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;message-listeners&gt;</SPAN>=0A=
        <SPAN =
class=3D"tag">&lt;message-listener&gt;</SPAN>MessageListenerImpl<SPAN =
class=3D"tag">&lt;/message-listener&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;/message-listeners&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/topic&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Hazelcast uses reflection to create an instance of the=20
<CODE>MessageListenerImpl</CODE>. For this to work, this class needs to =
have a
 no-arg constructor. If you need more flexibility creating a=20
<CODE>MessageListener</CODE> implementation, you could have a look at =
the=20
programmatic configuration where you can pass an explicit instance =
instead of a=20
class.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">Config config =
=3D <SPAN class=3D"keyword">new</SPAN> Config();=0A=
TopicConfig topicConfig =3D <SPAN class=3D"keyword">new</SPAN> =
TopicConfig();=0A=
topicConfig.setName(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">topic</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
MessageListener listener =3D <SPAN class=3D"keyword">new</SPAN> =
YourMessageListener(arg1,arg2,...);=0A=
topicConfig.addMessageListenerConfig(<SPAN class=3D"keyword">new</SPAN> =
ListenerConfig(listener));=0A=
config.addTopicConfig(topicConfig);</CODE></PRE></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"message-ordering">7.1.1. Message Ordering</H4>
<DIV class=3D"paragraph">
<P>Hazelcast provides certain ordering guarantees on the delivery of =
messages.=20
If a cluster member publishes a sequence of messages, then Hazelcast =
guarantees=20
that each <CODE>MessageListener</CODE> will receive these messages in =
the order=20
they were published by that member. If messages m1, m2, m3 are published =
(in=20
this order) by member M, then each listener will receive the messages in =
the=20
same order: m1, m2, m3.</P></DIV>
<DIV class=3D"paragraph">
<P>Even though messages will be received in the same order by default, =
nothing=20
can be done about the ordering of messages sent by different members. =
Imagine=20
that member M sends m1, m2, m3 and member N sends n1, n2, n2. Then =
listener1=20
could receive m1, m2, m3, n1, n2, n3, but listener2 could receive n1, =
m1, n2,=20
m2, n3, m3. This is valid because, in both cases, the ordering of =
messages send=20
by M or N is not violated.</P></DIV>
<DIV class=3D"paragraph">
<P>But in some cases, you want all listeners to receive the messages in =
exactly=20
the same order. If listener1 receives m1, m2, m3, n1, n2, and n3 in that =
order,
 then you want listener2 to receive the messages in exactly the same =
order. To
 realize this ordering guarantee, Hazelcast provides a=20
<CODE>global-order-enabled</CODE> setting. Be careful, it will have a
 considerable impact on throughput and latency.</P></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>global-order-enabled</CODE> setting doesn=E2=80=99t do =
anything about=20
synchronization between listener1 and listener2. So it could be that =
listener1=20
already is processing n3 (the last message in the sequence) but listener =
is=20
still busy processing m1 (the first message in the=20
sequence).</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"reliable-topic">7.2. Reliable Topic</H3>
<DIV class=3D"paragraph">
<P>In some of the rare cases, using Hazelcast Topic in conjunction with =
other=20
heavily operated distributed components such as IMap, IQueue, etc., =
could result=20
in scenarios with unexpected behaviour. See below for details.</P></DIV>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>Topics use same event queue as other components of Hazelcast, which =
further
   means sharing of resources. Having lot of events being created and=20
  transmitted inside the cluster may result in unpredictable performance =
of=20
  Hazelcast Topics.</P></LI>
  <LI>
  <P>Also, there could be instances of unprocessed events due to slow =
listeners,=20
  and this may affect other Topics as they share the same queue to =
publish and=20
  deliver messages.</P></LI>
  <LI>
  <P>There could also be scenarios where a message could be lost, such =
as:</P>
  <DIV class=3D"ulist">
  <UL>
    <LI>
    <P>to prevent the system from going OOM, the event queue is normally =

    restricted with capacity (default is 1,000,000). So, if the queue is =
full=20
    and a message arrives, the event gets dropped.</P></LI>
    <LI>
    <P>if a member receives a message and the member crashes, the =
message is=20
    lost.</P></LI>
    <LI>
    <P>if a member sends a message on a topic but the message is still =
on=20
    transmission queue of the connection and the member crashes, the =
message is=20
    lost even though the topic.publish completed long time=20
  ago.</P></LI></UL></DIV></LI></UL></DIV></DIV></DIV>
<DIV class=3D"paragraph">
<P>To address these very precise corner cases and add to the richness of =
ITopic,=20
Hazelcast has introduced a new structure <CODE>ReliableTopic</CODE>. It =
can be=20
initialised as:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">PublisherMember</SPAN> {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args){=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        ITopic&lt;<SPAN class=3D"predefined-type">Date</SPAN>&gt; topic =
=3D hz.getReliableTopic(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">reliable-topic</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        topic.publish(<SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">Date</SPAN>());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Published</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P><CODE>ReliableTopic</CODE> is built using <CODE>RingBuffer</CODE>, =
the latest=20
addition in the collection of Hazelcast=E2=80=99s distributed data =
structures. Each=20
instance of ReliableTopic has its own RingBuffer to store messages.=20
ReliableTopic requires same process to add subscribers as in normal =
ITopic (see=20
above for more details) i.e. by implementing and adding the interface=20
<CODE>MessageListener</CODE>. Some of the immediate benefits that=20
<CODE>ReliableTopic</CODE> provides are listed below.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>Since each ReliableTopic instance has its own RingBuffer, there is =
no=20
  sharing of resources; for example, messages are processed directly =
from=20
  Topic=E2=80=99s RingBuffer without being placed on shared =
queue.</P></LI>
  <LI>
  <P>ReliableTopic can also be configured to use dedicated executor pool =
to=20
  process messages in its `RingBuffer. This translates into complete =
isolation=20
  and zero resource sharing.</P></LI>
  <LI>
  <P>Each RingBuffer is replicated on one of the other node in the =
cluster,=20
  which further means that all the messages have backup. Therefore, in =
case of a=20
  node failure, messages are not lost.</P></LI>
  <LI>
  <P>Each RingBuffer can have variable capacity, which allows you to =
restrict=20
  the number of messages that can be published on a Topic.</P></LI>
  <LI>
  <P>For slow subscribers, ReliableTopic does not allow other components =
of the=20
  cluster to slow down. In default situations, a slow listener will fall =
behind=20
  and may not receive the message it subscribed for. Check out=20
  <CODE>ReliableMessageListener</CODE> to learn how to obtain more =
control over=20
  the functioning of ReliableTopic with slow listeners.</P></LI>
  <LI>
  <P>While RingBuffer provides high performance reads, it also gives the =
reader=20
  the ability to reread a message, multiple times in case of an error. =
Hazelcast=20
  also performs appropriate responsive operations in various events such =
as=20
  capacity breach, etc. See <CODE>TopicOverloadPolicy</CODE> for more=20
  details.</P></LI></UL></DIV>
<DIV class=3D"sect3">
<H4 id=3D"message-ordering">7.2.1. Message Ordering</H4>
<DIV class=3D"paragraph">
<P>Messages are always ordered in <CODE>ReliableTopic</CODE> i.e. they =
are=20
always received in the same order as they were published. The property=20
<CODE>global-order-enabled</CODE> does not have any significance when =
used with=20
<CODE>ReliableTopic</CODE> and is ignored.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"scaling-up-the-messagelistener">7.3. Scaling up the =
MessageListener</H3>
<DIV class=3D"paragraph">
<P>Hazelcast uses the internal event system, which is also used by =
collections=20
events, to execute message listeners. This event system has a striped =
executor=20
where the correct index within that stripe is determined based on the =
topic=20
name.</P></DIV>
<DIV class=3D"paragraph">
<P>This means that by default, all messages sent by member X and topic T =
will=20
always be executed by the same thread. There are some limitations caused =
by this=20
approach. The most important is that if processing messages takes a lot =
of time,=20
the thread will not be able to process other events, and that could =
become=20
problematic. Another problem is that because the <CODE>ITopic</CODE> =
relies on=20
the event system, other Topics could be starved from threads.</P></DIV>
<DIV class=3D"paragraph">
<P>You can deal with this by increasing the number of threads running in =
the
 striped executor of the event system. Use the property=20
<CODE>hazelcast.event.thread.count</CODE>, which defaults to 5=20
threads.</P></DIV>
<DIV class=3D"paragraph">
<P>You can also deal with this by offloading the message processing to =
another=20
thread. You can implement this with the =
<CODE>StripedExecutor</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">SubscribedMember</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        ITopic&lt;<SPAN class=3D"predefined-type">Date</SPAN>&gt; topic =
=3D hz.getTopic(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">topic</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        topic.addMessageListener(<SPAN class=3D"keyword">new</SPAN> =
MessageListenerImpl(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">topic</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>));=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Subscribed</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
    }=0A=
=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN class=3D"directive">static</SPAN> =
StripedExecutor executor =3D <SPAN class=3D"keyword">new</SPAN> =
StripedExecutor(=0A=
        <SPAN =
class=3D"predefined-type">Executors</SPAN>.newFixedThreadPool(<SPAN =
class=3D"integer">10</SPAN>), <SPAN class=3D"integer">10</SPAN>=0A=
    );=0A=
=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">MessageListenerImpl</SPAN>=0A=
                   <SPAN class=3D"directive">implements</SPAN> =
MessageListener&lt;<SPAN class=3D"predefined-type">Date</SPAN>&gt; {=0A=
=0A=
        <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> topicName;=0A=
=0A=
        <SPAN class=3D"directive">public</SPAN> =
MessageListenerImpl(<SPAN class=3D"predefined-type">String</SPAN> =
topicName){=0A=
            <SPAN class=3D"local-variable">this</SPAN>.topicName =3D =
topicName;=0A=
        }=0A=
=0A=
        <SPAN class=3D"annotation">@Override</SPAN>=0A=
        <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> onMessage(<SPAN =
class=3D"directive">final</SPAN> Message&lt;<SPAN =
class=3D"predefined-type">Date</SPAN>&gt; m) {=0A=
            StripedRunnable task =3D <SPAN class=3D"keyword">new</SPAN> =
StripedRunnable() {=0A=
                <SPAN class=3D"annotation">@Override</SPAN>=0A=
                <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getKey() {=0A=
                    <SPAN class=3D"keyword">return</SPAN> =
topicName.hashCode();=0A=
                }=0A=
=0A=
                <SPAN class=3D"annotation">@Override</SPAN>=0A=
                <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> run() {=0A=
                    <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Received: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> +=0A=
                                       m.getMessageObject());=0A=
                }=0A=
            };=0A=
            executor.execute(task);=0A=
        }=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In this example, the work is offloaded to the striped executor with =
the=20
<CODE>StripedRunnable</CODE>, where the thread that executes the message =
is
 determined based on the topic name. In this example, the capacity work =
queue of=20
the executor is unbound, which could lead to OOME problems. In most =
cases, it is=20
better to give the work queue a maximum capacity so that a call can =
either fail=20
directly or wait until space becomes available (see the TimedRunnable to =
control=20
the timeout). Be careful about blocking for too long because the=20
<CODE>onMessage</CODE> is called by a Thread of the event system, and =
hogging=20
this thread could lead to problems in the system.</P></DIV>
<DIV class=3D"paragraph">
<P>In this case, there is only a single topic and we have a single =
executor. But=20
you could decide to create an executor per <CODE>ITopic</CODE>. If you =
don=E2=80=99t=20
care about ordering of the messages, you could use an ordinary executor =
instead=20
of a striped executor.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"good-to-know">7.4. Good to know</H3>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>Threading model:</EM> The <CODE>ITopic</CODE> is built on top of =
the=20
event system. For more information regarding the threading model of the=20
<CODE>ITopic</CODE>, see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#threading-model">Thread=
ing=20
Model</A>.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>HazelcastInstanceAware:</EM> If you need to access the=20
<CODE>HazelcastInstance</CODE> in the MessageListener, have it implement =
the=20
<CODE>HazelcastInstanceAware</CODE> interface. Hazelcast will then =
inject the=20
<CODE>HazelcastInstance</CODE> when the topic is created. Watch out if =
you have=20
passed a <CODE>MessageListener</CODE> instance to the =
<CODE>Config</CODE>=20
instead of a class, and you create multiple HazelcastInstances with it, =
because=20
the <CODE>MessageListener</CODE> will get different HazelcastInstances
 injected.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Not transactional:</EM> The <CODE>ITopic</CODE> is not =
transactional, so=20
be careful when it is used inside a transaction. If the transaction =
fails after=20
a message is sent or consumed and the transaction is rolled back, the =
message=20
sending or consumption will not be rolled back.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>No garbage collection:</EM> There is no garbage collection for =
the=20
topics. As long as the topics are not destroyed, they will be managed by =

Hazelcast. This can lead to memory issues since the topics are stored in =
memory.=20
There are a few ways to deal with this issue.</P></DIV>
<DIV class=3D"paragraph">
<P>One way is to create a garbage collection mechanism for the=20
<CODE>ITopic</CODE>. Create a topic statistics <CODE>IMap</CODE> with =
the topic=20
name as key, a pair containing the last processed message count, and =
timestamp=20
as value. When a topic is retrieved from the =
<CODE>HazelcastInstance</CODE>,=20
place an entry in the topic statistics map if it is missing. =
Periodically
 iterate over all topics from the topics statistics map, such as using =
the=20
<CODE>IMap.localKeySet()</CODE> method. Then retrieve the local =
statistics from=20
the <CODE>ITopic</CODE> using the =
<CODE>ITopic.getLocalTopicStats()</CODE>=20
method and check if the number of processed messages has changed, using =
the=20
information from the topic statistics map. If there is a difference, =
update the=20
topic statics in the map; the new timestamp can be determined using the=20
<CODE>Cluster.getClusterTime()</CODE> method. If there is no change, and =
the=20
time period between the current timestamp and the last timestamp exceeds =
a=20
certain threshold, the topic and the entry in the topic statistics map =
can be
 destroyed. This solution isn=E2=80=99t perfect, since it could happen =
that a message is=20
sent to a topic that has been destroyed; the topic will be recreated, =
but the
 subscribers are gone.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>No durable subscriptions:</EM> If a subscriber goes offline, it =
will not
 receive messages that were sent while it was offline.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>No metadata:</EM> The message is an ordinary POJO and therefore =
it=20
doesn=E2=80=99t contain any metadata (like a timestamp or an address) to =
reply to.=20
Luckily, this can be solved by wrapping the message in an envelop - a =
new POJO -=20
and setting the metadata on that envelop.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>No queue per topic:</EM> Hazelcast doesn=E2=80=99t publish the =
messages on a=20
topic specific queue. Instead, it makes a single stripe of queues: the =
event=20
queue. By default, the size of the queue is limited to 1,000,000, but =
you can
 change that with the <CODE>hazelcast.event.queue.capacity</CODE>=20
property.</P></DIV>
<DIV class=3D"paragraph">
<P>When the capacity of the queue is reached, the calling thread will =
block
 until either there is capacity on the queue or a timeout happens. When =
the
 timeout happens, Hazelcast logs a warning which includes the topic name =
and the=20
sender of the message. However, the producer of this message remains =
agnostic=20
about what happened.</P></DIV>
<DIV class=3D"paragraph">
<P>If the event queue is full, Hazelcast will block for a short period. =
The
 default is 250 ms, but you can change that using the=20
<CODE>hazelcast.event.queue.timeout.millis</CODE> property. Be careful =
making
 the timeout: you don=E2=80=99t own the blocked thread, and that could =
be an internal=20
Hazelcast thread, such as for dealing with I/O. When such a thread =
blocks for a=20
long period, it could lead to problems in other parts of the =
system.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>ReliableMessageListener Durable Subscription: the=20
</EM>ReliableMessageListener allows you to control where you want to =
start=20
processing a message when the listener is registered. This makes it =
possible to=20
create a durable subscription by storing the sequence of the last =
message and=20
using this sequenceId as the sequenceId to start from.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>ReliableMessageListener Delivery Guarantees: since the=20
</EM>ReliableMessageListener controls which item it wants to continue =
from on=20
restart, it is easy to provide an at-least-once or at-most-once delivery =

guarantee. Check out=20
<CODE>ReliableMessageListener.retrieveInitialSequence()</CODE> for more=20
details.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Statistics:</EM> If you are interested in obtaining =
<CODE>ITopic</CODE>=20
statistics, you can enable statistics using the =
<CODE>statistics-enabled</CODE>=20
property.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;topic</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">topic</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;statistics-enabled&gt;</SPAN>true<SPAN =
class=3D"tag">&lt;/statistics-enabled&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/topic&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The statistics, like total messages published/received, can only be =
accessed=20
from cluster members using <CODE>topic.getLocalTopicStats</CODE>. Topic
 statistics can=E2=80=99t be retrieved by the client, because only a =
member has
 knowledge about what happened to its topic. If you need to have global
 statistics, you need to aggregate the statistics of all=20
members.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-is-next">7.5. What is next</H3>
<DIV class=3D"paragraph">
<P>In this chapter we have seen <CODE>ITopic</CODE>. From a high level, =
there is=20
some overlap with JMS, but the provided functionality is limited. On the =
other=20
hand, <CODE>ITopic</CODE> is extremely easy to use, scalable, and it =
doesn=E2=80=99t
 require message brokers to be running.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"hazelcast-clients">8. Hazelcast Clients</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>So far in this book, the examples showed members that were full =
participants=20
in the cluster. Those members will know about others and they will host
 partitions. But in some cases, you only want to connect to the cluster =
to
 read/write data from the cluster or execute operations; you =
don=E2=80=99t want to=20
participate as a full member in the cluster. In other words, you want to =
have a=20
client.</P></DIV>
<DIV class=3D"paragraph">
<P>With the client, one can connect to the cluster purely as a client =
and not=20
have any of the responsibilities a normal cluster member has. When a =
Hazelcast=20
operation is performed by a client, the operation is forwarded to a =
cluster=20
member where it will be processed. A client needs both the Hazelcast =
core JAR=20
and the Hazelcast client JAR on the classpath.</P></DIV>
<DIV class=3D"paragraph">
<P>We will implement an example client where a message is put on a queue =
by a=20
client and taken from the queue by a full member. Let=E2=80=99s start =
with the full=20
member.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">FullMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN>{=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.print(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Full member up</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">BlockingQueue</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>&gt; queue =3D hz.getQueue(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">queue</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"keyword">for</SPAN>(;;)=0A=
         <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(queue.take());=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Below, you see the Hazelcast client example.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Client</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      ClientConfig clientConfig =3D <SPAN class=3D"keyword">new</SPAN> =
ClientConfig().addAddress(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">127.0.0.1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      HazelcastInstance client =3D =
HazelcastClient.newHazelcastClient(clientConfig);=0A=
      <SPAN class=3D"predefined-type">BlockingQueue</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>&gt; queue =3D =
client.getQueue(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">queue</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      queue.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Hello</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Message send by Client!</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The client <CODE>HazelcastInstance</CODE> is created based on the=20
<CODE>com.hazelcast.client.ClientConfig</CODE>. This config is =
configured with
 127.0.0.1 as the address since the full member will be running on the =
same
 machine as the client. If no port is specified, ports 5701, 5702 and =
5703 will=20
be checked. If the cluster is running on a different port, such as 6701, =
it can=20
be specified like this: =
<CODE>.addAddress("127.0.0.1:6701")</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>To see how the client is running, first start the full member and =
wait till=20
it is up. Then start the client. You will see that the server prints=20
<CODE>Hello</CODE>. If you look in the log for the full member, you will =
see
 that the client never pops up as a member of the cluster.</P></DIV>
<DIV class=3D"paragraph">
<P>In this example, we use programmatic configuration for the=20
<CODE>ClientConfig</CODE>. You can also configure a =
<CODE>ClientConfig</CODE>=20
using the configuration file by:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>using a properties based configuration file in combination with the =

  <CODE>com.hazelcast.client.config.ClientConfigBuilder</CODE>.</P></LI>
  <LI>
  <P>using an XML based configuration file in combination with the=20
  =
<CODE>com.hazelcast.client.config.XmlClientConfigBuilder</CODE>.</P></LI>=
</UL></DIV>
<DIV class=3D"paragraph">
<P>The advantage of configuring the Hazelcast client using a =
configuration file=20
is that you can easily pull the client configuration out of the code, =
which=20
makes the client more flexible. For example, you could use a different
 configuration file for every environment you are working in (dev, =
staging,=20
production). In some cases, the static nature of the configuration files =
can be=20
limiting if you need to have dynamic information, such as the addresses. =
For=20
that, you can first load the <CODE>ClientConfig</CODE> using a =
configuration=20
file, and then adjust the dynamic fields.</P></DIV>
<DIV class=3D"paragraph">
<P>If you create a <CODE>HazelcastInstance</CODE> using the following=20
code:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE =
data-lang=3D"java">HazelcastInstance hz =3D =
HazelcastClient.newHazelcastClient()</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Then Hazelcast will use the following sequence of steps to determine =
the
 client configuration file to use.</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>Hazelcast checks if there is a system property=20
  <CODE>hazelcast.client.config</CODE>. If it exists, it is used. This =
means=20
  that you can configure the configuration to use from the command line =
using=20
  <CODE>-Dhazelcast.client.config=3D/foo/bar/client.xml</CODE>. You can =
also refer=20
  to a classpath resource using=20
  <CODE>-Dhazelcast.client.config=3Dclasspath:client.xml</CODE>. This =
makes it=20
  possible to bundle multiple configurations in your JAR and select one =
on=20
  startup.</P></LI>
  <LI>
  <P>Checks if there is a file called <CODE>hazelcast-client.xml</CODE> =
in the
   working directory.</P></LI>
  <LI>
  <P>Checks if there is a file called <CODE>hazelcast-client.xml</CODE> =
on the=20
  classpath.</P></LI>
  <LI>
  <P>Defaults to <CODE>hazelcast-client-default.xml</CODE>, which is =
provided by=20
  Hazelcast.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>If you don=E2=80=99t configure anything, the client will use the =
default=20
configuration.</P></DIV>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P>With off-heap capabilities, Hazelcast is now seen as a primary player =
in the=20
vertical of Cache-As-A-Service use cases in a multi-tenant application. =
Normally=20
in such use cases, many clients communicate with a central repository of =
servers=20
holding tons of data in memory and consume cache as a service from this =
cluster.=20
This sometimes causes complexities when keeping both client and servers =
on the=20
same version was mandatory: upgrades require downtimes and additional=20
maintenance cost. In some cases it is just not possible to upgrade all=20
instances/groups of application clients together.</P></DIV>
<DIV class=3D"paragraph">
<P>From Hazelcast 3.5, a new Java native client library=20
<CODE>hazelcast-client-new-xxx.jar</CODE> will be available in the =
release=20
package. This library uses Hazelcast=E2=80=99s new client protocol which =
provides client=20
and server version independent compliance. With the new protocol, =
Hazelcast will=20
allow any client to work with any version of server with 3.5 and above. =
It will=20
also allow backward compatibility, any client of version 3.x (where x =
&gt; 5)=20
will be able to connect with servers on lower version up to =
3.5.</P></DIV>
<DIV class=3D"paragraph">
<P>With the new client protocol, Hazelcast provides greater flexibility =
to=20
maintain a cluster of client and server nodes of different versions and =
allows=20
maximum robustness.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"reusing-the-client">8.1. Reusing the Client</H3>
<DIV class=3D"paragraph">
<P>A client is designed to be shared between threads. You want to =
prevent=20
creating an instance per request because clients are heavy =
objects.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>A client contains a thread pool that is used for internal =
administration
   like heartbeat checking, scheduling of refreshing partitions, firing =
events=20
  when members are added and removed, etc.</P></LI>
  <LI>
  <P>A client has a single connection to the cluster for communication, =
just=20
  like cluster members have among each other. This connection is an =
expensive=20
  resource and it is best to reuse it.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>In most cases, it is best to create the client in the beginning and =
keep
 reusing it throughout the lifecycle of the client =
application.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"configuration-options">8.2. Configuration Options</H3>
<DIV class=3D"paragraph">
<P>In the client example, we did a minimal configuration of the=20
<CODE>ClientConfig</CODE> and relied on defaults. There is a lot more =
that you=20
can configure.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>addressList</CODE>: Known addresses of the cluster. It does =
not need=20
  to include all addresses, only enough to make sure that at least one =
will be
   online. See <A=20
  =
href=3D"http://hazelcast.org/mastering-hazelcast/#failover">Failover</A>.=
</P></LI>
  <LI>
  <P><CODE>connectionTimeout</CODE>: Time in milliseconds to wait till =
releasing
   a connection to a non-responsive member. Defaults to 60000 ms (1 =
minute).=20
  Once a connection has been established, the client will periodically =
check the=20
  connection by sending a heartbeat and expecting a response. With the=20
  <CODE>connectionTimeout</CODE>, you can specify the maximum period =
that a=20
  connection is allowed to go without a response to the heartbeat. If =
the value=20
  is set too low, it could lead to connections often being recreated. If =
the=20
  value is set too high, it can lead to dead members being detected very =

  late.</P></LI>
  <LI>
  <P><CODE>connectionAttemptLimit</CODE>: Maximum number of times to try =
using=20
  the addresses to connect to the cluster. Defaults to 2. When a client =
starts
   or a client loses the connection with the cluster, it will try to =
make a=20
  connection with one of the cluster member addresses. In some cases, a =
client=20
  cannot connect to these addresses; for example, the cluster is not yet =
up or=20
  it is not reachable. Instead of giving up, one can increase the =
attempt limit=20
  to create a connection. Also have a look at the=20
  <CODE>connectionAttemptPeriod</CODE>.</P></LI>
  <LI>
  <P><CODE>connectionAttemptPeriod</CODE>: Period in milliseconds =
between=20
  attempts to find a member in the cluster. Defaults to 3000=20
  milliseconds.</P></LI>
  <LI>
  <P><CODE>listeners</CODE>: Enables listening to the cluster state. =
Currently,=20
  only the <CODE>LifecycleListener</CODE> is supported.</P></LI>
  <LI>
  <P><CODE>loadBalancer</CODE>: See <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#loadbalancing">LoadBala=
ncing</A>=20
  for more information. Defaults to RoundRobinLB.</P></LI>
  <LI>
  <P><CODE>smart</CODE>: If true, the client will route the key based =
operations=20
  to the owner of the key at the best effort. Note that it uses a cached =
version=20
  of <CODE>PartitionService.getPartitions()</CODE> and it does not =
guarantee=20
  that the operation will always be executed on the owner. The cached =
table is
   updated every second. Defaults to true.</P></LI>
  <LI>
  <P><CODE>redoOperation</CODE>: If true, the client will redo the =
operations=20
  that were executing on the server when the client lost the connection. =
This=20
  can be because of the network, or simply because the member died. =
However, it=20
  is not clear whether the application is performed or not. For =
idempotent
   operations this is harmless, but for non-idempotent operations, =
retrying can
   cause undesirable effects. Note that the redo can perform on any =
member. If=20
  false, the operation will throw the <CODE>RuntimeException</CODE> that =
is
   wrapping <CODE>IOException</CODE>. Defaults to false.</P></LI>
  <LI>
  <P><CODE>group</CODE>: See <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#group-configuration">Gr=
oup=20
  Configuration</A>.</P></LI>
  <LI>
  <P><CODE>socketOptions</CODE>: Configures the network socket options =
with the
   methods <CODE>setKeepAlive(x)</CODE>, <CODE>setTcpNoDelay(x)</CODE>,=20
  <CODE>setReuseAddress(x)</CODE>, <CODE>setLingerSeconds(x)</CODE>, and =

  <CODE>setBufferSize(x)</CODE>.</P></LI>
  <LI>
  <P><CODE>serializationConfig</CODE>: Configures how to serialize and=20
  deserialize on the client side. For all classes that are deserialized =
to the=20
  client the same serialization needs to be configured as done for the =
cluster.=20
  For more information see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serialization-start">Se=
rialization</A>.</P></LI>
  <LI>
  <P><CODE>socketInterceptor</CODE>: Allows you to intercept socket =
connections=20
  before a node joins to cluster or a client connects to a node. This =
provides=20
  the ability to add custom hooks to join and perform connection=20
  procedures.</P></LI>
  <LI>
  <P><CODE>classLoader</CODE>: In Java, you can configure a custom =
classLoader.=20
  It will be used by the serialization service and to load any class =
configured=20
  in configuration, such as event listeners or ProxyFactories.</P></LI>
  <LI>
  <P><CODE>credentials</CODE>: Can be used to do authentication and=20
  authorization. This functionality is only available in the Enterprise =
version=20
  of Hazelcast.</P></LI></UL></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"loadbalancing">8.3. LoadBalancing</H3>
<DIV class=3D"paragraph">
<P>When a client connects to the cluster, it will have access to the =
full list=20
of members and it will be kept in sync, even if the =
<CODE>ClientConfig</CODE>
 only has a subset of members. If an operation needs to be sent to a =
specific=20
member, it will be sent directly to that member. If an operation can be =
executed=20
on any member, Hazelcast does automatic load balancing over all members =
in the=20
cluster.</P></DIV>
<DIV class=3D"paragraph">
<P>One of the new features that came with Hazelcast 3.0 is that the =
routing
 mechanism is pulled into an interface:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">interface</SPAN> =
<SPAN class=3D"class">LoadBalancer</SPAN> {=0A=
   <SPAN class=3D"type">void</SPAN> init(Cluster cluster, ClientConfig =
config);=0A=
   <SPAN class=3D"predefined-type">Member</SPAN> next();=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This means that if you have specific routing requirements (such as =
load
 balance on CPU load, memory load, or queue sizes), you can meet these
 requirements by creating a custom <CODE>LoadBalancer</CODE> =
implementation. In=20
future releases of Hazelcast, some of these implementations might be =
provided=20
out of the box. If you implement a custom <CODE>LoadBalancer</CODE>, you =
can=20
listen to member changes using the following example.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">Cluster =
cluster =3D hz.getCluster();=0A=
cluster.addMembershipListener(thelistener);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>MembershipListener</CODE> functionality makes it easy to =
create a
 deterministic <CODE>LoadBalancer</CODE> for the following =
reasons.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>The <CODE>MembershipListener</CODE> will not be called=20
  concurrently.</P></LI>
  <LI>
  <P>The <CODE>MembershipListener</CODE> <CODE>init</CODE> method will =
be called=20
  with a set of all current members.</P></LI>
  <LI>
  <P>No events will be lost between calling <CODE>init</CODE> and =
calling=20
  <CODE>memberAdded</CODE> or <CODE>memberRemoved</CODE>.</P></LI>
  <LI>
  <P>The <CODE>memberAdded</CODE> and <CODE>memberRemoved</CODE> methods =
will be=20
  called in the order that the events happened within the cluster. There =
is a=20
  total ordering of membership events since they will be coordinated =
from the=20
  master node.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P><CODE>LoadBalancer</CODE> instances should not be shared between =
clients;=20
every client should gets its own instance. The load balancer can be =
configured=20
from the <CODE>ClientConfig</CODE>.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"failover">8.4. Failover</H3>
<DIV class=3D"paragraph">
<P>In a production environment, you want the client to support failover =
to
 increase high availability. This is realized in two parts.</P></DIV>
<DIV class=3D"paragraph">
<P>The first part is configuring multiple member addresses in the=20
<CODE>ClientConfig</CODE>. As long as one of these members is online, =
the client=20
will be able to connect to the cluster and will know about all members =
in the=20
cluster.</P></DIV>
<DIV class=3D"paragraph">
<P>The second part is the responsibility of the =
<CODE>LoadBalancer</CODE>
 implementation. It can register itself as a =
<CODE>MembershipListener</CODE> and
 receives a list of all members in the cluster, and it will be notified =
if
 members are added or removed. The <CODE>LoadBalancer</CODE> can use =
this update=20
list of member addresses for routing.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"group-configuration">8.5. Group Configuration</H3>
<DIV class=3D"paragraph">
<P>To prevent clients from joining a cluster, you can configure the =
cluster=20
group to which the client is able to connect. On this cluster group, you =
can set=20
the group name and the password.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">ClientConfig =
config =3D <SPAN class=3D"keyword">new</SPAN> ClientConfig()=0A=
    .addAddress(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">127.0.0.1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
config.getGroupConfig()=0A=
    .setName(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">group1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>)=0A=
    .setPassword(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">thepassword</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
HazelcastInstance client =3D =
HazelcastClient.newHazelcastClient(config);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The group name defaults to <CODE>dev</CODE> and the password defaults =
to=20
<CODE>dev-pass</CODE>. For more information, see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#cluster-groups">Network=
=20
Configuration: Cluster Groups</A>.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"sharing-classes">8.6. Sharing Classes</H3>
<DIV class=3D"paragraph">
<P>In some cases, you need to share classes between the client and the =
server.=20
You could give all the classes from the server to the client, but often =
this is=20
undesirable due to tight coupling, security, copyright issues, etc. If =
you don=E2=80=99t=20
want to share all the classes of the server with the client, create a =
separate=20
API project (in Maven terms, this could be a module) containing all the =
shared=20
classes and interfaces and then share this project between the client =
and=20
server.</P></DIV>
<DIV class=3D"paragraph">
<P>One word of advice: watch out with sharing domain objects between =
client and=20
server. This can cause a tight coupling since the client starts to see =
the=20
internals of your domain objects. A recommended practice is to introduce =
special=20
objects that are optimized for client/server exchange: Data Transfer =
Objects=20
(DTOs). DTOs cause some duplication, but having some duplication is =
better to=20
deal with than tight coupling, which can make a system very=20
fragile.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"ssl">8.7. SSL</H3>
<DIV class=3D"paragraph">
<P>In Hazelcast 3, you can encrypt communication between client and =
cluster=20
using SSL. This means that the whole network traffic, which includes =
normal=20
operations like a <CODE>map.put</CODE> and includes passwords in =
credentials and=20
<CODE>GroupConfig</CODE>, cannot be read and potentially =
modified.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"sh">keytool -genkey =
-alias hazelcast -keyalg RSA -keypass password -keystore hazelcast.ks =
-storepass password=0A=
keytool -export -alias hazelcast -file hazelcast.cer -keystore =
hazelcast.ks -storepass password keytool=0A=
-import -v -trustcacerts -alias hazelcast -keypass password -file =
hazelcast.cer -keystore hazelcast.ts=0A=
-storepass password</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Example SSL configuration of the server:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Client</SPAN> {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.setProperty(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">javax.net.ssl.keyStore</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>,=0A=
            <SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">File</SPAN>(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">hazelcast.ks</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>).getAbsolutePath());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.setProperty(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">javax.net.ssl.trustStore</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>,=0A=
             <SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">File</SPAN>(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">hazelcast.ts</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>).getAbsolutePath());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.setProperty(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">javax.net.ssl.keyStorePassword</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">password</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
        ClientConfig config =3D <SPAN class=3D"keyword">new</SPAN> =
ClientConfig();=0A=
        config.addAddress(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">127.0.0.1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        config.setRedoOperation(<SPAN =
class=3D"predefined-constant">true</SPAN>);=0A=
        config.getSocketOptions().setSocketFactory(<SPAN =
class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">SSLSocketFactory</SPAN>());=0A=
=0A=
        HazelcastInstance client =3D =
HazelcastClient.newHazelcastClient(config);=0A=
        <SPAN class=3D"predefined-type">BlockingQueue</SPAN> &lt;<SPAN =
class=3D"predefined-type">String</SPAN>&gt; queue =3D =
client.getQueue(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">queue</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        queue.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Hello!</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Message send by client!</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Example SSL configuration of the client:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.setProperty(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">javax.net.ssl.keyStore</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>,=0A=
            <SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">File</SPAN>(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">hazelcast.ks</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>).getAbsolutePath());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.setProperty(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">javax.net.ssl.trustStore</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>,=0A=
            <SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">File</SPAN>(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">hazelcast.ts</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>).getAbsolutePath());=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.setProperty(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">javax.net.ssl.keyStorePassword</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">password</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
        Config config =3D <SPAN class=3D"keyword">new</SPAN> Config();=0A=
        config.getNetworkConfig().setSSLConfig(<SPAN =
class=3D"keyword">new</SPAN> SSLConfig().setEnabled(<SPAN =
class=3D"predefined-constant">true</SPAN>));=0A=
=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance(config);=0A=
        <SPAN class=3D"predefined-type">BlockingQueue</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>&gt; queue =3D hz.getQueue(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">queue</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Full member up</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"keyword">for</SPAN> (; ; )=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(queue.take());=0A=
    }=0A=
}</CODE></PRE></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-happened-to-the-lite-member">8.8. What Happened to the =
Lite=20
Member?</H3>
<DIV class=3D"paragraph">
<P>If you have been using Hazelcast 2.x, you might remember the option =
to create=20
either a lite member or a native member. A lite member is seen as part =
of the=20
cluster, although it does not host any partitions. Because it is part of =
the=20
cluster, a lite member knows about the other members. Therefore, it =
knows about=20
routing requests to the correct member, which could improve performance =
compared=20
to the native client.</P></DIV>
<DIV class=3D"paragraph">
<P>The lite member had some serious drawbacks.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>Because lite members are seen as members in the cluster, they send
   heartbeats/pings to each other and they check each others statuses
   continuously. So if the number of lite members compared to the number =
of real=20
  members is high, and clients join/leave frequently, it can influence =
the=20
  health of the cluster.</P></LI>
  <LI>
  <P>Although a lite member does not host any partitions, it will run =
tasks from=20
  the Hazelcast executors. This can be undesirable since you =
don=E2=80=99t want to have=20
  a client running the cluster tasks.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>With Hazelcast 3.x, a client always knows about all members. =
Therefore, a=20
client can route requests to the correct member without being part of =
the=20
cluster.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"good-to-know">8.9. Good to know</H3>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>Shutdown:</EM> If you don=E2=80=99t need a client anymore, it is =
very important=20
to shut it down using the <CODE>shutdown</CODE> method or using the=20
<CODE>LifeCycleService</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE =
data-lang=3D"java">client.getLifecycleService().shutdown();</CODE></PRE><=
/DIV></DIV>
<DIV class=3D"paragraph">
<P>The reason why the client shutdown is important, especially for short =
lived
 clients, is that the shutdown releases resources. It will shutdown the =
client=20
thread pool and the connection pool. When a connection is closed, the=20
client/member socket is closed and the ports are released, making them =
available=20
for new connections. Network traffic is also reduced since the heartbeat =
does=20
not need to be sent anymore. And the client resources running on the =
cluster are=20
released, such as the EndPoint or distributed Locks that have been =
acquired by=20
the client. If the client is not shutdown, and resources like the Lock =
have not=20
been released, every thread that wants to acquire the lock is going to
 deadlock.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>SPI:</EM> The Hazelcast client can also call SPI operations, see =
<A href=3D"http://hazelcast.org/mastering-hazelcast/#spi">SPI</A>.
 But you need to make sure that the client has access to the appropriate =
classes=20
and interfaces.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>2 way clients:</EM> There are cases where you have a distributed =
system
 split in different clusters, but there is a need to communicate between =
the=20
clusters. Instead of creating one big Hazelcast cluster, it could be =
split up in=20
different groups. To be able to have each group communicate with the =
other=20
groups, create multiple clients. If you have two groups A and B, then A =
should=20
have a client to B and B should have a client to A.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>HazelcastSerializationException:</EM> If you run into this =
exception with
 the message "There is no suitable serializer for class YourObject", =
then you=20
have probably forgotten to configure the SerializationConfig for the =
client. See=20
<A=20
href=3D"http://hazelcast.org/mastering-hazelcast/#serialization-start">Se=
rialization</A>.=20
In many cases, you want to copy/paste the whole serialization =
configuration of=20
the server to make sure that the client and server are able to=20
serialize/deserialize the same classes.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>None smart clients and load balancing:</EM> If a client is not =
smart, it
 will randomize the members list and try to connect to one of these =
members=20
until it succeeds. So if you have a 16 node cluster, and 2 members are=20
configured in the client, all load will go through these members. The=20
consequence is that load isn=E2=80=99t equally spread over the members. =
Try to add as=20
many members in the client configuration as possible to balance the load =

better.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-is-next">8.10. What is Next</H3>
<DIV class=3D"paragraph">
<P>In this short chapter, we explained a few different ways to connect =
to a
 Hazelcast cluster using a client. But there are more client solutions
 available: like the .NET client, C++ client, Memcache Client and the =
Rest
 Client. For more information, check the <STRONG>Clients</STRONG> =
chapter of the=20
Hazelcast Reference Manual.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"serialization-start">9. Serialization</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>So far, the examples in this book have relied on standard Java =
serialization=20
by letting the objects we store in Hazelcast implement the=20
<CODE>java.io.Serializable</CODE> interface. But Hazelcast has a very =
advanced
 serialization system that supports native Java serialization, such as=20
<CODE>Serializable</CODE> and <CODE>Externalizable</CODE>. This is =
useful if you=20
don=E2=80=99t own the class and therefore can=E2=80=99t change its =
serialization mechanism. But=20
it also supports custom serialization mechanisms like=20
<CODE>DataSerializable</CODE>, <CODE>Portable</CODE>,=20
<CODE>ByteArraySerializer</CODE> and=20
<CODE>ByteStreamSerializer</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>In Hazelcast, when an object needs to be serialized (for example, =
because the=20
object is placed in a Hazelcast data structure like a map or queue), =
Hazelcast=20
first checks if the object is an instance of =
<CODE>DataSerializable</CODE> or=20
<CODE>Portable</CODE>. If that fails, Hazelcast checks if the object is =
a well=20
known type, such as <CODE>String</CODE>, <CODE>Long</CODE>,=20
<CODE>Integer</CODE>, <CODE>byte[]</CODE>, <CODE>ByteBuffer</CODE>, or=20
<CODE>Date</CODE>, since serialization for these types can be optimized. =
Then,=20
Hazelcast checks for user specified types, such as <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#byteArraySerializer">By=
teArraySerializer</A>=20
and <CODE>ByteStreamSerializer</CODE>. If that fails, Hazelcast will =
fall back=20
on Java serialization (including the Externalizable). If this also =
fails, the=20
serialization fails because the class cannot be serialized. This =
sequence of=20
steps is useful to determine which serialization mechanism is going to =
be used=20
by Hazelcast if a class implements multiple interfaces, such as=20
<CODE>Serializable</CODE> and <CODE>Portable</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>Whatever serialization technology is used, if a class definition is =
needed,=20
Hazelcast will not automatically download it. So you need to make sure =
that your=20
application has all the classes it needs on the classpath.</P></DIV>
<DIV class=3D"sect2">
<H3 id=3D"serializable">9.1. Serializable</H3>
<DIV class=3D"paragraph">
<P>The native Java serialization is the easiest serialization mechanism =
to
 implement, since a class often only needs to implement the=20
<CODE>java.io.Serializable</CODE> interface.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Person</SPAN> <SPAN =
class=3D"directive">implements</SPAN> <SPAN =
class=3D"predefined-type">Serializable</SPAN> {=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"directive">final</SPAN> =
<SPAN class=3D"type">long</SPAN> serialVersionUID =3D <SPAN =
class=3D"integer">1L</SPAN>;=0A=
=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> name;=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> Person(<SPAN =
class=3D"predefined-type">String</SPAN> name) {=0A=
      <SPAN class=3D"local-variable">this</SPAN>.name =3D name;=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When this class is serialized, all non-static, non-transient fields =
will
 automatically be serialized.</P></DIV>
<DIV class=3D"paragraph">
<P>Make sure to add <CODE>serialVersionUID</CODE> since this prevents =
the JVM
 from calculating one on the fly, and that can lead to all kinds of =
class
 compatibility issues. In the examples, it is not always added to reduce =
space,=20
but for production code there is no excuse not to add it.</P></DIV>
<DIV class=3D"paragraph">
<P>When you use serialization, because you don=E2=80=99t have exact =
control on how an
 Object is (de)serialized, you don=E2=80=99t control the actual byte =
content. In most=20
cases, this won=E2=80=99t be an issue, but if you are using a method =
that relies on the=20
byte-content comparisons, and the byte-content of equal objects is =
different,=20
then you get unexpected behavior. An example of such a method is the=20
<CODE>Imap.replace(key,expected,update)</CODE>, and an example of a =
serialized=20
data structure with unreliable byte-content is a <CODE>HashMap</CODE>. =
So if=20
your <CODE>expected</CODE> class directly or indirectly relies on a=20
<CODE>HashMap</CODE>, the <CODE>replace</CODE> method could fail to =
replace=20
keys.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"externalizable">9.2. Externalizable</H3>
<DIV class=3D"paragraph">
<P>Another serialization technique supported by Hazelcast is the=20
<CODE>java.io.Externalizable</CODE>. It provides more control on how the =
fields=20
are serialized/deserialized and it can also help to improve performance =
compared=20
to standard Java serialization. Here is an example of the=20
<CODE>Externalizable</CODE> in action.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Person</SPAN> <SPAN =
class=3D"directive">implements</SPAN> <SPAN =
class=3D"predefined-type">Externalizable</SPAN> {=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> name;=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> Person(<SPAN =
class=3D"predefined-type">String</SPAN> name) {=0A=
      <SPAN class=3D"local-variable">this</SPAN>.name =3D name;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> readExternal(<SPAN =
class=3D"predefined-type">ObjectInput</SPAN> in)=0A=
        <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN>, <SPAN =
class=3D"exception">ClassNotFoundException</SPAN> {=0A=
      <SPAN class=3D"local-variable">this</SPAN>.name =3D in.readUTF();=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> writeExternal(<SPAN =
class=3D"predefined-type">ObjectOutput</SPAN> out)=0A=
         <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
      out.writeUTF(name);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The writing and reading of fields is explicit and reading needs to be =
done in=20
the same order as writing. Unlike the <CODE>Serializable</CODE>, the=20
<CODE>serialVersionUID</CODE> is not required.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"dataserializable">9.3. DataSerializable</H3>
<DIV class=3D"paragraph">
<P>Although Java serialization is very easy to use, it comes at a=20
price.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>Java serialization has lack of control on how the fields are=20
  serialized/deserialized.</P></LI>
  <LI>
  <P>It also has suboptimal performance due to streaming class =
descriptors,=20
  versions, keeping track of seen objects to deal with cycles, etc. This =
causes
   additional CPU load and suboptimal size of serialized =
data.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>That is why in Hazelcast 1, the <CODE>DataSerializable</CODE> =
serialization=20
mechanism was introduced.</P></DIV>
<DIV class=3D"paragraph">
<P>To see the <CODE>DataSerializable</CODE> in action, let=E2=80=99s =
implement on the=20
<CODE>Person</CODE> class:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Person</SPAN> <SPAN =
class=3D"directive">implements</SPAN> DataSerializable {=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> name;=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> Person(){}=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> Person(<SPAN =
class=3D"predefined-type">String</SPAN> name) {=0A=
      <SPAN class=3D"local-variable">this</SPAN>.name =3D name;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> readData(ObjectDataInput in)=0A=
         <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
      <SPAN class=3D"local-variable">this</SPAN>.name =3D in.readUTF();=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> writeData(ObjectDataOutput out)=0A=
         <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
      out.writeUTF(name);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This <CODE>DataSerializable</CODE> looks a lot like the=20
<CODE>Externalizable</CODE> functionality since an explicit =
serialization of the=20
fields is required. Just like the <CODE>Externalizable</CODE>, the =
reading of=20
the fields needs to be done in the same order as they are written. Apart =
from=20
implementing the <CODE>DataSerializable</CODE> interface, no further=20
configuration is needed. As soon as this Person class will be =
serialized,=20
Hazelcast checks if it implements the <CODE>DataSerializable</CODE>=20
interface.</P></DIV>
<DIV class=3D"paragraph">
<P>One requirement for a <CODE>DataSerializable</CODE> class is that it =
has a=20
no-argument constructor. This is needed during deserialization because =
Hazelcast
 needs to create an instance. You can make this constructor private, so =
that it=20
won=E2=80=99t be visible to normal application code.</P></DIV>
<DIV class=3D"paragraph">
<P>To see the <CODE>DataSerializable</CODE> in action, let=E2=80=99s =
have a look at the=20
following code.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, Person&gt; map =3D =
hz.getMap(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">map</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
        map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Peter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"keyword">new</SPAN> =
Person(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Peter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>));=0A=
        Person p =3D map.get(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Peter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(p);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you run this, you will see:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Person(name=3DPeter)</PRE></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"identifieddataserializable">9.3.1. =
IdentifiedDataSerializable</H4>
<DIV class=3D"paragraph">
<P>One of the problems with <CODE>DataSerializable</CODE> is that it =
uses=20
reflection to create an instance of the class. One of the new features =
of=20
Hazelcast 3 is the <CODE>IdentifiedDataSerializable</CODE>. It relies on =
a=20
factory to create the instance and therefore is faster when =
deserializing, since
 deserialization relies on creating new instances.</P></DIV>
<DIV class=3D"paragraph">
<P>The first step is to modify the <CODE>Person</CODE> class to =
implement the=20
<CODE>IdentifiedDataSerializable</CODE> interface.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Person</SPAN> <SPAN =
class=3D"directive">implements</SPAN> IdentifiedDataSerializable {=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> name;=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> Person(){}=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> Person(<SPAN =
class=3D"predefined-type">String</SPAN> name) {=0A=
        <SPAN class=3D"local-variable">this</SPAN>.name =3D name;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> readData(ObjectDataInput in)=0A=
           <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
        <SPAN class=3D"local-variable">this</SPAN>.name =3D in.readUTF();=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> writeData(ObjectDataOutput out)=0A=
           <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
        out.writeUTF(name);=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getFactoryId() {=0A=
        <SPAN class=3D"keyword">return</SPAN> =
PersonDataSerializableFactory.FACTORY_ID;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getId() {=0A=
        <SPAN class=3D"keyword">return</SPAN> =
PersonDataSerializableFactory.PERSON_TYPE;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> toString() {=0A=
        <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN>.format(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Person(name=3D%s)</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, name);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This <CODE>IdentifiedDataSerializable</CODE> <CODE>Person</CODE> =
class looks=20
a lot like the <CODE>Person</CODE> class from the =
<CODE>DataSerializable</CODE>,=20
but two additional methods are added: <CODE>getFactoryId</CODE> and=20
<CODE>getId</CODE>. The <CODE>getFactoryId</CODE> should return a unique =

positive number and the <CODE>getId</CODE> should return a unique =
positive=20
number within its corresponding =
<CODE>PersonDataSerializableFactory</CODE>. So=20
you can have <CODE>IdentifiedDataSerializable</CODE> implementations =
that return=20
the same ID, as long as the <CODE>getFactoryId</CODE> is different. You =
could=20
move the IDs to the <CODE>DataSerializableFactory</CODE> implementation =
to have=20
a clear overview.</P></DIV>
<DIV class=3D"paragraph">
<P>The next part is to create a =
<CODE>PersonDataSerializableFactory</CODE> which=20
is responsible for creating an instance of the <CODE>Person</CODE>=20
class.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">PersonDataSerializableFactory</SPAN>=0A=
       <SPAN class=3D"directive">implements</SPAN> =
DataSerializableFactory{=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"directive">final</SPAN> =
<SPAN class=3D"type">int</SPAN> FACTORY_ID =3D <SPAN =
class=3D"integer">1</SPAN>;=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"directive">final</SPAN> =
<SPAN class=3D"type">int</SPAN> PERSON_TYPE =3D <SPAN =
class=3D"integer">1</SPAN>;=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> IdentifiedDataSerializable =
create(<SPAN class=3D"type">int</SPAN> typeId) {=0A=
        <SPAN class=3D"keyword">if</SPAN>(typeId =3D=3D PERSON_TYPE){=0A=
            <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"keyword">new</SPAN> Person();=0A=
        }<SPAN class=3D"keyword">else</SPAN>{=0A=
            <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-constant">null</SPAN>;=0A=
        }=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>create</CODE> method is the only method that you need to =
implement.=20
If you have many subclasses, you might consider using a <CODE>switch =
case</CODE>
 statement instead of a bunch of <CODE>if-else</CODE> statements. If a =
type ID=20
is received of an unknown type, you can return null or throw an =
exception. If=20
null is returned, Hazelcast will throw an exception for you.</P></DIV>
<DIV class=3D"paragraph">
<P>The last part is the registration of the=20
<CODE>PersonDataSerializableFactory</CODE> in the=20
<CODE>hazelcast.xml</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;serialization&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;data-serializable-factories&gt;</SPAN>=0A=
         <SPAN class=3D"tag">&lt;data-serializable-factory</SPAN>=0A=
             <SPAN class=3D"attribute-name">factory-id</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">1</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>PersonDataSerializableFactory<SPAN =
class=3D"tag">&lt;/data-serializable-factory&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;/data-serializable-factories&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/serialization&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/hazelcast&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you look closely, you see that the=20
<CODE>PersonDataSerializableFactory.FACTORY_ID</CODE> has the same value =
as the=20
<CODE>factory-id</CODE> field in the XML. This is very important since =
Hazelcast
 relies on these values to find the right =
<CODE>DataSerializableFactory</CODE>=20
when deserializing.</P></DIV>
<DIV class=3D"paragraph">
<P>To see the <CODE>IdentifiedDataSerializable</CODE> in action, have a =
look at=20
the following example.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, Person&gt; map =3D =
hz.getMap(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">map</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
        map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Peter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"keyword">new</SPAN> =
Person(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Peter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>));=0A=
        Person p =3D map.get(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Peter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(p);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you run it, you will see:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Person(name=3DPeter)</PRE></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"portable">9.4. Portable</H3>
<DIV class=3D"paragraph">
<P>With the introduction of Hazelcast 3.0, a new serialization mechanism =
was
 added: the <CODE>Portable</CODE>. The cool thing about the=20
<CODE>Portable</CODE> is that object creation is pulled into user space, =
so you=20
control the initialization of the <CODE>Portable</CODE> instances and =
you are=20
not forced to use a no-argument constructor. For example, you could =
inject=20
dependencies or you could even decide to move the construction of the=20
<CODE>Portable</CODE> from a prototype bean in a Spring =
container.</P></DIV>
<DIV class=3D"paragraph">
<P>To demonstrate how the <CODE>Portable</CODE> mechanism works, =
let=E2=80=99s create a=20
<CODE>Portable</CODE> version of the <CODE>Person</CODE> =
class.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Person</SPAN> <SPAN =
class=3D"directive">implements</SPAN> Portable {=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> name;=0A=
=0A=
   Person(){=0A=
   }=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> Person(<SPAN =
class=3D"predefined-type">String</SPAN> name) {=0A=
      <SPAN class=3D"local-variable">this</SPAN>.name =3D name;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getClassId() {=0A=
      <SPAN class=3D"keyword">return</SPAN> =
PortableFactoryImpl.PERSON_CLASS_ID;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getFactoryId() {=0A=
      <SPAN class=3D"keyword">return</SPAN> =
PortableFactoryImpl.FACTORY_ID;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> writePortable(PortableWriter writer)=0A=
         <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Serialize</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      writer.writeUTF(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">name</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, name);=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> readPortable(PortableReader reader)=0A=
         <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Deserialize</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"local-variable">this</SPAN>.name =3D =
reader.readUTF(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">name</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> toString() {=0A=
      <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN>.format(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Person(name=3D%s)</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>,name);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>write</CODE> method include the field names, making it =
possible to=20
read particular fields without being forced to read all of them. This is =
useful=20
for querying and indexing: it reduces overhead because deserialization =
isn=E2=80=99t=20
needed. Unlike the <CODE>DataSerializable</CODE>, the order of reading =
and=20
writing fields isn=E2=80=99t important since it is based on name. Also, =
a no-argument=20
constructor is added so that it can be initialized from the=20
<CODE>PortableFactoryImpl</CODE>; if you place it in the same package, =
you could=20
give it a package friendly access modifier to reduce =
visibility.</P></DIV>
<DIV class=3D"paragraph">
<P>The last two interesting methods are <CODE>getClassId</CODE>, which =
returns=20
the identifier of that class, and <CODE>getFactoryId</CODE>, which must =
return=20
the ID of the <CODE>PortableFactory</CODE> that will take care of =
serializing=20
and deserializing.</P></DIV>
<DIV class=3D"paragraph">
<P>The next step is the <CODE>PortableFactory</CODE> which is =
responsible for=20
creating a new <CODE>Portable</CODE> instance based on the class ID. In =
our=20
case, the implementation is very simple since we only have a single=20
<CODE>Portable</CODE> class.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"keyword">import</SPAN> <SPAN =
class=3D"include">com.hazelcast.nio.serialization</SPAN>.*;=0A=
<SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">class</SPAN> <SPAN =
class=3D"class">PortableFactoryImpl</SPAN> <SPAN =
class=3D"directive">implements</SPAN> PortableFactory {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN class=3D"directive">static</SPAN> =
<SPAN class=3D"type">int</SPAN> PERSON_CLASS_ID =3D <SPAN =
class=3D"integer">1</SPAN>;=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN class=3D"directive">static</SPAN> =
<SPAN class=3D"type">int</SPAN> FACTORY_ID =3D <SPAN =
class=3D"integer">1</SPAN>;=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> Portable create(<SPAN =
class=3D"type">int</SPAN> classId) {=0A=
        <SPAN class=3D"keyword">switch</SPAN> (classId) {=0A=
            <SPAN class=3D"keyword">case</SPAN> PERSON_CLASS_ID:=0A=
               <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"keyword">new</SPAN> Person();=0A=
        }=0A=
        <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-constant">null</SPAN>;=0A=
     }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In practice, the <CODE>switch case</CODE> probably will be a lot =
bigger. If=20
an unmatched <CODE>classId</CODE> is encountered, null should be =
returned, which=20
will lead to a <CODE>HazelcastSerializationException</CODE>. A class ID =
needs to=20
be unique within the corresponding <CODE>PortableFactory</CODE> and =
needs to be=20
bigger than 0. You can declare the class ID in the class to serialize, =
but you=20
could add it to the <CODE>PortableFactory</CODE> to have a good overview =
of
 which IDs are there.</P></DIV>
<DIV class=3D"paragraph">
<P>A factory ID needs to be unique and larger than 0. You probably will =
have=20
more than one <CODE>PortableFactory</CODE>. To make sure that every =
factory gets=20
a unique factory ID, you could make a single class/interface where all=20
<CODE>PortableFactory</CODE> IDs in your system are declared, as shown=20
below.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">PortableFactoryConstant</SPAN> {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN class=3D"directive">static</SPAN> =
<SPAN class=3D"type">int</SPAN> PERSON_FACTORY_ID =3D <SPAN =
class=3D"integer">1</SPAN>;=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN class=3D"directive">static</SPAN> =
<SPAN class=3D"type">int</SPAN> CAR_FACTORY_ID =3D <SPAN =
class=3D"integer">2</SPAN>;=0A=
    ....=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>getFactoryId</CODE> should make use of these constants. =
This=20
prevents looking all over the place if the factory ID is =
unique.</P></DIV>
<DIV class=3D"paragraph">
<P>The last step is to configure the <CODE>PortableFactory</CODE> in the =

Hazelcast configuration.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;serialization&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;portable-factories&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;portable-factory</SPAN> <SPAN =
class=3D"attribute-name">factory-id</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">1</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>PortableFactoryImpl<SPAN =
class=3D"tag">&lt;/portable-factory&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/portable-factories&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/serialization&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Hazelcast can have multiple portable factories. You need to make sure =
that=20
the <CODE>factory-id</CODE> in the XML is the same as in the =
code.</P></DIV>
<DIV class=3D"paragraph">
<P>Of course we also want to see it in action:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, Person&gt; map =3D =
hz.getMap(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">map</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Peter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"keyword">new</SPAN> =
Person(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Peter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>));=0A=
      <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(map.get(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Peter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>));=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When we run this <CODE>PortableMember</CODE>, we=E2=80=99ll see the =
following=20
output:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Serialize=0A=
Serialize=0A=
Deserialize=0A=
Person(name=3DPeter)</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>Person</CODE> is serialized when it is stored in the map =
and it is=20
deserialized when it is read. <CODE>Serialize</CODE> is called twice =
because for=20
every <CODE>Portable</CODE> class, the first time it is (de)serialized,=20
Hazelcast generates a new class that supports the =
serialization/deserialization=20
process. For this generation process, another serialization is executed =
to=20
figure out the metadata (the fields and their types).</P></DIV>
<DIV class=3D"paragraph">
<P>The names of the fields are case-sensitive and need to be valid java
 identifiers. Therefore, they should not contain characters such as=20
<CODE>.</CODE> or <CODE>-</CODE>.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"dataserializable-vs-portable">9.4.1. DataSerializable vs. =
Portable</H4>
<DIV class=3D"paragraph">
<P>Portable supports versioning and is language/platform independent. =
This makes=20
<CODE>Portable</CODE> useful for client/cluster communication. Another =
advantage=20
is that <CODE>Portable</CODE> can be more performant for map queries: it =
avoids=20
full serialization because data can be retrieved on the field level. =
Otherwise,=20
if the serialization is needed only for intra-cluster communication, =
then=20
<CODE>DataSerializable</CODE> is still a good alternative. The =
disadvantage of=20
<CODE>Portable</CODE> is that of all metadata: the fields that are =
available are=20
part of the payload of every serialized object. So the amount of data=20
transferred with a <CODE>Portable</CODE> is a lot more than with a=20
<CODE>DataSerializable</CODE>. If you want to use the fastest =
serialization
 mechanism, it is best to have a look at the=20
<CODE>IdentifiedDataSerializable</CODE>, since no field metadata is send =
over=20
the line.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"object-traversal">9.4.2. Object Traversal</H4>
<DIV class=3D"paragraph">
<P>If a <CODE>Portable</CODE> has a <CODE>Portable</CODE> field, the =
write and=20
read operations need to be forwarded to that object. For example, we =
could add a=20
<CODE>Portable</CODE> address field to <CODE>Person</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">void</SPAN> =
writePortable(PortableWriter writer)=0A=
      <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
   writer.writeUTF(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">name</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, name);=0A=
   writer.writePortable(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">address</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, address);=0A=
}=0A=
<SPAN class=3D"directive">public</SPAN> <SPAN class=3D"type">void</SPAN> =
readPortable(PortableReader reader)=0A=
      <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
   <SPAN class=3D"local-variable">this</SPAN>.name =3D =
reader.readUTF(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">name</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
   <SPAN class=3D"local-variable">this</SPAN>.address =3D =
reader.readPortable(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">address</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If the field is of type <CODE>Portable</CODE> and null, the=20
<CODE>PortableWriter.writePortable(String fieldName, Portable =
portable)</CODE>=20
method will complain about the null. This is because with a null value, =
the type=20
of the field is unknown and this causes problems with the platform =
independent=20
nature of <CODE>Portable</CODE>. In that case, you can call the=20
<CODE>PortableWriter.writePortable(String fieldName, int classId, =
Portable
 portable)</CODE> method, where an explicit class ID needs to be
 passed.</P></DIV>
<DIV class=3D"paragraph">
<P>If the object is not a <CODE>Portable</CODE>, primitive, array or=20
<CODE>String</CODE>, then there is no direct support for serialization. =
Of=20
course, you could transform the object using Java serialization to a =
byte array,=20
but this would mean that platform independence is lost. A better =
solution is to=20
create some form of <CODE>String</CODE> representation, potentially =
using XML,=20
to maintain platform compatibility. The methods =
<CODE>readUTF/writeUTF</CODE>=20
can perfectly deal with null Strings, so passing null object references =
is no
 problem.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"serialize-distributedobject">9.4.3. Serialize =
DistributedObject</H4>
<DIV class=3D"paragraph">
<P>Serialization of the <CODE>DistributedObject</CODE> is not provided =
out of=20
the box: for example, you can=E2=80=99t put an <CODE>ISemaphore</CODE> =
on an=20
<CODE>IQueue</CODE> on one machine and take it from another. But there =
are=20
solutions to this problem.</P></DIV>
<DIV class=3D"paragraph">
<P>One solution is to pass the ID of the <CODE>DistributedObject</CODE>, =
perhaps=20
in combination with the type. When deserializing, look up the object in =
the=20
<CODE>HazelcastInstance</CODE>: for example, in case of an =
<CODE>IQueue</CODE>,=20
you can call <CODE>HazelcastInstance.getQueue(id)</CODE> or=20
<CODE>Hazelcast.getDistributedObject</CODE>. Passing the type is useful =
if you=20
don=E2=80=99t know the type of the =
<CODE>DistributedObject</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>If you are deserializing your own <CODE>Portable</CODE> distributed =
object=20
and it receives an ID that needs to be looked up, the class can =
implement the <A=20
href=3D"http://hazelcast.org/mastering-hazelcast/#hazelcastinstanceaware"=
>HazelcastInstanceAware</A>=20
interface. Since the <CODE>HazelcastInstance</CODE> is set after=20
deserialization, you need to store the IDs first, and then you could do =
the=20
actual retrieval of the distributed objects in the=20
<CODE>setHazelcastInstance</CODE> method.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"serializing-raw-data">9.4.4. Serializing Raw Data</H4>
<DIV class=3D"paragraph">
<P>When using the <CODE>Portable</CODE> functionality, the field name is =
added=20
so that the fields can be retrieved easily and the field can be indexed =
and used=20
within queries without needing to deserialize the object. In some cases, =
this=20
can cause a lot of overhead. If overhead is an issue, you can write raw =
data=20
using the <CODE>PortableWriter.getRawDataOutput()</CODE> method and read =
it=20
using the <CODE>PortableReader.getRawDataInput()</CODE> method. Reading =
and=20
writing raw data should be the last reading and writing operations on =
the=20
<CODE>PortableReader</CODE> and =
<CODE>PortableWriter</CODE>.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"cycles">9.4.5. Cycles</H4>
<DIV class=3D"paragraph">
<P>One thing to look out for, which also goes for =
<CODE>DataSerializable</CODE>,=20
are cycles between objects: they can lead to a stack overflow. Standard =
Java=20
serialization protects against this, but since manual traversal is done =
in=20
<CODE>Portable</CODE> objects, there is no protection out of the box. If =
this is=20
an issue, you could store a map in a <CODE>ThreadLocal</CODE> that can =
be used=20
to detect cycles and a special placeholder value could be serialized to =
end the=20
cycle.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"subtyping">9.4.6. Subtyping</H4>
<DIV class=3D"paragraph">
<P>Subtyping with the <CODE>Portable</CODE> functionality is easy: let =
every=20
subclass have its own unique type ID, and then add these IDs to the =
switch/case=20
in the <CODE>PortableFactory</CODE> so that the correct class can be=20
instantiated.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"versioning">9.4.7. Versioning</H4>
<DIV class=3D"paragraph">
<P>In practice, multiple versions of the same class could be serialized =
and=20
deserialized, such as a Hazelcast client with an older =
<CODE>Person</CODE> class=20
compared to the cluster. Luckily, the <CODE>Portable</CODE> =
functionality
 supports versioning. In the configuration, you can explicitly pass a =
version=20
using the <CODE>&lt;portable-version&gt;</CODE> tag (defaults to =
0).</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;serialization&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;portable-version&gt;</SPAN>1<SPAN =
class=3D"tag">&lt;/portable-version&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;portable-factories&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;portable-factory</SPAN> <SPAN =
class=3D"attribute-name">factory-id</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">1</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>PortableFactoryImpl<SPAN =
class=3D"tag">&lt;/portable-factory&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/portable-factories&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/serialization&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When a <CODE>Portable</CODE> instance is deserialized, apart from the =

serialized fields of that <CODE>Portable</CODE>, metadata like the class =
id and=20
the version are also stored. That is why it is important that every time =
you=20
make a change in the serialized fields of a class, that the version is =
also=20
changed. In most cases, incrementing the version is the simplest=20
approach.</P></DIV>
<DIV class=3D"paragraph">
<P>Adding fields to a <CODE>Portable</CODE> is simple. However, you =
probably=20
need to work with default values if an old <CODE>Portable</CODE> is=20
deserialized.</P></DIV>
<DIV class=3D"paragraph">
<P>Removing fields can lead to problems if a new version of that=20
<CODE>Portable</CODE> (with the removed field) is deserialized on a =
client that=20
depends on that field.</P></DIV>
<DIV class=3D"paragraph">
<P>Renaming fields is simpler because the <CODE>Portable</CODE> =
mechanism does=20
not rely on reflection, so there is no automatic mapping of fields on =
the class=20
and fields in the serialized content.</P></DIV>
<DIV class=3D"paragraph">
<P>An issue to watch out for is changing the field type, although =
Hazelcast can=20
do some basic type upgrading (for example, <CODE>int</CODE> to =
<CODE>long</CODE>=20
or <CODE>float</CODE> to <CODE>double</CODE>).</P></DIV>
<DIV class=3D"paragraph">
<P>Renaming the <CODE>Portable</CODE> is simple since the name of the=20
<CODE>Portable</CODE> is not stored as metadata, but the class ID (which =
is a=20
number) is stored.</P></DIV>
<DIV class=3D"paragraph">
<P>Luckily, Hazelcast provides access to the metadata of the object to =
be=20
deserialized through the <CODE>PortableReader</CODE>; the version, =
available=20
fields, the type of the fields, etc., can be retrieved. So you have full =
control=20
on how the deserialization should take place.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>HazelcastInstanceAware</EM>: The <CODE>PortableFactory</CODE> can =
be=20
combined with the <CODE>HazelcastInstanceAware</CODE>. Thus, you can =
control if=20
dependencies are going to be passed to the Portable=20
implementation.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"streamserializer">9.5. StreamSerializer</H3>
<DIV class=3D"paragraph">
<P>One of the additions to Hazelcast 3 is to use a stream for =
serializing and=20
deserializing data by implementing the <CODE>StreamSerializer</CODE>. =
The=20
<CODE>StreamSerializer</CODE> is practical if you want to create your =
own
 implementations, and you can also use it to adapt an external =
serialization=20
library, such as JSON, protobuf, Kryo, etc.</P></DIV>
<DIV class=3D"paragraph">
<P>Let=E2=80=99s start with a very simple object we will serialize using =
a=20
<CODE>StreamSerializer</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Person</SPAN> {=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> name;=0A=
   <SPAN class=3D"directive">public</SPAN> Person(<SPAN =
class=3D"predefined-type">String</SPAN> name) {=0A=
      <SPAN class=3D"local-variable">this</SPAN>.name =3D name;=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>As you can see, there are no interfaces to implement. There is also =
no need=20
for a no-argument constructor.</P></DIV>
<DIV class=3D"paragraph">
<P>The next step is the <CODE>StreamSerializer</CODE> implementation for =
this=20
<CODE>Person</CODE> class.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">PersonStreamSerializer</SPAN>=0A=
       <SPAN class=3D"directive">implements</SPAN> =
StreamSerializer&lt;Person&gt; {=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getTypeId() {=0A=
      <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"integer">1</SPAN>;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> write(ObjectDataOutput out, Person person)=0A=
          <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
      out.writeUTF(person.getName());=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> Person read(ObjectDataInput =
in) <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
      <SPAN class=3D"predefined-type">String</SPAN> name =3D =
in.readUTF();=0A=
      <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"keyword">new</SPAN> Person(name);=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> destroy() {=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The implementation is quite simple. The <CODE>ObjectDataOutput</CODE> =
and=20
<CODE>ObjectDataInput</CODE> have methods available for primitives like=20
<CODE>int</CODE>, <CODE>boolean</CODE>, etc., and also for =
<CODE>String</CODE>;=20
<CODE>writeUTF/readUTF</CODE> can safely deal with null and also for =
objects.=20
See <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#object-traversal">Objec=
t=20
Traversal</A>.</P></DIV>
<DIV class=3D"paragraph">
<P>In practice, classes probably have more fields. If you are writing =
the
 fields, make sure that they are read in the same order as they are
 written.</P></DIV>
<DIV class=3D"paragraph">
<P>The type ID needs to be unique so that on deserialization, Hazelcast =
is able=20
to figure out which serializer should be used to deserialize the object. =

Hazelcast has claimed the negative IDs and will throw an error if your =
type ID=20
is smaller than 1.</P></DIV>
<DIV class=3D"paragraph">
<P>A practical way to generate unique IDs is to use a class (or =
interface) where=20
you define all type IDs in your system:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"directive">final</SPAN> =
<SPAN class=3D"type">class</SPAN> <SPAN =
class=3D"class">MySerializationConstants</SPAN> {=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">int</SPAN> ID =3D =
<SPAN class=3D"integer">1</SPAN>;=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"directive">final</SPAN> =
<SPAN class=3D"type">int</SPAN> PERSON_TYPE =3D ID++;=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"directive">final</SPAN> =
<SPAN class=3D"type">int</SPAN> CAR_TYPE =3D ID++;=0A=
   ...</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>And you use these type IDs in the <CODE>getTypeId</CODE> =
method.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">PersonStreamSerializer</SPAN>=0A=
      <SPAN class=3D"directive">implements</SPAN> =
StreamSerializer&lt;Person&gt; {=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getTypeId() {=0A=
      <SPAN class=3D"keyword">return</SPAN> =
MySerializationConstants.PERSON_TYPE;=0A=
   }=0A=
   ...</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>It is very important never to change the order of the type IDs when =
you have=20
old deserialized instances somewhere. This is because a change of the =
order will=20
change the actual value of the type ID, so Hazelcast will not be able to =

correctly deserialize objects that were created using the old =
order.</P></DIV>
<DIV class=3D"paragraph">
<P>The last step is the registration of the =
<CODE>PersonStreamSerializer</CODE>=20
in the <CODE>hazelcast.xml</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;serialization&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;serializers&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;serializer</SPAN>=0A=
          <SPAN class=3D"attribute-name">type-class</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Person</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>PersonStreamSerializer<SPAN =
class=3D"tag">&lt;/serializer&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/serializers&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/serialization&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In this case, we have registered the serializer=20
<CODE>PersonStreamSerializer</CODE> for the <CODE>Person</CODE> class. =
When=20
Hazelcast is going to serialize an object, it looks up the serializer =
registered=20
for the class for that object. Hazelcast is quite flexible; if it fails =
to find=20
a serializer for a particular class, it first tries to match based on=20
superclasses and then on interfaces. You could create a single=20
<CODE>StreamSerializer</CODE> that can deal with a class hierarchy if =
that=20
<CODE>StreamSerializer</CODE> is registered for the root class of that =
class
 hierarchy. If you use this approach, then you need to write sufficient =
data to=20
the stream so that on deserialization, you can figure out exactly which =
class=20
needs to be instantiated.</P></DIV>
<DIV class=3D"paragraph">
<P>It is not possible to create StreamSerializers for well known types =
like=20
<CODE>Long</CODE>, <CODE>String</CODE>, primitive arrays, etc., since =
Hazelcast=20
already registers them.</P></DIV>
<DIV class=3D"paragraph">
<P>Here is the serializer in action.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, Person&gt; map =3D =
hz.getMap(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">map</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
        Person person =3D <SPAN class=3D"keyword">new</SPAN> =
Person(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">peter</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
        map.put(person.getName(), person);=0A=
        <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(map.get(person.getNam=
e()));=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>And you will get the following output.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Person{name=3D'peter'}</PRE></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"serialization-object-traversal">9.5.1. Object Traversal</H4>
<DIV class=3D"paragraph">
<P>In practice, you often need to deal with object graphs. Luckily, this =
is=20
quite easy. To create the graph, we add the <CODE>Car</CODE> class. Each =
car has=20
a color and an owner.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Car</SPAN>  {=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> color;=0A=
    <SPAN class=3D"directive">private</SPAN> Person owner;=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> Car(Person owner,<SPAN =
class=3D"predefined-type">String</SPAN> color) {=0A=
        <SPAN class=3D"local-variable">this</SPAN>.color =3D color;=0A=
        <SPAN class=3D"local-variable">this</SPAN>.owner =3D owner;=0A=
    }=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> getColor() {=0A=
        <SPAN class=3D"keyword">return</SPAN> color;=0A=
    }=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> Person getOwner() {=0A=
        <SPAN class=3D"keyword">return</SPAN> owner;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> toString() {=0A=
        <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Car{</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN> +=0A=
                <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">color=3D'</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + color + <SPAN =
class=3D"string"><SPAN class=3D"delimiter">'</SPAN><SPAN =
class=3D"char">\'</SPAN><SPAN class=3D"delimiter">'</SPAN></SPAN> +=0A=
                <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">, =
owner=3D</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN> + owner +=0A=
                <SPAN class=3D"string"><SPAN =
class=3D"delimiter">'</SPAN><SPAN class=3D"content">}</SPAN><SPAN =
class=3D"delimiter">'</SPAN></SPAN>;=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The interesting part is the <CODE>StreamSerializer</CODE> for the =
car,=20
especially the <CODE>ObjectDataOutput.writeObject</CODE> and=20
<CODE>ObjectDataInput.readObject</CODE> methods.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">CarStreamSerializer</SPAN>=0A=
       <SPAN class=3D"directive">implements</SPAN> =
StreamSerializer&lt;Car&gt; {=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getTypeId() {=0A=
        <SPAN class=3D"keyword">return</SPAN> =
MySerializationConstants.CAR_TYPE;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> write(ObjectDataOutput out, Car car)=0A=
           <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
        out.writeObject(car.getOwner());=0A=
        out.writeUTF(car.getColor());=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> Car read(ObjectDataInput in) =
<SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
        Person owner =3D in.readObject();=0A=
        <SPAN class=3D"predefined-type">String</SPAN> color =3D =
in.readUTF();=0A=
        <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"keyword">new</SPAN> Car(owner,color);=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> destroy() {=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When the <CODE>writeObject</CODE> is called, Hazelcast will look up a =

serializer for the particular type. Hazelcast has serializers available =
for the=20
wrapper types like <CODE>Long</CODE>, <CODE>Boolean</CODE>, etc. =
Luckily, the=20
<CODE>writeObject</CODE> (and <CODE>readObject</CODE>) are perfectly =
able to=20
deal with null.</P></DIV>
<DIV class=3D"paragraph">
<P>To complete the example, the <CODE>CarStreamSerializer</CODE> also =
needs to=20
be registered.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;serialization&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;serializers&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;serializer</SPAN>=0A=
         <SPAN class=3D"attribute-name">type-class</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Person</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>PersonStreamSerializer<SPAN =
class=3D"tag">&lt;/serializer&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;serializer</SPAN>=0A=
         <SPAN class=3D"attribute-name">type-class</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Car</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>CarStreamSerializer<SPAN =
class=3D"tag">&lt;/serializer&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/serializers&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/serialization&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you run the following example:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, Car&gt; map =3D hz.getMap(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">map</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
        Person owner =3D <SPAN class=3D"keyword">new</SPAN> Person(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">peter</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
        Car car =3D <SPAN class=3D"keyword">new</SPAN> Car(owner, <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">red</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
        map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">mycar</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, car);=0A=
        <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(map.get(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">mycar</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>));=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>You will get the following output:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Car{color=3D'red', =
owner=3DPerson{name=3D'peter'}}</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Traversing object graphs for serialization and reconstructing object =
graphs=20
on deserialization is quite simple. One thing you need to watch out for =
is=20
cycles, see <A=20
href=3D"http://hazelcast.org/mastering-hazelcast/#cycles">Cycles</A>.</P>=
</DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"collections">9.5.2. Collections</H4>
<DIV class=3D"paragraph">
<P>If the field of an object needs to be serialized with the stream =
serializer,=20
then currently there is no other solution except to write a custom =
serializer=20
for that field. Support for collection serializers probably will be =
added in the=20
near future, but for the time being you might have a look at the =
following two=20
implementations. First, the serializer for the=20
<CODE>LinkedList</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">LinkedListStreamSerializer</SPAN>=0A=
       <SPAN class=3D"directive">implements</SPAN> =
StreamSerializer&lt;<SPAN =
class=3D"predefined-type">LinkedList</SPAN>&gt; {=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getTypeId() {=0A=
        <SPAN class=3D"keyword">return</SPAN> =
MySerializationConstants.LINKEDLIST_TYPE;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> write(ObjectDataOutput out, <SPAN =
class=3D"predefined-type">LinkedList</SPAN> l)=0A=
           <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
        out.writeInt(l.size());=0A=
        <SPAN class=3D"keyword">for</SPAN>(<SPAN =
class=3D"predefined-type">Object</SPAN> o: l){=0A=
            out.writeObject(o);=0A=
        }=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">LinkedList</SPAN> read(ObjectDataInput in)=0A=
           <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
        <SPAN class=3D"predefined-type">LinkedList</SPAN> l =3D <SPAN =
class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">LinkedList</SPAN>();=0A=
        <SPAN class=3D"type">int</SPAN> size =3D in.readInt();=0A=
        <SPAN class=3D"keyword">for</SPAN>(<SPAN =
class=3D"type">int</SPAN> k=3D<SPAN =
class=3D"integer">0</SPAN>;k&lt;size;k++){=0A=
           l.add(in.readObject());=0A=
        }=0A=
        <SPAN class=3D"keyword">return</SPAN> l;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> destroy() {=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>And now the serializer for the <CODE>HashMap</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">HashMapStreamSerializer</SPAN>=0A=
        <SPAN class=3D"directive">implements</SPAN> =
StreamSerializer&lt;<SPAN class=3D"predefined-type">HashMap</SPAN>&gt; {=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getTypeId() {=0A=
        <SPAN class=3D"keyword">return</SPAN> =
MySerializationConstants.HASHMAP_TYPE;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">HashMap</SPAN> read(<SPAN =
class=3D"directive">final</SPAN> ObjectDataInput in)=0A=
            <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
        <SPAN class=3D"type">int</SPAN> size =3D in.readInt();=0A=
        <SPAN class=3D"predefined-type">HashMap</SPAN> m =3D <SPAN =
class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">HashMap</SPAN>(size);=0A=
        <SPAN class=3D"keyword">for</SPAN>(<SPAN =
class=3D"type">int</SPAN> k=3D<SPAN =
class=3D"integer">0</SPAN>;k&lt;size;k++){=0A=
            <SPAN class=3D"predefined-type">Object</SPAN> key =3D =
in.readObject();=0A=
            <SPAN class=3D"predefined-type">Object</SPAN> value =3D =
in.readObject();=0A=
            m.put(key,value);=0A=
        }=0A=
        <SPAN class=3D"keyword">return</SPAN> m;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> write(<SPAN class=3D"directive">final</SPAN> =
ObjectDataOutput out, <SPAN class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">HashMap</SPAN> m)=0A=
           <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
        out.writeInt(m.size());=0A=
        <SPAN class=3D"predefined-type">Set</SPAN>&lt;<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry&gt; entrySet =3D m.entrySet();=0A=
        <SPAN class=3D"keyword">for</SPAN>(<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry entry: entrySet){=0A=
            out.writeObject(entry.getKey());=0A=
            out.writeObject(entry.getValue());=0A=
        }=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> destroy() {=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>It is very important that you know which collection classes are being
 serialized. If there is no collection serializer registered, the system =
will=20
default to the <CODE>GlobalSerializer</CODE>, which defaults to normal
 serialization. This might not be the behavior you are looking=20
for.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"kryo-streamserializer">9.5.3. Kryo StreamSerializer</H4>
<DIV class=3D"paragraph">
<P>Writing a customer serializer, such as a =
<CODE>StreamSerializer</CODE>, can=20
be a lot of work. Luckily, there are a lot of serialization libraries =
for this.
 Kryo is one of these libraries we use at Hazelcast and it is quite fast =
and=20
flexible, and it results in small byte arrays. It can also deal with =
object=20
cycles.</P></DIV>
<DIV class=3D"paragraph">
<P>Let=E2=80=99s start with a simple <CODE>Person</CODE> =
class.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Person</SPAN>{=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> name;=0A=
=0A=
    <SPAN class=3D"directive">private</SPAN> Person(){}=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> Person(<SPAN =
class=3D"predefined-type">String</SPAN> name) {=0A=
        <SPAN class=3D"local-variable">this</SPAN>.name =3D name;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> toString() {=0A=
        <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN>.format(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Person(name=3D%s)</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, name);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>No interface needs to be implemented. It is no problem if the class=20
implements a serialization interface like <CODE>Serializable</CODE> =
since it=20
will be ignored by Hazelcast.</P></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>Kryo</CODE> instance is not threadsafe and therefore you =
can=E2=80=99t=20
create <CODE>PersonKryoSerializer</CODE> with a <CODE>Kryo</CODE> =
instance as a=20
field. But since the <CODE>Kryo</CODE> instance is relatively expensive =
to=20
create, we want to reuse the instance. That is why the <CODE>Kryo</CODE> =

instance is put on a local thread.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">PersonKryoSerializer</SPAN> <SPAN =
class=3D"directive">implements</SPAN> StreamSerializer&lt;Person&gt; {=0A=
=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"directive">final</SPAN> =
<SPAN class=3D"predefined-type">ThreadLocal</SPAN>&lt;Kryo&gt; =
kryoThreadLocal=0A=
            =3D <SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">ThreadLocal</SPAN>&lt;Kryo&gt;() {=0A=
        <SPAN class=3D"annotation">@Override</SPAN>=0A=
        <SPAN class=3D"directive">protected</SPAN> Kryo initialValue() {=0A=
            Kryo kryo =3D <SPAN class=3D"keyword">new</SPAN> Kryo();=0A=
            kryo.register(Person.class);=0A=
            <SPAN class=3D"keyword">return</SPAN> kryo;=0A=
        }=0A=
    };=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getTypeId() {=0A=
        <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"integer">2</SPAN>;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> write(ObjectDataOutput objectDataOutput, =
Person product)=0A=
            <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
        Kryo kryo =3D kryoThreadLocal.get();=0A=
        Output output =3D <SPAN class=3D"keyword">new</SPAN> =
Output((<SPAN class=3D"predefined-type">OutputStream</SPAN>) =
objectDataOutput);=0A=
        kryo.writeObject(output, product);=0A=
        output.flush();=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> Person read(ObjectDataInput =
objectDataInput)=0A=
            <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
        <SPAN class=3D"predefined-type">InputStream</SPAN> in =3D (<SPAN =
class=3D"predefined-type">InputStream</SPAN>) objectDataInput;=0A=
        Input input =3D <SPAN class=3D"keyword">new</SPAN> Input(in);=0A=
        Kryo kryo =3D kryoThreadLocal.get();=0A=
        <SPAN class=3D"keyword">return</SPAN> kryo.readObject(input, =
Person.class);=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> destroy() {=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>PersonKryoSerializer</CODE> is relatively simple to =
implement. The=20
nice thing is that Kryo takes care of cycle detection and produces much =
smaller=20
serialized data than Java serialization. For one of our customers, we =
managed to=20
reduce the size of map entries from a 15 kilobyte average using Java=20
Serialization, to less than a 6 kilobyte average. When we enabled Kryo=20
compression, we managed to get it below 3 kilobytes.</P></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>PersonKryoSerializer</CODE> needs to be configured in=20
Hazelcast.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;serialization&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;serializers&gt;</SPAN>=0A=
            <SPAN class=3D"tag">&lt;serializer</SPAN> <SPAN =
class=3D"attribute-name">type-class</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Person</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>PersonKryoSerializer<SPAN =
class=3D"tag">&lt;/serializer&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;/serializers&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;/serialization&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/hazelcast&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When we run the following example code:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, Person&gt; map =3D =
hz.getMap(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">map</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
        map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Peter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"keyword">new</SPAN> =
Person(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Peter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>));=0A=
        Person p =3D map.get(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">Peter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(p);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>We=E2=80=99ll see the following output:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Person(name=3DPeter)</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In the previous example, we showed how Kryo can be implemented as a=20
<CODE>StreamSerializer</CODE>. The cool thing is that you can just plug =
in a
 serializer for a particular class; no matter if that class already =
implements a=20
different serialization strategy such as Serializable. If you =
don=E2=80=99t have the=20
chance to implement Kryo as <CODE>StreamSerializer</CODE>, then you can =
also=20
directly implement the serialization on the class. You can do this by =
using the=20
<CODE>DataSerializable</CODE> and (de)serializing each field using Kryo. =
This=20
approach is especially useful if you are still working on Hazelcast 2.x. =
Kryo is=20
not the only serializable library, you also might want to have a look at =
Jackson=20
Smile, Protobuf, etc.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"bytearrayserializer">9.6. ByteArraySerializer</H3>
<DIV class=3D"paragraph">
<P>An alternative to the <CODE>StreamSerializer</CODE> is the=20
<CODE>ByteArraySerializer</CODE>. With the =
<CODE>ByteArraySerializer</CODE>, the=20
raw bytearray internally used by Hazelcast is exposed. This is practical =
if you=20
are working with a serialization library that works with bytearrays =
instead of=20
streams.</P></DIV>
<DIV class=3D"paragraph">
<P>The following code example show the <CODE>ByteArraySerializer</CODE> =
in=20
action.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">PersonByteArraySerializer</SPAN>=0A=
       <SPAN class=3D"directive">implements</SPAN> =
ByteArraySerializer&lt;Person&gt; {=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> destroy() {=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getTypeId() {=0A=
        <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"integer">1</SPAN>;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">byte</SPAN><SPAN class=3D"type">[]</SPAN> write(Person =
object) <SPAN class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
        <SPAN class=3D"keyword">return</SPAN> =
object.getName().getBytes();=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> Person read(<SPAN =
class=3D"type">byte</SPAN><SPAN class=3D"type">[]</SPAN> buffer) <SPAN =
class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
        <SPAN class=3D"predefined-type">String</SPAN> name =3D <SPAN =
class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN>(buffer);=0A=
        <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"keyword">new</SPAN> Person(name);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>PersonByteArraySerializer</CODE> can be configured in the =
same way=20
that the <CODE>StreamSerializer</CODE> is configured.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;serialization&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;serializers&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;serializer</SPAN>=0A=
          <SPAN class=3D"attribute-name">type-class</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Person</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>PersonByteArraySerializer<SPAN =
class=3D"tag">&lt;/serializer&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/serializers&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/serialization&gt;</SPAN></CODE></PRE></DIV></DIV></DIV=
>
<DIV class=3D"sect2">
<H3 id=3D"global-serializer">9.7. Global Serializer</H3>
<DIV class=3D"paragraph">
<P>The new Hazelcast serialization functionality also makes it possible =
to
 configure a global serializer in case no other serializers are =
found.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;serialization&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;serializers&gt;</SPAN>=0A=
      <SPAN =
class=3D"tag">&lt;global-serializer&gt;</SPAN>PersonStreamSerializer=0A=
      <SPAN class=3D"tag">&lt;/global-serializer&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/serializers&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/serialization&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>There can only be a single global serializer. For this global =
serializer, the=20
<CODE>StreamSerializer.getTypeId</CODE> method does not need to return a =

relevant value.</P></DIV>
<DIV class=3D"paragraph">
<P>The global serializer can also be a=20
<CODE>ByteArraySerializer</CODE>.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"hazelcastinstanceaware">9.8. HazelcastInstanceAware</H3>
<DIV class=3D"paragraph">
<P>In some cases, when an object is deserialized, it needs access to the =

<CODE>HazelcastInstance</CODE> so that distributed objects can be =
accessed. You=20
can do this by implementing <CODE>HazelcastInstanceAware</CODE>, as in =
the=20
following example.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml">public class =
Person implements=0A=
      Serializable, HazelcastInstanceAware {=0A=
=0A=
   private static final long serialVersionUID =3D 1L;=0A=
=0A=
   private String name;=0A=
   private transient  HazelcastInstance hz;=0A=
=0A=
   public Person(String name) {=0A=
      this.name =3D name;=0A=
   }=0A=
=0A=
   @Override=0A=
   public void setHazelcastInstance(HazelcastInstance hz) {=0A=
      this.hz =3D hz;=0A=
      System.out.println("hazelcastInstance set");=0A=
   }=0A=
=0A=
   @Override=0A=
   public String toString() {=0A=
      return String.format("Person(name=3D%s)",name);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>After this person is deserialized, Hazelcast will check if the object
 implements <CODE>HazelcastInstanceAware</CODE> and will call the=20
<CODE>setHazelcastInstance</CODE> method. The <CODE>hz</CODE> field =
needs to be=20
transient since it should not be serialized.</P></DIV>
<DIV class=3D"paragraph">
<P>Injecting a <CODE>HazelcastInstance</CODE> into a domain object (an =
Entity)=20
like <CODE>Person</CODE> isn=E2=80=99t going to win you a beauty =
contest. But it is a=20
technique you can use in combination with Runnable/Callable =
implementations that=20
are executed by an <CODE>IExecutorService</CODE> that sends them to =
another=20
machine. After deserialization of such a task, the implementation of the =

run/call method often needs to access the=20
<CODE>HazelcastInstance</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>A best practice for implementing the =
<CODE>setHazelcastInstance</CODE> method=20
is only to set the <CODE>HazelcastInstance</CODE> field and not execute
 operations on the <CODE>HazelcastInstance</CODE>. The reason behind =
this is=20
that for some <CODE>HazelcastInstanceAware</CODE> implementations, the=20
<CODE>HazelcastInstance</CODE> isn=E2=80=99t fully up and running when =
it is=20
injected.</P></DIV>
<DIV class=3D"paragraph">
<P>You need to be careful with using the =
<CODE>HazelcastInstanceAware</CODE> on=20
anything other than the <CODE>root</CODE> object that is serialized. =
Hazelcast=20
sometimes optimizes local calls by skipping serialization. Some =
serialization
 technologies, like Java serialization, don=E2=80=99t allow for applying =
additional=20
logic when an object graph is deserialized. In these cases, only the =
root of the=20
graph is checked if it implements <CODE>HazelcastInstanceAware</CODE>, =
but the=20
graph isn=E2=80=99t traversed.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"serialization-usercontext">9.8.1. UserContext</H4>
<DIV class=3D"paragraph">
<P>Obtaining dependencies other than a <CODE>HazelcastInstance</CODE> =
was more
 complicated in Hazelcast 2.x. Often the only way was to rely on some =
form of=20
static field. Luckily, Hazelcast 3 provides a new solution using the =
user=20
context: a (Concurrent)Map that can be accessed from the=20
<CODE>HazelcastInstance</CODE> using the <CODE>getUserContext()</CODE> =
method.=20
In the user context, arbitrary dependencies can be placed using some key =
as=20
<CODE>String</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>Let=E2=80=99s start with an <CODE>EchoService</CODE> dependency that =
we want to make=20
available in an <CODE>EchoTask</CODE> which will be executed using a =
Hazelcast
 distributed executor.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">EchoService</SPAN>{=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> echo(<SPAN =
class=3D"predefined-type">String</SPAN> msg){=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(msg);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>There are no special requirements for this dependency, and no =
interfaces to=20
implement. It is just an ordinary POJO.</P></DIV>
<DIV class=3D"paragraph">
<P>This <CODE>EchoService</CODE> dependency needs to be injected into =
the=20
<CODE>UserContext</CODE> so it can be found when we execute the=20
<CODE>EchoTask</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args){=0A=
        EchoService echoService =3D <SPAN class=3D"keyword">new</SPAN> =
EchoService();=0A=
=0A=
        Config config =3D <SPAN class=3D"keyword">new</SPAN> Config();=0A=
        config.getUserContext().put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">echoService</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>,echoService);=0A=
        HazelcastInstance hz =3D Hazelcast.newHazelcastInstance(config);=0A=
=0A=
        IExecutorService executor =3D hz.getExecutorService(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">echoExecutor</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        executor.execute(<SPAN class=3D"keyword">new</SPAN> =
EchoTask(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">hello</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>));=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Injecting a dependency into the <CODE>UserContext</CODE> is quite =
simple. It=20
is important to understand that Hazelcast doesn=E2=80=99t provide =
support for injecting=20
dependencies into the user context from the XML configuration, since =
this would=20
require knowledge of how to create the actual dependency. The Hazelcast=20
configuration is purely meant as a configuration mechanism for Hazelcast =
and not=20
as a general purpose object container like Spring. Therefore, you need =
to add=20
the dependencies to the <CODE>UserContext</CODE> =
programmatically.</P></DIV>
<DIV class=3D"paragraph">
<P>The last part is retrieval of the dependency. The first thing that =
needs to=20
be done is to implement the <CODE>HazelcastInstanceAware</CODE> =
interface that
 injects the <CODE>HazelcastInstance</CODE>. From this=20
<CODE>HazelcastInstance</CODE>, we can retrieve the =
<CODE>UserContext</CODE> by=20
calling the <CODE>getUserContext</CODE> method.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">EchoTask</SPAN>=0A=
             <SPAN class=3D"directive">implements</SPAN> <SPAN =
class=3D"predefined-type">Runnable</SPAN>, <SPAN =
class=3D"predefined-type">Serializable</SPAN>,=0A=
                        HazelcastInstanceAware {=0A=
=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">transient</SPAN> HazelcastInstance hz;=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> msg;=0A=
=0A=
    <SPAN class=3D"directive">public</SPAN> EchoTask(<SPAN =
class=3D"predefined-type">String</SPAN> msg) {=0A=
        <SPAN class=3D"local-variable">this</SPAN>.msg =3D msg;=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> run() {=0A=
        EchoService echoService =3D=0A=
                (EchoService)hz.getUserContext().get(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">echoService</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        echoService.echo(msg);=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> setHazelcastInstance(HazelcastInstance hz) {=0A=
        <SPAN class=3D"local-variable">this</SPAN>.hz =3D hz;=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If we run this code, we=E2=80=99ll see:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>hello</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>It is possible to configure user-context on the Config, and you can =
also=20
directly configure the user-context of the =
<CODE>HazelcastInstance</CODE>. This=20
is practical if you need to add dependencies on the fly. Do not forget =
to clean=20
up what you put in the user-context, else you might run into resource =
problems=20
like an <CODE>OutOfMemoryError</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>Changes made in the user-context are local to a member only. Other =
members in=20
the cluster are not going to observe changes in the user-context of one =
member.=20
If you need to have that <CODE>EchoService</CODE> available on each =
member, you=20
need to add it to the user-context on each member.</P></DIV>
<DIV class=3D"paragraph">
<P>It is important to know that when a <CODE>HazelcastInstance</CODE> is =
created=20
using a <CODE>Config</CODE> instance, a new user-context=20
<CODE>ConcurrentMap</CODE> is created and the content of the =
user-context of the=20
<CODE>Config</CODE> is copied. Therefore, changes made to the =
user-context of=20
the <CODE>HazelcastInstance</CODE> will not reflect on other=20
<CODE>HazelcastInstance</CODE> created using the same =
<CODE>Config</CODE>=20
instance.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"managedcontext">9.9. ManagedContext</H3>
<DIV class=3D"paragraph">
<P>In some cases, when a serialized object is deserialized, not all of =
its
 fields can be deserialized because they are transient. These fields =
could be=20
important data structures like executors, database connections, etc. =
Luckily,=20
Hazelcast provides a mechanism that is called when an object is =
deserialized and=20
gives you the ability to fix the object by setting missing fields and =
call=20
methods, wrapping it inside a proxy, etc., so it can be used. This =
mechanism is=20
called the <CODE>ManagedContext</CODE> and you can configure it on the=20
<CODE>SerializationConfig</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>In the following example, we have a <CODE>DummyObject</CODE> with a=20
serializable field named <CODE>ser</CODE> and a transient field named=20
<CODE>trans</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"type">class</SPAN> <SPAN class=3D"class">DummyObject</SPAN> =
<SPAN class=3D"directive">implements</SPAN> <SPAN =
class=3D"predefined-type">Serializable</SPAN> {=0A=
    <SPAN class=3D"directive">transient</SPAN> <SPAN =
class=3D"predefined-type">Thread</SPAN> trans =3D <SPAN =
class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">Thread</SPAN>();=0A=
    <SPAN class=3D"predefined-type">String</SPAN> ser =3D <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">someValue</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>;=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> toString() {=0A=
        <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">DummyObject{</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> +=0A=
                <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">ser=3D'</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + ser + <SPAN class=3D"string"><SPAN =
class=3D"delimiter">'</SPAN><SPAN class=3D"char">\'</SPAN><SPAN =
class=3D"delimiter">'</SPAN></SPAN> +=0A=
                <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">, =
trans=3D</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN> + trans +=0A=
                <SPAN class=3D"string"><SPAN =
class=3D"delimiter">'</SPAN><SPAN class=3D"content">}</SPAN><SPAN =
class=3D"delimiter">'</SPAN></SPAN>;=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When this object is deserialized, the serializable field will be set, =
but the=20
transient field will be null. To prevent this from happening, we can =
create a=20
<CODE>ManagedContext</CODE> implementation that will restore this=20
field.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"type">class</SPAN> <SPAN =
class=3D"class">ManagedContextImpl</SPAN> <SPAN =
class=3D"directive">implements</SPAN> ManagedContext {=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Object</SPAN> initialize(<SPAN =
class=3D"predefined-type">Object</SPAN> obj) {=0A=
        <SPAN class=3D"keyword">if</SPAN> (obj <SPAN =
class=3D"keyword">instanceof</SPAN> DummyObject) {=0A=
            ((DummyObject) obj).trans =3D <SPAN =
class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">Thread</SPAN>();=0A=
        }=0A=
        <SPAN class=3D"keyword">return</SPAN> obj;=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When an object is deserialized, the <CODE>initialize</CODE> method =
will be=20
called. In our case, we are going to restore the transient field. To see =
the=20
<CODE>ManagedContextImpl</CODE> in action, have a look at the following=20
code.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      Config config =3D <SPAN class=3D"keyword">new</SPAN> Config();=0A=
      config.setManagedContext(<SPAN class=3D"keyword">new</SPAN> =
ManagedContextImpl());=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance(config);=0A=
=0A=
      <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, DummyObject&gt; map =3D =
hz.getMap(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">map</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
      DummyObject input =3D <SPAN class=3D"keyword">new</SPAN> =
DummyObject();=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(input);=0A=
=0A=
      map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, input);=0A=
      DummyObject output =3D map.get(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(output);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When this code is run, you will see output like:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>DummyObject{ser=3D'someValue', trans=3DThread[Thread-2,5,main]}=0A=
DummyObject{ser=3D'someValue', =
trans=3DThread[Thread-3,5,main]}</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The transient field has been restored to a new thread.</P></DIV>
<DIV class=3D"paragraph">
<P>Hazelcast currently provides one ManagedContext implementation: the=20
<CODE>SpringManagedContext</CODE> for integration with Spring. If you =
are
 integrating with different products, such as Guice, you could provide =
your own=20
ManagedContext implementation.</P></DIV>
<DIV class=3D"paragraph">
<P>If you need to have dependencies in your ManagedContext, you can let =
it
 implement the <CODE>HazelcastInstanceAware</CODE> interface. You can =
retrieve=20
custom dependencies using the&nbsp;<A =
href=3D"http://hazelcast.org/mastering-hazelcast/#serialization-userconte=
xt">UserContext</A>.</P></DIV>
<DIV class=3D"paragraph">
<P>You need to be careful using the ManagedContext on anything other =
than the=20
root object that is serialized. Hazelcast sometimes optimizes local =
calls by=20
skipping serialization. Also, some serialization technologies, like Java =

serialization, don=E2=80=99t allow for applying additional logic when an =
object graph is=20
deserialized. In these cases, only the root of the object graph can be =
offered=20
to the ManagedContext, but the graph isn=E2=80=99t =
traversed.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"good-to-know">9.10. Good to know</H3>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>Nested operations:</EM> <CODE>DataSerializable</CODE> and=20
<CODE>Portable</CODE> instances are allowed to call operations on =
Hazelcast that=20
lead to new serialize/deserialize operations. Unlike Hazelcast 2.x, it =
does not=20
lead to StackOverflowErrors.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Thread-safety:</EM> The serialization infrastructure, such as =
classes
 implementing <CODE>DataSerializable</CODE>, <CODE>Portable</CODE> and =
support=20
structures like <CODE>TypeSerializer</CODE> or =
<CODE>PortableFactory</CODE>,=20
need to be threadsafe since the same instances will be accessed by =
concurrent=20
threads.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Encryption for in memory storage:</EM> In some cases, having raw =
data in
 memory is a potential security risk. This problem can be solved by =
modifying=20
the serialization behavior of the class so that it encrypts the data on =
writing=20
and decrypts on reading. In some cases, such as storing a =
<CODE>String</CODE> in=20
a map, the instance needs to be wrapped in a different type (for =
example,=20
<CODE>EncryptedPortableString</CODE>) to override the serialization=20
mechanism.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Compression:</EM> The <CODE>SerializationConfig</CODE> has a=20
<CODE>enableCompression</CODE> property which enables compression for=20
<CODE>java.io.Serializable</CODE> and =
<CODE>java.io.Externalizable</CODE>=20
objects. If your classes make use of a different serialization =
implementation,=20
there is no out of the box support of compression.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Performance:</EM> Serialization and deserialization will have an =
impact=20
on performance, no matter how fast the serialization solution is. That =
is why=20
you need to be careful with operations on Hazelcast data structures. For =

example, iterating over a normal <CODE>HashMap</CODE> is very fast, =
since no
 serialization is needed, but iterating over a Hazelcast distributed map =
is a=20
lot slower. This is because potential remoting is involved, and also =
because=20
data needs to be deserialized. Some users have burned themselves on this =
issue=20
because it isn=E2=80=99t always immediately obvious from the =
code.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Performance comparisons:</EM> For an overview of performance =
comparisons
 between the different serialization solutions, you could have a look at =
the=20
following blogpost: <A class=3D"bare"=20
href=3D"http://tinyurl.com/qx5rpc2">http://tinyurl.com/qx5rpc2</A></P></D=
IV>
<DIV class=3D"paragraph">
<P><EM>Mixing serializers:</EM> If an object graph is serialized, =
different=20
parts of the graph could be serialized using different serialization=20
technologies. It could be that some parts are serialized with=20
<CODE>Portable</CODE>, other parts with StreamSerializers and =
Serializers.
 Normally, this won=E2=80=99t be an issue, but if you need to exchange =
these classes=20
with the outside world, it is best to have everything serialized using=20
<CODE>Portable</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>In Memory:</EM> Currently, all serialization is done in memory. =
If you=20
are dealing with large object graphs or large quantities of data, you =
need to=20
keep this in mind. There is a feature request that makes it possible to =
use=20
streams between members and members/clients and to overcome this memory=20
limitation. Hopefully, this will be implemented in the near =
future.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Factory IDs:</EM> Different serialization technologies, such as=20
<CODE>Portable</CODE> vs. <CODE>IdentifiedDataSerializable</CODE>, =
don=E2=80=99t need to=20
be unique.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-is-next">9.11. What is Next</H3>
<DIV class=3D"paragraph">
<P>In this chapter we have seen different forms of serialization that =
make
 serialization extremely flexible, especially with the =
<CODE>Portable</CODE> and=20
the <CODE>TypeSerializers</CODE>. In most cases this will be more than=20
sufficient. But if you ever run into a limitation, you could create a =
task in <A=20
class=3D"bare"=20
href=3D"http://github.com/hazelcast/hazelcast">http://github.com/hazelcas=
t/hazelcast</A>=20
and perhaps it will be added to the next Hazelcast=20
release.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"transactions">10. Transactions</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>In this book=E2=80=99s previous chapters, the examples have not =
contained any=20
transactions. Transactions can make life a lot easier since they=20
provide:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>Atomicity. Without atomicity, some of the operations on Hazelcast=20
  structures could succeed while other fail, leaving the system in an=20
  inconsistent state.</P></LI>
  <LI>
  <P>Consistency. This moves the state of the system from one valid =
state to the=20
  next.</P></LI>
  <LI>
  <P>Isolation: The transaction should behave as if it was the only =
transaction=20
  running. Normally, there are all kinds of isolation levels that allow =
certain=20
  anomalies to happen.</P></LI>
  <LI>
  <P>Durability: This makes sure that if a system crashes after a =
transaction
   commits, that nothing gets lost.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>There are fundamental changes in the transaction API for Hazelcast 3. =
In=20
Hazelcast 2.x, some of the data structures could be used with or without =
a=20
transaction. In Hazelcast 3, transactions are possible only on explicit=20
transactional data structures, such as the =
<CODE>TransactionalMap</CODE>,=20
<CODE>TransactionalMultiMap</CODE>, <CODE>TransactionalQueue</CODE>,=20
<CODE>TransactionalSet</CODE> and the <CODE>TransactionalList</CODE>. =
The reason=20
behind this design choice is that not all operations can be made =
transactional:=20
if they were made transactional, they would have huge =
performance/scalability=20
implications. To prevent running into surprises, transactions are only =
available=20
on explicit transactional data structures.</P></DIV>
<DIV class=3D"paragraph">
<P>Another change in the transaction API is that the=20
<CODE>TransactionContext</CODE> is the new interface to use. It supports =
the=20
same basic functionality as the Hazelcast 2.x Transaction, such as =
begin,=20
commit, and rollback. But it also supports accessing transactional data=20
structures like the <CODE>TransactionalMap</CODE> and=20
<CODE>TransactionalQueue</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>Here is an example of the transaction API in practice.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">TransactionalMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      TransactionContext txCxt =3D hz.newTransactionContext();=0A=
      TransactionalMap&lt;<SPAN class=3D"predefined-type">String</SPAN>, =
<SPAN class=3D"predefined-type">String</SPAN>&gt; map =3D =
txCxt.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">map</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      txCxt.beginTransaction();=0A=
      <SPAN class=3D"keyword">try</SPAN> {=0A=
         map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
         map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">2</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">2</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
         txCxt.commitTransaction();=0A=
      } <SPAN class=3D"keyword">catch</SPAN> (<SPAN =
class=3D"predefined-type">Throwable</SPAN> t) {=0A=
         txCxt.rollbackTransaction();=0A=
      }=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Finished</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Using a transaction is simple. In the example, the transactional map =
is=20
retrieved within the transaction. It is not allowed to retrieve a =
transactional
 data structure in one transaction and reuse it in another one. The =
retrieved=20
object, in this case, the <CODE>TransactionalMap</CODE>, is a proxy to =
the real=20
data structure, and it will contain transaction specific states, such as =
cache.=20
Therefore, that object should not be reused. Of course, the same =
transactional
 data structure can be retrieved multiple times within the same
 transaction.</P></DIV>
<DIV class=3D"sect2">
<H3 id=3D"configuring-the-transactionalmap">10.1. Configuring the=20
TransactionalMap</H3>
<DIV class=3D"paragraph">
<P>The <CODE>TransactionalMap</CODE> is backed up by a normal =
<CODE>IMap</CODE>.=20
You can configure a <CODE>TransactionalMap</CODE> using the =
configuration=20
mechanism of the IMap. If you have a <CODE>TransactionalMap</CODE> =
called=20
<CODE>employees</CODE>, then you can configure this=20
<CODE>TransactionalMap</CODE> using:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;map</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">employees</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
    ....=0A=
<SPAN class=3D"tag">&lt;/map&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>A <CODE>TransactionalMap</CODE> will have all the configuration =
options you=20
have on a normal <CODE>IMap</CODE>. The same goes for the=20
<CODE>TransactionalMultiMap</CODE>, which is backed up by a=20
<CODE>MultiMap</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>Because the <CODE>TransactionalMap</CODE> is build on top of the=20
<CODE>IMap</CODE>, the <CODE>TransactionalMap</CODE> can be loaded as an =

<CODE>IMap</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">TransactionalMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      TransactionContext txCxt =3D hz.newTransactionContext();=0A=
      TransactionalMap&lt;<SPAN =
class=3D"predefined-type">String</SPAN>,Employee&gt; employees =3D =
context.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">employees</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      employees.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>,<SPAN class=3D"keyword">new</SPAN> =
Employee());=0A=
      txCxt.commitTransaction();=0A=
=0A=
      IMap employeesIMap =3D hz.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">employees</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(employeesIMap.get(<SP=
AN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">1</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>));=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The employee that was put in the <CODE>TransactionalMap</CODE> is =
being=20
retrieved from the <CODE>IMap</CODE>. In practice, you probably never =
want to do
 this.</P></DIV>
<DIV class=3D"paragraph">
<P>If you have enabled JMX, then the <CODE>TransactionalMap</CODE> and=20
<CODE>TransactionalMultiMap</CODE> will appear as a normal=20
Map/MultiMap.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"transactionoptions">10.2. TransactionOptions</H3>
<DIV class=3D"paragraph">
<P>In some cases, the default behavior of the Transaction does not work =
and
 needs to be fine tuned. With the Hazelcast transaction API, you can do =
this by=20
using the <CODE>TransactionOptions</CODE> object and passing it to the=20
<CODE>HazelcastInstance.newTransactionContext(TransactionOptions)</CODE> =

method.</P></DIV>
<DIV class=3D"paragraph">
<P>Currently, Hazelcast provides the following configuration =
options.</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P><CODE>timeoutMillis</CODE>: Time in milliseconds a transaction will =
hold a
   lock. Defaults to 2 minutes. In most cases, this timeout is enough =
since the
   transaction should be executed quickly.</P></LI>
  <LI>
  <P><CODE>TransactionType</CODE>: Either <CODE>LOCAL</CODE> or=20
  <CODE>TWO_PHASE</CODE>. See <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#transactiontype">Transa=
ctionType</A>.</P></LI>
  <LI>
  <P><CODE>durability</CODE>: Number of backups for the transaction log, =

  defaults to 1. See <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#partial-commit-failure"=
>Partial=20
  Commit Failure</A> for more infomation.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>The following fragment makes use of the =
<CODE>TransactionOptions</CODE> to=20
configure a <CODE>TransactionContext</CODE> which is =
<CODE>TWO_PHASE</CODE>, has=20
a timeout of 1 minute, and a durability of 1.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE =
data-lang=3D"java">TransactionOptions txOptions =3D <SPAN =
class=3D"keyword">new</SPAN> TransactionOptions()=0A=
   .setTimeout(<SPAN class=3D"integer">1</SPAN>, <SPAN =
class=3D"predefined-type">TimeUnit</SPAN>.MINUTES)=0A=
   .setTransactionType(TransactionOptions.TransactionType.TWO_PHASE)=0A=
   .setDurability(<SPAN class=3D"integer">1</SPAN>);=0A=
TransactionContext txCxt =3D =
hz.newTransactionContext(txOptions);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P><EM>Not thread-safe</EM>: The <CODE>TransactionOptions</CODE> object =
isn=E2=80=99t=20
thread-safe, so if you share it between threads, make sure it =
isn=E2=80=99t modified=20
after it is configured.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"transactiontype">10.2.1. TransactionType</H4>
<DIV class=3D"paragraph">
<P>With the TransactionType, you can influence how much guarantee you =
get when a=20
member crashes when a transaction is committing. Hazelcast provides two=20
TransactionTypes. Their names are a bit confusing.</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P><CODE>LOCAL</CODE>: Unlike the name suggests, <CODE>LOCAL</CODE> is =
a two=20
  phase commit. First, all cohorts are asked to prepare if everyone =
agrees.=20
  Then, all cohorts are asked to commit. The problem happens if during =
the=20
  commit phase one or more members crash; the system could be left in an
   inconsistent state because some of the members might have committed =
and
   others might not.</P></LI>
  <LI>
  <P><CODE>TWO_PHASE</CODE>: The two phase commit is more than the =
classic two=20
  phase commit (if you want a regular two phase commit, use =
<CODE>LOCAL</CODE>).=20
  Before it commits, it copies the commit log to other members, so in =
case of=20
  member failure, another member can complete the =
commit.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>So which one should you use? It depends. <CODE>LOCAL</CODE> will =
perform=20
better but <CODE>TWO_PHASE</CODE> will provide better consistency in =
case of=20
failure.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"transactionaltask">10.3. TransactionalTask</H3>
<DIV class=3D"paragraph">
<P>In the previous example, we manually manage the transaction; we =
manually
 begin one and manually commit it when the operation is finished, and we =

manually rollback the transaction on failure. This can cause a lot of =
code noise=20
due to the repetitive boilerplate code. Luckily, this can be simplified =
by using=20
the <CODE>TransactionalTask</CODE> and the=20
<CODE>HazelcastInstance.executeTransaction(TransactionalTask)</CODE> =
method.=20
This method automatically begins a transaction when the task starts and
 automatically commits it on success or performs a rollback when a =
Throwable is=20
thrown.</P></DIV>
<DIV class=3D"paragraph">
<P>The previous example could be rewritten to use the=20
<CODE>TransactionalTask</CODE> like this.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">TransactionalTaskMember</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"predefined-type">Throwable</SPAN> {=0A=
      HazelcastInstance hz =3D Hazelcast.newHazelcastInstance();=0A=
      hz.executeTransaction(<SPAN class=3D"keyword">new</SPAN> =
TransactionalTask() {=0A=
         <SPAN class=3D"annotation">@Override</SPAN>=0A=
         <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Object</SPAN> execute(TransactionalTaskContext =
context)=0A=
               <SPAN class=3D"directive">throws</SPAN> =
TransactionException {=0A=
            TransactionalMap&lt;<SPAN =
class=3D"predefined-type">String</SPAN>,<SPAN =
class=3D"predefined-type">String</SPAN>&gt; map =3D context.getMap(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">map</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
            map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
            map.put(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">2</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">2</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
            <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-constant">null</SPAN>;=0A=
         }=0A=
      });=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Finished</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>An anonymous inner class is used to create an instance of the=20
<CODE>TransactionalTask</CODE> and to pass it to the=20
<CODE>HazelcastInstance.executeTransaction</CODE> method, where it will =
be=20
executed using a transaction. It is important to understand that the =
execution=20
of the task is done on the calling thread, so there is no hidden =
multi-threading=20
going on.</P></DIV>
<DIV class=3D"paragraph">
<P>If a RuntimeException/Error is thrown while executing the=20
<CODE>TransactionalTask</CODE>, the transaction is rolled back and the
 RuntimeException/Error is rethrown. A checked exception is not allowed =
to be=20
thrown by the <CODE>TransactionalTask</CODE>, so it needs to be caught =
and dealt=20
with by either doing a rollback or by a commit. Often a checked =
exception is a=20
valid business flow and the transaction still needs to be =
committed.</P></DIV>
<DIV class=3D"paragraph">
<P>Just as with the raw <CODE>TransactionContext</CODE>, you can use the =

<CODE>TransactionalTask</CODE> in combination with the=20
<CODE>TransactionOptions</CODE> by calling the=20
<CODE>HazelcastInstance.executeTransaction(TransactionOptions,Transaction=
alTask)</CODE>
 method like in this example.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE =
data-lang=3D"java">TransactionOptions txOptions =3D <SPAN =
class=3D"keyword">new</SPAN> TransactionOptions();=0A=
...=0A=
hz.executeTransaction(txOptions, <SPAN class=3D"keyword">new</SPAN> =
TransactionalTask() {=0A=
     <SPAN class=3D"annotation">@Override</SPAN>=0A=
     <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Object</SPAN> execute(TransactionalTaskContext =
context)=0A=
           <SPAN class=3D"directive">throws</SPAN> TransactionException {=0A=
       ...=0A=
     }=0A=
  });</CODE></PRE></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"partial-commit-failure">10.4. Partial Commit Failure</H3>
<DIV class=3D"paragraph">
<P>When a transaction is rolled back and non-transactional data =
structures are=20
modified, these modifications will not be rolled back.</P></DIV>
<DIV class=3D"paragraph">
<P>When a transactional operation is executed on a member, this member =
will keep=20
track of the changes by putting them in a transaction log. If a =
transaction hits=20
multiple members, each member will store a subset of the transaction =
log. When=20
the transaction is preparing for commit, this transaction change log =
will be=20
replicated <CODE>durability</CODE> times.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"transaction-isolation">10.5. Transaction Isolation</H3>
<DIV class=3D"paragraph">
<P>When concurrent interacting threads modify distributed data =
structures in=20
Hazelcast, you could run into race problems. These race problems are not =
caused=20
by Hazelcast, but by sloppy application code. These problems are =
notoriously=20
hard to solve; they are hard to reproduce and therefore hard to debug. =
In most=20
cases, the default strategy to deal with race problems is to apply =
manual=20
locking.</P></DIV>
<DIV class=3D"paragraph">
<P>Luckily, in the Hazelcast transaction API, isolation from other =
concurrent=20
executing transactions will be coordinated for you. By default, =
Hazelcast=20
provides a READ_COMMITTED isolation level, so dirty reads are not =
possible,=20
although non-repeatable and phantom reads are. If you are in a =
transaction, you=20
can read the data in your transaction and the data that is already =
committed. If=20
you are not in a transaction, you can only read the committed data. This =

isolation level is sufficient for most use cases since it is a nice =
balance=20
between scalability and correctness.</P></DIV>
<DIV class=3D"paragraph">
<P>The REPEATABLE_READ isolation level can also be exercised using the =
method=20
<CODE>getForUpdate()</CODE> of <CODE>TransactionalMap</CODE>.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"no-dirty-reads">10.5.1. No Dirty Reads</H4>
<DIV class=3D"paragraph">
<P>One of the read anomalies that can happen in transactional systems is =
a dirty=20
read. Imagine a map with keys of type <CODE>String</CODE> and values of =
type=20
<CODE>Integer</CODE>. If transaction-1 modifies key <CODE>foo</CODE> and
 increments the value from 0 to 1, and transaction-2 reads key =
<CODE>foo</CODE>
 and sees value 1, and then transaction-1 aborts, then transaction-2 =
sees the=20
value 1, a value that was never committed. This is called a dirty=20
read.</P></DIV>
<DIV class=3D"paragraph">
<P>The dirty reads are prevented in Hazelcast by deferring the write =
till the=20
commit of the transaction. All changes are stored locally in the =
transaction and=20
therefore are invisible to other transactions. Only when the transaction =
commits=20
and the cohorts have agreed with the the commit, are the actual changes =
actually=20
written. This means that in Hazelcast, it is impossible to see the =
changes of a=20
transaction in progress since all these changes are tracked locally in =
the=20
transaction, and these are not visible to other =
transactions.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"non-repeatable-reads">10.5.2. Non-repeatable Reads</H4>
<DIV class=3D"paragraph">
<P>Since default isolation level of Hazelcast transaction implementation =
is=20
READ_COMMITTED, it is possible that a non-repeatable read can occur. If =
a=20
transaction-1 reads the value of key <CODE>foo</CODE> as 0, and =
transaction-2=20
modifies key <CODE>foo</CODE> and increments the value from 0 to 1 and =
commits=20
before transaction-1 commits, and then transaction-1 reads the value of =
key=20
<CODE>foo</CODE> again, it will see 1 as value. This is called =
non-repeatable=20
read.</P></DIV>
<DIV class=3D"paragraph">
<P>If you want not to face any non-repeatable reads, which means the =
isolation
 level is REPEATABLE_READ, all reads should be done with using the =
method=20
<CODE>getForUpdate()</CODE> of <CODE>TransactionalMap</CODE>. This =
method uses=20
locks to prevent non-repeatable reads.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"read-your-writes">10.5.3. Read Your Writes</H4>
<DIV class=3D"paragraph">
<P>The Hazelcast transaction supports Read Your Writes (RYW) =
consistency,
 meaning that when a transaction makes an update and later reads that =
data, it=20
will see its own updates. Other transactions are not able to see these=20
uncommitted changes, otherwise they would suffer from dirty
 reads.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"no-serialized-isolation-level">10.5.4. No Serialized Isolation =

Level</H4>
<DIV class=3D"paragraph">
<P>Higher isolation levels, like SERIALIZED, are not desirable due to =
lack of
 scalability. With the SERIALIZED isolation level, the phantom read =
isn=E2=80=99t
 allowed. Imagine an empty map where transaction-1 reads the size of =
this map at=20
time t1 and sees 0. Then transaction-2 starts, inserts a map entry and =
commits.=20
If transaction-1 reads the size and sees 1, it is suffering from a =
phantom=20
read.</P></DIV>
<DIV class=3D"paragraph">
<P>Often, the only way to deal with a phantom read is to lock the whole =
data=20
structure to prevent other transactions inserting/removing map entries. =
This is=20
undesirable because it would cause a cluster wide blockage of this data=20
structure. That is why Hazelcast does not provide protection against =
phantom=20
reads, and therefore the isolation level is limited to READ_COMMITTED =
and=20
REPEATABLE_READ.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"non-transactional-data-structures">10.5.5. Non-transactional =
Data=20
Structures</H4>
<DIV class=3D"paragraph">
<P>If a non-transactional data structure (such as a non-transactional=20
<CODE>IMap</CODE> instance) is accessed during the execution of a =
transaction,
 the access is done oblivious to a running transaction. So if you read =
the same=20
non-transactional data structure multiple times, you could observe =
changes.=20
Therefore, you need to take care when you choose to access =
non-transactional
 data structures while executing a transaction.</P></DIV>
<DIV class=3D"paragraph">
<P>It isn=E2=80=99t possible to access a transactional data structure =
without a
 transaction. If that happens, an <CODE>IllegalStateException</CODE> is=20
thrown.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"locking">10.6. Locking</H3>
<DIV class=3D"paragraph">
<P>It is important to understand how the locking within Hazelcast =
transactions=20
work. For example, if a <CODE>map.put</CODE> is done, the transaction =
will
 automatically lock the entry for that key for the remaining duration of =
the=20
transaction. If another transaction wants to do an update on the same =
key, it=20
also wants to acquire the lock and will wait till the lock is released =
or the=20
transaction runs into a timeout (see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#transactionoptions">Tra=
nsactionOptions.timeoutMillis</A>).</P></DIV>
<DIV class=3D"paragraph">
<P>Reads on a map entry will not acquire the lock but reads will be =
blocked if=20
another transaction has acquired that lock; therefore, one transaction =
is not=20
able to read map entries locked by another transaction. Reads =
don=E2=80=99t block writes=20
but writes can block reads. If you want to acquire the lock when =
reading, check=20
the <CODE>TransactionalMap.getForUpdate</CODE> method. This provides the =
same=20
locking semantics as a <CODE>map.put</CODE> and can be compared with the =

<CODE>select for update</CODE> SQL statement.</P></DIV>
<DIV class=3D"paragraph">
<P>Hazelcast doesn=E2=80=99t have fine grained locks like a =
<CODE>readwritelock</CODE>;=20
the lock acquired is exclusive. If a lock can=E2=80=99t be acquired =
within a=20
transaction, the operation will timeout after 30 seconds and throws an=20
<CODE>OperationTimeoutException</CODE>. This provides protection against =

deadlocks. If a lock was acquired successfully, but its lock expires and =

therefore will be released, the transaction will happily continue =
executing
 operations. Only when the transaction is preparing for commit, this =
released=20
lock is detected and a <CODE>TransactionException</CODE> is thrown. When =
a=20
transaction aborts or commits, all locks are automatically released. =
Also, when=20
a transaction expires, its locks will automatically be =
released.</P></DIV>
<DIV class=3D"paragraph">
<P>If you are automatically retrying a transaction that throws an=20
<CODE>OperationTimeoutException</CODE>, and you do not control the =
number of=20
retries, it is possible that the system will run into a livelock. =
Livelocks are=20
even harder to deal with than deadlocks because the system appears to do
 something since the threads are busy, but there is either not much or =
no
 progress due to transaction rollbacks. Therefore, it is best to limit =
the
 number of retries and perhaps throw some kind of Exception to indicate
 failure.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"caching-and-session">10.7. Caching and Session</H3>
<DIV class=3D"paragraph">
<P>Hazelcast transactions provide support for caching reads/writes. If =
you have=20
been using Hibernate, then you probably know the Hibernate-Session. If =
you have=20
been using JPA, then you probably know the EntityManager. One of the =
functions=20
of the Hibernate-Session/EntityManager is that once a record is read =
from the=20
database, if a subsequent read for the same record is executed, it can =
be=20
retrieved from the session instead of going to the database. Hazelcast =
supports=20
a similar functionality.</P></DIV>
<DIV class=3D"paragraph">
<P>One big difference between the EntityManager and the Hazelcast =
transaction is=20
that the EntityManager will track your dirty objects and will =
update/insert the=20
objects when the transaction commits. So normally you load one or more =
entities,=20
modify them, commit the transaction and let the EntityManager deal with =
writing=20
the changes back to the database. The Hazelcast transaction API =
doesn=E2=80=99t work=20
like this, so the following code is broken.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE =
data-lang=3D"java">TransactionContext txCxt =3D =
hz.newTransactionContext();=0A=
TransactionalMap&lt;<SPAN =
class=3D"predefined-type">String</SPAN>,Employee&gt; employees =3D =
context.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">employees</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
Employee employee =3D employees.get(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">123</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
employee.fired =3D <SPAN class=3D"predefined-constant">true</SPAN>;=0A=
txCxt.commitTransaction();</CODE></PRE></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"xa-transactions">10.8. XA Transactions</H3>
<DIV class=3D"paragraph">
<P>It is likely that an application system needs to manage multiple =
resources in=20
the same transaction. As a standard, XA describes the interface between =
the=20
global transaction manager and the local resource manager. XA allows =
multiple
 resources (such as databases, application servers, message queues,
 transactional caches, etc.) to be accessed within the same transaction, =
thereby=20
preserving the ACID properties across applications. XA uses a two-phase =
commit=20
to ensure that all resources either commit or rollback any particular=20
transaction consistently.</P></DIV>
<DIV class=3D"paragraph">
<P>By implementing the <CODE>XAResource</CODE> interface, Hazelcast =
provides XA=20
transactions and it is fully <EM>XA-compliant</EM>. You can obtain the=20
<CODE>HazelcastXAResource</CODE> instance via =
<CODE>HazelcastInstance</CODE>.=20
Below is example code that uses Atomikos for transaction =
management:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE =
data-lang=3D"java">UserTransactionManager tm =3D <SPAN =
class=3D"keyword">new</SPAN> UserTransactionManager();=0A=
tm.setTransactionTimeout(<SPAN class=3D"integer">60</SPAN>);=0A=
tm.begin();=0A=
=0A=
HazelcastInstance hazelcastInstance =3D Hazelcast.newHazelcastInstance();=0A=
HazelcastXAResource xaResource =3D hazelcastInstance.getXAResource();=0A=
=0A=
Transaction transaction =3D tm.getTransaction();=0A=
transaction.enlistResource(xaResource);=0A=
<SPAN class=3D"comment">// other resources (database, app server etc...) =
can be enlisted</SPAN>=0A=
=0A=
<SPAN class=3D"keyword">try</SPAN> {=0A=
  TransactionContext context =3D xaResource.getTransactionContext();=0A=
  TransactionalMap map =3D context.getMap(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">m</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
  map.put(<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">key</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>, =
<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">value</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
  <SPAN class=3D"comment">// other resource operations</SPAN>=0A=
=0A=
  transaction.delistResource(xaResource, <SPAN =
class=3D"predefined-type">XAResource</SPAN>.TMSUCCESS);=0A=
  tm.commit();=0A=
} <SPAN class=3D"keyword">catch</SPAN> (<SPAN =
class=3D"exception">Exception</SPAN> e) {=0A=
  tm.rollback();=0A=
}</CODE></PRE></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"j2ee-integration">10.9. J2EE Integration</H3>
<DIV class=3D"paragraph">
<P>Hazelcast can participate in standard J2EE transactions which are =
handled in=20
J2EE containers. By using the Hazelcast Resource Adapter=20
(<CODE>hazelcast-jca-rar-<EM>version</EM>.rar</CODE>), Hazelcast can =
easily be=20
integrated into J2EE containers. You can see the example below for=20
usage:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">&lt;%<SPAN =
class=3D"annotation">@page</SPAN> <SPAN =
class=3D"keyword">import</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">javax.resource.ResourceException</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> %&gt;=0A=
&lt;%<SPAN class=3D"annotation">@page</SPAN> <SPAN =
class=3D"include">import</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">javax.transaction.*</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> %&gt;=0A=
&lt;%<SPAN class=3D"annotation">@page</SPAN> <SPAN =
class=3D"include">import</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">javax.naming.*</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> %&gt;=0A=
&lt;%<SPAN class=3D"annotation">@page</SPAN> <SPAN =
class=3D"include">import</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">javax.resource.cci.*</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> %&gt;=0A=
&lt;%<SPAN class=3D"annotation">@page</SPAN> <SPAN =
class=3D"include">import</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">java.util.*</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> %&gt;=0A=
&lt;%<SPAN class=3D"annotation">@page</SPAN> <SPAN =
class=3D"include">import</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">com.hazelcast.core.*</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> %&gt;=0A=
&lt;%<SPAN class=3D"annotation">@page</SPAN> <SPAN =
class=3D"include">import</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">com.hazelcast.jca.*</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> %&gt;=0A=
=0A=
&lt;%=0A=
<SPAN class=3D"include">UserTransaction</SPAN> <SPAN =
class=3D"include">txn</SPAN> =3D <SPAN class=3D"include">null</SPAN>;=0A=
HazelcastConnection conn =3D <SPAN =
class=3D"predefined-constant">null</SPAN>;=0A=
HazelcastInstance hazelcastInstance =3D Hazelcast.newHazelcastInstance();=0A=
=0A=
<SPAN class=3D"keyword">try</SPAN> {=0A=
  <SPAN class=3D"predefined-type">Context</SPAN> context =3D <SPAN =
class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">InitialContext</SPAN>();=0A=
  txn =3D (UserTransaction) context.lookup( <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">java:comp/UserTransaction</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> );=0A=
  txn.begin();=0A=
=0A=
  HazelcastConnectionFactory cf =3D (HazelcastConnectionFactory)=0A=
      context.lookup ( <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">java:comp/env/HazelcastCF</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> );=0A=
=0A=
  conn =3D cf.getConnection();=0A=
=0A=
  TransactionalMap&lt;<SPAN class=3D"predefined-type">String</SPAN>, =
<SPAN class=3D"predefined-type">String</SPAN>&gt; txMap =3D =
conn.getTransactionalMap( <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">default</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> );=0A=
  txMap.put( <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">key</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>, <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">value</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> );=0A=
=0A=
  txn.commit();=0A=
=0A=
} <SPAN class=3D"keyword">catch</SPAN> ( <SPAN =
class=3D"predefined-type">Throwable</SPAN> e ) {=0A=
  <SPAN class=3D"keyword">if</SPAN> ( txn !=3D <SPAN =
class=3D"predefined-constant">null</SPAN> ) {=0A=
    <SPAN class=3D"keyword">try</SPAN> {=0A=
      txn.rollback();=0A=
    } <SPAN class=3D"keyword">catch</SPAN> ( <SPAN =
class=3D"exception">Exception</SPAN> ix ) {=0A=
      ix.printStackTrace();=0A=
    };=0A=
  }=0A=
  e.printStackTrace();=0A=
} <SPAN class=3D"keyword">finally</SPAN> {=0A=
  <SPAN class=3D"keyword">if</SPAN> ( conn !=3D <SPAN =
class=3D"predefined-constant">null</SPAN> ) {=0A=
    <SPAN class=3D"keyword">try</SPAN> {=0A=
      conn.close();=0A=
    } <SPAN class=3D"keyword">catch</SPAN> (<SPAN =
class=3D"exception">Exception</SPAN> ignored) {};=0A=
  }=0A=
}=0A=
%&gt;</CODE></PRE></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"resource-adapter-configuration">10.9.1. Resource Adapter=20
Configuration</H4>
<DIV class=3D"paragraph">
<P>The Hazelcast resource adapter is a standard JCA resource adapter, =
thus=20
deployment and configuration is no different than configuring any other =
one.=20
Although resource adapter installation and configuration is container =
specific,=20
the most common steps are:</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>Add the <CODE>hazelcast-<EM>version</EM>.jar</CODE> and=20
  <CODE>hazelcast-jca-<EM>version</EM>.jar</CODE> to the =
container=E2=80=99s classpath.=20
  Usually there is a lib directory that is loaded automatically by the =
container=20
  on startup.</P></LI>
  <LI>
  <P>Deploy <CODE>hazelcast-jca-rar-<EM>version</EM>.rar</CODE>. Usually =
there=20
  is some kind of a deploy directory. The name of the directory varies =
by=20
  container.</P></LI>
  <LI>
  <P>Make container specific configurations when/after deploying=20
  `hazelcast-jca-rar-<EM>version</EM>.rar. Besides container specific=20
  configurations, set the JNDI name for the Hazelcast resource.</P></LI>
  <LI>
  <P>Configure your application to use the Hazelcast resource. Update=20
  <CODE>web.xml</CODE> and/or <CODE>ejb-jar.xml</CODE> to let the =
container know=20
  that your application will use the Hazelcast resource and define the =
resource=20
  reference.</P></LI>
  <LI>
  <P>Make the container specific application configuration to specify =
the JNDI=20
  name used for the resource in the =
application.</P></LI></OL></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"performance">10.10. Performance</H3>
<DIV class=3D"paragraph">
<P>Although transactions may be easy to use, their usage can influence =
the
 application performance drastically due to locking and dealing with =
partial=20
failed commits. Try to keep transactions as short as possible so that =
locks are=20
held for the least amount of time and the least amount of data is =
locked. Also=20
try to co-locate data in the same partition if possible.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"good-to-know">10.11. Good to know</H3>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>No readonly support</EM>: Hazelcast transactions can=E2=80=99t be =
configured as
 readonly. Perhaps this will be added in the future.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>No support for transaction propagation</EM>: It isn=E2=80=99t =
possible to create
 nested transactions without using XA transactions. If you do, an=20
<CODE>IllegalStateException</CODE> will be thrown.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Hazelcast client</EM>: Transactions can also be used from the =
Hazelcast
 client.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>Queue operations</EM>: For queue operations (<EM>offer</EM>,=20
<EM>poll</EM>), offered and/or polled objects are copied to the owner =
member in=20
order to safely commit/rollback. Moreover; if an item is polled in a=20
transaction, then it is really polled and other poll operations returns=20
different items or null if the queue is empty during the transaction. If =
the=20
transaction rollbacks, then the item is offered to the queue again. The =
same=20
applies for <EM>remove</EM>/<EM>add</EM> operations of=20
<CODE>TransactionalSet</CODE> and =
<CODE>TransactionalList</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>ITopic</EM>: There is no transactional <CODE>ITopic</CODE>. =
Perhaps this=20
will be implemented in the future.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>No thread locals</EM>: The Transaction API doesn=E2=80=99t rely =
on thread local
 storage. If you need to offload some work to a different thread, pass =
the=20
<CODE>TransactionContext</CODE> to the other thread. The transactional =
data=20
structures can be passed as well, but the other thread could also =
retrieve them=20
again since a transactional data structure can be retrieved multiple =
times from=20
the <CODE>TransactionContext</CODE> instance.</P></DIV>
<DIV class=3D"paragraph">
<P><EM>MapStore and QueueStore</EM>: <CODE>MapStore</CODE> and=20
<CODE>QueueStore</CODE> does not participate in transactions. Hazelcast =
will=20
suppress exceptions thrown by store in a=20
transaction.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-is-next">10.12. What is next</H3>
<DIV class=3D"paragraph">
<P>In this chapter we saw how to use transactions. You can also use =
Hazelcast=20
transactions in a JEE application using the JEE integration; see "J2EE=20
Integration" in the Hazelcast Reference Manual for more=20
information.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"network-configuration">11. Network Configuration</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>Hazelcast can run perfectly within a single JVM. This is excellent =
for=20
development and to speed up testing. But the true strength of Hazelcast =
becomes=20
apparent when a cluster of JVMs running on multiple machines is created. =
Having=20
a cluster of machines makes Hazelcast resilient to failure; if one =
machine=20
fails, the data will failover to another machine as if nothing happened. =
It also=20
makes Hazelcast scalable; just add extra machines to the cluster to gain =

additional capacity. You can create clusters by configuring the network=20
settings.</P></DIV>
<DIV class=3D"paragraph">
<P>To test the networking settings, we are going to make use of the =
following=20
minimalistic Hazelcast member, which loads the configuration from a =
Hazelcast=20
XML configuration file unless specified otherwise.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
      Hazelcast.newHazelcastInstance();=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The basic structure of the <CODE>hazelcast.xml</CODE> file is =
this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast&gt;</SPAN>=0A=
   ...=0A=
   <SPAN class=3D"tag">&lt;network&gt;</SPAN>=0A=
      ...=0A=
   <SPAN class=3D"tag">&lt;/network&gt;</SPAN>=0A=
   ...=0A=
<SPAN class=3D"tag">&lt;/hazelcast&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>For brevity reasons, this example leaves out the enclosing Hazelcast =
tags.=20
You can find the complete sources for this book on the Hazelcast =
website. For a=20
Hazelcast cluster to function correctly, all members must be able to =
contact=20
every other member. Hazelcast doesn=E2=80=99t support connecting over a =
member that is=20
able to connect to another member.</P></DIV>
<DIV class=3D"sect2">
<H3 id=3D"public-address">11.1. Public Address</H3>
<DIV class=3D"paragraph">
<P><CODE>public-address</CODE> overrides the public address of a node. =
By=20
default, a node selects its socket address as its public address. But =
behind a=20
network address translation (NAT), two endpoints (nodes) may not be able =
to=20
see/access each other. If both nodes set their public addresses to their =
defined=20
addresses on NAT, then that way they can communicate with each other. In =
this=20
case, their public addresses are not an address of a local network =
interface but=20
a virtual address defined by NAT. It is optional to set and useful when =
you have=20
a private cloud.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"port">11.2. Port</H3>
<DIV class=3D"paragraph">
<P>One of the most basic configuration settings is the port Hazelcast =
uses for=20
communication between the members. You can set this with the =
<CODE>port</CODE>=20
property in the network configuration. It defaults to 5701.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">&lt;network&gt;=0A=
    &lt;port&gt;<SPAN class=3D"integer">5701</SPAN>&lt;/port&gt;=0A=
&lt;/network&gt;</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you start the member, you will get output like the =
following.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>INFO: [192.168.1.101]:5701 [dev] Address[192.168.1.101]:5701 is =
STARTED</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>As you can see, the port 5701 is being used. If another member has =
claimed=20
port 5701, you will see that port 5702 is assigned. This is because by =
default,=20
Hazelcast will try 100 ports to find a free one that it can bind to. If =
you=20
configured port to 5701, Hazelcast tries ports between 5701 and 5801 =
(exclusive)=20
until it finds a free port. In some cases, you want to control the =
number of=20
ports tried. For example, you could have a large number of Hazelcast =
instances=20
running on a single machine or you only want a few ports to be used. You =
can do=20
this by specifying the <CODE>port-count</CODE> attribute, which defaults =
to 100.=20
In the following example you can see the <CODE>port-count</CODE> with a =
value of=20
200.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;port</SPAN> <SPAN =
class=3D"attribute-name">port-count</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">200</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>5701<SPAN class=3D"tag">&lt;/port&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In most cases, you won=E2=80=99t need to specify the =
<CODE>port-count</CODE>=20
attribute. But it can be very practical in those rare cases where you =
need=20
to.</P></DIV>
<DIV class=3D"paragraph">
<P>If you only want to make use of a single explicit port, you can =
disable
 automatic port increment using the <CODE>auto-increment</CODE> =
attribute (which
 defaults to true) as shown below.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;port</SPAN> <SPAN =
class=3D"attribute-name">auto-increment</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">false</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>5701<SPAN class=3D"tag">&lt;/port&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>port-count</CODE> property will be ignored when=20
<CODE>auto-increment</CODE> is false.</P></DIV>
<DIV class=3D"paragraph">
<P>If you look at the end of the logging, you=E2=80=99ll see the =
following=20
warning:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>WARNING: [192.168.1.104]:5701 [dev] No join method is enabled! =
Starting standalone.</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>You will get this warning no matter how many members you start. The =
cause is=20
that if you use the XML configuration, by default no join mechanism is =
selected=20
and therefore the members can=E2=80=99t join to form a cluster. To =
specify a join=20
mechanism, see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#join-mechanism">Join=20
Mechanism</A>.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"outbound-ports">11.3. Outbound Ports</H3>
<DIV class=3D"paragraph">
<P>By default, Hazelcast lets the system pick up an ephemeral port =
during socket
 bind operation. But security policies/firewalls may require you to =
restrict
 outbound ports to be used by Hazelcast-enabled applications. To fulfill =
this
 requirement, you can configure Hazelcast to use only defined outbound =
ports.=20
The following are examples of declarative and programmatic ways to =
configure=20
it.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;outbound-ports&gt;</SPAN>=0A=
      <SPAN class=3D"comment">&lt;!-- ports between 33000 and 35000 =
--&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;ports&gt;</SPAN>33000-35000<SPAN =
class=3D"tag">&lt;/ports&gt;</SPAN>=0A=
      <SPAN class=3D"comment">&lt;!-- comma separated ports --&gt;</SPAN>=0A=
      <SPAN =
class=3D"tag">&lt;ports&gt;</SPAN>37000,37001,37002,37003<SPAN =
class=3D"tag">&lt;/ports&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;ports&gt;</SPAN>38000,38500-38600<SPAN =
class=3D"tag">&lt;/ports&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;/outbound-ports&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>And this is the programmatic version:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">NetworkConfig =
networkConfig =3D config.getNetworkConfig();=0A=
<SPAN class=3D"comment">// ports between 35000 and 35100</SPAN>=0A=
networkConfig.addOutboundPortDefinition(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">35000-35100</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
<SPAN class=3D"comment">// comma separated ports</SPAN>=0A=
networkConfig.addOutboundPortDefinition(<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">36001, 36002, =
36003</SPAN><SPAN class=3D"delimiter">"</SPAN></SPAN>);=0A=
networkConfig.addOutboundPort(<SPAN class=3D"integer">37000</SPAN>);=0A=
networkConfig.addOutboundPort(<SPAN =
class=3D"integer">37001</SPAN>);</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>As you can see, you can specify ports in a comma separated way or you =
can=20
define a range as well.</P></DIV>
<DIV class=3D"paragraph">
<P>In programmatic configuration; you use the method=20
<CODE>addOutboundPort</CODE> to add only one port. If you need to add a =
group of=20
ports, then use the method =
<CODE>addOutboundPortDefinition</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>In the declarative configuration, the element `ports can be used for =
both=20
single and multiple port definitions.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"reuse-address">11.4. Reuse Address</H3>
<DIV class=3D"paragraph">
<P>When you shutdown a cluster member, the server socket port will be in =
the=20
<CODE>TIME_WAIT</CODE> state for the next couple of minutes. If you =
start the=20
member right after shutting it down, you may not be able to bind it to =
the same=20
port because it is in the <CODE>TIME_WAIT</CODE> state. If you set the=20
reuse-address element to true, the `TIME_WAIT state is ignored and you =
can bind=20
the member to the same port again.</P></DIV>
<DIV class=3D"paragraph">
<P>The following is how to configure it with XML.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;reuse-address&gt;</SPAN>true<SPAN =
class=3D"tag">&lt;/reuse-address&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Or, here is how to configure it in a programmatic way.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">NetworkConfig =
networkConfig =3D config.getNetworkConfig();=0A=
=0A=
networkConfig.setReuseAddress( <SPAN =
class=3D"predefined-constant">true</SPAN> =
);</CODE></PRE></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"join-mechanism">11.5. Join Mechanism</H3>
<DIV class=3D"paragraph">
<P>Hazelcast supports three mechanisms for members to join the=20
cluster.</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>TCP/IP-cluster</P></LI>
  <LI>
  <P>Multicast</P></LI>
  <LI>
  <P>Amazon EC2</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>One of these mechanisms needs to be enabled to form a cluster, else =
they will=20
remain standalone. If you use programmatic Hazelcast configuration,=20
<CODE>multicast</CODE> is enabled by default. If you use XML =
configuration, none=20
is enabled so you need to enable one. After joining the cluster, =
Hazelcast=20
relies on TCP for internal communication.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"multicast">11.5.1. Multicast</H4>
<DIV class=3D"paragraph">
<P>With <CODE>multicast</CODE> discovery, a member will send a message =
to all=20
members that listen to a specific <CODE>multicast</CODE> group. It is =
the=20
easiest mechanism to use, but it is not always available. Here is an =
example of=20
a very minimalistic <CODE>multicast</CODE> configuration:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;join&gt;</SPAN>=0A=
       <SPAN class=3D"tag">&lt;multicast</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/join&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you start one member, you will see output like this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Jan 22, 2013 2:06:30 PM com.hazelcast.impl.MulticastJoiner=0A=
INFO: [192.168.1.104]:5701 [dev]=0A=
=0A=
Members [1] {=0A=
   Member [192.168.1.104]:5701 this=0A=
}</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The member is started. Currently, the cluster has a single member. If =
you=20
start another member on the same machine, the following will be added to =
the=20
output on the console of the first member .</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Members [2] {=0A=
   Member [192.168.1.104]:5701 this=0A=
   Member [192.168.1.104]:5702=0A=
}</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The first member can see the second member. And if we look at the end =
of=20
logging for the second member, we=E2=80=99ll find something =
similar:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Members [2] {=0A=
   Member [192.168.1.104]:5701=0A=
   Member [192.168.1.104]:5702 this=0A=
}</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>We now have a two-member Hazelcast cluster running on a single =
machine. It=20
becomes more interesting if you start multiple members on different=20
machines.</P></DIV>
<DIV class=3D"paragraph">
<P>You can tune the <CODE>multicast</CODE> configuration using the =
following=20
elements.</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P><CODE>multicast-group</CODE>: With <CODE>multicast</CODE>, a member =
is part=20
  of the <CODE>multicast</CODE> group and will not receive=20
  <CODE>multicast</CODE> messages from other groups. By setting the=20
  <CODE>multicast-group</CODE> or the <CODE>multicast-port</CODE>, you =
can have=20
  separate Hazelcast clusters within the same network, so it is a best =
practice=20
  to use separate groups if the same network is used for different =
purposes. The=20
  <CODE>multicast</CODE> group IP address doesn=E2=80=99t conflict with =
normal unicast=20
  IP addresses since they have a specific range that is excluded from =
normal
   unicast usage: 224.0.0.0 to 239.255.255.255 (inclusive) and defaults =
of=20
  224.2.2.3. The address 224.0.0.0 is reserved and should not be =
used.</P></LI>
  <LI>
  <P><CODE>multicast-port</CODE>: The port of the <CODE>multicast</CODE> =
socket=20
  where the Hazelcast member listens and where it sends discovery =
messages.=20
  Unlike normal unicast sockets where only a single process can listen =
to a=20
  port, with <CODE>multicast</CODE> sockets multiple processes can =
listen to the=20
  same port. You don=E2=80=99t need to worry that multiple Hazelcast =
members running on
   the same JVM will conflict. This property defaults to 54327.</P></LI>
  <LI>
  <P><CODE>multicast-time-to-live</CODE>: Sets the default time-to-live =
for=20
  <CODE>multicast</CODE> packets sent out to control the scope of the
   multicasts. Defaults to 32. The maximum is 255.</P></LI>
  <LI>
  <P><CODE>multicast-timeout-seconds</CODE>: Specifies the time in =
seconds that=20
  a node should wait for a valid <CODE>multicast</CODE> response from =
another=20
  node running in the network before declaring itself as master node and =

  creating its own cluster. This applies only to the start-up of nodes =
where no=20
  master has been assigned yet. If you specify a high value such as 60 =
seconds,=20
  it means until a master is selected, each node is going to wait 60 =
seconds
   before continuing. Be careful with providing a high value. Also avoid =
setting
   the value too low since nodes could give up too early and create =
their own=20
  cluster. This property defaults to 2 seconds.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>Below you can see a full example of the configuration.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;join&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;multicast</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;multicast-group&gt;</SPAN>224.2.2.3<SPAN =
class=3D"tag">&lt;/multicast-group&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;multicast-port&gt;</SPAN>54327<SPAN =
class=3D"tag">&lt;/multicast-port&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;multicast-time-to-live&gt;</SPAN>32<SPAN =
class=3D"tag">&lt;/multicast-time-to-live&gt;</SPAN>=0A=
        <SPAN =
class=3D"tag">&lt;multicast-timeout-seconds&gt;</SPAN>2<SPAN =
class=3D"tag">&lt;/multicast-timeout-seconds&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;/multicast&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/join&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"trusted-interfaces">11.5.2. Trusted Interfaces</H4>
<DIV class=3D"paragraph">
<P>By default, <CODE>multicast</CODE> join requests of all machines will =
be=20
accepted, but in some cases you want to have more control. With=20
<CODE>trusted-interfaces</CODE>, you can control the machines you want =
to listen=20
to by registering their IP address as a trusted member. If a join =
request is=20
received for a machine that is not a trusted member, it will be ignored =
and it=20
will be prevented from joining the cluster. Below is an example where =
only join
 requests of <CODE>192.168.1.104</CODE> are allowed.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;join&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;multicast</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
         <SPAN class=3D"tag">&lt;trusted-interfaces&gt;</SPAN>=0A=
            <SPAN =
class=3D"tag">&lt;interface&gt;</SPAN>192.168.1.104<SPAN =
class=3D"tag">&lt;/interface&gt;</SPAN>=0A=
         <SPAN class=3D"tag">&lt;/trusted-interfaces&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;/multicast&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/join&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Hazelcast supports a wildcard on the last octet of the IP address, =
such as=20
<CODE>192.168.1.*</CODE>, and also supports an IP range on the last =
octet, such=20
as <CODE>192.168.1.100-110</CODE>. If you do not specify any=20
<CODE>trusted-interfaces</CODE>, so the set of trusted interfaces is =
empty, no=20
filtering will be applied.</P></DIV>
<DIV class=3D"paragraph">
<P>If you have configured trusted interfaces but one or more nodes are =
not
 joining a cluster, your trusted interfaced configuration may be too =
strict.=20
Hazelcast will log on the finest level if a message is filtered out so =
you can=20
see what is happening.</P></DIV>
<DIV class=3D"paragraph">
<P>If you use the programmatic configuration, the trusted interfaces are =
called=20
trusted members.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"debugging-multicast">11.5.3. Debugging Multicast</H4>
<DIV class=3D"paragraph">
<P>If you don=E2=80=99t see members joining, it is likely that =
<CODE>multicast</CODE> is
 not available. A cause can be the firewall; you can test this by =
disabling the=20
firewall or enabling <CODE>multicast</CODE> in the firewall (see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#firewall">Firewall</A>)=
.=20
Another cause can be that it is disabled on the network or that the =
network=20
doesn=E2=80=99t support it. On NIX environments, you can check if your =
network interface=20
supports <CODE>multicast</CODE> by calling <CODE>ifconfig | grep -i=20
multicast</CODE>, but it doesn=E2=80=99t mean that it is available. To =
check if=20
<CODE>multicast</CODE> is available, <CODE>iperf</CODE> is a useful tool =
which=20
is available for Windows/NIX/OSX. To test <CODE>multicast</CODE> using=20
multicast-group <CODE>224.2.2.3</CODE>, open a terminal on two machines =
within=20
the network, then run the following in the first terminal <CODE>iperf -s =
-u -B=20
224.2.2.3 -i 1</CODE> and run  <CODE>iperf -c 224.2.2.3 -u -T 32 -t 3 -i =

1</CODE> in the other terminal. If data is being transferred, then=20
<CODE>multicast</CODE> is working.</P></DIV>
<DIV class=3D"paragraph">
<P>If you want to use <CODE>multicast</CODE> for local development and =
it isn=E2=80=99t=20
working, you can try the following unicast configuration.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;join&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;multicast</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">false</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;tcp-ip</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/join&gt;</SPAN>=0A=
<SPAN =
class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"tcpip-cluster">11.5.4. TCP/IP Cluster</H4>
<DIV class=3D"paragraph">
<P>In the previous section, we used <CODE>multicast</CODE>, but in =
production=20
environments <CODE>multicast</CODE> often is prohibited, and in cloud=20
environments <CODE>multicast</CODE> often is not supported. That is why =
there is
 another discovery mechanism: the TCP/IP cluster. The idea is that there =
should=20
be a one or more well known members to connect to. Once members have =
connected=20
to these well known members and joined the cluster, they will keep each =
other up=20
to date with all member addresses.</P></DIV>
<DIV class=3D"paragraph">
<P>Here is an example of a TCP/IP cluster configuration with a well =
known member=20
with IP <CODE>192.168.1.104</CODE>:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;join&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;tcp-ip</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
         <SPAN class=3D"tag">&lt;member&gt;</SPAN>192.168.1.104<SPAN =
class=3D"tag">&lt;/member&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;/tcp-ip&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/join&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>You can configure multiple members using a comma separated list, or =
with
 multiple <CODE>&lt;member&gt;</CODE> entries. You can define a range of =
IPs=20
using the syntax <CODE>192.168.1.100-200</CODE>. If no port is provided, =

Hazelcast will automatically try the ports 5701..5703. If you do not =
want to=20
depend on IP addresses, you can provide the hostname. Instead of using =
more than=20
one <CODE>&lt;member&gt;</CODE> to configure members, you can also use=20
<CODE>&lt;members&gt;</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;join&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;tcp-ip</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
         <SPAN =
class=3D"tag">&lt;members&gt;</SPAN>192.168.1.104,192.168.1.105<SPAN =
class=3D"tag">&lt;/members&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;/tcp-ip&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/join&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This is very useful in combination with XML variables (see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#variables">Learning=20
The Basics: Variables</A>).</P></DIV>
<DIV class=3D"paragraph">
<P>By default, Hazelcast will <CODE>bind</CODE> (accept incoming =
traffic) to all
 local network interfaces. If this is an unwanted behavior, you can set =
the=20
<CODE>hazelcast.socket.bind.any</CODE> to false. In that case, Hazelcast =
will=20
first use the interfaces configured in the =
<CODE>interfaces/interfaces</CODE> to=20
resolve one interface to bind to. If none is found, Hazelcast will use =
the
 interfaces in the <CODE>tcp-ip/members</CODE> to resolve one interface =
to bind=20
to. If no interface is found, it will default to localhost.</P></DIV>
<DIV class=3D"paragraph">
<P>When a large number of IPs are listed and members can=E2=80=99t build =
up a cluster,=20
you can set the <CODE>connection-timeout-seconds</CODE> attribute, which
 defaults to 5, to a higher value. You can configure first scan and =
delay=20
between scans using the property=20
<CODE>hazelcast.merge.first.run.delay.seconds</CODE> and respectively=20
<CODE>hazelcast.merge.next.run.delay.seconds</CODE>. By default, =
Hazelcast will=20
scan every 5 seconds.</P></DIV>
<DIV class=3D"sect4">
<H5 id=3D"required-member">Required Member</H5>
<DIV class=3D"paragraph">
<P>If a member needs to be available before a cluster is started, there =
is an=20
option to set the required member:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;tcp-ip</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;required-member&gt;</SPAN>192.168.1.104<SPAN =
class=3D"tag">&lt;/required-member&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;member&gt;</SPAN>192.168.1.104<SPAN =
class=3D"tag">&lt;/member&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;member&gt;</SPAN>192.168.1.105<SPAN =
class=3D"tag">&lt;/member&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/tcp-ip&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In this example, a cluster will only start when member=20
<CODE>192.168.1.104</CODE> is found. Once this member is found, it will =
become=20
the master. That means <CODE>required-member</CODE> is the address of =
the=20
expected master node.</P></DIV></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"ec2-auto-discovery">11.5.5. EC2 Auto Discovery</H4>
<DIV class=3D"paragraph">
<P>Apart from Multicast and the TCP/IP-cluster join mechanisms, there is =
a third=20
mechanism: Amazon AWS. This mechanism, which makes use of TCP/IP =
discovery=20
behind the scenes, reads out EC2 instances within a particular region =
and has=20
certain tag-keys/values or a security group. These instances will be the =
well=20
known members of the cluster. A single region is used to let new nodes =
discover=20
the cluster, but the cluster can span multiple regions (it can even span =

multiple cloud providers). Let=E2=80=99s start with a very simple =
setup.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;join&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;aws</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
         <SPAN class=3D"tag">&lt;access-key&gt;</SPAN>my-access-key<SPAN =
class=3D"tag">&lt;/access-key&gt;</SPAN>=0A=
         <SPAN class=3D"tag">&lt;secret-key&gt;</SPAN>my-secret-key<SPAN =
class=3D"tag">&lt;/secret-key&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;/aws&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/join&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P><CODE>my-access-key</CODE> and <CODE>my-secret-key</CODE> need to be =
replaced=20
with your access key and secret key. Make sure that the started machines =
have a
 security group where the correct ports are opened (see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#firewall">Firewall</A>)=
.=20
And also make sure that the <CODE>enabled=3D"true"</CODE> section is =
added because=20
if you don=E2=80=99t add it, the AWS configuration will not be picked up =
(it is disabled=20
by default). To prevent hardcoding the <CODE>access-key</CODE> and=20
<CODE>secret-key</CODE>, you could have a look at <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#variables">Learning=20
the Basics: Variables</A>.</P></DIV>
<DIV class=3D"paragraph">
<P>The AWS section has a few configuration options.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>region</CODE>: Region where the machines are running. =
Defaults to=20
  <CODE>us-east-1</CODE>. If you run in a different region, you need to =
specify=20
  it, otherwise the members will not discover each other.</P></LI>
  <LI>
  <P><CODE>tag-key</CODE>,<CODE>tag-value</CODE>: Allows you to limit =
the=20
  numbers of EC2 instances to look at by providing them with a unique=20
  <CODE>tag-key</CODE>/<CODE>tag-value</CODE>. This makes it possible to =
create=20
  multiple clusters in a single data center.</P></LI>
  <LI>
  <P><CODE>security-group-name</CODE>: Just like the=20
  <CODE>tag-key</CODE>,<CODE>tag-value</CODE>, it filters out EC2 =
instances.=20
  This doesn=E2=80=99t need to be specified.</P></LI>
  <LI>
  <P><CODE>host-header</CODE>: You can give an entry point URL for your =
web=20
  service using this property. It is optional.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>aws</CODE> tag accepts an attribute called=20
<CODE>conn-timeout-seconds</CODE>. The default value is 5 seconds. You =
can=20
increase it if you have many IPs listed and members can not properly =
build up=20
the cluster.</P></DIV>
<DIV class=3D"paragraph">
<P>In case you are using a different cloud provider than Amazon EC2, you =
can=20
still use Hazelcast. You can use the programmatic API to configure a =
TCP/IP=20
cluster. The well known members need to be retrieved from your cloud =
provider=20
(for example, using JClouds).</P></DIV>
<DIV class=3D"paragraph">
<P>If you have problems connecting and you are not sure if the EC2 =
instances are=20
being found correctly, then you could have a look at the =
<CODE>AWSClient</CODE>=20
class. This client is used by Hazelcast to determine all the private IP=20
addresses of EC2 instances you want to connect to. If you feed it the=20
configuration settings that you are using, you can see if the EC2 =
instances are=20
being found.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args)<SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN>{=0A=
    AwsConfig config =3D <SPAN class=3D"keyword">new</SPAN> AwsConfig();=0A=
    config.setAccessKey(..) ;=0A=
    config.setSecretKey(...);=0A=
    config.setRegion(...);=0A=
    config.setSecurityGroupName(...);=0A=
    config.setTagKey(..);=0A=
    config.setTagValue(...);=0A=
    AWSClient client =3D <SPAN class=3D"keyword">new</SPAN> =
AWSClient(config);=0A=
    <SPAN class=3D"predefined-type">List</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>&gt; ipAddresses =3D =
client.getPrivateIpAddresses();=0A=
    <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">addresses found:</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>+ipAddresses);=0A=
    <SPAN class=3D"keyword">for</SPAN>(<SPAN =
class=3D"predefined-type">String</SPAN> ip: ipAddresses){=0A=
       <SPAN class=3D"predefined-type">System</SPAN>.out.println(ip);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Another thing you can do when your cluster is not being created =
correctly is=20
change the log level to finest/debug. Hazelcast will log which instances =
in a=20
region it is encountering and will also tell if an instance is accepted =
or=20
rejected and the reason for rejection.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P>Bad status: for when it isn=E2=80=99t running.</P></LI>
  <LI>
  <P>Non-matching group-name.</P></LI>
  <LI>
  <P>Non-matching tag-key/tag-value.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>A full step-by-step tutorial on how to start a demo application on =
Amazon EC2=20
can be found in the appendix.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"partition-group-configuration">11.6. Partition Group =
Configuration</H3>
<DIV class=3D"paragraph">
<P>Normally, Hazelcast prevents the master and the backup partitions =
from being
 stored on the same JVM to guarantee high availability. But multiple =
Hazelcast=20
members of the same cluster can run on the same machine, and thus when =
the=20
machine fails, both master and backup can fail. Hazelcast provides a =
solution=20
for this problem in the form of partition groups.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;partition-group</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> <SPAN =
class=3D"attribute-name">group-type</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">HOST_AWARE</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/hazelcast&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Using this configuration, all members that share the same =
hostname/host IP=20
will be part of the same group and therefore will not host both master =
and=20
backup(s). Another reason partition groups can be useful is that =
normally=20
Hazelcast considers all machines to be equal and therefore will =
distribute the=20
partitions evenly. But in some cases machines are not equal, such as =
different=20
amounts of memory available or slower CPUs, and that could lead to a =
load=20
imbalance. With a partition group, you can make member groups where each =

<CODE>member-group</CODE> has the same capacity and where each member =
has the=20
same capacity as the other members in the same =
<CODE>member-group</CODE>. In the=20
future, perhaps a balance factor will be added to relax these =
constraints. Here=20
is an example where we define multiple member groups based on matching =
IP=20
addresses.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;partition-group</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> <SPAN =
class=3D"attribute-name">group-type</SPAN>=3D<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">CUSTOM</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;member-group&gt;</SPAN>=0A=
         <SPAN class=3D"tag">&lt;interface&gt;</SPAN>10.10.1.*<SPAN =
class=3D"tag">&lt;/interface&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;/member-group&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;member-group&gt;</SPAN>=0A=
         <SPAN class=3D"tag">&lt;interface&gt;</SPAN>10.10.2.*<SPAN =
class=3D"tag">&lt;/interface&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;/member-group</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/partition-group&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/hazelcast&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In this example, there are two member groups, where the first=20
<CODE>member-group</CODE> contains all member with an IP 10.10.1.0-255 =
and the=20
second <CODE>member-group</CODE> contains all member with an IP of=20
10.10.2.0-255. You can use this approach to create different groups for =
each=20
data center so that when the primary data center goes offline, the =
backup data=20
center can take over.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"cluster-groups">11.7. Cluster Groups</H3>
<DIV class=3D"paragraph">
<P>Sometimes it is desirable to have multiple isolated clusters on the =
same
 network instead of a single cluster; for example, when a network is =
used for=20
different environments or different applications. Luckily, you can do =
this using=20
groups.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;group&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;name&gt;</SPAN>application1<SPAN =
class=3D"tag">&lt;/name&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;password&gt;</SPAN>somepassword<SPAN =
class=3D"tag">&lt;/password&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/group&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/hazelcast&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The password is optional and defaults to <CODE>dev-pass</CODE>. A=20
<CODE>group</CODE> is something other than a =
<CODE>partition-group</CODE>; with=20
the former you create isolated clusters and with the latter you control =
how=20
partitions are being mapped to members. If you don=E2=80=99t want to =
have a hard coded
 password, you could have a look at <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#variables">Learning=20
the Basics: Variables</A>.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"ssl">11.8. SSL</H3>
<DIV class=3D"paragraph">
<P>In a production environment, you often want to prevent the =
communication=20
between Hazelcast members from being tampered with or being read by an =
intruder=20
because the communication could contain sensitive information. Hazelcast =

provides a solution for that: SSL encryption.</P></DIV>
<DIV class=3D"paragraph">
<P>The basic functionality is provided by the =
<CODE>SSLContextFactory</CODE>=20
interface and it is configurable through the the SSL section in network=20
configuration. Hazelcast provides a default implementation called the=20
<CODE>BasicSSLContextFactory</CODE> which we are going to use for the=20
example.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;join&gt;</SPAN>=0A=
       <SPAN class=3D"tag">&lt;multicast</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/join&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;ssl</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;factory-class-name&gt;</SPAN>=0A=
         com.hazelcast.nio.ssl.BasicSSLContextFactory=0A=
      <SPAN class=3D"tag">&lt;/factory-class-name&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;properties&gt;</SPAN>=0A=
         <SPAN class=3D"tag">&lt;property</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">keyStore</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>keyStore.jks<SPAN =
class=3D"tag">&lt;/property&gt;</SPAN>=0A=
         <SPAN class=3D"tag">&lt;property</SPAN> <SPAN =
class=3D"attribute-name">name</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">keyStorePassword</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN =
class=3D"tag">&gt;</SPAN>password<SPAN =
class=3D"tag">&lt;/property&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;/properties&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/ssl&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>keyStore</CODE> is the path to the keyStore and the=20
<CODE>keyStorePassword</CODE> is the password of the keystore. In the =
example=20
code, you can find an already created keystore; you can also find how to =
create=20
one yourself in the documentation. When you start a member, you will see =
that=20
SSL is enabled.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>INFO: [192.168.1.104]:5701 [dev] SSL is enabled</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>There are some additional properties that you can set on the=20
<CODE>BasicSSLContextFactory</CODE>:</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>keyManagerAlgorithm</CODE>: Defaults to=20
<CODE>SunX509</CODE>.</P></LI>
  <LI>
  <P><CODE>trustManagerAlgorithm</CODE>: Defaults to=20
  <CODE>SunX509</CODE>.</P></LI>
  <LI>
  <P><CODE>protocol</CODE>: Defaults to =
<CODE>TLS</CODE>.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>Another way you can configure the <CODE>keyStore</CODE> and=20
<CODE>keyStorePassword</CODE> is through the =
<CODE>javax.net.ssl.keyStore</CODE>=20
and <CODE>javax.net.ssl.keyStorePassword</CODE> system properties. The=20
recommended practice is to make a single keystore file that is shared =
between=20
all instances. It isn=E2=80=99t possible to include the keystore within =
the=20
JAR.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"encryption">11.9. Encryption</H3>
<DIV class=3D"paragraph">
<P>Apart from supporting SSL, Hazelcast also supports symmetric =
encryption based=20
on the Java Cryptography Architecture (JCA). The main advantage of using =
the=20
latter is that it is easier to set up because you don=E2=80=99t need to =
deal with the=20
keystore. The main disadvantage is that it is less secure because SSL =
relies on=20
an on-the-fly created public/private key pair and the symmetric =
encryption=20
relies on a constant password/salt.</P></DIV>
<DIV class=3D"paragraph">
<P>SSL and symmetric encryption solutions have roughly the same CPU and =
network=20
bandwidth overhead because for the main data they rely on symmetric =
encryption;=20
only the public key is encrypted using asymmetric encryption. Compared =
to=20
non-encrypted data, the performance degradation will be roughly 50%. To=20
demonstrate the encryption, let=E2=80=99s have a look at the following=20
configuration.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;join&gt;</SPAN>=0A=
       <SPAN class=3D"tag">&lt;multicast</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/join&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;symmetric-encryption</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;algorithm&gt;</SPAN>PBEWithMD5AndDES<SPAN =
class=3D"tag">&lt;/algorithm&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;salt&gt;</SPAN>somesalt<SPAN =
class=3D"tag">&lt;/salt&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;password&gt;</SPAN>somepass<SPAN =
class=3D"tag">&lt;/password&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;iteration-count&gt;</SPAN>19<SPAN =
class=3D"tag">&lt;/iteration-count&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/symmetric-encryption&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When we start two members using this configuration, we=E2=80=99ll see =
that the
 symmetric encryption is activated.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Jan 20, 2013 9:22:08 AM com.hazelcast.nio.SocketPacketWriter=0A=
INFO: [192.168.1.104]:5702 [dev] Writer started with SymmetricEncryption=0A=
Jan 20, 2013 9:22:08 AM com.hazelcast.nio.SocketPacketReader=0A=
INFO: [192.168.1.104]:5702 [dev] Reader started with =
SymmetricEncryption</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Since encryption relies on the JCA, additional algorithms can be used =
by
 enabling the Bouncy Castle JCA provider through the property=20
<CODE>hazelcast.security.bouncy.enabled</CODE>. Hazelcast used to =
support
 asymmetric encryption, but due its complex setup, this feature has been =
removed=20
from Hazelcast 3.0. Currently, there is no support for encryption =
between a=20
native client and a cluster member.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"specifying-network-interfaces">11.10. Specifying Network =
Interfaces</H3>
<DIV class=3D"paragraph">
<P>Most server machines can have multiple network interfaces.</P></DIV>
<DIV class=3D"paragraph">
<P>You can also specify which network interfaces that Hazelcast should =
use.
 Servers mostly have more than one network interface so you may want to =
list the=20
valid IPs. You can use range characters =
(<CODE><STRONG></STRONG></CODE><STRONG>=20
and <CODE>-</CODE>) for simplicity. For instance, =
<CODE>10.3.10.</CODE></STRONG>=20
refers to IPs between 10.3.10.0 and 10.3.10.255. Interface 10.3.10.4-18 =
refers=20
to IPs between 10.3.10.4 and 10.3.10.18 (4 and 18 included). If network=20
interface configuration is enabled (it is disabled by default) and if =
Hazelcast=20
cannot find an matching interface, then it will print a message on the =
console=20
and won`t start on that member.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;hazelcast&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;network&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;interfaces</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
            <SPAN class=3D"tag">&lt;interface&gt;</SPAN>10.3.16.*<SPAN =
class=3D"tag">&lt;/interface&gt;</SPAN>=0A=
            <SPAN =
class=3D"tag">&lt;interface&gt;</SPAN>10.3.10.4-18<SPAN =
class=3D"tag">&lt;/interface&gt;</SPAN>=0A=
            <SPAN class=3D"tag">&lt;interface&gt;</SPAN>192.168.1.3<SPAN =
class=3D"tag">&lt;/interface&gt;</SPAN>=0A=
        <SPAN class=3D"tag">&lt;/interfaces&gt;</SPAN>=0A=
    <SPAN class=3D"tag">&lt;/network&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/hazelcast&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This is the same configuration done in programmatic way:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">Config config =
=3D <SPAN class=3D"keyword">new</SPAN> Config();=0A=
NetworkConfig network =3D config.getNetworkConfig();=0A=
InterfacesConfig <SPAN class=3D"type">interface</SPAN> =3D <SPAN =
class=3D"class">network</SPAN>.getInterfaces();=0A=
<SPAN class=3D"type">interface</SPAN>.setEnabled( <SPAN =
class=3D"class">true</SPAN> )=0A=
            .addInterface( <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">192.168.1.3</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> );</CODE></PRE></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"firewall">11.11. Firewall</H3>
<DIV class=3D"paragraph">
<P>When a Hazelcast member connects to another Hazelcast member, it =
binds to=20
server port 5701 (see the <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#port">port=20
configuration section</A>) to receive the inbound traffic. On the client =
side=20
also, a port needs to be opened for the outbound traffic. By default, =
this will=20
be an <CODE>ephemeral</CODE> port since it doesn=E2=80=99t matter which =
port is being=20
used as long as the port is free. The problem is that the lack of =
control on the=20
outbound port can be a security issue, because the firewall needs to =
expose all=20
ports for outbound traffic.</P></DIV>
<DIV class=3D"paragraph">
<P>Luckily, Hazelcast is able to control the outbound ports. For =
example, if we=20
want to allow the port range 30000-31000, we can configure like =
this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;join&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;multicast</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/join&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;outbound-ports&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;ports&gt;</SPAN>30000-31000<SPAN =
class=3D"tag">&lt;/ports&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/outbound-ports&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>To demonstrate the outbound ports configuration, start two Hazelcast =
members=20
with this configuration. When the members are fully started, execute =
<CODE>sudo=20
lsof -i | grep java</CODE>. Below you can see the cleaned output of that =

command:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>java 46117 IPv4 TCP *:5701 (LISTEN)=0A=
java 46117 IPv4 TCP 172.16.78.1:5701-&gt;172.16.78.1:30609 (ESTABLISHED)=0A=
java 46120 IPv4 TCP *:5702 (LISTEN)=0A=
java 46120 IPv4 TCP 172.16.78.1:30609-&gt;172.16.78.1:5701 =
(ESTABLISHED)</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>There are 2 java processes, 46117 and 46120, that listen to ports =
5701 and=20
5702 (inbound traffic). You can see that java process 46120 uses port =
30609 for=20
outbound traffic.</P></DIV>
<DIV class=3D"paragraph">
<P>Apart from specifying port ranges, you can also specify individual =
ports. You=20
can combine multiple port configurations either by separating them with =
commas=20
or by providing multiple <CODE>&lt;ports&gt;</CODE> sections. If you =
want to use=20
port 30000, 30005 and port range 31000 till 32000, you could say the =
following:=20
<CODE>&lt;ports&gt;30000,30005,31000-32000&lt;/ports&gt;</CODE>.</P></DIV=
>
<DIV class=3D"sect3">
<H4 id=3D"iptables">11.11.1. iptables</H4>
<DIV class=3D"paragraph">
<P>If you are using iptables, the following rule can be added to allow =
for=20
outbound traffic from ports 33000-31000:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"sh">iptables -A =
OUTPUT -p TCP --dport 33000:31000 -m state --state NEW -j =
ACCEPT</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>To also control incoming traffic from any address to port =
5701:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"sh">iptables -A =
INPUT -p tcp -d 0/0 -s 0/0 --dport 5701 -j =
ACCEPT</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>And to allow incoming <CODE>multicast</CODE> traffic:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"sh">iptables -A =
INPUT -m pkttype --pkt-type multicast -j =
ACCEPT</CODE></PRE></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"connectivity-test">11.12. Connectivity Test</H3>
<DIV class=3D"paragraph">
<P>If you are having troubles because machines won=E2=80=99t join a =
cluster, you might=20
check the network connectivity between the two machines. You can use a =
tool=20
called <CODE>iperf</CODE> for that. On one machine, you execute the =
following=20
command:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>iperf -s -p 5701</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This means that you are listening to port 5701.</P></DIV>
<DIV class=3D"paragraph">
<P>On the other machine, you execute the following command:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>iperf -c 192.168.1.107 -d -p 5701</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Replace <CODE>192.168.1.107</CODE> with the IP address of your first =
machine.=20
If you run the command and you get output like this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Server listening on TCP port 5701=0A=
TCP window size: 85.3 KByte (default)=0A=
=0A=
Client connecting to 192.168.1.107, TCP port 5701=0A=
TCP window size: 59.4 KByte (default)=0A=
=0A=
[  5] local 192.168.1.105 port 40524 connected with 192.168.1.107 port =
5701=0A=
[  4] local 192.168.1.105 port 5701 connected with 192.168.1.107 port =
33641=0A=
[ ID] Interval       Transfer     Bandwidth=0A=
[  4]  0.0-10.2 sec  55.8 MBytes  45.7 Mbits/sec=0A=
[  5]  0.0-10.3 sec  6.25 MBytes  5.07 Mbits/sec</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Then you know the 2 machines can connect to each other. However, if =
you see=20
something like this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>------------------------------------------------------------=0A=
Server listening on TCP port 5701=0A=
TCP window size: 85.3 KByte (default)=0A=
------------------------------------------------------------=0A=
connect failed: No route to host=0A=
=0A=
------------------------------------------------------------</PRE></DIV><=
/DIV>
<DIV class=3D"paragraph">
<P>Then you know that you might have a network connection problem on =
your
 hands.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"good-to-know">11.13. Good to know</H3>
<DIV class=3D"paragraph">
<P><SUB>~</SUB><SUB>~</SUB><SUB>~</SUB><SUB>~</SUB></P></DIV>
<DIV class=3D"paragraph">
<P><EM>Single TCP/IP connection:</EM> There is only a single TCP/IP =
connection
 between two members, not two. Also, between client and member, there is =
a
 single TCP/IP connection. If you run the following program:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Main</SPAN> {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args)<SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN>{=0A=
        HazelcastInstance hz1 =3D Hazelcast.newHazelcastInstance();=0A=
        HazelcastInstance hz2 =3D Hazelcast.newHazelcastInstance();=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>And then you run the following command:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"sh">netstat -anp =
--tcp | grep -i java</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>You get roughly the following output:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>tcp6       0      0 :::5701                 :::*                    =
LISTEN      28420/java=0A=
tcp6       0      0 :::5702                 :::*                    =
LISTEN      28420/java=0A=
tcp6       0      0 192.168.1.100:5701      192.168.1.100:57220     =
ESTABLISHED 28420/java=0A=
tcp6       0      0 192.168.1.100:57220     192.168.1.100:5701      =
ESTABLISHED 28420/java</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>There is a single TCP/IP connection: 192.168.1.100:5701&lt; =E2=86=92 =

192.168.1.100:57220.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-is-next">11.14. What is next</H3>
<DIV class=3D"paragraph">
<P>The network configuration for Hazelcast is very extensive. There are =
some=20
features like IPv6, network partitioning (split-brain syndrome), =
specifying=20
network interfaces, socket interceptors, WAN replication, that have been =
left=20
out of this book. But you can find them in the Hazelcast Reference =
Manual. Also,=20
the mailing list is a very valuable source of=20
information.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"spi">12. SPI</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>One of the most exciting new features of Hazelcast 3 is the new SPI =
module=20
(see the <CODE>com.hazelcast.spi</CODE> package). SPI, Service Provider=20
Interface, makes it possible to write first class distributed services =
and data=20
structures yourself. This SPI is used by the Hazelcast team to build all =
the=20
distributed data structures like <CODE>IMap</CODE>,=20
<CODE>IExecutorService</CODE> and <CODE>IAtomicLong</CODE>. The SPI API =
is=20
exposed to the end user, so you can write your own distributed data =
structures=20
if you need something special. You also could write more complex =
services, such=20
as an Actor library; a POC actor library has been buit on top of =
Hazelcast where=20
the actors automatically scale and are highly available.</P></DIV>
<DIV class=3D"paragraph">
<P>In this chapter, we build a distributed counter.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">interface</SPAN> =
<SPAN class=3D"class">Counter</SPAN>{=0A=
    <SPAN class=3D"type">int</SPAN> inc(<SPAN class=3D"type">int</SPAN> =
amount);=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This counter will be stored in Hazelcast and it can be called by =
different=20
members. This counter will also be scalable: the capacity for the number =
of=20
counters scales with the number of members in the cluster. The counter =
will be=20
highly available: if a member hosting that counter fails, a backup will =
already=20
be available on a different member and the system will continue as if =
nothing=20
happened. We are going to do this step by step; in each section, a new =
piece of=20
functionality is going to be added.</P></DIV>
<DIV class=3D"sect2">
<H3 id=3D"getting-started">12.1. Getting Started</H3>
<DIV class=3D"paragraph">
<P>In this section, we are going to show you a very basic=20
<CODE>CounterService</CODE> whose lifecycle is managed by Hazelcast. In =
itself=20
that is not extremely interesting, but it is the first part that needs =
to be in
 place for the Counter functionality. The <CODE>CounterService</CODE> is =
the=20
gateway into the Hazelcast internals. Through this gateway, you will be =
able to=20
create proxies, participate in partition migration, etc.</P></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>CounterService</CODE> needs to implement the=20
<CODE>com.hazelcast.spi.ManagedService</CODE> interface.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">CounterService</SPAN> <SPAN =
class=3D"directive">implements</SPAN> ManagedService {=0A=
   <SPAN class=3D"directive">private</SPAN> NodeEngine nodeEngine;=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> init(NodeEngine e, <SPAN =
class=3D"predefined-type">Properties</SPAN> p) {=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">CounterService.init</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"local-variable">this</SPAN>.nodeEngine =3D e;=0A=
   }=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> shutdown() {=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">CounterService.shutdown</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
   }=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> reset() {=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The following methods need to be implemented.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>init</CODE>: This method is called when this=20
  <CODE>CounterService</CODE> is initialized. It gives you the ability =
to do=20
  some initializing. The <CODE>NodeEngine</CODE> gives access to the =
internals=20
  of Hazelcast like the <CODE>HazelcastInstance</CODE>,=20
  <CODE>PartitionService</CODE>, etc. Through the =
<CODE>Properties</CODE>=20
  object, you can pass in your own properties.</P></LI>
  <LI>
  <P><CODE>shutdown</CODE>: This method is called when=20
  <CODE>CounterService</CODE> is shutdown. It gives the ability to clean =
up=20
  resources.</P></LI>
  <LI>
  <P><CODE>reset</CODE>: This method is called when the members have run =
into=20
  the split-brain problem. This occurs when disconnected members that =
have
   created their own cluster are merged back into the main cluster. =
Services can=20
  also implement the <CODE>SplitBrainHandleService</CODE> to indicate =
that they=20
  can take part in the merge process. For the =
<CODE>CounterService</CODE>, we=20
  are going to implement as a no-op.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>The next step is to enable the <CODE>CounterService</CODE>; in our =
case, we=20
are going to configure that with <CODE>hazelcast.xml</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;network&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;join&gt;</SPAN><SPAN =
class=3D"tag">&lt;multicast</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">/&gt;</SPAN> =
<SPAN class=3D"tag">&lt;/join&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/network&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;services&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;service</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;name&gt;</SPAN>CounterService<SPAN =
class=3D"tag">&lt;/name&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;class-name&gt;</SPAN>CounterService<SPAN =
class=3D"tag">&lt;/class-name&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/service&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/services&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>You can see that two properties are set.</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P><CODE>name</CODE>: This needs to be a unique name because it will =
be used=20
  to look up the service when a remote call is made. In our case, =
we=E2=80=99ll call it=20
  <CODE>CounterService</CODE>. Please realize that this name will be =
sent with=20
  every request, so the longer the name, the more data needs to be
   (de)serialized and sent over the line. Don=E2=80=99t make it too =
long, but also don=E2=80=99t=20
  reduce it to something that is not understandable.</P></LI>
  <LI>
  <P><CODE>class</CODE>: Class of the service, in this case,=20
  <CODE>CounterService</CODE>. The class needs to have a no-arg =
constructor,=20
  otherwise the object can=E2=80=99t be initialized.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>We also enabled <CODE>multicast</CODE> discovery since we=E2=80=99ll =
rely on that=20
later.</P></DIV>
<DIV class=3D"paragraph">
<P>You can also pass properties, which will be passed to the =
<CODE>init</CODE>
 method. You can do this using the following syntax:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"xml"><SPAN =
class=3D"tag">&lt;service</SPAN> <SPAN =
class=3D"attribute-name">enabled</SPAN>=3D<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">true</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN><SPAN class=3D"tag">&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;name&gt;</SPAN>CounterService<SPAN =
class=3D"tag">&lt;/name&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;class-name&gt;</SPAN>CounterService<SPAN =
class=3D"tag">&lt;/class-name&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;properties&gt;</SPAN>=0A=
      <SPAN class=3D"tag">&lt;someproperty&gt;</SPAN>10<SPAN =
class=3D"tag">&lt;/someproperty&gt;</SPAN>=0A=
   <SPAN class=3D"tag">&lt;/properties&gt;</SPAN>=0A=
<SPAN class=3D"tag">&lt;/service&gt;</SPAN></CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If you want to parse more complex XML, you might want to have a look =
at the=20
<CODE>com.hazelcast.spi.ServiceConfigurationParser</CODE> which will =
give you
 access to the XML DOM tree.</P></DIV>
<DIV class=3D"paragraph">
<P>Of course, we want to see this in action.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
      Hazelcast.newHazelcastInstance();=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If we start it, we=E2=80=99ll see the following output.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>CounterService.init</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>CounterService</CODE> is started as part of the startup of =
the=20
<CODE>HazelcastInstance</CODE>. If you shutdown the=20
<CODE>HazelcastInstance</CODE>, for example, by using Control-C, then =
you will=20
see:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>CounterService.shutdown</PRE></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"proxy">12.2. Proxy</H3>
<DIV class=3D"paragraph">
<P>In the previous section, we created a <CODE>CounterService</CODE> =
that starts=20
when Hazelcast starts, but apart from that it doesn=E2=80=99t do =
anything yet. In this=20
section, we connect the <CODE>Counter</CODE> interface to the=20
<CODE>CounterService</CODE>, we do a remote call on the member hosting =
the=20
eventual counter data/logic, and we return a dummy result. In Hazelcast, =

remoting is done through a Proxy: on the <CODE>client</CODE> side, you =
get a=20
proxy which exposes your methods. When a method is called, the proxy =
creates an=20
operation object, sends this operation to the machine responsible to =
execute=20
that operation, and eventually sends the result.</P></DIV>
<DIV class=3D"paragraph">
<P>First, we let the <CODE>Counter</CODE> implement the=20
<CODE>DistributedObject</CODE> interface to indicate that it is a =
distributed=20
object. Some additional methods will be exposed, such as =
<CODE>getName</CODE>,=20
<CODE>getId</CODE>, and <CODE>destroy</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">interface</SPAN> =
<SPAN class=3D"class">Counter</SPAN> <SPAN =
class=3D"directive">extends</SPAN> DistributedObject {=0A=
    <SPAN class=3D"type">int</SPAN> inc(<SPAN class=3D"type">int</SPAN> =
amount);=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The next step is enhancing the <CODE>CounterService</CODE>. Apart =
from=20
implementing the <CODE>com.hazelcast.spi.ManagedService</CODE> =
interface, it now=20
also implements the <CODE>com.hazelcast.spi.RemoteService</CODE> =
interface.=20
Through this interface, a client can get a handle of a =
<CODE>Counter</CODE>=20
proxy.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">CounterService</SPAN> <SPAN =
class=3D"directive">implements</SPAN> ManagedService, RemoteService {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"directive">final</SPAN> =
<SPAN class=3D"predefined-type">String</SPAN> NAME =3D <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">CounterService</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>;=0A=
=0A=
   <SPAN class=3D"directive">private</SPAN> NodeEngine nodeEngine;=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> DistributedObject =
createDistributedObject(<SPAN class=3D"predefined-type">String</SPAN> =
objectName) {=0A=
      <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"keyword">new</SPAN> CounterProxy(objectName, nodeEngine, <SPAN =
class=3D"local-variable">this</SPAN>);=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> destroyDistributedObject(<SPAN =
class=3D"predefined-type">String</SPAN> objectName) {=0A=
      <SPAN class=3D"comment">//no-op</SPAN>=0A=
   }=0A=
=0A=
   ....</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The methods of the <CODE>ManagedService</CODE> were left out, but you =
can=20
find the full source in the examples for the book. The=20
<CODE>createDistributedObject</CODE> returns a =
<CODE>CounterProxy</CODE>. This=20
proxy is a local representation to (potentially) remote managed data and =
logic.=20
It is important to realize that caching the proxy instance and removing =
the
 proxy instance is done outside of this service, so we don=E2=80=99t =
need to take care=20
of it ourselves.</P></DIV>
<DIV class=3D"paragraph">
<P>The next part is the <CODE>CounterProxy</CODE> =
implementation.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">CounterProxy</SPAN>=0A=
        <SPAN class=3D"directive">extends</SPAN> =
AbstractDistributedObject&lt;CounterService&gt;=0A=
    <SPAN class=3D"directive">implements</SPAN> Counter {=0A=
=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> name;=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> CounterProxy(<SPAN =
class=3D"predefined-type">String</SPAN> name, NodeEngine ne, =
CounterService cs) {=0A=
      <SPAN class=3D"local-variable">super</SPAN>(ne, cs);=0A=
      <SPAN class=3D"local-variable">this</SPAN>.name =3D name;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> getServiceName() {=0A=
      <SPAN class=3D"keyword">return</SPAN> CounterService.NAME;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> getName() {=0A=
      <SPAN class=3D"keyword">return</SPAN> name;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> inc(<SPAN class=3D"type">int</SPAN> amount) {=0A=
      NodeEngine nodeEngine =3D getNodeEngine();=0A=
      IncOperation operation =3D <SPAN class=3D"keyword">new</SPAN> =
IncOperation(name, amount);=0A=
      <SPAN class=3D"type">int</SPAN> partitionId =3D =
nodeEngine.getPartitionService().getPartitionId(name);=0A=
      InvocationBuilder builder =3D nodeEngine.getOperationService()=0A=
             .createInvocationBuilder(CounterService.NAME, operation, =
partitionId);=0A=
      <SPAN class=3D"keyword">try</SPAN> {=0A=
         <SPAN class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">Future</SPAN>&lt;<SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; future =3D builder.invoke();=0A=
         <SPAN class=3D"keyword">return</SPAN> future.get();=0A=
      } <SPAN class=3D"keyword">catch</SPAN> (<SPAN =
class=3D"exception">Exception</SPAN> e) {=0A=
         <SPAN class=3D"keyword">throw</SPAN> ExceptionUtil.rethrow(e);=0A=
      }=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>CounterProxy</CODE> does not contain counter state; it is =
just a=20
local representative of remote data/functionality. Therefore, the=20
<CODE>CounterProxy.inc</CODE> method needs to be invoked on the machine =
for=20
hosting the partition that contains the real counter. This can be done =
using the
 Hazelcast SPI, which takes care of sending operations to the correct =
machine,=20
executing the operation, and returning the results.</P></DIV>
<DIV class=3D"paragraph">
<P>If you take a closer look at the <CODE>inc</CODE> method, the first =
thing it=20
does is create the <CODE>IncOperation</CODE> with the given name and the =
amount.=20
Next, it gets the <CODE>partitionId</CODE>; this is done based on the =
name so=20
that all operations for a given name will always result in the same=20
<CODE>partitionId</CODE>. Then, it creates an =
<CODE>InvocationBuilder</CODE>=20
based on the operation and the <CODE>partitionId</CODE> using the=20
<CODE>InvocationBuilder</CODE>. This is where the connection is made =
between the=20
operation and the partition.</P></DIV>
<DIV class=3D"paragraph">
<P>The last part is invoking the <CODE>Invocation</CODE> and waiting for =
its=20
result. This is done using a <CODE>Future</CODE>, which gives us the =
ability to=20
synchronize on completion of that remote executed operation and to get =
the=20
results. In this case, we do a simple get since we don=E2=80=99t care =
about a timeout;=20
for real systems, it is often better to use a timeout since most =
operations=20
should complete in a certain amount of time. If they don=E2=80=99t =
complete, it could be=20
a sign of problems; waiting indefinitely could lead to stalling systems =
without=20
any form of error logging.</P></DIV>
<DIV class=3D"paragraph">
<P>If the execution of the operation fails with an exception, an=20
<CODE>ExecutionException</CODE> is thrown and needs to be dealt with. =
Hazelcast=20
provides a utility function for that:=20
<CODE>ExceptionUtil.rethrow(Throwable)</CODE>. If you want to keep the =
checked
 exception, you need to deal with exception handling yourself, and the=20
<CODE>ExceptionUtil</CODE> is not of much use. A nifty improvement for =
debugging=20
is that if a remote exception is thrown, the stacktrace includes the =
remote side=20
and the local side. This makes it possible to figure out what went wrong =
on both=20
sides of the call.</P></DIV>
<DIV class=3D"paragraph">
<P>If the exception is an <CODE>InterruptedException</CODE>, you can do =
two=20
things. Either propagate the <CODE>InterruptedException</CODE> since it =
is a=20
good practice for blocking methods like shown below, or just use the=20
<CODE>ExceptionUtil.rethrow</CODE> for all exceptions.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">  <SPAN =
class=3D"keyword">try</SPAN> {=0A=
     <SPAN class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">Future</SPAN>&lt;<SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; future =3D =
invocation.invoke();=0A=
     <SPAN class=3D"keyword">return</SPAN> future.get();=0A=
  } <SPAN class=3D"keyword">catch</SPAN>(<SPAN =
class=3D"exception">InterruptedException</SPAN> e){=0A=
     <SPAN class=3D"keyword">throw</SPAN> e;=0A=
  } <SPAN class=3D"keyword">catch</SPAN>(<SPAN =
class=3D"exception">Exception</SPAN> e){=0A=
     <SPAN class=3D"keyword">throw</SPAN> ExceptionUtil.rethrow(e);=0A=
  }</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In this case, we don=E2=80=99t care about the =
<CODE>InterruptedException</CODE> and=20
therefore we catch all exceptions and let them be handled by the=20
<CODE>ExceptionUtil</CODE>: it will be wrapped in a=20
<CODE>HazelcastException</CODE> and the interrupt status will be =
set.</P></DIV>
<DIV class=3D"paragraph">
<P>Currently, it isn=E2=80=99t possible to abort an operation by calling =
the=20
<CODE>future.cancel</CODE> method. Perhaps this will be added in a later =

release. This is also the reason why Executor Futures are not working =
since the=20
executor is built on top of the SPI.</P></DIV>
<DIV class=3D"paragraph">
<P>Let=E2=80=99s do the part of the example that has been missing so =
far: the=20
<CODE>IncOperation</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"type">class</SPAN> <SPAN class=3D"class">IncOperation</SPAN> =
<SPAN class=3D"directive">extends</SPAN> AbstractOperation=0A=
    <SPAN class=3D"directive">implements</SPAN> PartitionAwareOperation {=0A=
=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> objectId;=0A=
    <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"type">int</SPAN> amount, returnValue;=0A=
=0A=
    <SPAN class=3D"comment">// Important to have a no-arg constructor =
for deserialization</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> IncOperation() {=0A=
    }=0A=
    <SPAN class=3D"directive">public</SPAN> IncOperation(<SPAN =
class=3D"predefined-type">String</SPAN> objectId, <SPAN =
class=3D"type">int</SPAN> amount) {=0A=
        <SPAN class=3D"local-variable">this</SPAN>.amount =3D amount;=0A=
        <SPAN class=3D"local-variable">this</SPAN>.objectId =3D objectId;=0A=
    }=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> run() <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Executing </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + objectId + <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">.inc() on: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>=0A=
        + getNodeEngine().getThisAddress());=0A=
        returnValue =3D <SPAN class=3D"integer">0</SPAN>;=0A=
    }=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">boolean</SPAN> returnsResponse() {=0A=
        <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-constant">true</SPAN>;=0A=
    }=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Object</SPAN> getResponse() {=0A=
        <SPAN class=3D"keyword">return</SPAN> returnValue;=0A=
    }=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">protected</SPAN> <SPAN =
class=3D"type">void</SPAN> writeInternal(ObjectDataOutput out) <SPAN =
class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
        <SPAN class=3D"local-variable">super</SPAN>.writeInternal(out);=0A=
        out.writeUTF(objectId);=0A=
        out.writeInt(amount);=0A=
    }=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">protected</SPAN> <SPAN =
class=3D"type">void</SPAN> readInternal(ObjectDataInput in) <SPAN =
class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
        <SPAN class=3D"local-variable">super</SPAN>.readInternal(in);=0A=
        objectId =3D in.readUTF();=0A=
        amount =3D in.readInt();=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The first three methods =E2=80=94<CODE>run</CODE>, =
<CODE>returnsResponse</CODE> and=20
<CODE>getResponse</CODE>=E2=80=94 are part of the execution. The =
<CODE>run</CODE> method=20
is responsible for the actual execution; in this case, it is an empty=20
placeholder. Since the <CODE>inc</CODE> operation is going to return a =
response,=20
the <CODE>returnsResponse</CODE> method returns true. If your method is=20
asynchrononous and does not need to return a response, it is better to =
return=20
false because that is faster. The actual response we stored in the=20
<CODE>returnValue</CODE> field is retrieved using the =
<CODE>getResponse</CODE>=20
method.</P></DIV>
<DIV class=3D"paragraph">
<P>Another important part of the <CODE>IncOperation</CODE> is that it =
implements=20
the <CODE>PartitionAwareOperation</CODE> interface. This is an indicator =
for the=20
<CODE>OperationService</CODE> that this operation should be executed on =
a=20
certain partition. In our case, the <CODE>IncOperation</CODE> should be =
executed=20
on the partition hosting our counter.</P></DIV>
<DIV class=3D"paragraph">
<P>Because the <CODE>IncOperation</CODE> needs to be serialized, the=20
<CODE>writeInternal</CODE> and <CODE>readInternal</CODE> methods need to =
be
 overwritten so that the <CODE>objectId</CODE> and <CODE>amount</CODE> =
are=20
serialized and will be available when this operation runs. For =
deserialization,=20
it is also mandatory that the operation has a no-arg =
constructor.</P></DIV>
<DIV class=3D"paragraph">
<P>Of course, we want to run the code.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
      HazelcastInstance<SPAN class=3D"type">[]</SPAN> instances =3D =
<SPAN class=3D"keyword">new</SPAN> HazelcastInstance[<SPAN =
class=3D"integer">2</SPAN>];=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
instances.length; k++)=0A=
         instances[k] =3D Hazelcast.newHazelcastInstance();=0A=
=0A=
      Counter<SPAN class=3D"type">[]</SPAN> counters =3D <SPAN =
class=3D"keyword">new</SPAN> Counter[<SPAN class=3D"integer">4</SPAN>];=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
counters.length; k++)=0A=
      counters[k] =3D instances[<SPAN =
class=3D"integer">0</SPAN>].getDistributedObject(CounterService.NAME, =
k+<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">counter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
      <SPAN class=3D"keyword">for</SPAN> (Counter counter: counters)=0A=
         <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(counter.inc(<SPAN =
class=3D"integer">1</SPAN>));=0A=
=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Finished</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In this example, we start a <CODE>HazelcastInstance</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Executing 0counter.inc() on: Address[192.168.1.103]:5702=0A=
0=0A=
Executing 1counter.inc() on: Address[192.168.1.103]:5702=0A=
0=0A=
Executing 2counter.inc() on: Address[192.168.1.103]:5701=0A=
0=0A=
Executing 3counter.inc() on: Address[192.168.1.103]:5701=0A=
0=0A=
Finished</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>We can see that our counters are being stored in different members =
(check the=20
different port numbers). We can also see that the increment does not do =
any real=20
logic yet since the value remains at 0. We will solve this in the next=20
section.</P></DIV>
<DIV class=3D"paragraph">
<P>In this example we managed to get the basics up and running, but some =
things=20
are not correctly implemented. For example, in the current code, a new =
proxy is=20
always returned instead of a cached one. Also, the <CODE>destroy</CODE> =
is not=20
correctly implemented on the <CODE>CounterService</CODE>. In the =
following=20
examples, these issues will be resolved.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"container">12.3. Container</H3>
<DIV class=3D"paragraph">
<P>In this section, we upgrade the functionality so that it features a =
real=20
distributed counter. Some kind of data structure will hold an integer =
value and=20
can be incremented, and we will also cache the proxy instances and deal =
with=20
proxy instance destruction.</P></DIV>
<DIV class=3D"paragraph">
<P>The first thing we do is that for every partition in the system, we =
create a=20
<CODE>Container</CODE> which will contain all counters and proxies for a =
given=20
partition.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Container</SPAN> {=0A=
   <SPAN class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; values =3D <SPAN =
class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">HashMap</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">Integer</SPAN>&gt;();=0A=
=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"type">void</SPAN> init(<SPAN =
class=3D"predefined-type">String</SPAN> objectName) {=0A=
      values.put(objectName, <SPAN class=3D"integer">0</SPAN>);=0A=
   }=0A=
=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"type">void</SPAN> destroy(<SPAN =
class=3D"predefined-type">String</SPAN> objectName){=0A=
      values.remove(objectName);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Hazelcast guarantees that within a single partition, only a single =
thread=20
will be active. So we don=E2=80=99t need to deal with concurrency =
control while=20
accessing a container.</P></DIV>
<DIV class=3D"paragraph">
<P>The examples in this chapter rely on <CODE>Container</CODE> instance =
per=20
partition, but you have complete freedom as to how to do that. A =
different=20
approach used in Hazelcast is to drop the <CODE>Container</CODE> and let =
the=20
<CODE>CounterService</CODE> have a map of counters.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">final</SPAN> <SPAN =
class=3D"predefined-type">ConcurrentMap</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; counters =3D=0A=
   <SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">ConcurrentHashMap</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">Integer</SPAN>&gt;();</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>You can use the ID of the counter as key and an Integer as value. The =
only=20
thing you need to take care of is that if operations for a specific =
partition=20
are executed, you only select the values for that specific partition. =
This can=20
be as simple as the following example.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"keyword">for</SPAN>(<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry&lt;<SPAN =
class=3D"predefined-type">String</SPAN>,<SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; entry: counters.entrySet()){=0A=
   <SPAN class=3D"predefined-type">String</SPAN> id =3D entry.getKey();=0A=
   <SPAN class=3D"type">int</SPAN> partitinId =3D =
nodeEngine.getPartitionService().getPartitionId(id);=0A=
   <SPAN class=3D"keyword">if</SPAN>(partitionid =3D=3D =
requiredPartitionId){=0A=
      ...do operation=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>It is personal taste which solution you prefer. The container =
approach is=20
nice because there will not be any mutable shared state between =
partitions. It=20
also makes operations on partitions simpler, since you don=E2=80=99t =
need to filter out=20
data that does not belong to a certain partition.</P></DIV>
<DIV class=3D"paragraph">
<P>The next step is to integrate the <CODE>Container</CODE> in the=20
<CODE>CounterService</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">CounterService</SPAN> <SPAN =
class=3D"directive">implements</SPAN> ManagedService, RemoteService {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">final</SPAN> <SPAN class=3D"directive">static</SPAN> =
<SPAN class=3D"predefined-type">String</SPAN> NAME =3D <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">CounterService</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>;=0A=
    <SPAN class=3D"predefined-type">Container</SPAN><SPAN =
class=3D"type">[]</SPAN> containers;=0A=
    <SPAN class=3D"directive">private</SPAN> NodeEngine nodeEngine;=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> init(NodeEngine ne, <SPAN =
class=3D"predefined-type">Properties</SPAN> properties) {=0A=
        <SPAN class=3D"local-variable">this</SPAN>.nodeEngine =3D =
nodeEngine;=0A=
        containers =3D <SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">Container</SPAN>[ne.getPartitionService().getPa=
rtitionCount()];=0A=
        <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
containers.length; k++)=0A=
            containers[k] =3D <SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">Container</SPAN>();=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> CounterProxy =
createDistributedObject(<SPAN class=3D"predefined-type">String</SPAN> =
objectName) {=0A=
        <SPAN class=3D"type">int</SPAN> partitionId =3D =
nodeEngine.getPartitionService().getPartitionId(objectName);=0A=
        <SPAN class=3D"predefined-type">Container</SPAN> container =3D =
containers[partitionId];=0A=
        container.init(objectName);=0A=
        <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"keyword">new</SPAN> CounterProxy(objectName, nodeEngine, <SPAN =
class=3D"local-variable">this</SPAN>);=0A=
    }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> destroyDistributedObject(<SPAN =
class=3D"predefined-type">String</SPAN> objectName) {=0A=
        <SPAN class=3D"type">int</SPAN> partitionId =3D =
nodeEngine.getPartitionService().getPartitionId(objectName);=0A=
        <SPAN class=3D"predefined-type">Container</SPAN> container =3D =
containers[partitionId];=0A=
        container.destroy(objectName);=0A=
    }=0A=
=0A=
    ...</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>In the <CODE>init</CODE> method, a container is created for every =
partition.=20
The next step is the <CODE>createDistributedObject</CODE> method; apart =
from
 creating the proxy, we also initialize the value for that given proxy =
to=20
<CODE>0</CODE>, so that we don=E2=80=99t run into a =
<CODE>NullPointerException</CODE>.=20
In the <CODE>destroyDistributedObject</CODE> method, the value for the =
object is
 removed. If we don=E2=80=99t clean up, we=E2=80=99ll end up with memory =
that isn=E2=80=99t removed and=20
that can potentially can lead to an OOME.</P></DIV>
<DIV class=3D"paragraph">
<P>The last step is connecting the <CODE>IncOperation.run</CODE> to the=20
container.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"type">class</SPAN> <SPAN class=3D"class">IncOperation</SPAN> =
<SPAN class=3D"directive">extends</SPAN> AbstractOperation=0A=
    <SPAN class=3D"directive">implements</SPAN> PartitionAwareOperation {=0A=
=0A=
    ...=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> run() <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
    <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Executing </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + objectId + <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">.inc() on: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>=0A=
        + getNodeEngine().getThisAddress());=0A=
=0A=
        CounterService service =3D getService();=0A=
        CounterService.Container container =3D=0A=
            service.containers[getPartitionId()];=0A=
        <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; valuesMap =3D =
container.values;=0A=
        <SPAN class=3D"predefined-type">Integer</SPAN> counter =3D =
valuesMap.get(objectId);=0A=
        counter +=3D amount;=0A=
        valuesMap.put(objectId, counter);=0A=
        returnValue =3D counter;=0A=
    }=0A=
=0A=
    ...</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The container can easily be retrieved using the =
<CODE>partitionId</CODE>: the
 range of partition IDs is 0 to <CODE>partitionCount</CODE> (exclusive), =
so it=20
can be used as an index on the container array. Once the container has =
been
 retrieved, we can access the value. This example moved all =
<CODE>inc</CODE>=20
logic in the <CODE>IncOperation</CODE>, but you may prefer to move the =
logic to=20
the <CODE>CounterService</CODE> or to the Partition.</P></DIV>
<DIV class=3D"paragraph">
<P>Let=E2=80=99s run the following example code.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) {=0A=
        HazelcastInstance<SPAN class=3D"type">[]</SPAN> instances =3D =
<SPAN class=3D"keyword">new</SPAN> HazelcastInstance[<SPAN =
class=3D"integer">2</SPAN>];=0A=
        <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
instances.length; k++)=0A=
            instances[k] =3D Hazelcast.newHazelcastInstance();=0A=
=0A=
        Counter<SPAN class=3D"type">[]</SPAN> counters =3D <SPAN =
class=3D"keyword">new</SPAN> Counter[<SPAN class=3D"integer">4</SPAN>];=0A=
        <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
counters.length; k++)=0A=
            counters[k] =3D instances[<SPAN =
class=3D"integer">0</SPAN>].getDistributedObject(=0A=
                CounterService.NAME, k+<SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">counter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Round 1</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"keyword">for</SPAN> (Counter counter: counters)=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(counter.inc(<SPAN =
class=3D"integer">1</SPAN>));=0A=
=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Round 2</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"keyword">for</SPAN> (Counter counter: counters)=0A=
            <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(counter.inc(<SPAN =
class=3D"integer">1</SPAN>));=0A=
=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Finished</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
        <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>It outputs the following.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Round 1=0A=
Executing 0counter.inc() on: Address[192.168.1.103]:5702=0A=
1=0A=
Executing 1counter.inc() on: Address[192.168.1.103]:5702=0A=
1=0A=
Executing 2counter.inc() on: Address[192.168.1.103]:5701=0A=
1=0A=
Executing 3counter.inc() on: Address[192.168.1.103]:5701=0A=
1=0A=
Round 2=0A=
Executing 0counter.inc() on: Address[192.168.1.103]:5702=0A=
2=0A=
Executing 1counter.inc() on: Address[192.168.1.103]:5702=0A=
2=0A=
Executing 2counter.inc() on: Address[192.168.1.103]:5701=0A=
2=0A=
Executing 3counter.inc() on: Address[192.168.1.103]:5701=0A=
2=0A=
Finished</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>This means that we now have a basic distributed counter up and=20
running!</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"partition-migration">12.4. Partition Migration</H3>
<DIV class=3D"paragraph">
<P>In our previous example, we managed to create real distributed =
counters. The=20
only problem is that when members leave or join the cluster, the content =
of the=20
partition containers does not migrate to different members. In this =
section, we=20
are going to do that with partition migration.</P></DIV>
<DIV class=3D"paragraph">
<P>The first thing is to add 3 new operations to the=20
<CODE>Container</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"type">class</SPAN> <SPAN class=3D"class">Container</SPAN> {=0A=
   <SPAN class=3D"type">void</SPAN> clear() {=0A=
      values.clear();=0A=
   }=0A=
=0A=
   <SPAN class=3D"type">void</SPAN> applyMigrationData(<SPAN =
class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; migrationData) {=0A=
      values.putAll(migrationData);=0A=
   }=0A=
=0A=
   <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; toMigrationData() {=0A=
      <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">HashMap</SPAN>(values);=0A=
   }=0A=
   ...=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P><CODE>toMigrationData</CODE>: This method is called when Hazelcast =
wants to=20
  start the migration of the partition on the member that currently owns =
the=20
  partition. The result of the <CODE>toMigrationData</CODE> is partition =
data in=20
  a form that can be serialized to another member.</P></LI>
  <LI>
  <P><CODE>applyMigrationData</CODE>: This method is called when the=20
  <CODE>migrationData</CODE> that is created by the =
<CODE>toMigrationData</CODE>=20
  method is applied to a member that is going to be the new partition=20
  owner.</P></LI>
  <LI>
  <P><CODE>clear</CODE>: This method is called for two reasons. One =
reason is=20
  when the partition migration has succeeded and the old partition owner =
can get=20
  rid of all the data in the partition. The other reason is when the =
partition=20
  migration operation fails and the <CODE>new</CODE> partition owner =
needs to=20
  roll back its changes.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>The next step is to create a <CODE>CounterMigrationOperation</CODE> =
that will=20
be responsible for transferring the <CODE>migrationData</CODE> from one =
machine=20
to anther and to call the <CODE>applyMigrationData</CODE> on the correct =

partition of the new partition owner.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">CounterMigrationOperation</SPAN> <SPAN =
class=3D"directive">extends</SPAN> AbstractOperation {=0A=
=0A=
   <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; migrationData;=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> CounterMigrationOperation() {=0A=
   }=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> =
CounterMigrationOperation(<SPAN =
class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; m) {=0A=
      <SPAN class=3D"local-variable">this</SPAN>.migrationData =3D m;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> run() <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      CounterService service =3D getService();=0A=
      <SPAN class=3D"predefined-type">Container</SPAN> container =3D =
service.containers[getPartitionId()];=0A=
      container.applyMigrationData(migrationData);=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">protected</SPAN> <SPAN =
class=3D"type">void</SPAN> writeInternal(ObjectDataOutput out) <SPAN =
class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
      out.writeInt(migrationData.size());=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"predefined-type">Map</SPAN>.Entry&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; entry : =
migrationData.entrySet()) {=0A=
         out.writeUTF(entry.getKey());=0A=
         out.writeInt(entry.getValue());=0A=
      }=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">protected</SPAN> <SPAN =
class=3D"type">void</SPAN> readInternal(ObjectDataInput in) <SPAN =
class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
      <SPAN class=3D"type">int</SPAN> size =3D in.readInt();=0A=
      migrationData =3D <SPAN class=3D"keyword">new</SPAN> <SPAN =
class=3D"predefined-type">HashMap</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">Integer</SPAN>&gt;();=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> i =3D <SPAN class=3D"integer">0</SPAN>; i &lt; =
size; i++)=0A=
         migrationData.put(in.readUTF(), in.readInt());=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>During the execution of a migration, no other operations will be =
running in=20
that partition. Therefore, you don=E2=80=99t need to deal with =
thread-safety.</P></DIV>
<DIV class=3D"paragraph">
<P>The last part is connecting all the pieces. This is done by =
implementing=20
<CODE>MigrationAwareService</CODE> as an additional interface on the=20
<CODE>CounterService</CODE> which will signal Hazelcast that our service =
is able=20
to participate in partition migration.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">CounterService</SPAN> <SPAN =
class=3D"directive">implements</SPAN> ManagedService,=0A=
   RemoteService, MigrationAwareService {=0A=
=0A=
   ...=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> beforeMigration(PartitionMigrationEvent e) {=0A=
      <SPAN class=3D"comment">//no-op</SPAN>=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> clearPartitionReplica(<SPAN =
class=3D"type">int</SPAN> partitionId) {=0A=
      <SPAN class=3D"predefined-type">Container</SPAN> container =3D =
containers[partitionId];=0A=
      container.clear();=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Operation</SPAN> prepareReplicationOperation(=0A=
      PartitionReplicationEvent e) {=0A=
      <SPAN class=3D"predefined-type">Container</SPAN> container =3D =
containers[e.getPartitionId()];=0A=
      <SPAN class=3D"predefined-type">Map</SPAN>&lt;<SPAN =
class=3D"predefined-type">String</SPAN>, <SPAN =
class=3D"predefined-type">Integer</SPAN>&gt; data =3D =
container.toMigrationData();=0A=
      <SPAN class=3D"keyword">return</SPAN> data.isEmpty() ? <SPAN =
class=3D"predefined-constant">null</SPAN> : <SPAN =
class=3D"keyword">new</SPAN> CounterMigrationOperation(data);=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> commitMigration(PartitionMigrationEvent e) {=0A=
      <SPAN class=3D"keyword">if</SPAN> (e.getMigrationEndpoint() =3D=3D =
MigrationEndpoint.SOURCE) {=0A=
         <SPAN class=3D"predefined-type">Container</SPAN> c =3D =
containers[e.getPartitionId()];=0A=
         c.clear();=0A=
      }=0A=
   }=0A=
=0A=
    <SPAN class=3D"annotation">@Override</SPAN>=0A=
    <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> rollbackMigration(PartitionMigrationEvent e) {=0A=
       <SPAN class=3D"keyword">if</SPAN> (e.getMigrationEndpoint() =
=3D=3D MigrationEndpoint.DESTINATION) {=0A=
          <SPAN class=3D"predefined-type">Container</SPAN> c =3D =
containers[e.getPartitionId()];=0A=
          c.clear();=0A=
       }=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>By implementing the <CODE>MigrationAwareService</CODE>, some =
additional=20
methods are exposed.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  <P><CODE>beforeMigration</CODE>: This method is called before any =
migration is=20
  done.</P></LI>
  <LI>
  <P><CODE>prepareMigrationOperation</CODE>: This method returns all the =
data in=20
  the partition that is going to be moved. It migrates only the master =
and the
   first backup data, since <CODE>CounterService</CODE> supports only =
one=20
  backup.</P></LI>
  <LI>
  <P><CODE>commitMigration</CODE>: This method commits the migrated =
data. In=20
  this case, committing means that we clear the container for the =
partition of=20
  the old owner. Even though we don=E2=80=99t have any complex resources =
like threads,
   database connections, etc., clearing the container is advisable to =
prevent
   memory issues. This method is called on both the primary and the =
backup. If=20
  this node is on the source side of migration (partition is migrating =
FROM this=20
  node) and the migration type is MOVE (partition is migrated =
completely, not=20
  copied to a backup node), then the method removes partition data from =
this=20
  node. If this node is the destination or the migration type is copy, =
then the=20
  method does nothing. If this node is on the destination side of =
migration=20
  (partition is migrating TO this node) then this method removes =
partition data=20
  from this node. If this node is on the source, then the methods does=20
  nothing.</P></LI>
  <LI>
  <P><CODE>rollbackMigration</CODE>: Rolls back a =
migration.</P></LI></UL></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      HazelcastInstance<SPAN class=3D"type">[]</SPAN> instances =3D =
<SPAN class=3D"keyword">new</SPAN> HazelcastInstance[<SPAN =
class=3D"integer">3</SPAN>];=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
instances.length; k++)=0A=
         instances[k] =3D Hazelcast.newHazelcastInstance();=0A=
=0A=
      Counter<SPAN class=3D"type">[]</SPAN> counters =3D <SPAN =
class=3D"keyword">new</SPAN> Counter[<SPAN class=3D"integer">4</SPAN>];=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
counters.length; k++)=0A=
         counters[k] =3D instances[<SPAN =
class=3D"integer">0</SPAN>].getDistributedObject(=0A=
            CounterService.NAME, k + <SPAN class=3D"string"><SPAN =
class=3D"delimiter">"</SPAN><SPAN class=3D"content">counter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
      <SPAN class=3D"keyword">for</SPAN> (Counter counter : counters)=0A=
         <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(counter.inc(<SPAN =
class=3D"integer">1</SPAN>));=0A=
=0A=
      <SPAN class=3D"predefined-type">Thread</SPAN>.sleep(<SPAN =
class=3D"integer">10000</SPAN>);=0A=
=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Creating new members</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
<SPAN class=3D"integer">3</SPAN>; k++)=0A=
         Hazelcast.newHazelcastInstance();=0A=
=0A=
      <SPAN class=3D"predefined-type">Thread</SPAN>.sleep(<SPAN =
class=3D"integer">10000</SPAN>);=0A=
=0A=
      <SPAN class=3D"keyword">for</SPAN> (Counter counter : counters)=0A=
         <SPAN =
class=3D"predefined-type">System</SPAN>.out.println(counter.inc(<SPAN =
class=3D"integer">1</SPAN>));=0A=
=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Finished</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>If we execute the example, we=E2=80=99ll get output like =
this:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Executing 0counter.inc() on: Address[192.168.1.103]:5702=0A=
Executing backup 0counter.inc() on: Address[192.168.1.103]:5703=0A=
1=0A=
Executing 1counter.inc() on: Address[192.168.1.103]:5703=0A=
Executing backup 1counter.inc() on: Address[192.168.1.103]:5701=0A=
1=0A=
Executing 2counter.inc() on: Address[192.168.1.103]:5701=0A=
Executing backup 2counter.inc() on: Address[192.168.1.103]:5703=0A=
1=0A=
Executing 3counter.inc() on: Address[192.168.1.103]:5701=0A=
Executing backup 3counter.inc() on: Address[192.168.1.103]:5703=0A=
1=0A=
Creating new members=0A=
Executing 0counter.inc() on: Address[192.168.1.103]:5705=0A=
Executing backup 0counter.inc() on: Address[192.168.1.103]:5703=0A=
2=0A=
Executing 1counter.inc() on: Address[192.168.1.103]:5703=0A=
Executing backup 1counter.inc() on: Address[192.168.1.103]:5704=0A=
2=0A=
Executing 2counter.inc() on: Address[192.168.1.103]:5705=0A=
Executing backup 2counter.inc() on: Address[192.168.1.103]:5704=0A=
2=0A=
Executing 3counter.inc() on: Address[192.168.1.103]:5704=0A=
Executing backup 3counter.inc() on: Address[192.168.1.103]:5705=0A=
2=0A=
Finished</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The counters have moved: <CODE>0counter</CODE> moved from=20
<CODE>192.168.1.103:5702</CODE> to <CODE>192.168.1.103:5705</CODE>, but =
it is=20
incremented correctly. Our counters can now move around in the cluster. =
If you=20
need to have more capacity, add a machine and the counters will be
 redistributed. If you have surplus capacity, shut down the instance and =
the=20
counters will be redistributed.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"backups">12.5. Backups</H3>
<DIV class=3D"paragraph">
<P>In this last section, we deal with backups; we make sure that when a =
member=20
fails, then the data of the counter is available on another node. This =
is done=20
by replicating that change to another member in the cluster. With the =
SPI, you=20
can do this by letting the operation implement the=20
<CODE>com.hazelcast.spi.BackupAwareOperaton</CODE> interface. Below, you =
can see=20
this interface being implemented on the =
<CODE>IncOperation</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"type">class</SPAN> <SPAN class=3D"class">IncOperation</SPAN> =
<SPAN class=3D"directive">extends</SPAN> AbstractOperation=0A=
    <SPAN class=3D"directive">implements</SPAN> PartitionAwareOperation, =
BackupAwareOperation {=0A=
   ...=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getAsyncBackupCount() {=0A=
      <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"integer">0</SPAN>;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">int</SPAN> getSyncBackupCount() {=0A=
      <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"integer">1</SPAN>;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">boolean</SPAN> shouldBackup() {=0A=
      <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"predefined-constant">true</SPAN>;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"predefined-type">Operation</SPAN> getBackupOperation() {=0A=
      <SPAN class=3D"keyword">return</SPAN> <SPAN =
class=3D"keyword">new</SPAN> IncBackupOperation(objectId, amount);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Some additional methods need to be implemented. The=20
<CODE>getAsyncBackupCount</CODE> and <CODE>getSyncBackupCount</CODE> =
methods=20
signal how many asynchronous and synchronous backups are needed. In our =
case, we=20
only want a single synchronous backup and no asynchronous backups. Here, =
the=20
number of backups is hard coded, but you could also pass the number of =
backups
 as parameters to the <CODE>IncOperation</CODE>, or you could let the =
methods=20
access the <CODE>CounterService</CODE>. The <CODE>shouldBackup</CODE> =
method=20
tells Hazelcast that our <CODE>Operation</CODE> needs a backup. In our =
case, we=20
are always going to make a backup, even if there is no change. In =
practice, you=20
only want to make a backup if there is actually a change: in case of the =

<CODE>IncOperation</CODE>, you want to make a backup if =
<CODE>amount</CODE> is=20
null.</P></DIV>
<DIV class=3D"paragraph">
<P>The last method is the <CODE>getBackupOperation</CODE>, which returns =
the=20
actual operation that is going to make the backup; the backup itself is =
an
 operation and will run on the same infrastructure. If a backup should =
be made=20
and, for example, <CODE>getSyncBackupCount</CODE> returns 3, then three=20
<CODE>IncBackupOperation</CODE> instances are created and sent to the =
three=20
machines containing the backup partition. If there are fewer machines =
available=20
than backups that need to be created, Hazelcast will just send a smaller =
number=20
of operations. But it could be that if the cluster is too small, you =
don=E2=80=99t get=20
the same high availability guarantees you specified.</P></DIV>
<DIV class=3D"paragraph">
<P>Let=E2=80=99s have a look at the =
<CODE>IncBackupOperation</CODE>.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">IncBackupOperation</SPAN>=0A=
    <SPAN class=3D"directive">extends</SPAN> AbstractOperation <SPAN =
class=3D"directive">implements</SPAN> BackupOperation {=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"predefined-type">String</SPAN> objectId;=0A=
   <SPAN class=3D"directive">private</SPAN> <SPAN =
class=3D"type">int</SPAN> amount;=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> IncBackupOperation() {=0A=
   }=0A=
=0A=
   <SPAN class=3D"directive">public</SPAN> IncBackupOperation(<SPAN =
class=3D"predefined-type">String</SPAN> objectId, <SPAN =
class=3D"type">int</SPAN> amount) {=0A=
      <SPAN class=3D"local-variable">this</SPAN>.amount =3D amount;=0A=
      <SPAN class=3D"local-variable">this</SPAN>.objectId =3D objectId;=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">protected</SPAN> <SPAN =
class=3D"type">void</SPAN> writeInternal(ObjectDataOutput out) <SPAN =
class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
      <SPAN class=3D"local-variable">super</SPAN>.writeInternal(out);=0A=
      out.writeUTF(objectId);=0A=
      out.writeInt(amount);=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">protected</SPAN> <SPAN =
class=3D"type">void</SPAN> readInternal(ObjectDataInput in) <SPAN =
class=3D"directive">throws</SPAN> <SPAN =
class=3D"exception">IOException</SPAN> {=0A=
      <SPAN class=3D"local-variable">super</SPAN>.readInternal(in);=0A=
      objectId =3D in.readUTF();=0A=
      amount =3D in.readInt();=0A=
   }=0A=
=0A=
   <SPAN class=3D"annotation">@Override</SPAN>=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"type">void</SPAN> run() <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      CounterService service =3D getService();=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Executing backup </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN> + objectId + <SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">.inc() on: </SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>=0A=
        + getNodeEngine().getThisAddress());=0A=
      <SPAN class=3D"predefined-type">Container</SPAN> c =3D =
service.containers[getPartitionId()];=0A=
      c.inc(objectId, amount);=0A=
   }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Hazelcast will also make sure that a new <CODE>IncOperation</CODE> =
for that
 particular key will not be executing before the (synchronous) backup =
operation=20
has completed.</P></DIV>
<DIV class=3D"paragraph">
<P>We want to see the backup functionality in action.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java"><SPAN =
class=3D"directive">public</SPAN> <SPAN class=3D"type">class</SPAN> =
<SPAN class=3D"class">Member</SPAN> {=0A=
   <SPAN class=3D"directive">public</SPAN> <SPAN =
class=3D"directive">static</SPAN> <SPAN class=3D"type">void</SPAN> =
main(<SPAN class=3D"predefined-type">String</SPAN><SPAN =
class=3D"type">[]</SPAN> args) <SPAN class=3D"directive">throws</SPAN> =
<SPAN class=3D"exception">Exception</SPAN> {=0A=
      HazelcastInstance<SPAN class=3D"type">[]</SPAN> instances =3D =
<SPAN class=3D"keyword">new</SPAN> HazelcastInstance[<SPAN =
class=3D"integer">2</SPAN>];=0A=
      <SPAN class=3D"keyword">for</SPAN> (<SPAN =
class=3D"type">int</SPAN> k =3D <SPAN class=3D"integer">0</SPAN>; k &lt; =
instances.length; k++)=0A=
         instances[k] =3D Hazelcast.newHazelcastInstance();=0A=
=0A=
      Counter counter =3D instances[<SPAN =
class=3D"integer">0</SPAN>].getDistributedObject(CounterService.NAME, =
<SPAN class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">counter</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      counter.inc(<SPAN class=3D"integer">1</SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.out.println(<SPAN =
class=3D"string"><SPAN class=3D"delimiter">"</SPAN><SPAN =
class=3D"content">Finished</SPAN><SPAN =
class=3D"delimiter">"</SPAN></SPAN>);=0A=
      <SPAN class=3D"predefined-type">System</SPAN>.exit(<SPAN =
class=3D"integer">0</SPAN>);=0A=
    }=0A=
}</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>When we run this <CODE>Member</CODE>, we=E2=80=99ll get the following =

output.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE>Executing counter0.inc() on: Address[192.168.1.103]:5702=0A=
Executing backup counter0.inc() on: Address[192.168.1.103]:5701=0A=
Finished</PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The <CODE>IncOperation</CODE> has executed, and the backup operation =
has=20
executed. The operations have been executed on different cluster members =
to=20
guarantee high availability. One of the experiments you could do is to =
modify=20
the test code so you have a cluster of members in different JVMs and see =
what=20
happens with the counters when you kill one of the JVMs.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"good-to-know">12.6. Good to know</H3>
<DIV class=3D"sidebarblock">
<DIV class=3D"content">
<DIV class=3D"paragraph">
<P><EM>Don=E2=80=99t hog the operation thread:</EM> Don=E2=80=99t =
execute long-running
 operations on the operation thread, especially not on partition =
specific
 operation threads. This could cause major problems in the system =
because the=20
partition (and other partitions running on that same thread) will wait =
for your=20
operation to complete. Operations should be very=20
short.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"what-is-next">12.7. What is next</H3>
<DIV class=3D"paragraph">
<P>In this chapter we step-by-step created a distributed data structure =
on top=20
of Hazelcast. Although Hazelcast provides a whole collection of very =
usable=20
distributed data structures, the addition of the SPI changes Hazelcast =
from=20
being a simple data grid to a data grid infrastructure where your =
imagination is=20
the only limit. In distributed applications, there will always be the =
need to=20
create special data structures that are useful for particular use cases. =
With=20
the SPI, you can now build these data structures=20
yourself.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"threading-model">13. Threading Model</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"paragraph">
<P>This chapter discusses the threading model of Hazelcast. This will =
help you=20
understand how to write an efficient system and how to not cause cluster =

stability issues.</P></DIV>
<DIV class=3D"sect2">
<H3 id=3D"io-threading">13.1. I/O Threading</H3>
<DIV class=3D"paragraph">
<P>Hazelcast uses a pool of threads for I/O: a single thread does not =
perform=20
all the I/O, multiple threads do. On each cluster member, the I/O =
threading is=20
split up into three types of I/O-threads.</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>accept-I/O-threads: These threads accept requests.</P></LI>
  <LI>
  <P>read-I/O-threads: These threads read data from other=20
  members/clients.</P></LI>
  <LI>
  <P>write-I/O-threads: These threads write data to other=20
  members/clients.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>You can configure the number of I/O-threads using the=20
<CODE>hazelcast.io.thread.count</CODE> system property, which defaults =
to 3 per
 member. This means that if 3 is used, in total there are 7 I/O-threads: =
1
 accept-I/O-thread, 3 read-I/O-threads and 3 write-I/O-threads. Each =
I/O-thread=20
has its own <CODE>Selector</CODE> instance and waits on=20
<CODE>Selector.select</CODE> if there is nothing to do.</P></DIV>
<DIV class=3D"paragraph">
<P>In case of the I/O-read-thread, when sufficient bytes for a packet =
have been=20
received, the Packet object is created. This Packet is then sent to the =
System=20
where it is de-multiplexed. If the Packet header signals that it is an=20
operation/response, it is handed over to the operation service (please =
see <A=20
href=3D"http://hazelcast.org/mastering-hazelcast/#operation-threading">Op=
eration=20
Threading</A>). If the Packet is an event, it is handed over to the =
event=20
service (please see <A =
href=3D"http://hazelcast.org/mastering-hazelcast/#event-threading">Event
 Threading</A>).</P></DIV>
<DIV class=3D"paragraph">
<P>If the packet is a request (an operation sent by a client), the =
I/O-thread
 reads the partition ID. If set, the packet is placed on the correct
 partition-aware operation thread; it does not matter if the partition =
is on the
 member or not. If the partition is on the member, the operation is =
executed by=20
the partition-aware operation thread. Otherwise, the partition-aware =
operation=20
thread sends the operation to the correct machine by handing it over to =
the=20
correct I/O-thread. The partition-aware operation thread is immediately =
released=20
for the next operation; the response is returned to the client using an=20
asynchronous callback mechanism.</P></DIV>
<DIV class=3D"paragraph">
<P>If the packet is a request and the partition ID is not set, the =
request is=20
put on the executor in the <CODE>ClientEngineImpl</CODE>. This executor =
can be
 configured using the <CODE>hazelcast.clientengine.thread.count</CODE> =
property,=20
which defaults to the number of cores times 20.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"event-threading">13.2. Event Threading</H3>
<DIV class=3D"paragraph">
<P>Hazelcast uses a shared event system to deal with components that =
rely on=20
events like topic, collections listeners, and near cache. Each cluster =
member=20
has an array of event threads and each thread has its own work queue (a =
regular=20
<CODE>BlockingQueue</CODE> implementation). When an event is produced, =
either=20
locally or remote, an event thread is selected (depending on if there is =
a=20
message ordering) and the event is placed in the work queue for that =
event=20
thread.</P></DIV>
<DIV class=3D"paragraph">
<P>You can set the following properties to alter the behavior of the=20
system.</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P><CODE>hazelcast.event.thread.count</CODE>: Number of event threads =
in this
   array. Its default value is 5.</P></LI>
  <LI>
  <P><CODE>hazelcast.event.queue.capacity</CODE>: Capacity of the work =
queue.=20
  Its default value is 1000000.</P></LI>
  <LI>
  <P><CODE>hazelcast.event.queue.timeout.millis</CODE>: Timeout for =
placing an=20
  item on the work queue. Its default value is 250.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>If you process a lot of events and you have many cores, changing the =
value of=20
<CODE>hazelcast.event.thread.count</CODE> property to a higher value is =
a good
 idea. This way, more events can be processed in parallel.</P></DIV>
<DIV class=3D"paragraph">
<P>Multiple components share the same event queues. If there are 2 =
topics, say A=20
and B, for certain messages they may share the same queue(s) and hence =
the same=20
event thread. If there are a lot of pending messages produced by A, then =
B needs=20
to wait. Also, when processing a message from A takes a long time and =
the event=20
thread is used for that, B will suffer from this. That is why it is =
better to=20
offload processing to a dedicated thread (pool) so that systems are =
better=20
isolated.</P></DIV>
<DIV class=3D"paragraph">
<P>If events are produced at a higher rate than they are consumed, the =
queue=20
will grow in size. To prevent overloading the system and running into an =

<CODE>OutOfMemoryException</CODE>, the queue is given a capacity of 1 =
million
 items. When the maximum capacity is reached, the items are dropped. =
This means=20
that the event system is a "best effort" system. There is no guarantee =
that you=20
are going to get an event. It can also be that Topic A has a lot of =
pending=20
messages, and therefore B cannot receive messages because the queue has =
no=20
capacity and messages for B are dropped. Another reason events are not =
reliable=20
is that the JVM of the receiver crashes, all the messages in the event- =
queues=20
will be lost.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"iexecutor-threading">13.3. IExecutor Threading</H3>
<DIV class=3D"paragraph">
<P>Executor threading is straightforward. When a task is received to be =
executed=20
on Executor E, then E will have its own <CODE>ThreadPoolExecutor</CODE> =
instance=20
and the work is put on the work queue of this executor. Executors are =
fully=20
isolated, but they will share the same underlying hardware: most =
importantly,=20
the CPUs.</P></DIV>
<DIV class=3D"paragraph">
<P>You can configure the <CODE>IExecutor</CODE> using the=20
<CODE>ExecutorConfig</CODE> (programmatic configuration) or using=20
<CODE>&lt;executor&gt;</CODE> (declarative =
configuration).</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"operation-threading">13.4. Operation Threading</H3>
<DIV class=3D"paragraph">
<P>There are two types of threading operations.</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>Operations that are aware of a certain partition, such as=20
  <CODE>IMap.get(key)</CODE></P></LI>
  <LI>
  <P>Operations that are not partition aware, such as the=20
  <CODE>IExecutorService.executeOnMember(command,member)</CODE>=20
  operation.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>Each of these types has a different threading model that is explained =

below.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"partition-aware-operations">13.4.1. Partition-aware =
Operations</H4>
<DIV class=3D"paragraph">
<P>To execute partition-aware operations, an array of operation threads =
is
 created. By default, the size of this array is 2 times the number of =
cores with=20
a minimum of 2. You can change it using the=20
<CODE>hazelcast.operation.thread.count</CODE> property.</P></DIV>
<DIV class=3D"paragraph">
<P>Each operation thread has its own work queue; it will consume =
messages from=20
that work queue. If a partition-aware operation needs to be scheduled, =
the right=20
thread is found using the formula below.</P></DIV>
<DIV class=3D"paragraph">
<P><CODE>threadIndex =3D partitionId % =
partition-thread-count</CODE></P></DIV>
<DIV class=3D"paragraph">
<P>After the <CODE>threadIndex</CODE> is determined, the operation is =
put in the=20
work queue of that operation thread. This means three things.</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>A single operation thread executes operations for multiple =
partitions; if=20
  there are 271 partitions and 10 partition threads, then roughly every=20
  operation thread will execute operations for 27 partitions.</P></LI>
  <LI>
  <P>Each partition belongs to only 1 operation thread. All operations =
for a=20
  partition will always be handled by exactly the same operation=20
thread.</P></LI>
  <LI>
  <P>No concurrency control is needed to deal with partition-aware =
operations=20
  because once a partition-aware operation is put on the work queue of a =

  partition-aware operation thread, you get the guarantee that only 1 =
thread is=20
  able to touch that partition.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>Because of this threading strategy, there are two forms of false =
sharing you=20
need to be aware of:</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>With false sharing of the partition, two completely independent =
data
   structures share the same partitions: for example, if there is a map=20
  <CODE>employees</CODE> and a map <CODE>orders</CODE>, it could be that =
an=20
  <CODE>employees.get(peter)</CODE> (running on partition 25) is blocked =
by a=20
  <CODE>map.get</CODE> of <CODE>orders.get(1234)</CODE> (also running on =

  partition 25). So, if independent data structures share the same =
partition, a=20
  slow operation on one data structure can slow the other data=20
  structures.</P></LI>
  <LI>
  <P>With false sharing of the partition-aware operation thread, each =
operation=20
  thread is responsible for executing operations on a number of =
partitions. For=20
  example, thread-1 could be responsible for partitions =
0,10,20=E2=80=A6=E2=80=8B, and thread-2=20
  could be responsible for partitions 1,11,21=E2=80=A6=E2=80=8B,etc. If =
an operation for
   partition 1 is taking a lot of time, it will block the execution of =
an
   operation of partition 11 because both of them are mapped to exactly =
the same=20
  operation thread.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>You need to be careful with long running operations because you could =
be=20
starving operations of a thread. The general rule is that the partition =
thread=20
should be released as soon as possible because operations are not =
designed to=20
execute long running operations. That is why it is very dangerous to =
execute a=20
long running operation =E2=80=94for example, using =
<CODE>AtomicReference.alter</CODE> or=20
a <CODE>IMap.executeOnKey</CODE>=E2=80=94 because these operations will =
block others=20
operations to be executed.</P></DIV>
<DIV class=3D"paragraph">
<P>Currently, there is no support for work stealing. Different =
partitions that=20
map to the same thread may need to wait till one of the partitions is =
finished,=20
even though there are other free partition operation threads=20
available.</P></DIV>
<DIV class=3D"paragraph">
<P><STRONG>Example:</STRONG></P></DIV>
<DIV class=3D"paragraph">
<P>Take a 3 node cluster. Two members will have 90 primary partitions =
and one=20
member will have 91 primary partitions. Let=E2=80=99s say you have one =
CPU and 4 cores=20
per CPU. By default, 8 operation threads will be allocated to serve 90 =
or 91=20
partitions.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"non-partition-aware-operations">13.4.2. Non-Partition-Aware=20
Operations</H4>
<DIV class=3D"paragraph">
<P>To execute non-partition-aware operations, such as=20
<CODE>IExecutorService.executeOnMember(command,member)</CODE>, generic =
operation
 threads are used. When the Hazelcast instance is started, an array of =
operation=20
threads is created. The size of this array defaults to the number of =
cores=20
divided by 2, with a minimum of 2. It can be changed using the=20
<CODE>hazelcast.operation.generic.thread.count</CODE> =
property.</P></DIV>
<DIV class=3D"paragraph">
<P>A non-partition-aware operation thread will never execute an =
operation for a=20
specific partition. Only partition-aware operation threads execute=20
partition-aware operations.</P></DIV>
<DIV class=3D"paragraph">
<P>Unlike the partition-aware operation threads, all the generic =
operation
 threads share the same work queue: =
<CODE>genericWorkQueue</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>If a non-partition-aware operation needs to be executed, it is placed =
in that=20
work queue and any generic operation thread can execute it. The big =
advantage is=20
that you automatically have work balancing since any generic operation =
thread is=20
allowed to pick up work from this queue.</P></DIV>
<DIV class=3D"paragraph">
<P>The disadvantage is that this shared queue can be a point of =
contention. We=20
do not practically see this in production because performance is =
dominated by=20
I/O and the system is not executing very many non-partition-aware=20
operations.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"priority-operations">13.4.3. Priority Operations</H4>
<DIV class=3D"paragraph">
<P>In some cases, the system needs to execute operations with a higher =
priority,=20
such as an important system operation. To support priority operations, =
we do the=20
following:</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>For partition-aware operations, each partition thread has its own =
work=20
  queue. But apart from that, it also has a priority work queue. It will =
always=20
  check this priority queue before it processes work from its normal =
work=20
  queue.</P></LI>
  <LI>
  <P>For non-partition-aware operations, next to the=20
  <CODE>genericWorkQueue</CODE>, there also is a=20
  <CODE>genericPriorityWorkQueue</CODE>. When a priority operation needs =
to be=20
  executed, it is put in this <CODE>genericPriorityWorkQueue</CODE>. And =
just=20
  like the partition-aware operation threads, a generic operation thread =
will=20
  first check the <CODE>genericPriorityWorkQueue</CODE> for=20
work.</P></LI></OL></DIV>
<DIV class=3D"paragraph">
<P>Because a worker thread will block on the normal work queue (either =
partition=20
specific or generic), a priority operation may not picked up because it =
will not=20
be put on the queue where it is blocking. We always send a <CODE>kick =
the=20
worker</CODE> operation that does nothing but trigger the worker to wake =
up and=20
check the priority queue.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"operation-response-and-invocation-future">13.5. =
Operation-response and=20
Invocation-future</H3>
<DIV class=3D"paragraph">
<P>When an operation is invoked, a <CODE>Future</CODE> is returned. =
Let=E2=80=99s take=20
the example code below.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">GetOperation =
operation =3D <SPAN class=3D"keyword">new</SPAN> GetOperation( mapName, =
key )=0A=
<SPAN class=3D"predefined-type">Future</SPAN> future =3D =
operationService.invoke( operation )=0A=
future.get)</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>The calling side blocks for a reply. In this case, =
<CODE>GetOperation</CODE>=20
is set in the work queue for the partition of <CODE>key</CODE>, where it =

eventually is executed. On execution, a response is returned and placed =
on the
 work queue of the response thread. This thread will signal the=20
<CODE>future</CODE> and notifies the blocked thread that a response is=20
available. In the future, we will expose this <CODE>Future</CODE> to the =
outside=20
world, and we will provide the ability to register a completion listener =
so you=20
can do asynchronous calls.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"local-calls">13.6. Local Calls</H3>
<DIV class=3D"paragraph">
<P>When a local partition-aware call is done, an operation is made and =
handed=20
over to the work queue of the correct partition operation thread, and a =
future=20
is returned. When the calling thread calls <CODE>get</CODE> on that =
future, it=20
will acquire a lock and wait for the result to become available. When a =
response=20
is calculated, the future is looked up, and the waiting thread is=20
notified.</P></DIV>
<DIV class=3D"paragraph">
<P>In the future, this will be optimized to reduce the amount of =
expensive
 systems calls, such as <CODE>lock.acquire</CODE>/<CODE>notify</CODE> =
and the=20
expensive interaction with the operation queue. Probably, we will add =
support=20
for a caller-runs mode, so that an operation is directly executed on the =
calling=20
thread.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"queries">13.7. Queries</H3>
<DIV class=3D"paragraph">
<P>Unlike regular operations such as <CODE>IMap.get</CODE>, which run on =

operation threads, there is also a group of operations that do not run =
on=20
partition threads, but run on query threads: for example, the=20
Collection&lt;V&gt; <CODE>IMap.values(Predicate predicate)</CODE> =
method. This=20
means there is a separate thread pool that executes queries so queries =
can be=20
run in parallel with regular operations. You can influence the size of =
the query=20
thread pool by creating an <CODE>ExecutorConfig</CODE> (either =
programmatically=20
or through XML) for the <CODE>hz:query</CODE> executor.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"map-loader">13.8. Map Loader</H3>
<DIV class=3D"paragraph">
<P>There are two methods of the <CODE>MapLoader</CODE> interface that =
are=20
offloaded to different thread pools. One method is the=20
<CODE>MapLoader.loadAllKeys()</CODE>, which loads all keys from the =
database=20
that should be put in the <CODE>IMap</CODE>. Once this phase is =
completed, the=20
keys are assigned to their partition for each partition upon which the=20
<CODE>MapLoader.loadAll(keys)</CODE> is called. Therefore, loading of =
the actual=20
data can be done in parallel. The <CODE>MapLoader.loadAll</CODE> is =
executed on=20
an executor with the name <CODE>hz:map-loadAllKeys</CODE> and the=20
<CODE>MapLoader.loadAll(keys)</CODE> is executed on an executor with the =
name=20
<CODE>hz:map-load</CODE>. The second one is interesting because if you =
want to=20
load more data in parallel, this is the executor to tweak. To configure =
this=20
executor, you can create an executor with the name =
<CODE>hz:map-load</CODE> and=20
fine tune, for example, the thread pool size.</P></DIV>
<DIV class=3D"paragraph">
<P>Unlike regular partition operations, the =
<CODE>MapLoader.loadAll(keys)</CODE>=20
is not executed on a partition thread. This means that regular =
operations for
 that partition that access different data structures, instead of being =
blocked,=20
can still be executed.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"performance-tips">14. Performance Tips</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"sect2">
<H3 id=3D"cluster-design">14.1. Cluster Design</H3>
<DIV class=3D"paragraph">
<P>Hazelcast assumes that the cluster is homogeneous: all nodes within a =
cluster=20
have equal memory, equal storage capacity, equal network bandwidth, etc. =
It will=20
not look at the resources of a member to determine which partitions can =
be moved=20
in or out. In practice, this means that if your cluster is not =
homogeneous, then=20
a lite member with few resources is responsible for the same load as a=20
heavyweight member with many resources. If this is an issue, it is =
probably best=20
to set up multiple clusters and to use clients to let clusters =
communicate with=20
each other. There are plans to support heterogeneous members in the =
cluster, for=20
example, by making use of sub-clusters, but this isn=E2=80=99t concrete=20
yet.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"map-performance-tips">14.2. Map Performance Tips</H3>
<DIV class=3D"paragraph">
<P>Here are a few tips to improve map performance.</P></DIV>
<DIV class=3D"olist arabic">
<OL class=3D"arabic">
  <LI>
  <P>Try for zero or minimum backup count.</P></LI>
  <LI>
  <P>Use asynchronous backup instead of synchronous backup.</P></LI>
  <LI>
  <P>Use <CODE>IMap.set(k, v)</CODE> instead of <CODE>put(k,v)</CODE> so =
that=20
  the old value doesn=E2=80=99t have to be returned (and thus, no=20
  deserialization).</P></LI>
  <LI>
  <P>Avoid locks and transactions.</P></LI>
  <LI>
  <P>If you really need <CODE>MapStore</CODE>, then consider having=20
  write-behind; write-through will slow you =
down.</P></LI></OL></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"local-stats">14.3. Local stats</H3>
<DIV class=3D"paragraph">
<P>Some of the distributed objects, like the <CODE>IMap</CODE>,=20
<CODE>IQueue</CODE> and <CODE>ITopic</CODE>, have statistics that can be =

accessed as in the following example.</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE data-lang=3D"java">IMap map =3D =
hz.getMap();=0A=
LocalMapStats stats =3D map.getLocalMapStats()</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>You can use these statistics to access all kinds of metrics. For =
example, in=20
the case of <CODE>IMap</CODE>, you can see the number of map entries in =
that
 member, and the total number of <CODE>put</CODE> operations=20
executed.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"jmx-monitoring">14.4. JMX Monitoring</H3>
<DIV class=3D"paragraph">
<P>Add the following system properties to enable JMX agent.</P></DIV>
<DIV class=3D"paragraph">
<P><CODE>-Dcom.sun.management.jmxremote</CODE></P></DIV>
<DIV class=3D"paragraph">
<P><CODE>-Dcom.sun.management.jmxremote.port=3DportNo</CODE> (to specify =
jmx port)=20
(optional)</P></DIV>
<DIV class=3D"paragraph">
<P><CODE>-Dcom.sun.management.jmxremote.authenticate=3Dfalse</CODE> (to =
disable=20
jmx auth) (optional)</P></DIV>
<DIV class=3D"paragraph">
<P>Enable the Hazelcast property <CODE>hazelcast.jmx</CODE> using =
Hazelcast=20
configuration (API, XML, Spring) or by setting the system property=20
<CODE>-Dhazelcast.jmx=3Dtrue</CODE>.</P></DIV>
<DIV class=3D"paragraph">
<P>Use <CODE>jconsole</CODE>, <CODE>jvisualvm</CODE> (with the MBean =
plugin) or=20
another JMX compliant monitoring tool.</P></DIV>
<DIV class=3D"paragraph">
<P>JMX also exposes the local stats.</P></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"slow-operation-detector">14.5. Slow Operation Detector</H3>
<DIV class=3D"paragraph">
<P>The <CODE>SlowOperationDetector</CODE> monitors the operation threads =
and=20
collects information about all slow operations. An operation is =
considered as=20
slow when it takes more computation time than the configured threshold. =
Related=20
property is =
<CODE>hazelcast.slow.operation.detector.threshold.millis</CODE>=20
which has a default value of 10000. You can store the fully qualified =
classname=20
of the operation and its stacktrace as well as operation details, start =
time and=20
duration of each slow invocation. All collected data is available in the =

Management Center.</P></DIV>
<DIV class=3D"paragraph">
<P>This functionality can be turned on/off by using the system property=20
<CODE>hazelcast.slow.operation.detector.enabled</CODE>. By default it is =

enabled.</P></DIV>
<DIV class=3D"sect3">
<H4 id=3D"logging-of-slow-operations">14.5.1. Logging of Slow =
Operations</H4>
<DIV class=3D"paragraph">
<P>The detected slow operations are logged as warnings in the Hazelcast =
log=20
files:</P></DIV>
<DIV class=3D"listingblock">
<DIV class=3D"content">
<PRE class=3D"CodeRay highlight"><CODE>WARN 2015-05-07 11:05:30,890 =
SlowOperationDetector: [127.0.0.1]:5701=0A=
  Slow operation detected: com.hazelcast.map.impl.operation.PutOperation=0A=
  Hint: You can enable the logging of stacktraces with the following =
config=0A=
  property: hazelcast.slow.operation.detector.stacktrace.logging.enabled=0A=
WARN 2015-05-07 11:05:30,891 SlowOperationDetector: [127.0.0.1]:5701=0A=
  Slow operation detected: com.hazelcast.map.impl.operation.PutOperation=0A=
  (2 invocations)=0A=
WARN 2015-05-07 11:05:30,892 SlowOperationDetector: [127.0.0.1]:5701=0A=
  Slow operation detected: com.hazelcast.map.impl.operation.PutOperation=0A=
  (3 invocations)</CODE></PRE></DIV></DIV>
<DIV class=3D"paragraph">
<P>Stacktraces are always reported to the Management Center, but by =
default they
 are not printed to keep the log size small. If logging of stacktraces =
is=20
enabled (using=20
<CODE>hazelcast.slow.operation.detector.stacktrace.logging.enabled</CODE>=
=20
property), the full stacktrace is printed every 100 invocations. All =
other=20
invocations print a shortened version.</P></DIV></DIV>
<DIV class=3D"sect3">
<H4 id=3D"purging-of-slow-operation-logs">14.5.2. Purging of Slow =
Operation=20
Logs</H4>
<DIV class=3D"paragraph">
<P>Since a Hazelcast cluster can run for a very long time, Hazelcast =
purges the
 slow operation logs periodically to prevent an OOME. You can configure =
the=20
purge interval and the retention time for each invocation.</P></DIV>
<DIV class=3D"ulist">
<UL>
  <LI>
  =
<P><CODE>hazelcast.slow.operation.detector.log.purge.interval.seconds</CO=
DE>:=20
  Purge interval for slow operation logs. 300 seconds by =
default.</P></LI>
  <LI>
  =
<P><CODE>hazelcast.slow.operation.detector.log.retention.seconds</CODE>: =

  Defines the retention time of invocations in slow operation logs. If =
an=20
  invocation is older than this value, it will be purged from the log to =
prevent=20
  unlimited memory usage. When all invocations are purged from a log, =
the log=20
  itself will be deleted.</P></LI></UL></DIV>
<DIV class=3D"paragraph">
<P>The purging removes each invocation whose retention time is exceeded. =
When=20
all invocations are purged from a slow operation log, the log is=20
deleted.</P></DIV></DIV></DIV>
<DIV class=3D"sect2">
<H3 id=3D"other">14.6. Other</H3>
<DIV class=3D"paragraph">
<P>The <CODE>SystemLogServices</CODE> retains some logging information =
that you=20
can use with the Management Center. If you are not using it, you can =
disable it
 by setting <CODE>hazelcast.system.log.enabled</CODE> to=20
false.</P></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1">
<H2 id=3D"appendix">15. Appendix</H2>
<DIV class=3D"sectionbody">
<DIV class=3D"sect2">
<H3 id=3D"hazelcast-on-ec2-tutorial">15.1. Hazelcast on EC2 =
Tutorial</H3>
<DIV class=3D"paragraph">
<P>This is a step-by-step tutorial on how to configure a very basic =
Hazelcast
 cluster inside Amazon EC2. This tutorial expects that you have ssh =
available=20
(on Windows you can use Putty) and that you have an Amazon EC2 account. =
You also=20
need to have your Amazon access key and secret key. The access key =
should look=20
similar to this:</P></DIV>
<DIV class=3D"paragraph">
<P>BNELSKS9B8LDLE8NXKKA</P></DIV>
<DIV class=3D"paragraph">
<P>And your secret key should look similar to this:</P></DIV>
<DIV class=3D"paragraph">
<P>384c32KDLLDM44l3l3lddudueIEEL/Uldlx395uM</P></DIV>
<DIV class=3D"paragraph">
<P>First, we login to the management console. For example:</P></DIV>
<DIV class=3D"paragraph">
<P><A class=3D"bare" =
href=3D"https://console.aws.amazon.com/ec2/v2/home?region=3Deu-west-1">ht=
tps://console.aws.amazon.com/ec2/v2/home?region=3Deu-west-1</A>.</P></DIV=
>
<DIV class=3D"paragraph">
<P>There, we press the "Launch Instance" button.</P></DIV>
<DIV class=3D"imageblock">
<DIV class=3D"content"><IMG alt=3D"image" =
src=3D"http://hazelcast.org/book/images/ec2-0.png">=20
</DIV></DIV>
<DIV style=3D"page-break-after: always;"></DIV>
<DIV class=3D"paragraph">
<P>Select "Classic Wizard".</P></DIV>
<DIV class=3D"imageblock">
<DIV class=3D"content"><IMG alt=3D"image" =
src=3D"http://hazelcast.org/book/images/ec2-1.png">=20
</DIV></DIV>
<DIV style=3D"page-break-after: always;"></DIV>
<DIV class=3D"paragraph">
<P>Select "Ubuntu Server 12.10".</P></DIV>
<DIV class=3D"imageblock">
<DIV class=3D"content"><IMG alt=3D"image" =
src=3D"http://hazelcast.org/book/images/ec2-2.png">=20
</DIV></DIV>
<DIV style=3D"page-break-after: always;"></DIV>
<DIV class=3D"paragraph">
<P>We are going to create two ubuntu servers at once. Enter 2 for =
"Number of=20
instances" and press the "Continue" button.</P></DIV>
<DIV class=3D"imageblock">
<DIV class=3D"content"><IMG alt=3D"image" =
src=3D"http://hazelcast.org/book/images/ec2-3.png">=20
</DIV></DIV>
<DIV class=3D"imageblock">
<DIV class=3D"content"><IMG alt=3D"image" =
src=3D"http://hazelcast.org/book/images/ec2-4.png">=20
</DIV></DIV>
<DIV class=3D"imageblock">
<DIV class=3D"content"><IMG alt=3D"image" =
src=3D"http://hazelcast.org/book/images/ec2-5.png">=20
</DIV></DIV>
<DIV class=3D"imageblock">
<DIV class=3D"content"><IMG alt=3D"image" =
src=3D"http://hazelcast.org/book/images/ec2-6.png">=20
</DIV></DIV>
<DIV class=3D"imageblock">
<DIV class=3D"content"><IMG alt=3D"image" =
src=3D"http://hazelcast.org/book/images/ec2-7.png">=20
</DIV></DIV>
<DIV class=3D"imageblock">
<DIV class=3D"content"><IMG alt=3D"image" =
src=3D"http://hazelcast.org/book/images/ec2-8.png">=20
</DIV></DIV>
<DIV class=3D"imageblock">
<DIV class=3D"content"><IMG alt=3D"image" =
src=3D"http://hazelcast.org/book/images/ec2-9.png">=20
</DIV></DIV>
<DIV class=3D"imageblock">
<DIV class=3D"content"><IMG alt=3D"image" =
src=3D"http://hazelcast.org/book/images/ec2-10.png">=20
</DIV></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"footer">
<DIV id=3D"footer-text">Last updated 2015-07-23 16:55:47 EDT=20
</DIV></DIV></BODY></HTML>

------=_NextPart_001_002F_01D126BB.F5717B90
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www2.hazelcast.com/l/30822/2014-05-09/3ccj9

=EF=BB=BF<!DOCTYPE HTML>
<!DOCTYPE html PUBLIC "" ""><HTML><HEAD><META content=3D"IE=3D11.0000"=20
http-equiv=3D"X-UA-Compatible">
		=20
<META charset=3D"utf-8">		=20
<META name=3D"description" content=3D"">		 <TITLE></TITLE>     		 <LINK =
href=3D"http://hazelcast.com/wp-content/themes/bright-2014/css/forms.css"=
=20
rel=3D"stylesheet"> 			 <LINK =
href=3D"http://fonts.googleapis.com/css?family=3DOpen+Sans:400,300,600,70=
0,800"=20
rel=3D"stylesheet" type=3D"text/css"> 			 			=20
<SCRIPT =
src=3D"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.js"></SCR=
IPT>
 			=20
<SCRIPT =
src=3D"http://hazelcast.com/wp-content/themes/bright-2014/js/cookieHandle=
r.js"></SCRIPT>
            =20
<SCRIPT =
src=3D"http://hazelcast.com/wp-content/themes/bright-2014/js/communityID-=
capture.js"></SCRIPT>
	 <LINK href=3D"http://www2.hazelcast.com/css/form.css?ver=3D20121030" =
rel=3D"stylesheet"=20
type=3D"text/css">=20
<SCRIPT src=3D"http://form-cdn.pardot.com/js/piUtils.js?ver=3D20130530" =
type=3D"text/javascript"></SCRIPT>

<SCRIPT type=3D"text/javascript">=0A=
piAId =3D '31822';=0A=
piCId =3D '31213';=0A=
if(!window['pi']) { window['pi'] =3D {}; } pi =3D window['pi']; =
if(!pi['tracker']) { pi['tracker'] =3D {}; } pi.tracker.pi_form =3D true;=0A=
(function() {=0A=
	function async_load(){=0A=
		var s =3D document.createElement('script'); s.type =3D =
'text/javascript';=0A=
		s.src =3D ('https:' =3D=3D document.location.protocol ? 'https://pi' : =
'http://cdn') + '.pardot.com/pd.js';=0A=
		var c =3D document.getElementsByTagName('script')[0]; =
c.parentNode.insertBefore(s, c);=0A=
	}=0A=
	if(window.attachEvent) { window.attachEvent('onload', async_load); }=0A=
	else { window.addEventListener('load', async_load, false); }=0A=
})();=0A=
</SCRIPT>

<META name=3D"GENERATOR" content=3D"MSHTML 11.00.9600.17496"></HEAD>	=20
<BODY id=3D"online-book">
<FORM class=3D"form" id=3D"pardot-form" =
action=3D"http://www2.hazelcast.com/l/30822/2014-05-09/3ccj9"=20
method=3D"post" accept-charset=3D"UTF-8">
<STYLE type=3D"text/css">=0A=
form.form p label { float: none; text-align: left; line-height: 1em; =
width: auto; }=0A=
form.form p.submit { margin-left: 5px; }=0A=
form.form p.no-label { margin-left: 50px; }=0A=
form.form span.value { margin-left: 0px; }=0A=
form.form p span.description { margin-left: 0px; }=0A=
form.form p.required label, form.form span.required label { =
background-position: top left; background: none; padding-left: 0px; }=0A=
</STYLE>
										=20
<P class=3D"form-field  first_name pd-text required required-custom    =
"><LABEL=20
class=3D"field-label" for=3D"First_Namepi_First_Name">What's your first =
name?=20
*</LABEL><INPUT name=3D"First_Namepi_First_Name" class=3D"text" =
id=3D"First_Namepi_First_Name" onchange=3D"" type=3D"text" size=3D"30" =
maxlength=3D"40" value=3D"rui">
							 </P>
<DIV id=3D"error_for_First_Namepi_First_Name" style=3D"display: =
none;"></DIV>
<P class=3D"form-field  last_name pd-text required required-custom    =
"><LABEL=20
class=3D"field-label" for=3D"Last_Namepi_Last_Name">What's your last =
name?=20
*</LABEL><INPUT name=3D"Last_Namepi_Last_Name" class=3D"text" =
id=3D"Last_Namepi_Last_Name" onchange=3D"" type=3D"text" size=3D"30" =
maxlength=3D"80" value=3D"hu">
							 </P>
<DIV id=3D"error_for_Last_Namepi_Last_Name" style=3D"display: =
none;"></DIV>
<P class=3D"form-field  email pd-text required required-custom    =
"><LABEL class=3D"field-label"=20
for=3D"Emailpi_Email">What's your email address? *</LABEL><INPUT =
name=3D"Emailpi_Email" class=3D"text" id=3D"Emailpi_Email" =
onchange=3D"piAjax.auditEmailField(this, 30822, 35794, 1899458);" =
type=3D"text" size=3D"30" maxlength=3D"255" =
value=3D"hur1981830@gmail.com">
							 </P>
<DIV id=3D"error_for_Emailpi_Email" style=3D"display: none;"></DIV>
<P class=3D"form-field  Role pd-select required required-custom    =
"><LABEL class=3D"field-label"=20
for=3D"30822_35810pi_30822_35810">What's your role? *</LABEL><SELECT =
name=3D"30822_35810pi_30822_35810"=20
class=3D"select" id=3D"30822_35810pi_30822_35810" onchange=3D""><OPTION =
selected=3D"selected"=20
  value=3D""></OPTION> <OPTION value=3D"301144">Developer</OPTION> =
<OPTION value=3D"301146">Architect</OPTION>=20
  <OPTION value=3D"301148">Manager</OPTION> <OPTION=20
  value=3D"301150">Procurement</OPTION> </SELECT>							 </P>
<DIV id=3D"error_for_30822_35810pi_30822_35810" style=3D"display: =
none;"></DIV>
<P class=3D"form-field  Currently_Using_Hazelcast pd-select required =
required-custom    form-field-master"><LABEL=20
class=3D"field-label" for=3D"30822_65908pi_30822_65908">Are you =
currently using=20
Hazelcast? *</LABEL><SELECT name=3D"30822_65908pi_30822_65908" =
class=3D"select" id=3D"30822_65908pi_30822_65908"=20
onchange=3D""><OPTION selected=3D"selected" value=3D""></OPTION> <OPTION =
value=3D"565348">Hazelcast=20
  Enterprise - In Evaluation</OPTION> <OPTION value=3D"565350">Hazelcast =

  Enterprise - In Production</OPTION> <OPTION value=3D"565352">Hazelcast =
Open=20
  Source - In Evaluation</OPTION> <OPTION value=3D"565354">Hazelcast =
Open Source -=20
  In Production</OPTION> <OPTION value=3D"565356">No, and not planning =
to</OPTION>=20
</SELECT>							 </P>
<DIV id=3D"error_for_30822_65908pi_30822_65908" style=3D"display: =
none;"></DIV>
<P class=3D"form-field  CommunityPhoneHomeID pd-hidden  hidden   =
"><INPUT name=3D"30822_43432pi_30822_43432" =
id=3D"30822_43432pi_30822_43432" type=3D"hidden">
							 </P>
<DIV id=3D"error_for_30822_43432pi_30822_43432" style=3D"display: =
none;"></DIV>
<P class=3D"form-field  Deployment_Timeline pd-text required =
required-custom    form-field-slave dependentFieldSlave"><LABEL=20
class=3D"field-label" for=3D"30822_65916pi_30822_65916">If you decide to =
use=20
Hazelcast Open Source, how soon will you deploy into production?=20
*</LABEL><INPUT name=3D"30822_65916pi_30822_65916" class=3D"text" =
id=3D"30822_65916pi_30822_65916" onchange=3D"" type=3D"text" size=3D"30" =
maxlength=3D"65535">
							 </P>
<DIV id=3D"error_for_30822_65916pi_30822_65916" style=3D"display: =
none;"></DIV>
<P class=3D"form-field  hazelcast_experience pd-select required =
required-custom    "><LABEL=20
class=3D"field-label" =
for=3D"Hazelcast_Experiencepi_Hazelcast_Experience">What's=20
your experience level with Hazelcast? *</LABEL><SELECT =
name=3D"Hazelcast_Experiencepi_Hazelcast_Experience"=20
class=3D"select" id=3D"Hazelcast_Experiencepi_Hazelcast_Experience"=20
  onchange=3D""><OPTION selected=3D"selected" value=3D""></OPTION> =
<OPTION value=3D"301134">None</OPTION>=20
  <OPTION value=3D"301136">Beginner</OPTION> <OPTION=20
  value=3D"301138">Intermediate</OPTION> <OPTION =
value=3D"301140">Advanced</OPTION>=20
  <OPTION value=3D"301142">Ninja (we should hire you ;-) )</OPTION> =
</SELECT>			=09
			 </P>
<DIV id=3D"error_for_Hazelcast_Experiencepi_Hazelcast_Experience" =
style=3D"display: none;"></DIV>
<P style=3D"left: -9999px; top: -9999px; width: 190px; visibility: =
hidden; position: absolute;"><LABEL=20
for=3D"pi_extra_field">Comments</LABEL><INPUT name=3D"pi_extra_field" =
id=3D"pi_extra_field" type=3D"text">
	 </P><!-- forces IE5-8 to correctly submit UTF8 content  -->		 <INPUT =
name=3D"_utf8" type=3D"hidden" value=3D"=E2=98=83">
				=20
<P class=3D"submit"><INPUT accesskey=3D"s" type=3D"submit" =
value=3D"Access the Book">
		 </P>
<SCRIPT type=3D"text/javascript">=0A=
//<![CDATA[=0A=
=0A=
	var anchors =3D document.getElementsByTagName("a");=0A=
	for (var i=3D0; i<anchors.length; i++) {=0A=
		var anchor =3D anchors[i];=0A=
		if(anchor.getAttribute("href")&&!anchor.getAttribute("target")) {=0A=
			anchor.target =3D "_top";=0A=
		}=0A=
	}=0A=
		=0A=
//]]>=0A=
</SCRIPT>
=20
<INPUT name=3D"hiddenDependentFields" id=3D"hiddenDependentFields" =
type=3D"hidden"></FORM>
<SCRIPT type=3D"text/javascript">(function(){ =
pardot.$(document).ready(function(){ (function() {=0A=
	var $ =3D window.pardot.$;=0A=
	window.pardot.FormDependencyMap =3D =
[{"master_field_html_id":"Technical_Objectivepi_Technical_Objective","sla=
ve_field_html_id":"30822_35808pi_30822_35808","master_field_value":"Other=
"},{"master_field_html_id":"30822_65908pi_30822_65908","slave_field_html_=
id":"30822_65916pi_30822_65916","master_field_value":"Hazelcast Open =
Source - In Evaluation"}];=0A=
=0A=
	$('.form-field-master input, .form-field-master =
select').each(function(index, input) {=0A=
		$(input).on('change', window.piAjax.checkForDependentField);=0A=
		window.piAjax.checkForDependentField.call(input);=0A=
	});=0A=
})(); });})();</SCRIPT>
	 </BODY></HTML>

------=_NextPart_001_002F_01D126BB.F5717B90--

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3.org/TR/html4/loose.dtd">=0A=
<HTML><HEAD>=0A=
<META HTTP-EQUIV=3D"Content-Type" CONTENT=3D"text/html; =
charset=3Dgb2312"> =0A=
<TITLE>=B4=ED=CE=F3=A3=BA=C4=FA=CB=F9=C7=EB=C7=F3=B5=C4=CD=F8=D6=B7=A3=A8=
URL=A3=A9=CE=DE=B7=A8=BB=F1=C8=A1</TITLE>=0A=
<STYLE =
type=3D"text/css"><!--BODY{background-color:#ffffff;font-family:verdana,s=
ans-serif}PRE{font-family:sans-serif}--></STYLE>=0A=
</HEAD><BODY>=0A=
<H1>=B4=ED=CE=F3</H1>=0A=
<H2>=C4=FA=CB=F9=C7=EB=C7=F3=B5=C4=CD=F8=D6=B7=A3=A8URL=A3=A9=CE=DE=B7=A8=
=BB=F1=C8=A1</H2>=0A=
<HR noshade size=3D"1px">=0A=
<P>=0A=
=B5=B1=B3=A2=CA=D4=B6=C1=C8=A1=D2=D4=CF=C2=CD=F8=D6=B7=A3=A8URL=A3=A9=CA=B1=
=A3=BA=0A=
<A =
HREF=3D"http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js">=
http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js</A>=0A=
<P>=0A=
=B7=A2=C9=FA=C1=CB=CF=C2=C1=D0=B5=C4=B4=ED=CE=F3=A3=BA=0A=
<UL>=0A=
<LI>=0A=
<STRONG>=0A=
Connection Failed=0A=
<BR>=0A=
=C1=AC=BD=D3=CA=A7=B0=DC=0A=
</STRONG>=0A=
</UL>=0A=
=0A=
<P>=0A=
=CF=B5=CD=B3=B7=B5=BB=D8=D2=D4=CF=C2=C4=DA=C8=DD=A3=BA=0A=
<PRE><I>    (110) Connection timed out</I></PRE>=0A=
=0A=
<P>=0A=
The remote host or network may be down.  Please try the request again.=0A=
<BR>=0A=
=C4=FA=D2=AA=C1=AC=BD=E1=B5=C4=CD=F8=C2=E7=B7=FE=CE=F1=C6=F7=BB=F2=CD=F8=C2=
=E7=BF=C9=C4=DC=B7=A2=C9=FA=B9=CA=D5=CF=A1=A3=C7=EB=C9=D4=BA=F3=D4=D9=CA=D4=
=A1=A3=0A=
</P>=0A=
<P>=B1=BE=BB=BA=B4=E6=B7=FE=CE=F1=C6=F7=B9=DC=C0=ED=D4=B1=A3=BA<A =
HREF=3D"mailto:ProxyAdmin@zte.com.cn">ProxyAdmin@zte.com.cn</A>=0A=
=0A=
<BR clear=3D"all">=0A=
<HR noshade size=3D"1px">=0A=
<ADDRESS>=0A=
Generated Tue, 24 Nov 2015 05:31:32 GMT by ProxyNJ13 (squid/2.7.STABLE9)=0A=
</ADDRESS>=0A=
</BODY></HTML>=0A=

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://hazelcast.org/book/js/tocSearch_r2.js

// LIVE FILTER SCRIPT=0A=
	=0A=
$(document).ready(function(){=0A=
    $("#filter").keyup(function(){=0A=
 =0A=
        // Retrieve the input field text and reset the count to zero=0A=
        var filter =3D $(this).val(), count =3D 0;=0A=
 =0A=
        // Loop through the comment list=0A=
        $("#toc li").each(function(){=0A=
 =0A=
            // If the list item does not contain the text phrase fade it =
out=0A=
            if ($(this).text().search(new RegExp(filter, "i")) < 0) {=0A=
                $(this).fadeOut();=0A=
 =0A=
            // Show the list item if the phrase matches and increase the =
count by 1=0A=
            } else {=0A=
                $(this).show();=0A=
                count++;=0A=
            }=0A=
        });=0A=
 =0A=
        // Update the count=0A=
        var numberItems =3D count;=0A=
        $("#filter-count").text("Results: "+count);=0A=
    });=0A=
});=0A=

------=_NextPart_000_0000_01D126BB.F55CBB10
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://hazelcast.org/book/js/gate_r2.js

function createCookie(name,value,days) {=0A=
	if (days) {=0A=
		var date =3D new Date();=0A=
		date.setTime(date.getTime()+(days*24*60*60*1000));=0A=
		var expires =3D "; expires=3D"+date.toGMTString();=0A=
	}=0A=
	else var expires =3D "";=0A=
	document.cookie =3D name+"=3D"+value+expires+"; path=3D/";=0A=
}=0A=
=0A=
function readCookie(name) {=0A=
	var nameEQ =3D name + "=3D";=0A=
	var ca =3D document.cookie.split(';');=0A=
	for(var i=3D0;i < ca.length;i++) {=0A=
		var c =3D ca[i];=0A=
		while (c.charAt(0)=3D=3D' ') c =3D c.substring(1,c.length);=0A=
		if (c.indexOf(nameEQ) =3D=3D 0) return =
c.substring(nameEQ.length,c.length);=0A=
	}=0A=
	return null;=0A=
}=0A=
=0A=
function eraseCookie(name) {=0A=
	createCookie(name,"",-1);=0A=
}=0A=
=0A=
// If no accessBook cookie, show reg form=0A=
=0A=
$(document).ready(function(){  	=0A=
=0A=
	// createCookie('accessBook','true',365);	=0A=
    // eraseCookie('accessBook');=0A=
	=0A=
	var x =3D readCookie('accessBook')=0A=
	=0A=
	if (x) {=0A=
		 // Do nothing	=0A=
	} else {	=0A=
		setTimeout(function (){=0A=
			$('.gate').removeClass('hide');=0A=
         }, 8000);=0A=
	}=0A=
});  		=0A=

------=_NextPart_000_0000_01D126BB.F55CBB10--
